/*TASK RP.JDF*/
using Microsoft.AspNetCore.SignalR;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.Extensions.Configuration;
using Odyssey2Backend.Alert;
using Odyssey2Backend.DB_Odyssey2;
using Odyssey2Backend.Infrastructure;
using Odyssey2Backend.Job;
using Odyssey2Backend.JsonTypes;
using Odyssey2Backend.JsonTypes.Out;
using Odyssey2Backend.PrintShop;
using Odyssey2Backend.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Mime;
using System.Text.Json;
using System.Threading.Tasks;
using TowaStandard;
using Odyssey2Backend.Customer;

//                                                          //AUTHOR: Towa (AQG - Andrea Quiroz).
//                                                          //CO-AUTHOR: Towa (LGF - Liliana Gutierrez).
//                                                          //DATE: November 26, 2019. 

namespace Odyssey2Backend.XJDF
{
    //=================================================================================================================
    public class ProdtypProductType : EtElementTypeAbstract
    {
        //--------------------------------------------------------------------------------------------------------------
        //                                                  //CONSTANTS.

        public const String strGeneralTypeId = "Product General Attributes";

        //--------------------------------------------------------------------------------------------------------------
        //                                                  //INSTANCE VARIABLES

        private String strCategory_Z;
        public String strCategory { get { return this.strCategory_Z; } }

        //                                                  //This variable indicates the product key.
        private int? intWebsiteProductKey_Z;
        public int? intWebsiteProductKey { get { return this.intWebsiteProductKey_Z; } }

        //                                                  //boolIsPublic.
        private bool? boolnIsPublic_Z;
        public bool? boolnIsPublic { get { return this.boolnIsPublic_Z; } }

        //                                                  //Account
        //                                                  //boolIsPublic.
        private int? intnPkAccount_Z;
        public int? intnPkAccount { get { return this.intnPkAccount_Z; } }

        public IConfiguration configuration { get; set; }

        //                                                  //Contains inputs combinations generate in Options.
        public List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsCombinationsAndInputsSelected { get; set; }

        //                                                  //Dictionary to store inputs and outputs of a process.
        public Dictionary<int, List<Iofrmpiwjson2IOFromPIWJson2>> dicProcessIOs { get; set; }

        //                                                  //List to store resource thickness.
        public List<ResthkjsonResourceThicknessJson> darrresthkjsonResThickness { get; set; }

        //                                                  //List to store calculations.
        public List<CalCalculation> darrcalDependingJob { get; set; }

        //                                                  //List to store calculations.
        public List<PatransPaperTransformationEntityDB> darrpatransDependingJob { get; set; }

        //--------------------------------------------------------------------------------------------------------------
        //                                                  //DYNAMIC VARIABLES.

        //                                                  //Dictionary of calculations.
        private Dictionary<int, CalCalculation> diccal_Z;
        public Dictionary<int, CalCalculation> diccal
        {
            get
            {
                this.subGetCalculationsFromDB(out this.diccal_Z);
                return this.diccal_Z;
            }
        }

        //                                                  //List of calculations current.
        private List<CalCalculation> darrcalCurrent_Z;
        public List<CalCalculation> darrcalCurrent
        {
            get
            {
                this.subGetCurrentCalculationsFromDB(out this.darrcalCurrent_Z);
                return this.darrcalCurrent_Z;
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        //                                                  //SUPPORT METHODS FOR DYNAMIC VARIABLES. 

        //--------------------------------------------------------------------------------------------------------------
        private void subGetCalculationsFromDB(
            //                                              //Get all cal for this attribute from db.

            //                                              //Dic where the pro will be saved.
            out Dictionary<int, CalCalculation> diccal_O
            )
        {
            //                                              //Initialize the dicattr.
            diccal_O = new Dictionary<int, CalCalculation>();

            //                                              //Create the context.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get all calculations for this.
            IQueryable<CalentityCalculationEntityDB> setcalentity = context.Calculation.Where(
                caletentity => caletentity.intnPkProduct == this.intPk);

            //                                              //Get all the calculations.
            foreach (CalentityCalculationEntityDB calentity in setcalentity)
            {
                CalCalculation cal = new CalCalculation(calentity.intPk,
                    calentity.strUnit, calentity.numnQuantity, calentity.numnCost,
                    calentity.intnHours, calentity.intnMinutes, calentity.intnSeconds,
                    calentity.numnBlock, calentity.boolIsEnable, calentity.strValue, calentity.strAscendants,
                    calentity.strDescription, calentity.numnProfit,
                    calentity.intnPkProduct, calentity.intnPkProcess,
                    calentity.intnPkResource, calentity.strCalculationType, calentity.strByX, calentity.strStartDate,
                    calentity.strStartTime, calentity.strEndDate, calentity.strEndTime, calentity.numnNeeded,
                    calentity.numnPerUnits, calentity.numnMin, calentity.numnQuantityWaste, calentity.numnPercentWaste,
                    calentity.intnPkWorkflow, calentity.intnProcessInWorkflowId, calentity.intnPkElementElementType,
                    calentity.intnPkElementElement, calentity.intnPkQFromElementElementType,
                    calentity.intnPkQFromElementElement, calentity.intnPkQFromResource, calentity.intnPkAccount,
                    calentity.boolnFromThickness, calentity.boolnIsBlock, calentity.boolnByArea);
                diccal_O.Add(cal.intPk, cal);
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        private void subGetCurrentCalculationsFromDB(
            //                                              //Get all cal for this attribute from db.

            //                                              //Dic where the pro will be saved.
            out List<CalCalculation> darrcal_O
            )
        {
            //                                              //Initialize the dicattr.
            darrcal_O = new List<CalCalculation>();

            //                                              //Create the context.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get all calculations for this.
            List<CalentityCalculationEntityDB> darrcalentity = context.Calculation.Where(
                caletentity => caletentity.intnPkProduct == this.intPk && caletentity.strEndDate == null).ToList();

            //                                              //Get all the calculations.
            foreach (CalentityCalculationEntityDB calentity in darrcalentity)
            {
                CalCalculation cal = new CalCalculation(calentity.intPk, calentity.strUnit,
                    calentity.numnQuantity, calentity.numnCost, calentity.intnHours, calentity.intnMinutes,
                    calentity.intnSeconds, calentity.numnBlock, calentity.boolIsEnable, calentity.strValue,
                    calentity.strAscendants, calentity.strDescription, calentity.numnProfit,
                    calentity.intnPkProduct, calentity.intnPkProcess, calentity.intnPkResource,
                    calentity.strCalculationType, calentity.strByX, calentity.strStartDate,
                    calentity.strStartTime, calentity.strEndDate, calentity.strEndTime, calentity.numnNeeded,
                    calentity.numnPerUnits, calentity.numnMin, calentity.numnQuantityWaste, calentity.numnPercentWaste,
                    calentity.intnPkWorkflow, calentity.intnProcessInWorkflowId,
                    calentity.intnPkElementElementType, calentity.intnPkElementElement,
                    calentity.intnPkQFromElementElementType, calentity.intnPkQFromElementElement,
                    calentity.intnPkQFromResource, calentity.intnPkAccount, calentity.boolnFromThickness,
                    calentity.boolnIsBlock, calentity.boolnByArea);
                darrcal_O.Add(cal);
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static List<CalCalculation> subGetCurrentCalculationsFromDB(
            //                                              //Get all cal for this attribute from db.

            int intPkProduct_I
            )
        {
            //                                              //Initialize the dicattr.
            List<CalCalculation> darrcal = new List<CalCalculation>();

            //                                              //Create the context.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get all calculations for this.
            List<CalentityCalculationEntityDB> darrcalentity = context.Calculation.Where(
                caletentity => caletentity.intnPkProduct == intPkProduct_I && caletentity.strEndDate == null).ToList();

            //                                              //Get all the calculations.
            foreach (CalentityCalculationEntityDB calentity in darrcalentity)
            {
                CalCalculation cal = new CalCalculation(calentity.intPk,
                    calentity.strUnit, calentity.numnQuantity, calentity.numnCost,
                    calentity.intnHours, calentity.intnMinutes, calentity.intnSeconds,
                    calentity.numnBlock, calentity.boolIsEnable, calentity.strValue, calentity.strAscendants,
                    calentity.strDescription, calentity.numnProfit,
                    calentity.intnPkProduct, calentity.intnPkProcess,
                    calentity.intnPkResource, calentity.strCalculationType, calentity.strByX, calentity.strStartDate,
                    calentity.strStartTime, calentity.strEndDate, calentity.strEndTime, calentity.numnNeeded,
                    calentity.numnPerUnits, calentity.numnMin, calentity.numnQuantityWaste, calentity.numnPercentWaste,
                    calentity.intnPkWorkflow, calentity.intnProcessInWorkflowId,
                    calentity.intnPkElementElementType, calentity.intnPkElementElement,
                    calentity.intnPkQFromElementElementType, calentity.intnPkQFromElementElement,
                    calentity.intnPkQFromResource, calentity.intnPkAccount, calentity.boolnFromThickness,
                    calentity.boolnIsBlock, calentity.boolnByArea);
                darrcal.Add(cal);
            }
            return darrcal;
        }

        //--------------------------------------------------------------------------------------------------------------
        public List<CalCalculation> darrcalGetCalculationsCurrentByJobsStageAndWFFromDB(
            //                                              //Get all cal for Job stage and WF from db.
            //                                              //If job is null therefore return all current calculations 
            //                                              //    and filter by workflow.

            int? intnJobId_I,
            //                                              //PkWorkflow.
            int? intnPkWorkflow_I
            )
        {
            //                                              //Initialize the list of cal.
            List<CalCalculation> darrcalReturn = new List<CalCalculation>();

            //                                              //Create the context.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get all calculation of a product.
            Dictionary<int, CalCalculation> diccal = this.diccal;
            CalCalculation[] arrcal = new CalCalculation[diccal.Count];
            diccal.Values.CopyTo(arrcal, 0);

            //                                              //Get job's register.
            JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID == intnJobId_I &&
                job.intPkPrintshop == this.intPkPrintshop);

            List<CalCalculation> darrcalCurrent = new List<CalCalculation>();
            /*CASE*/
            if (
                //                                          //We dont receive jobId or job still pending.
                intnJobId_I == null ||
                jobentity == null
                )
            {
                darrcalCurrent = arrcal.Where(calCurrent => calCurrent.strEndDate == null).ToList();
            }
            else if (
               //                                          //Job is inprogress or completed.
               jobentity != null
               )
            {
                darrcalCurrent = arrcal.ToList();
            }
            /*END-CASE*/

            List<CalCalculation> darrcalJob = new List<CalCalculation>();

            if (
                intnJobId_I == null
                )
            {
                //                                          //Return all calculation.
                darrcalJob = darrcalCurrent;
            }
            else if (
                intnJobId_I != null
                )
            {
                if (
                    jobentity != null
                    )
                {
                    //                                      //Job is inprogress or completed.
                    //                                      //Get the calculations than apply.
                    darrcalJob = CalCalculation.GetJobCalculation(jobentity, darrcalCurrent);
                }
                else
                {
                    //                                      //Job is in Pending.
                    //                                      //Return all calculation.
                    darrcalJob = darrcalCurrent;
                }
            }

            if (
                intnPkWorkflow_I != null
                )
            {
                //                                          //Filter By Workflow.
                darrcalReturn = darrcalJob.Where(cal => cal.intnPkWorkflowBelongsTo == intnPkWorkflow_I).ToList();
            }
            else
            {
                //                                          //Not Filter By Workflow.
                darrcalReturn = darrcalJob.ToList();
            }

            return darrcalReturn;
        }

        //--------------------------------------------------------------------------------------------------------------
        //                                                  //CONSTRUCTORS.

        //--------------------------------------------------------------------------------------------------------------
        public ProdtypProductType(
            //                                              //Receive the values of the instance variables and the attr 
            //                                              //      and set it. The dictionary of attr can be empty. 

            //                                              //Primary key of the type.
            int intPk_I,
            //                                              //Specific type of process when it is a XJDF type, it 
            //                                              //      can be empty string when this is a printshop 
            //                                              //      type.
            String strXJDFTypeId_I,
            //                                              //Added by: XJDFX.X, MI4P or printshop id.
            String strAddedBy_I,
            //                                              //Modified by: XJDFX.X, MI4P or printshop id
            int? intPkPrintshop_I,
            //                                              //Custom type id.
            String strCustomTypeId_I,
            //                                              //Website product key.
            int? intWebsiteProductKey_I,
            //                                              //Website product key.
            String strCategory_I,
            //                                              //Classification Product.
            String strClassification_I,
            bool? boolnIsPublic_I,
            int? intnPkAccount_I
            )
            : base(intPk_I, strXJDFTypeId_I, strAddedBy_I, intPkPrintshop_I, strCustomTypeId_I,
                  EtElementTypeAbstract.strProduct, strClassification_I)
        {
            this.intWebsiteProductKey_Z = intWebsiteProductKey_I;
            this.strCategory_Z = strCategory_I;
            this.boolnIsPublic_Z = boolnIsPublic_I;
            this.intnPkAccount_Z = intnPkAccount_I;
        }

        //--------------------------------------------------------------------------------------------------------------
        //                                                  //TRANSFORMATION METHODS.

        //--------------------------------------------------------------------------------------------------------------
        public static void subSetProductType(
            //                                              //Set the XJDFTypeId as the product type.

            //                                              //Type wich will be set.
            int intPk_I,
            //                                              //Type.
            String strType_I,
            String strPrintshopId_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Make the connection.
            Odyssey2Context context = new Odyssey2Context();

            PsentityPrintshopEntityDB psentity = context.Printshop.FirstOrDefault(ps =>
                ps.strPrintshopId == strPrintshopId_I);

            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Printshop not found.";
            if (
                psentity != null
                )
            {
                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(etentity =>
                    etentity.intPk == intPk_I && etentity.strResOrPro == EtElementTypeAbstract.strProduct &&
                    etentity.intPrintshopPk == psentity.intPk);

                intStatus_IO = 403;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Product not found.";
                if (
                    etentity != null
                    )
                {
                    etentity.strXJDFTypeId = strType_I;
                    context.SaveChanges();

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "success.";
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subAddInitialDataToDb()
        {
            //                                              //Create a connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Verify if the general type already exists.
            EtentityElementTypeEntityDB etentityGeneral = context.ElementType.FirstOrDefault(et =>
                et.strCustomTypeId == ProdtypProductType.strGeneralTypeId &&
                et.strResOrPro == EtElementTypeAbstract.strProduct &&
                et.intPrintshopPk == null);
            if (
                //                                          //General type does not exist.
                etentityGeneral == null
                )
            {
                //                                          //Add general type.
                int intTypePk;
                ProdtypProductType.subAddGeneralTypeToDB(context, out intTypePk);

                //                                          //Get the attributes.
                PathX syspathA = DirectoryX.GetCurrent().GetPath().AddName("Z_BatchFiles");
                PathX syspath = syspathA.AddName("Product.csv");
                FileInfo sysfile = FileX.New(syspath);
                String[] arrAttributesData = sysfile.ReadAll();

                //                                          //Add the attributes to db.
                ProdtypProductType.subAddGeneralAttributesToDB(arrAttributesData, context, intTypePk);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddGeneralTypeToDB(
            Odyssey2Context context_I,
            out int intTypePK_O
            )
        {
            //                                          //Create the type.
            EtentityElementTypeEntityDB etentityGeneral = new EtentityElementTypeEntityDB
            {
                strXJDFTypeId = ProdtypProductType.strGeneralTypeId,
                strAddedBy = EtElementTypeAbstract.strXJDFVersion,
                intPrintshopPk = null,
                strCustomTypeId = EtElementTypeAbstract.strXJDFPrefix +
                    ProdtypProductType.strGeneralTypeId,
                strResOrPro = EtElementTypeAbstract.strProduct
            };

            context_I.ElementType.Add(etentityGeneral);
            context_I.SaveChanges();

            intTypePK_O = etentityGeneral.intPk;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subAddGeneralAttributesToDB(
            String[] arrstrAttributesData_I,
            Odyssey2Context context_I,
            int intTypePk_I
            )
        {
            foreach (String strAttributeData in arrstrAttributesData_I)
            {
                //                                          //Get XJDF name.
                String strData = strAttributeData;

                //                                      //Get the name.
                String strXJDFName = strData.Substring(0, strData.IndexOf(EtElementTypeAbstract.strSeparator));
                strData = strData.Substring(strData.IndexOf(EtElementTypeAbstract.strSeparator) + 1);

                //                                      //Get the cardinality.
                String strCardinality = strData.Substring(0, strData.IndexOf(EtElementTypeAbstract.strSeparator));
                strData = strData.Substring(strData.IndexOf(EtElementTypeAbstract.strSeparator) + 1);

                //                                      //Get the datatype.
                String strDatatype = strData.Substring(0, strData.IndexOf(EtElementTypeAbstract.strSeparator));
                strData = strData.Substring(strData.IndexOf(EtElementTypeAbstract.strSeparator) + 1);

                //                                      //Get the description.
                String strDescription = strData;

                //                                      //Add the attr to db.
                AttrentityAttributeEntityDB attrentity = new AttrentityAttributeEntityDB
                {
                    strXJDFName = strXJDFName,
                    strCustomName = EtElementTypeAbstract.strXJDFPrefix + strXJDFName,
                    strCardinality = strCardinality,
                    strDatatype = strDatatype,
                    strDescription = strDescription,
                    strScope = EtElementTypeAbstract.strXJDFVersion
                };

                context_I.Attribute.Add(attrentity);
                context_I.SaveChanges();

                int intAttributePk = attrentity.intPk;

                //                                      //Create the relation between the type and the attr.
                AttretentityAttributeElementTypeEntityDB attretentity = new AttretentityAttributeElementTypeEntityDB
                {
                    intPkAttribute = intAttributePk,
                    intPkElementType = intTypePk_I
                };

                context_I.AttributeElementType.Add(attretentity);
                context_I.SaveChanges();
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subAddCalculation(
            //                                              //Create a new calculation associated with the product from
            //                                              //      a default calculation.

            //                                              //Calculation to be cloned.
            int intCalculationPk_I,
            //                                              //Product to associate.
            int intProductPk_I,
            //                                              //Status:
            //                                              //      0 - Calculation added successfully.
            //                                              //      1 - Calculation not found.
            //                                              //      2 - Product not found.
            out int intStatus_O
            )
        {
            intStatus_O = 2;
            //                                              //Make the connection.
            Odyssey2Context context = new Odyssey2Context();
            EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(etentity =>
                etentity.intPk == intProductPk_I);
            if (
                (etentity != null) &&
                (etentity.strResOrPro == EtElementTypeAbstract.strProduct)
                )
            {
                CalentityCalculationEntityDB calentityDefault = context.Calculation.FirstOrDefault(calentity =>
                    calentity.intPk == intCalculationPk_I);
                intStatus_O = 1;
                if (
                    calentityDefault != null
                    )
                {
                    CalentityCalculationEntityDB calentityNew = calentityDefault;
                    calentityNew.intnPkProduct = intProductPk_I;
                    context.Calculation.Add(calentityNew);
                    context.SaveChanges();

                    intStatus_O = 0;
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subLinkProcessInWorkflow(
            //                                              //To add a link in a workflow, case of link.
            //                                              //      1. Link IO output whit IO input.
            //                                              //      2. Link IO output whit Node.
            //                                              //      3. Link Node with IO Input.
            //                                              //      4. Link Node with Node.

            //                                              //Ps printshop.
            PsPrintShop ps_I,
            bool boolSuperAdmin_I,
            //                                              //Process in workflow on the output-res side.
            int? intnPkProcessInWorkflowO_I,
            //                                              //Type or template of the output-res side.
            int? intnPkEleetOrEleeleO_I,
            //                                              //True if is type, false if it is template.
            bool? boolnIsEleetO_I,
            //                                              //Nodo of the output.
            int? intnPkNodeO_I,
            //                                              //Process in workflow on the input-res side.
            int? intnPkProcessInWorkflowI_I,
            //                                              //Type or template of the input-res side.
            int? intnPkEleetOrEleeleI_I,
            //                                              //True if is type, false if it is template.    
            bool? boolnIsEleetI_I,
            //                                              //Nodo of the output.
            int? intnPkNodeI_I,
            GpcondjsonGroupConditionJson gpcondition_I,
            ref int intStatus_IO,
            ref String strDevMessage_IO,
            ref String strUserMessage_IO,
            out WfandlinkjsonWorkflowPkAndLinkJson wfandlinkjson_O
            )
        {
            wfandlinkjson_O = null;

            //                                              //List of PIWs following the piw with the pk
            //                                              //      intnPkProcessInWorkflowI_I including this
            //                                              //      or PIWs following the node with the pk
            //                                              //      intnPkNodeI_I
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInWorkflow =
                new List<PiwentityProcessInWorkflowEntityDB>();

            //                                              //List of Nodes following the piw with the pk
            //                                              //      intnPkProcessInWorkflowI_I
            //                                              //      or Nodes following the node with the pk
            //                                              //      intnPkNodeI_I including this
            List<IoentityInputsAndOutputsEntityDB> darrioentityNodes = new List<IoentityInputsAndOutputsEntityDB>();

            Odyssey2Context context = new Odyssey2Context();

            /*CASE*/
            if (
                //                                          //IO output.
                (intnPkProcessInWorkflowO_I != null &&
                intnPkEleetOrEleeleO_I != null &&
                boolnIsEleetO_I != null) &&
                //                                          //IO input.
                (intnPkProcessInWorkflowI_I != null &&
                intnPkEleetOrEleeleI_I != null &&
                boolnIsEleetI_I != null)
                )
            {
                //                                          //Get the output piw from DB.
                PiwentityProcessInWorkflowEntityDB piwentityO = context.ProcessInWorkflow.FirstOrDefault(
                    piwentity => piwentity.intPk == intnPkProcessInWorkflowO_I);
                //                                          //Get the input piw from DB.
                PiwentityProcessInWorkflowEntityDB piwentityI = context.ProcessInWorkflow.FirstOrDefault(
                    piwentity => piwentity.intPk == intnPkProcessInWorkflowI_I);

                WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                    wf.intPk == piwentityI.intPkWorkflow);

                bool boolContinue = (
                    //                                      //The workflow is generic and
                    //                                      //Only can be modified for the 
                    //                                      //  admin(super user.)
                    wfentity.boolnGeneric == true &&
                    boolSuperAdmin_I
                    )
                    ||
                    (
                    (wfentity.boolnGeneric == null || wfentity.boolnGeneric == false)
                    ) ? true : false;

                //                                          //Get PIWs and Nodes following to the piwentityI
                ProdtypProductType.subGetFollowingPIWsAndNodesRecursive(piwentityI, null,
                    ref darrpiwentityProcessInWorkflow, ref darrioentityNodes);

                intStatus_IO = 425;
                strUserMessage_IO = "A conflict is created with this link.";
                strDevMessage_IO = "";
                if (
                    !darrpiwentityProcessInWorkflow.Exists(piw => piw.intPk == piwentityO.intPk) &&
                    boolContinue
                    )
                {
                    //                                      //There is final product at the link output
                    bool boolThereIsAFinalProductOrAPostProcessOutput;
                    //                                      //There is final product at the link input
                    bool boolThereIsAFinalProductInput;
                    //                                      //There is final product on both sides of the link
                    bool boolThereIsAfinalProductOnBothSidesOfTheLink;

                    ProdtypProductType.subThereIsAfinalProductOnBothSidesOfTheLink(piwentityO, null,
                        darrpiwentityProcessInWorkflow, out boolThereIsAFinalProductOrAPostProcessOutput,
                        out boolThereIsAFinalProductInput, out boolThereIsAfinalProductOnBothSidesOfTheLink);

                    intStatus_IO = 426;
                    strUserMessage_IO = "There is final product on both sides of the link.";
                    strDevMessage_IO = "";
                    if (
                        //                                  //There is only final product on one side of the link
                        !boolThereIsAfinalProductOnBothSidesOfTheLink
                        )
                    {
                        bool boolContinueOrIsInputPostProcessWhitFinalProd = true;

                        if (
                            //                              //It is a postprocess.
                            piwentityI.boolIsPostProcess
                            )
                        {
                            IoentityInputsAndOutputsEntityDB ioentityInputWithFinalProductSetted;
                            IoentityInputsAndOutputsEntityDB ioentityOutputWithFinalProductSetted;

                            //                              //Get the IOs(Input or output) with final product setted.
                            ProdtypProductType.subGetIOsWithFinalProductSettedAtInputOrOuputFromPIW(piwentityI, context,
                                out ioentityInputWithFinalProductSetted, out ioentityOutputWithFinalProductSetted);

                            boolContinueOrIsInputPostProcessWhitFinalProd = ioentityInputWithFinalProductSetted != null ?
                                true : false;
                        }

                        //                                  //Find io final product from piwentityOutput.
                        IoentityInputsAndOutputsEntityDB ioentityFinalProduct = context.InputsAndOutputs.
                            FirstOrDefault(io => io.intPkWorkflow == piwentityO.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentityO.intProcessInWorkflowId &&
                            io.boolnIsFinalProduct == true);

                        intStatus_IO = 427;
                        strUserMessage_IO = "You need a final product in the first process to link it with a " +
                            "postprocess or you need that the next process has some input as final product setted.";
                        strDevMessage_IO = "";
                        if (
                            //                              //There is not a normal process without final product as 
                            //                              //      input and post process as output.
                            !((!piwentityO.boolIsPostProcess && (ioentityFinalProduct == null)) &&
                            piwentityI.boolIsPostProcess)
                            ||
                            //                              //There is processNormal linked with postprocess with 
                            //                              //    finaProduct.
                            (!piwentityO.boolIsPostProcess &&
                            boolContinueOrIsInputPostProcessWhitFinalProd)
                            )
                        {
                            ProdtypProductType.subLinkIOOutputWithIOInput(ps_I, (int)intnPkProcessInWorkflowO_I,
                                (int)intnPkEleetOrEleeleO_I, (bool)boolnIsEleetO_I,
                                (int)intnPkProcessInWorkflowI_I, (int)intnPkEleetOrEleeleI_I,
                                (bool)boolnIsEleetI_I, ref intStatus_IO, ref strDevMessage_IO, ref strUserMessage_IO,
                                out wfandlinkjson_O);

                            if (
                                //                          //If the link was successful
                                intStatus_IO == 200
                                )
                            {
                                if (
                                    //                      //There is final product at the link output
                                    boolThereIsAFinalProductOrAPostProcessOutput
                                    )
                                {
                                    ProdtypProductType.subUpdateProcessToPostProcess
                                        (darrpiwentityProcessInWorkflow);
                                }
                            }
                        }
                    }
                }
            }
            else if (
                //                                          //IO output.
                (intnPkProcessInWorkflowO_I != null &&
                intnPkEleetOrEleeleO_I != null &&
                boolnIsEleetO_I != null) &&
                //                                          //Node input.
                intnPkNodeI_I != null
                )
            {
                //                                          //Get the output piw from DB.
                PiwentityProcessInWorkflowEntityDB piwentityO = context.ProcessInWorkflow.FirstOrDefault(
                    piwentity => piwentity.intPk == intnPkProcessInWorkflowO_I);

                //                                          //Get the input node from DB.
                IoentityInputsAndOutputsEntityDB ioentityNodeI = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPk == intnPkNodeI_I);

                WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                    wf.intPk == piwentityO.intPkWorkflow);

                bool boolContinue = (
                    //                                      //The workflow is generic and
                    //                                      //Only can be modified for the 
                    //                                      //  admin(super user.)
                    wfentity.boolnGeneric == true &&
                    boolSuperAdmin_I
                    )
                    ||
                    (
                    (wfentity.boolnGeneric == null || wfentity.boolnGeneric == false)
                    ) ? true : false;

                //                                          //Get PIWs and Nodes following to the ioentityNodeI
                ProdtypProductType.subGetFollowingPIWsAndNodesRecursive(null, ioentityNodeI,
                    ref darrpiwentityProcessInWorkflow, ref darrioentityNodes);

                intStatus_IO = 425;
                strUserMessage_IO = "A conflict is created with this link.";
                strDevMessage_IO = "";
                if (
                    !darrpiwentityProcessInWorkflow.Exists(piw => piw.intPk == piwentityO.intPk) &&
                    boolContinue
                    )
                {
                    //                                      //There is final product at the link output
                    bool boolThereIsAFinalProductOrAPostProcessOutput;
                    //                                      //There is final product at the link input
                    bool boolThereIsAFinalProductInput;
                    //                                      //There is final product on both sides of the link
                    bool boolThereIsAfinalProductOnBothSidesOfTheLink;

                    ProdtypProductType.subThereIsAfinalProductOnBothSidesOfTheLink(piwentityO, null,
                        darrpiwentityProcessInWorkflow, out boolThereIsAFinalProductOrAPostProcessOutput,
                        out boolThereIsAFinalProductInput, out boolThereIsAfinalProductOnBothSidesOfTheLink);

                    intStatus_IO = 426;
                    strUserMessage_IO = "There is final product on both sides of the link.";
                    strDevMessage_IO = "";
                    if (
                        //                                  //There is only final product on one side of the link
                        !boolThereIsAfinalProductOnBothSidesOfTheLink
                        )
                    {
                        //                                  //Find io final product from piwentityOutput.
                        IoentityInputsAndOutputsEntityDB ioentityFinalProduct = context.InputsAndOutputs.
                            FirstOrDefault(io => io.intPkWorkflow == piwentityO.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentityO.intProcessInWorkflowId &&
                            io.boolnIsFinalProduct == true);

                        intStatus_IO = 427;
                        strUserMessage_IO = "You need a final product in the first process to link it with a " +
                            "node linked with postprocess.";
                        strDevMessage_IO = "";
                        if (
                            //                              //There is not a normal process without final product as 
                            //                              //input and a node linked to post processes as output.
                            !((!piwentityO.boolIsPostProcess && (ioentityFinalProduct == null)) &&
                            (darrpiwentityProcessInWorkflow.Count > 0) &&
                            darrpiwentityProcessInWorkflow[0].boolIsPostProcess)
                            )
                        {
                            //                              //Not Applied -> subAddWorkflowIfItIsNecessary.
                            //                              //In this case It is not necessary create history
                            //                              //  because a job can not started with a node at the 
                            //                              //  final.
                            ProdtypProductType.subLinkIOOutputWithNode(ps_I, (int)intnPkProcessInWorkflowO_I,
                                (int)intnPkEleetOrEleeleO_I, (bool)boolnIsEleetO_I, intnPkNodeI_I, gpcondition_I,
                                ref intStatus_IO, ref strDevMessage_IO, ref strUserMessage_IO, out wfandlinkjson_O);

                            if (
                                //                          //If the link was successful
                                intStatus_IO == 200
                                )
                            {
                                if (
                                    //                      //There is final product at the link output
                                    boolThereIsAFinalProductOrAPostProcessOutput
                                    )
                                {
                                    ProdtypProductType.subUpdateProcessToPostProcess
                                        (darrpiwentityProcessInWorkflow);
                                }
                            }
                        }
                    }
                }
            }
            else if (
                //                                          //Node output.
                intnPkNodeO_I != null &&
                //                                          //IO input.
                (intnPkProcessInWorkflowI_I != null &&
                intnPkEleetOrEleeleI_I != null &&
                boolnIsEleetI_I != null
                )
                )
            {
                intStatus_IO = 422;
                strUserMessage_IO = "The condition to apply is invalid. Please verify it.";
                strDevMessage_IO = "";
                if (
                    Tools.boolValidConditionList(gpcondition_I)
                    )
                {
                    //                                  //Get the output node from DB.
                    IoentityInputsAndOutputsEntityDB ioentityNodeO = context.InputsAndOutputs.FirstOrDefault(
                    io => io.intPk == intnPkNodeO_I);

                    //                                  //Get the input piw from DB.
                    PiwentityProcessInWorkflowEntityDB piwentityI = context.ProcessInWorkflow.FirstOrDefault(
                        piwentity => piwentity.intPk == intnPkProcessInWorkflowI_I);

                    WfentityWorkflowEntityDB wfentityWF = context.Workflow.FirstOrDefault(wf =>
                            wf.intPk == piwentityI.intPkWorkflow);

                    bool boolContinue = (
                        //                                      //The workflow is generic and
                        //                                      //Only can be modified for the 
                        //                                      //  admin(super user.)
                        wfentityWF.boolnGeneric == true &&
                        boolSuperAdmin_I
                        )
                        ||
                        (
                        (wfentityWF.boolnGeneric == null || wfentityWF.boolnGeneric == false)
                        ) ? true : false;

                    //                                  //Get PIWs and Nodes following to the piwentityI
                    ProdtypProductType.subGetFollowingPIWsAndNodesRecursive(piwentityI, null,
                        ref darrpiwentityProcessInWorkflow, ref darrioentityNodes);

                    intStatus_IO = 425;
                    strUserMessage_IO = "A conflict is created with this link.";
                    strDevMessage_IO = "";
                    if (
                        !darrioentityNodes.Exists(node => node.intPk == ioentityNodeO.intPk) &&
                            boolContinue
                        )
                    {
                        //                              //There is final product at the link output
                        bool boolThereIsAFinalProductOrAPostProcessOutput;
                        //                              //There is final product at the link input
                        bool boolThereIsAFinalProductInput;
                        //                              //There is final product on both sides of the link
                        bool boolThereIsAfinalProductOnBothSidesOfTheLink;

                        ProdtypProductType.subThereIsAfinalProductOnBothSidesOfTheLink(null, ioentityNodeO,
                            darrpiwentityProcessInWorkflow, out boolThereIsAFinalProductOrAPostProcessOutput,
                            out boolThereIsAFinalProductInput,
                            out boolThereIsAfinalProductOnBothSidesOfTheLink);

                        intStatus_IO = 426;
                        strUserMessage_IO = "There is final product on both sides of the link.";
                        strDevMessage_IO = "";
                        if (
                            //                          //There is only final product on one side of the link
                            !boolThereIsAfinalProductOnBothSidesOfTheLink
                            )
                        {
                            WfentityWorkflowEntityDB wfentityBase = context.Workflow.
                                FirstOrDefault(wf =>
                                wf.intPk == piwentityI.intPkWorkflow);

                            //                      //Get the node.
                            String strLinkNode = context.InputsAndOutputs.FirstOrDefault(io =>
                                io.intnPkElementElement == null && io.intnPkElementElementType == null &&
                                io.intnProcessInWorkflowId == null &&
                                io.intPkWorkflow == piwentityI.intPkWorkflow &&
                                io.intPk == intnPkNodeO_I).strLink;

                            //                      //Duplicate workflow if necessary.
                            WfentityWorkflowEntityDB wfentityNew;
                            ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I,
                                wfentityBase, context, out wfentityNew);

                            //                      //Get the node at the new workflow.
                            intnPkNodeO_I = context.InputsAndOutputs.FirstOrDefault(io =>
                                io.intnPkElementElement == null && io.intnPkElementElementType == null &&
                                io.intnProcessInWorkflowId == null && io.intPkWorkflow == wfentityNew.intPk &&
                                io.strLink == strLinkNode).intPk;

                            //                      //Get the new PIW for the new workflow.
                            intnPkProcessInWorkflowI_I = context.ProcessInWorkflow.FirstOrDefault(
                                    piwentity => piwentity.intPkWorkflow == wfentityNew.intPk &&
                                    piwentity.intProcessInWorkflowId == piwentityI.intProcessInWorkflowId).intPk;

                            ProdtypProductType.subLinkNodeWithIOInput(ps_I, intnPkNodeO_I,
                            (int)intnPkProcessInWorkflowI_I, (int)intnPkEleetOrEleeleI_I,
                            (bool)boolnIsEleetI_I, gpcondition_I, ref intStatus_IO,
                            ref strDevMessage_IO, ref strUserMessage_IO, out wfandlinkjson_O);

                            if (
                                //                  //If the link was successful
                                intStatus_IO == 200
                                )
                            {
                                if (
                                    //              //There is final product at the link output
                                    boolThereIsAFinalProductOrAPostProcessOutput
                                    )
                                {
                                    ProdtypProductType.subUpdateProcessToPostProcess(
                                        darrpiwentityProcessInWorkflow);
                                }
                            }
                        }
                    }
                }
            }
            else if (
                //                                          //Node Output.
                intnPkNodeO_I != null &&
                //                                          //Node Input.
                intnPkNodeI_I != null
                )
            {
                intStatus_IO = 423;
                strUserMessage_IO = "The condition to apply is invalid. Please verify it.";
                strDevMessage_IO = "";
                if (
                    Tools.boolValidConditionList(gpcondition_I)
                    )
                {
                    //                                  //Get the output node from DB.
                    IoentityInputsAndOutputsEntityDB ioentityNodeO = context.InputsAndOutputs.FirstOrDefault(
                        io => io.intPk == intnPkNodeO_I);

                    //                                  //Get the input piw from DB.
                    IoentityInputsAndOutputsEntityDB ioentityNodeI = context.InputsAndOutputs.FirstOrDefault(
                        io => io.intPk == intnPkNodeI_I);

                    WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                            wf.intPk == ioentityNodeI.intPkWorkflow);

                    bool boolContinue = (
                        //                                      //The workflow is generic and
                        //                                      //Only can be modified for the 
                        //                                      //  admin(super user.)
                        wfentity.boolnGeneric == true &&
                        boolSuperAdmin_I
                        )
                        ||
                        (
                        (wfentity.boolnGeneric == null || wfentity.boolnGeneric == false)
                        ) ? true : false;

                    //                                  //Get PIWs and Nodes following to the ioentityNodeI
                    ProdtypProductType.subGetFollowingPIWsAndNodesRecursive(null, ioentityNodeI,
                        ref darrpiwentityProcessInWorkflow, ref darrioentityNodes);

                    intStatus_IO = 425;
                    strUserMessage_IO = "A conflict is created with this link.";
                    strDevMessage_IO = "";
                    if (
                        !darrioentityNodes.Exists(node => node.intPk == ioentityNodeO.intPk) &&
                            boolContinue
                        )
                    {
                        //                              //There is final product at the link output
                        bool boolThereIsAFinalProductOrAPostProcessOutput;
                        //                              //There is final product at the link input
                        bool boolThereIsAFinalProductOrAPostProcessInput;
                        //                              //There is final product on both sides of the link
                        bool boolThereIsAfinalProductOnBothSidesOfTheLink;

                        ProdtypProductType.subThereIsAfinalProductOnBothSidesOfTheLink(null, ioentityNodeO,
                            darrpiwentityProcessInWorkflow, out boolThereIsAFinalProductOrAPostProcessOutput,
                            out boolThereIsAFinalProductOrAPostProcessInput,
                            out boolThereIsAfinalProductOnBothSidesOfTheLink);

                        intStatus_IO = 426;
                        strUserMessage_IO = "There is final product on both sides of the link.";
                        strDevMessage_IO = "";
                        if (
                            //                          //There is only final product on one side of the link
                            !boolThereIsAfinalProductOnBothSidesOfTheLink
                            )
                        {
                            //                              //Not Applied -> subAddWorkflowIfItIsNecessary.
                            //                              //In this case It is not necessary create history
                            //                              //  because a job can not started with a node at the 
                            //                              //  final.

                            ProdtypProductType.subLinkNodeWithNode(ps_I, (int)intnPkNodeO_I,
                           (int)intnPkNodeI_I, gpcondition_I, ref intStatus_IO,
                           ref strDevMessage_IO, ref strUserMessage_IO, out wfandlinkjson_O);

                            if (
                                //                  //If the link was successful
                                intStatus_IO == 200
                                )
                            {
                                if (
                                    //              //There is final product at the link output
                                    boolThereIsAFinalProductOrAPostProcessOutput
                                    )
                                {
                                    ProdtypProductType.subUpdateProcessToPostProcess(
                                        darrpiwentityProcessInWorkflow);
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                intStatus_IO = 428;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Data invalid.";
            }
            /*END-CASE*/
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetIOsWithFinalProductSettedAtInputOrOuputFromPIW(
            //                                              //Get IO input and IO output with final
            //                                              //    product setted from PIW.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            Odyssey2Context context_I,
            out IoentityInputsAndOutputsEntityDB ioentityInputWithFinalProduct_O,
            out IoentityInputsAndOutputsEntityDB ioentityOutputWithFinalProduct_O
            )
        {
            //                                      //Init the Var Output.
            ioentityInputWithFinalProduct_O = null;
            ioentityOutputWithFinalProduct_O = null;

            List<IoentityInputsAndOutputsEntityDB> darrioentityInputWithFinalProduct = context_I.InputsAndOutputs.Where(io =>
                io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                io.boolnIsFinalProduct == true && io.intPkWorkflow == piwentity_I.intPkWorkflow).ToList();

            foreach (IoentityInputsAndOutputsEntityDB ioentityIOInOut in darrioentityInputWithFinalProduct)
            {
                if (
                    ProdtypProductType.boolIsInputIO(ioentityIOInOut.intnPkElementElementType,
                    ioentityIOInOut.intnPkElementElement, context_I)
                    )
                {
                    //                                              //Get IOInput with final product
                    //                                              //    setted.
                    ioentityInputWithFinalProduct_O = ioentityIOInOut;
                }
                else
                {
                    ioentityOutputWithFinalProduct_O = ioentityIOInOut;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetInfoNodeRecursive(
            //                                              //Get info from a node.

            //                                              //IONode.
            IoentityInputsAndOutputsEntityDB ioentityFrom_I,
            //                                              //boolIsNodePost.
            out bool boolIsPost_O,
            //                                              //There are more process before.
            out bool boolHasSomeProcessBefore_O,
            //                                              //Get Next or before.
            ref List<IoentityInputsAndOutputsEntityDB> darrioentityFromWFProduct_M
            )
        {
            boolIsPost_O = false;
            boolHasSomeProcessBefore_O = false;

            //                                              //Establish the connection To DB.
            Odyssey2Context context = new Odyssey2Context();

            if (
                //                                          //IOFrom is Node.
                ioentityFrom_I.intnPkElementElementType == null &&
                ioentityFrom_I.intnPkElementElement == null
                )
            {
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsBeforeProcessesResult;

                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsBeforeNodesResult;

                ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(ioentityFrom_I,
                    false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                    out darriobefornextjsonIOsBeforeNodesResult, context);

                if (
                    //                                      //There are PIW before.
                    darriobefornextjsonIOsBeforeProcessesResult.Count > 0
                    )
                {
                    boolHasSomeProcessBefore_O = true;

                    IoentityInputsAndOutputsEntityDB ioentityProcessBefore =
                        darriobefornextjsonIOsBeforeProcessesResult[0].ioentityBeforeOrNext;

                    //                                          //GET PIW before.
                    PiwentityProcessInWorkflowEntityDB piwentityBefore = context.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPkWorkflow == ioentityProcessBefore.intPkWorkflow &&
                        piw.intProcessInWorkflowId == ioentityProcessBefore.intnProcessInWorkflowId);

                    boolIsPost_O = piwentityBefore.boolIsPostProcess;

                    if (
                        //                                      //If the piwentityBefore it is processNormal.
                        !boolIsPost_O
                        )
                    {
                        if (
                            //                                      //Veryfy if already there is a resouce setted 
                            //                                      //    how the productFinal in this PIW.
                            ProdtypProductType.boolIsResourceProductFinalSetted(piwentityBefore,
                                darrioentityFromWFProduct_M)
                            )
                        {
                            boolIsPost_O = true;
                        }
                    }
                }
                else
                {
                    int intI = 0;
                    /*WHILE-DO*/
                    while (
                        //                                  //take each Node before.
                        intI < darriobefornextjsonIOsBeforeNodesResult.Count &&
                        //                                  //continue while node is Normal.
                        !boolIsPost_O
                        )
                    {
                        bool boolIsPostInfo;
                        bool boolHasSomeProcess;
                        ProdtypProductType.subGetInfoNodeRecursive(
                        darriobefornextjsonIOsBeforeNodesResult[intI].ioentityBeforeOrNext, out boolIsPostInfo,
                        out boolHasSomeProcess, ref darrioentityFromWFProduct_M);

                        //                                  //Continue Find before.
                        boolIsPost_O = boolIsPostInfo;
                        boolHasSomeProcessBefore_O = boolHasSomeProcess;

                        intI = intI + 1;
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subGetFollowingPIWsAndNodesRecursive(
            //                                              //Return a list of PIWs following to the piwentity_I
            //                                              //      including this
            //                                              //      or PIWs following to the ioentityNode_I
            //                                              //Return a list of Nodes following to the piwentity_I
            //                                              //      or Nodes following to the ioentityNode_I
            //                                              //      including this

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            ref List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInWorkflow_M,
            ref List<IoentityInputsAndOutputsEntityDB> darrioentityNodes_M
            )
        {
            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            if (
                //                                          //It is a process.

                piwentity_I != null &&
                ioentityNode_I == null
                )
            {
                //                                          //Add the piwentity_I to the list de PIWs
                darrpiwentityProcessInWorkflow_M.Add(piwentity_I);

                //                                          //Find process's ios with link.
                List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(
                    io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.strLink != null).ToList();

                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                {
                    //                                      //To easy code.
                    EleetentityElementElementTypeEntityDB eleetentity = null;
                    EleeleentityElementElementEntityDB eleeleentity = null;
                    if (
                        ioentity.intnPkElementElementType != null
                        )
                    {
                        //                                  //Find element element type.
                        eleetentity = context.ElementElementType.FirstOrDefault(
                            eleet => eleet.intPk == ioentity.intnPkElementElementType);
                    }
                    else
                    {
                        //                                  //Find element element.
                        eleeleentity = context.ElementElement.FirstOrDefault(
                            eleele => eleele.intPk == ioentity.intnPkElementElement);
                    }

                    if (
                        //                                  //It is an output (with link).
                        (eleetentity != null &&
                        eleetentity.boolUsage == false) ||
                        (eleeleentity != null &&
                        eleeleentity.boolUsage == false)
                        )
                    {
                        //                                  //Find otherside of the link.
                        List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide = context.InputsAndOutputs.Where(
                            io => io.intPkWorkflow == ioentity.intPkWorkflow &&
                            io.strLink == ioentity.strLink && io.intPk != ioentity.intPk).ToList();

                        int intI = 0;
                        bool boolThereIsANode = false;
                        IoentityInputsAndOutputsEntityDB ioentityNodeFound = null;
                        /*WHILE-DO*/
                        while (
                            intI < darrioentityOtherSide.Count &&
                            !boolThereIsANode
                            )
                        {
                            if (
                                //                          //Connection to node.
                                ProdtypProductType.boolIsTheIOANode(darrioentityOtherSide[intI])
                                )
                            {
                                boolThereIsANode = true;
                                ioentityNodeFound = darrioentityOtherSide[intI];
                            }

                            intI = intI + 1;
                        }

                        if (
                            //                              //There is a node among processes.
                            boolThereIsANode
                            )
                        {
                            if (
                                //                          //Avoid going through the same node.
                                !darrioentityNodes_M.Contains(ioentityNodeFound)
                                )
                            {
                                subGetFollowingPIWsAndNodesRecursive(null, ioentityNodeFound,
                                    ref darrpiwentityProcessInWorkflow_M, ref darrioentityNodes_M);
                            }
                        }
                        else
                        {
                            //                              //Process to process.
                            //                              //Find the other process with link.
                            PiwentityProcessInWorkflowEntityDB piwentityOtherSide =
                                context.ProcessInWorkflow.FirstOrDefault(piw =>
                                piw.intPkWorkflow == darrioentityOtherSide[0].intPkWorkflow &&
                                piw.intProcessInWorkflowId == darrioentityOtherSide[0].intnProcessInWorkflowId);

                            if (
                                piwentityOtherSide != null
                                )
                            {
                                //                          //Do the same with the opposite process.
                                subGetFollowingPIWsAndNodesRecursive(piwentityOtherSide, null,
                                    ref darrpiwentityProcessInWorkflow_M, ref darrioentityNodes_M);
                            }
                        }
                    }
                }
            }
            else if (
                //                                          //It is a node.
                piwentity_I == null &&
                ioentityNode_I != null
                )
            {
                //                                          //Add the ioentityNode_I to the list of nodes
                darrioentityNodes_M.Add(ioentityNode_I);

                //                                          //Not used
                List<Nodejson2NodeJson2> darrnodejson2NodeToNotUsed = new List<Nodejson2NodeJson2>();

                //                                          //Elements connected to node.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwFollowingProcessesConnToNode;
                List<IoentityInputsAndOutputsEntityDB> darrioentityFollowingNodesConnToNode;
                //                                          //Get Piws and nodes following connected to node.
                ProdtypProductType.subElementsConnectedToNode(ioentityNode_I,
                    out darrpiwFollowingProcessesConnToNode, out darrioentityFollowingNodesConnToNode,
                    ref darrnodejson2NodeToNotUsed);

                foreach (PiwentityProcessInWorkflowEntityDB piwentityProcess in darrpiwFollowingProcessesConnToNode)
                {
                    //                                      //Do the same with the opposite process.
                    ProdtypProductType.subGetFollowingPIWsAndNodesRecursive(piwentityProcess, null,
                        ref darrpiwentityProcessInWorkflow_M, ref darrioentityNodes_M);
                }

                foreach (IoentityInputsAndOutputsEntityDB ioentityOutputNode in darrioentityFollowingNodesConnToNode)
                {
                    //                                      //Do the same with the opposite node.
                    ProdtypProductType.subGetFollowingPIWsAndNodesRecursive(null, ioentityOutputNode,
                        ref darrpiwentityProcessInWorkflow_M, ref darrioentityNodes_M);
                }
            }
            else
            {
                //                                          //Do nothing.
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subThereIsAfinalProductOnBothSidesOfTheLink(

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInWorkflow_I,
            out bool boolThereIsAFinalProductOrAPostProcessOutput_O,
            out bool boolThereIsAFinalProductInput_O,
            out bool boolThereIsAfinalProductOnBothSidesOfTheLink_O
            )
        {
            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            boolThereIsAFinalProductOrAPostProcessOutput_O = false;
            boolThereIsAFinalProductInput_O = false;
            boolThereIsAfinalProductOnBothSidesOfTheLink_O = false;

            if (
                //                                          //It is a process
                piwentity_I != null && ioentityNode_I == null
                )
            {
                //                                          //Check if piwentity_I has a final product or is a 
                //                                          //      postproccess
                boolThereIsAFinalProductOrAPostProcessOutput_O =
                    ProdtypProductType.boolThereIsAFinalProductInPreviousProcessesRecursive(piwentity_I, null, context);

                int intI = 0;
                /*WHILE-DO*/
                while (
                    intI < darrpiwentityProcessInWorkflow_I.Count && !boolThereIsAFinalProductInput_O
                    )
                {
                    //                                      //Check if there is a final product
                    //                                      //      in the list(darrpiwentityProcessInWorkflow_I)
                    boolThereIsAFinalProductInput_O = ProdtypProductType.boolThereIsAFinalProduct(
                        darrpiwentityProcessInWorkflow_I[intI], context);

                    intI = intI + 1;
                }

                if (
                    //                                      //There is a final product on both sides of the link 
                    boolThereIsAFinalProductOrAPostProcessOutput_O && boolThereIsAFinalProductInput_O
                    )
                {
                    boolThereIsAfinalProductOnBothSidesOfTheLink_O = true;
                }
            }
            else if (
                //                                          //It is a node
                ioentityNode_I != null && piwentity_I == null
                )
            {
                //                                          //Check if there is a final product or a post proccess in
                //                                          //      the previous processes to the node (ioentityNode_I)
                boolThereIsAFinalProductOrAPostProcessOutput_O =
                    ProdtypProductType.boolThereIsAFinalProductInPreviousProcessesRecursive(null, ioentityNode_I,
                    context);

                int intI = 0;
                /*WHILE-DO*/
                while (
                    intI < darrpiwentityProcessInWorkflow_I.Count && !boolThereIsAFinalProductInput_O
                    )
                {
                    //                                      //Check if there is a final product
                    //                                      //      in the list(darrpiwentityProcessInWorkflow_I)
                    boolThereIsAFinalProductInput_O = ProdtypProductType.boolThereIsAFinalProduct(
                        darrpiwentityProcessInWorkflow_I[intI], context);

                    intI = intI + 1;
                }

                if (
                    //                                      //There is a final product on both sides of the link 
                    boolThereIsAFinalProductOrAPostProcessOutput_O && boolThereIsAFinalProductInput_O
                    )
                {
                    boolThereIsAfinalProductOnBothSidesOfTheLink_O = true;
                }
            }
            else
            {
                //                                          //Do nothing
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool boolThereIsAFinalProductInPreviousProcessesRecursive(
            //                                              //Return true if the piwentity_I has a final product or is
            //                                              //      a post-process
            //                                              //Or return true if one of the previous processes to the node 
            //                                              //      (ioentityNode_I) has a final product or is a 
            //                                              //      post-process

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            Odyssey2Context context_M
            )
        {
            bool boolThereIsAFinalProductOrAPostProcess = false;

            if (
                //                                          //It is a process
                piwentity_I != null && ioentityNode_I == null
                )
            {
                if (
                    //                                      //piwentity_I is a post process
                    piwentity_I.boolIsPostProcess
                    )
                {
                    boolThereIsAFinalProductOrAPostProcess = true;
                }

                if (
                    //                                      //If piwentity_I is not a post process, check if it has a
                    //                                      //      final product
                    !boolThereIsAFinalProductOrAPostProcess
                    )
                {
                    boolThereIsAFinalProductOrAPostProcess = ProdtypProductType.boolThereIsAFinalProduct(piwentity_I,
                        context_M);
                }
            }
            else if (
                //                                          //It is a node
                ioentityNode_I != null && piwentity_I == null
                )
            {
                List<PiwentityProcessInWorkflowEntityDB> darrpiwPrevProcessesConnToNode;
                //                                          //Get previous processes connected to node(ioentityNode_I).
                ProdtypProductType.subGetPreviousProcessesConnectedToNode(ioentityNode_I, context_M,
                    out darrpiwPrevProcessesConnToNode);

                int intI = 0;
                /*WHILE-DO*/
                while (
                    intI < darrpiwPrevProcessesConnToNode.Count && !boolThereIsAFinalProductOrAPostProcess
                    )
                {
                    //                                      //Check if there is a final product or a post process
                    boolThereIsAFinalProductOrAPostProcess =
                        ProdtypProductType.boolThereIsAFinalProductInPreviousProcessesRecursive(
                        darrpiwPrevProcessesConnToNode[intI], null, context_M);

                    intI = intI + 1;
                }

                if (
                    !boolThereIsAFinalProductOrAPostProcess
                    )
                {
                    List<IoentityInputsAndOutputsEntityDB> darrioentityPrevNodesConnToNode;
                    //                                      //Get previous nodes connected to node(ioentityNode_I).
                    ProdtypProductType.subGetPreviousNodesConnectedToNode(ioentityNode_I, context_M,
                        out darrioentityPrevNodesConnToNode);

                    int intJ = 0;
                    /*WHILE-DO*/
                    while (
                        intJ < darrioentityPrevNodesConnToNode.Count && !boolThereIsAFinalProductOrAPostProcess
                        )
                    {
                        //                                  //Check if there is a final product or a post process
                        boolThereIsAFinalProductOrAPostProcess = ProdtypProductType.
                            boolThereIsAFinalProductInPreviousProcessesRecursive(null, darrioentityPrevNodesConnToNode[intJ],
                            context_M);

                        intJ = intJ + 1;
                    }
                }
            }
            else
            {
                //                                          //Do nothing
            }

            return boolThereIsAFinalProductOrAPostProcess;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static bool boolThereIsAFinalProductWithLink(
            //                                              //Return true if the piwentity_I has a final product with
            //                                              //      link.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            Odyssey2Context context_M
            )
        {
            bool boolThereIsAFinalProductWithLink = false;

            //                                              //Find final product IO with link from this piw.
            IoentityInputsAndOutputsEntityDB ioentityFinalProductWithLink = context_M.InputsAndOutputs.FirstOrDefault(
                io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                io.strLink != null &&
                io.boolnIsFinalProduct == true);

            if (
                ioentityFinalProductWithLink != null
                )
            {
                bool boolIsOutput = ProdtypProductType.boolIsOutput(
                    ioentityFinalProductWithLink.intnPkElementElementType,
                    ioentityFinalProductWithLink.intnPkElementElement);

                if (
                    boolIsOutput
                    )
                {
                    boolThereIsAFinalProductWithLink = true;
                }
            }

            return boolThereIsAFinalProductWithLink;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static bool boolThereIsAFinalProduct(
            //                                              //Return true if the piwentity_I has a final product 

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            Odyssey2Context context_M
            )
        {
            bool boolThereIsAFinalProduct = false;

            //                                              //Find ios from this piw(piwentity_I) .
            List<IoentityInputsAndOutputsEntityDB> darrioentityIOsOfThisPIW = context_M.InputsAndOutputs.Where(
                io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId).ToList();

            int intI = 0;
            /*WHILE-DO*/
            while (
                intI < darrioentityIOsOfThisPIW.Count && !boolThereIsAFinalProduct
                )
            {
                //                                          //To easy code.
                EleetentityElementElementTypeEntityDB eleetentity = null;
                EleeleentityElementElementEntityDB eleeleentity = null;
                if (
                    darrioentityIOsOfThisPIW[intI].intnPkElementElementType != null
                    )
                {
                    //                                      //Find element element type.
                    eleetentity = context_M.ElementElementType.FirstOrDefault(
                        eleet => eleet.intPk == darrioentityIOsOfThisPIW[intI].intnPkElementElementType);
                }
                else
                {
                    //                                      //Find element element.
                    eleeleentity = context_M.ElementElement.FirstOrDefault(
                        eleele => eleele.intPk == darrioentityIOsOfThisPIW[intI].intnPkElementElement);
                }

                if (
                    //                                      //It is an Io Output.
                    (eleetentity != null &&
                    !eleetentity.boolUsage) ||
                    (eleeleentity != null &&
                    !eleeleentity.boolUsage)
                    )
                {
                    if (
                        //                                  //The IO is a final product
                        darrioentityIOsOfThisPIW[intI].boolnIsFinalProduct == true
                        )
                    {
                        boolThereIsAFinalProduct = true;
                    }
                }

                intI = intI + 1;
            }

            return boolThereIsAFinalProduct;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subGetPreviousProcessesConnectedToNode(

            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            Odyssey2Context context_M,
            //                                              //Node to processes.
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesConnectedToNode_O
            )
        {
            //                                              //List that will hold processes.       
            darrpiwentityProcessesConnectedToNode_O = new List<PiwentityProcessInWorkflowEntityDB>();

            //                                              //Find ios sharing the same link.
            List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide = context_M.InputsAndOutputs.Where(io =>
                io.intPkWorkflow == ioentityNode_I.intPkWorkflow &&
                io.strLink == ioentityNode_I.strLink &&
                io.intPk != ioentityNode_I.intPk).ToList();


            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityOtherSide)
            {
                //                                          //To easy code.
                EleetentityElementElementTypeEntityDB eleetentity = null;
                EleeleentityElementElementEntityDB eleeleentity = null;
                if (
                    ioentity.intnPkElementElementType != null
                    )
                {
                    //                                      //Find element element type.
                    eleetentity = context_M.ElementElementType.FirstOrDefault(
                        eleet => eleet.intPk == ioentity.intnPkElementElementType);
                }
                else
                {
                    //                                      //Find element element.
                    eleeleentity = context_M.ElementElement.FirstOrDefault(
                        eleele => eleele.intPk == ioentity.intnPkElementElement);
                }

                if (
                    //                                      //It is an Io Output.
                    (eleetentity != null &&
                    !eleetentity.boolUsage) ||
                    (eleeleentity != null &&
                    !eleeleentity.boolUsage)
                    )
                {
                    //                                      //Find process.
                    PiwentityProcessInWorkflowEntityDB piwentity = context_M.ProcessInWorkflow.FirstOrDefault(
                        piw => piw.intPkWorkflow == ioentity.intPkWorkflow &&
                        piw.intProcessInWorkflowId == ioentity.intnProcessInWorkflowId);

                    if (
                        piwentity != null
                        )
                    {
                        darrpiwentityProcessesConnectedToNode_O.Add(piwentity);
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subGetPreviousNodesConnectedToNode(

            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            Odyssey2Context context_M,
            //                                              //Node to nodes.
            out List<IoentityInputsAndOutputsEntityDB> darrioentityNodesToNode_O
            )
        {
            //                                              //List that will hold nodes connected to node.
            darrioentityNodesToNode_O = new List<IoentityInputsAndOutputsEntityDB>();

            //                                              //Find links among nodes.
            List<LinknodLinkNodeEntityDB> darrlinknodNodesConnectedToNode = context_M.LinkNode.Where(link =>
                link.intPkNodeI == ioentityNode_I.intPk).ToList();

            foreach (LinknodLinkNodeEntityDB ioentityNode in darrlinknodNodesConnectedToNode)
            {
                //                                          //Find output node.
                IoentityInputsAndOutputsEntityDB ioentityNodeOutput = context_M.InputsAndOutputs.FirstOrDefault(
                    io => io.intPk == ioentityNode.intPkNodeO);

                if (
                    ioentityNodeOutput != null
                    )
                {
                    darrioentityNodesToNode_O.Add(ioentityNodeOutput);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subUpdateProcessToPostProcess(
            //                                              //Update the following processes to the link in 
            //                                              //      post processes if on the side where the link starts
            //                                              //      there is a final product

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInWorkflow_I
            )
        {
            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                          //Update Process To PostProcess
            foreach (PiwentityProcessInWorkflowEntityDB piwentityToUpdate in darrpiwentityProcessInWorkflow_I)
            {
                piwentityToUpdate.boolIsPostProcess = true;

                context.ProcessInWorkflow.Update(piwentityToUpdate);
            }
            context.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subLinkIOOutputWithNode(
            //                                              //Ps printshop.
            PsPrintShop ps_I,
            //                                              //Process in workflow on the output-res side.
            int intnPkProcessInWorkflowO_I,
            //                                              //Type or template of the output-res side.
            int intnPkEleetOrEleeleO_I,
            //                                              //True if is type, false if it is template.
            bool boolnIsEleetO_I,
            //                                              //Nodo of the output.
            int? intnPkNodeI_I,
            GpcondjsonGroupConditionJson gpcondition_I,
            ref int intStatus_IO,
            ref String strDevMessage_IO,
            ref String strUserMessage_IO,
            out WfandlinkjsonWorkflowPkAndLinkJson wfandlinkjson_O
            //
            )
        {
            wfandlinkjson_O = null;
            Odyssey2Context context = new Odyssey2Context();

            intStatus_IO = 4016;
            strDevMessage_IO = "Processes is not found.";
            strUserMessage_IO = "Something is wrong.";

            //                                              //Get the piw from DB.
            PiwentityProcessInWorkflowEntityDB piwentityO = context.ProcessInWorkflow.FirstOrDefault(piwentity =>
                piwentity.intPk == intnPkProcessInWorkflowO_I);

            if (
                piwentityO != null
                )
            {
                //                                          //Get the entitys for output side.
                EleetentityElementElementTypeEntityDB eleetentityFromDBO;
                EleeleentityElementElementEntityDB eleeleentityFromDBO;

                ProdtypProductType.GeteleetOreleele(context, intnPkEleetOrEleeleO_I, boolnIsEleetO_I,
                    out eleetentityFromDBO, out eleeleentityFromDBO);

                strDevMessage_IO = "No output for the process.";
                strUserMessage_IO = "No output found.";
                intStatus_IO = 417;
                if (
                    (eleetentityFromDBO != null) ||
                    (eleeleentityFromDBO != null)
                    )
                {
                    intStatus_IO = 418;
                    strDevMessage_IO = "Node is not found.";
                    strUserMessage_IO = "Something is wrong.";

                    //                                      //Get Io entity Node.
                    IoentityInputsAndOutputsEntityDB ioentityNode = context.InputsAndOutputs.FirstOrDefault(io =>
                        io.intPk == intnPkNodeI_I && io.intnPkElementElementType == null &&
                        io.intnPkElementElement == null);

                    if (
                        ioentityNode != null
                        )
                    {
                        //                                  //Get the pk of the product and the product.
                        WfentityWorkflowEntityDB wfentityO = context.Workflow.FirstOrDefault(
                            wf => wf.intPk == piwentityO.intPkWorkflow);

                        //                                  //Get the pk of the product and the product.
                        WfentityWorkflowEntityDB wfentityNode = context.Workflow.FirstOrDefault(
                            wf => wf.intPk == ioentityNode.intPkWorkflow);

                        strDevMessage_IO = "Node or process do not belong to current printshop.";
                        strUserMessage_IO = "Something is wrong.";
                        intStatus_IO = 419;

                        if (
                            (wfentityO.intPk == wfentityNode.intPk) &&
                            wfentityO.intPkPrintshop == ps_I.intPk
                            )
                        {
                            IoentityInputsAndOutputsEntityDB ioentityAssociateToNode;
                            if (
                                ProdtypProductType.boolIsLinkeable(eleetentityFromDBO, eleeleentityFromDBO,
                                boolnIsEleetO_I, ioentityNode, out ioentityAssociateToNode, ref intStatus_IO,
                                ref strDevMessage_IO, ref strUserMessage_IO) &&
                                //                          //Verify if one IO from this PIW is alredy connected
                                //                          //      to node.
                                !ProdtypProductType.boolIsProcessAlreadyConnectedToANode(piwentityO,
                                ioentityNode, ref intStatus_IO, ref strDevMessage_IO, ref strUserMessage_IO) &&
                                //                          //Only link if there's not final product with link.
                                !ProdtypProductType.boolThereIsAFinalProductWithLink(piwentityO, context)
                                )
                            {
                                //                          //Get the IO for the output side.
                                IoentityInputsAndOutputsEntityDB ioentityO;
                                ProdtypProductType.GetIO(context, piwentityO.intPkWorkflow,
                                    piwentityO.intProcessInWorkflowId, intnPkEleetOrEleeleO_I,
                                    boolnIsEleetO_I, out ioentityO);

                                strDevMessage_IO = "Output link found.";
                                strUserMessage_IO = "Something is wrong.";
                                intStatus_IO = 420;
                                if (
                                    (ioentityO == null) ||
                                    ((ioentityO != null) && (ioentityO.strLink == null))
                                    )
                                {
                                    bool boolSameResource = true;
                                    if (

                                        //                  //It is a Node initial.
                                        ProdtypProductType.boolIsNodeInitial(ioentityNode, context)
                                        )
                                    {
                                        //                  //Verify if the next processes has the same resource.
                                        //                                              //IOsProcess Next.
                                        List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                                            darriobefornextjsonIOsBeforeProcessesResult;

                                        //                                              //IOsNodes Next.
                                        List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                                            darriobefornextjsonIOsBeforeNodesResult;

                                        //                                              //Get IOs Next from ioentityNode_I.
                                        ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
                                            ioentityNode, true, true,
                                            out darriobefornextjsonIOsBeforeProcessesResult,
                                            out darriobefornextjsonIOsBeforeNodesResult, context);

                                        int? intnPkResource = null;

                                        int intI = 0;
                                        while (
                                            //              //Take each IOProcess Next.
                                            intI < darriobefornextjsonIOsBeforeProcessesResult.Count &&
                                            boolSameResource
                                            )
                                        {
                                            IoentityInputsAndOutputsEntityDB ioentityNext =
                                                darriobefornextjsonIOsBeforeProcessesResult[intI].ioentityBeforeOrNext;

                                            if (
                                                //          //Take the firstResource.
                                                intI == 0
                                            )
                                            {
                                                intnPkResource = ioentityNext.intnPkResource;
                                            }

                                            boolSameResource = intnPkResource == ioentityNext.intnPkResource ? true :
                                               false;

                                            intI = intI + 1;
                                        }
                                    }

                                    strDevMessage_IO = "Unable to link, different resources on the other side.";
                                    strUserMessage_IO = "Unable to link, different resources on the other side.";
                                    intStatus_IO = 421;
                                    if (
                                        boolSameResource
                                        )
                                    {
                                        ProdtypProductType.linkIOsNode(ioentityAssociateToNode, ioentityNode,
                                            piwentityO.intProcessInWorkflowId, intnPkEleetOrEleeleO_I, boolnIsEleetO_I,
                                            gpcondition_I, ref ioentityO, context, ref intStatus_IO,
                                            ref strDevMessage_IO, ref strUserMessage_IO);
                                    }
                                }

                                wfandlinkjson_O = new WfandlinkjsonWorkflowPkAndLinkJson(
                                    ioentityNode.intPkWorkflow, ioentityNode.strLink);

                            }
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool boolIsNodeInitial(
            //                                              //True if the IONode has'nt nodes o process before of this
            //                                              //    IONode.

            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            Odyssey2Context context_M
            )
        {
            bool boolIsANodeInitial = true;

            //                                              //IOsProcess Before.
            List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                darriobefornextjsonIOsBeforeProcessesResult;

            //                                              //IOsNodes Before.
            List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                darriobefornextjsonIOsBeforeNodesResult;

            //                                              //Get IOs before from ioentityNode_I.
            ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(ioentityNode_I,
                false, true, out darriobefornextjsonIOsBeforeProcessesResult,
                out darriobefornextjsonIOsBeforeNodesResult, context_M);

            if (
                //                                          //There are Node or processes before.
                darriobefornextjsonIOsBeforeNodesResult.Count >= 1 ||
                darriobefornextjsonIOsBeforeProcessesResult.Count >= 1
                )
            {
                boolIsANodeInitial = false;
            }

            return boolIsANodeInitial;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool boolIsLinkeable(
            //                                              //Verify if the link to do is valid by comparing IO types.

            EleetentityElementElementTypeEntityDB eleetentity_I,
            EleeleentityElementElementEntityDB eleeleentity_I,
            bool boolIsEleet_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            out IoentityInputsAndOutputsEntityDB ioentityAssociateToCurrentNode_O,
            ref int intStatus_IO,
            ref String strDevMessage_IO,
            ref String strUserMessage_IO
            )
        {
            //                                              //Establish the connection to DB.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //BoolIsLinkeable
            bool boolIsLinkeable = false;

            //                                              //Get Other part associate whit this Nodo.
            ioentityAssociateToCurrentNode_O = context.InputsAndOutputs.FirstOrDefault(
                io => io.intPkWorkflow == ioentityNode_I.intPkWorkflow && io.strLink == ioentityNode_I.strLink &&
                (io.intnPkElementElementType != null || io.intnPkElementElement != null));

            if (
                //                                          //There are links associated to this node.
                ioentityAssociateToCurrentNode_O != null
                )
            {
                int intPkEleetOrEleeleOther = ioentityAssociateToCurrentNode_O.intnPkElementElementType != null ?
                    (int)ioentityAssociateToCurrentNode_O.intnPkElementElementType :
                    (int)ioentityAssociateToCurrentNode_O.intnPkElementElement;

                bool boolIsEleetOther = ioentityAssociateToCurrentNode_O.intnPkElementElementType != null;

                EleetentityElementElementTypeEntityDB eleetentityOther;
                EleeleentityElementElementEntityDB eleeleentityOther;

                ProdtypProductType.GeteleetOreleele(context, intPkEleetOrEleeleOther, boolIsEleetOther,
                    out eleetentityOther, out eleeleentityOther);

                //                                          //Get the types of the typeOrTemplate from other link.
                int? intPkTypeOther = ioentityAssociateToCurrentNode_O.intnPkElementElementType != null ? eleetentityOther.intPkElementTypeSon :
                    ProdtypProductType.GetTypeFromTemplate(eleeleentityOther.intPkElementSon);

                //                                          //Get the types of the typeOrTemplate.
                int? intPkType = eleetentity_I != null ? eleetentity_I.intPkElementTypeSon :
                    ProdtypProductType.GetTypeFromTemplate(eleeleentity_I.intPkElementSon);


                strDevMessage_IO = "Input or output must derive from the same type.";
                strUserMessage_IO = "Input or output must derive from the same type.";
                intStatus_IO = 407;
                if (
                    intPkTypeOther == intPkType
                    )
                {
                    strDevMessage_IO = "Input or output must derive from the same template.";
                    strUserMessage_IO = "Input or output must derive from the same template.";
                    intStatus_IO = 413;
                    if (
                        //                                  //Input is Type or Output is type.
                        boolIsEleet_I ||
                        boolIsEleetOther ||
                        //                                  //Same Template
                        ((eleetentity_I != null) &&
                        (eleetentityOther != null) &&
                        (eleeleentity_I.intPkElementSon ==
                        eleeleentityOther.intPkElementSon)) ||
                        //                                  //Valid that the template whit other template should be
                        //                                  //    relation direct in same branch.
                        ProdtypProductType.boolIsTemp1AndTemp2ExistInSameBranch(
                            eleeleentity_I.intPkElementSon,
                            eleeleentityOther.intPkElementSon,
                            (int)intPkTypeOther)
                        )
                    {
                        //                                  //There arent link(io-node or node-io) associate.
                        boolIsLinkeable = true;
                    }
                }
            }
            else
            {
                boolIsLinkeable = true;
            }
            return boolIsLinkeable;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool boolIsProcessAlreadyConnectedToANode(
            //                                              //Verify if any process's IOs are already connected
            //                                              //      to a node.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            ref int intStatus_IO,
            ref String strDevMessage_IO,
            ref String strUserMessage_IO
            )
        {
            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Find process's IOs with link.
            List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                io.strLink != null).ToList();

            int intI = 0;
            bool boolIsProcessAlreadyConnectedToCurrentNode = false;
            /*WHILE-DO*/
            while (
                intI < darrioentity.Count &&
                !boolIsProcessAlreadyConnectedToCurrentNode
                )
            {
                if (
                    //                                      //IO already linked to node.
                    darrioentity[intI].strLink == ioentityNode_I.strLink
                    )
                {
                    boolIsProcessAlreadyConnectedToCurrentNode = true;
                }

                intI = intI + 1;
            }

            if (
                boolIsProcessAlreadyConnectedToCurrentNode
                )
            {
                strUserMessage_IO = "Only one process's input or output must be linked to the same node.";
                strDevMessage_IO = "";
                intStatus_IO = 401;
            }

            return boolIsProcessAlreadyConnectedToCurrentNode;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subLinkNodeWithIOInput(
            //                                              //Ps printshop.
            PsPrintShop ps_I,
            //                                              //Nodo of the output.
            int? intnPkNodeO_I,
            //                                              //Process in workflow on the output-res side.
            int intnPkProcessInWorkflowI_I,
            //                                              //Type or template of the output-res side.
            int intnPkEleetOrEleeleI_I,
            //                                              //True if is type, false if it is template.
            bool boolnIsEleetI_I,
            GpcondjsonGroupConditionJson gpcondition_I,
            ref int intStatus_IO,
            ref String strDevMessage_IO,
            ref String strUserMessage_IO,
            out WfandlinkjsonWorkflowPkAndLinkJson wfandlinkjson_O
            //
            )
        {
            wfandlinkjson_O = null;
            Odyssey2Context context = new Odyssey2Context();

            intStatus_IO = 401;
            strDevMessage_IO = "Processes is not found.";
            strUserMessage_IO = "Something is wrong.";

            //                                              //Get the piw from DB.
            PiwentityProcessInWorkflowEntityDB piwentityI = context.ProcessInWorkflow.FirstOrDefault(piwentity =>
                piwentity.intPk == intnPkProcessInWorkflowI_I);

            if (
                piwentityI != null
                )
            {
                //                              //Get the entitys for output side.
                EleetentityElementElementTypeEntityDB eleetentityFromDBI;
                EleeleentityElementElementEntityDB eleeleentityFromDBI;

                ProdtypProductType.GeteleetOreleele(context, intnPkEleetOrEleeleI_I, boolnIsEleetI_I,
                    out eleetentityFromDBI, out eleeleentityFromDBI);

                strDevMessage_IO = "No output for the process.";
                strUserMessage_IO = "No output found.";
                intStatus_IO = 405;
                if (
                    (eleetentityFromDBI != null) ||
                    (eleeleentityFromDBI != null)
                    )
                {
                    intStatus_IO = 401;
                    strDevMessage_IO = "Node is not found.";
                    strUserMessage_IO = "Something is wrong.";

                    //                                      //Get Io entity Node.
                    IoentityInputsAndOutputsEntityDB ioentityNode = context.InputsAndOutputs.FirstOrDefault(io =>
                        io.intPk == intnPkNodeO_I && io.intnPkElementElementType == null &&
                        io.intnPkElementElement == null);

                    if (
                        ioentityNode != null
                        )
                    {
                        //                                  //Get the pk of the product and the product.
                        WfentityWorkflowEntityDB wfentityI = context.Workflow.FirstOrDefault(wf =>
                            wf.intPk == piwentityI.intPkWorkflow);

                        //                                  //Get the pk of the product and the product.
                        WfentityWorkflowEntityDB wfentityNode = context.Workflow.FirstOrDefault(wf =>
                            wf.intPk == ioentityNode.intPkWorkflow);

                        strDevMessage_IO = "Node or process do not belong to current printshop.";
                        strUserMessage_IO = "Something is wrong.";
                        intStatus_IO = 404;
                        if (
                            wfentityI.intPk == wfentityNode.intPk &&
                            wfentityI.intPkPrintshop == ps_I.intPk
                            )
                        {
                            IoentityInputsAndOutputsEntityDB ioentityAssociateToNode;
                            if (
                                ProdtypProductType.boolIsLinkeable(eleetentityFromDBI, eleeleentityFromDBI,
                                boolnIsEleetI_I, ioentityNode, out ioentityAssociateToNode, ref intStatus_IO,
                                ref strDevMessage_IO, ref strUserMessage_IO) &&
                                //                          //Verify if one IO from this PIW is alredy connected
                                //                          //      to node.
                                !ProdtypProductType.boolIsProcessAlreadyConnectedToANode(piwentityI,
                                ioentityNode, ref intStatus_IO, ref strDevMessage_IO, ref strUserMessage_IO)
                                )
                            {
                                //                          //Get the IO for the output side.
                                IoentityInputsAndOutputsEntityDB ioentityI;
                                ProdtypProductType.GetIO(context, piwentityI.intPkWorkflow,
                                    piwentityI.intProcessInWorkflowId, intnPkEleetOrEleeleI_I,
                                    boolnIsEleetI_I, out ioentityI);

                                strDevMessage_IO = "Output link found.";
                                strUserMessage_IO = "Output link found.";
                                intStatus_IO = 408;
                                if (
                                    (ioentityI == null) ||
                                    ((ioentityI != null) && (ioentityI.strLink == null))
                                    )
                                {
                                    bool boolIsContinue = false;

                                    if (
                                        piwentityI.boolIsPostProcess
                                        )
                                    {
                                        //                  //Get All IO from workflow.
                                        List<IoentityInputsAndOutputsEntityDB> darrioentityFromWFProduct =
                                            context.InputsAndOutputs.Where(
                                            io => io.intPkWorkflow == ioentityNode.intPkWorkflow).ToList();

                                        bool boolIsNodePostInfo;
                                        bool boolHasNodeSomeProcessAtFinal;
                                        ProdtypProductType.subGetInfoNodeRecursive(
                                            ioentityNode, out boolIsNodePostInfo,
                                            out boolHasNodeSomeProcessAtFinal, ref darrioentityFromWFProduct);

                                        //                  //Continue if the IONodeOut is post or
                                        //                  //    if the node it not post and node has not
                                        //                  //    process before.
                                        boolIsContinue = boolIsNodePostInfo ||
                                                         (!boolIsNodePostInfo && !boolHasNodeSomeProcessAtFinal);
                                    }
                                    else
                                    {
                                        boolIsContinue = true;
                                    }

                                    strDevMessage_IO = "It is necessary that the nodes arrive to Process with " +
                                        "final Product.";
                                    strUserMessage_IO = "It is necessary that the nodes arrive to Process with" +
                                        " final Product.";
                                    intStatus_IO = 426;

                                    if (
                                        boolIsContinue
                                        )
                                    {
                                        ProdtypProductType.linkIOsNode(ioentityAssociateToNode, ioentityNode,
                                            piwentityI.intProcessInWorkflowId, intnPkEleetOrEleeleI_I, boolnIsEleetI_I,
                                            gpcondition_I, ref ioentityI, context, ref intStatus_IO, ref strDevMessage_IO,
                                            ref strUserMessage_IO);

                                        wfandlinkjson_O = new WfandlinkjsonWorkflowPkAndLinkJson(
                                            ioentityNode.intPkWorkflow, ioentityNode.strLink);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subLinkNodeWithNode(
            //                                              //Ps printshop.
            PsPrintShop ps_I,
            //                                              //Nodo of the output.
            int? intnPkNodeO_I,
            //                                              //Nodo of the output.
            int? intnPkNodeI_I,
            GpcondjsonGroupConditionJson gpcondition_I,
            ref int intStatus_IO,
            ref String strDevMessage_IO,
            ref String strUserMessage_IO,
            out WfandlinkjsonWorkflowPkAndLinkJson wfandlinkjson_O
            //
            )
        {
            wfandlinkjson_O = null;
            Odyssey2Context context = new Odyssey2Context();

            intStatus_IO = 424;
            strDevMessage_IO = "Nodes is not found.";
            strUserMessage_IO = "Something is wrong.";

            //                                          //Get Io entity Node output.
            IoentityInputsAndOutputsEntityDB ioentityNodeO = context.InputsAndOutputs.FirstOrDefault(io =>
                io.intPk == intnPkNodeO_I);

            //                                          //Get Io entity Node input.
            IoentityInputsAndOutputsEntityDB ioentityNodeI = context.InputsAndOutputs.FirstOrDefault(io =>
                io.intPk == intnPkNodeI_I);

            if (
                ioentityNodeO != null &&
                ioentityNodeI != null
                )
            {
                //                                      //Get the pk of the product and the product for node output.
                WfentityWorkflowEntityDB wfentityNodeO = context.Workflow.FirstOrDefault(wf =>
                    wf.intPk == ioentityNodeO.intPkWorkflow);

                //                                      //Get the pk of the product and the product for the node Input.
                WfentityWorkflowEntityDB wfentityNodeI = context.Workflow.FirstOrDefault(wf =>
                    wf.intPk == ioentityNodeI.intPkWorkflow);


                strDevMessage_IO = "Node or process do not belong to current printshop.";
                strUserMessage_IO = "Something is wrong.";
                intStatus_IO = 425;
                if (
                    wfentityNodeO.intPk == wfentityNodeI.intPk &&
                    wfentityNodeO.intPkPrintshop == ps_I.intPk
                    )
                {
                    LinknodLinkNodeEntityDB linknod = context.LinkNode.FirstOrDefault(linknode =>
                    (linknode.intPkNodeI == ioentityNodeI.intPk && linknode.intPkNodeO == ioentityNodeO.intPk) ||
                    (linknode.intPkNodeI == ioentityNodeO.intPk && linknode.intPkNodeO == ioentityNodeI.intPk));

                    strDevMessage_IO = "There are a link with the same nodes.";
                    strUserMessage_IO = "There are a link with the same nodes.";
                    intStatus_IO = 426;
                    if (
                        linknod == null
                        )
                    {
                        //                                              //Get All IO from workflow.
                        List<IoentityInputsAndOutputsEntityDB> darrioentityFromWFProduct =
                            context.InputsAndOutputs.Where(
                            io => io.intPkWorkflow == ioentityNodeI.intPkWorkflow).ToList();

                        bool boolIsContinue = false;

                        if (
                            ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(ioentityNodeI, context,
                                ref darrioentityFromWFProduct))
                        {

                            bool boolIsNodePostInfo;
                            bool boolHasNodeSomeProcessAtFinal;
                            ProdtypProductType.subGetInfoNodeRecursive(ioentityNodeO, out boolIsNodePostInfo,
                                out boolHasNodeSomeProcessAtFinal, ref darrioentityFromWFProduct);

                            //                              //Continue if the IONodeOut is post or
                            //                              //    if the node it not post and node has not
                            //                              //    process before.
                            boolIsContinue = boolIsNodePostInfo ||
                                             (!boolIsNodePostInfo && !boolHasNodeSomeProcessAtFinal);
                        }
                        else
                        {
                            boolIsContinue = true;
                        }

                        strDevMessage_IO = "It is necessary that the nodes arrive to Process with final Product.";
                        strUserMessage_IO = "It is necessary that the nodes arrive to Process with final Product.";
                        intStatus_IO = 426;
                        if (
                            boolIsContinue
                            )
                        {
                            //                              //Create Link Node with node.
                            LinknodLinkNodeEntityDB linknode = new LinknodLinkNodeEntityDB
                            {
                                intPkWorkflow = ioentityNodeO.intPkWorkflow,
                                intPkNodeO = ioentityNodeO.intPk,
                                intPkNodeI = ioentityNodeI.intPk
                            };

                            context.LinkNode.Add(linknode);
                            context.SaveChanges();

                            //                              //Add conditions to necessary tables.
                            Tools.subAddCondition(null, linknode.intPk, null, null, gpcondition_I, context);

                            strDevMessage_IO = "";
                            strUserMessage_IO = "Success.";
                            intStatus_IO = 200;

                            wfandlinkjson_O = new WfandlinkjsonWorkflowPkAndLinkJson(
                                ioentityNodeO.intPkWorkflow, ioentityNodeO.strLink);
                        }
                    }
                }
            }
            context.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subLinkIOOutputWithIOInput(
            //                                              //To add a link in a workflow, to link the O of a process
            //                                              //      with the Input of another.
            //                                              //      1. For a specific product of a printshop.
            //                                              //      2. The process can be of the same type.
            //                                              //      3. The process in workflow IS different.
            //                                              //      4. The type of the resource should be the same.
            //                                              //      5. Can/cannot be templates.
            //                                              //      6. Can/cannot be resources.
            //                                              //      7. The resources should be the same (one).
            //                                              //      8. If there are only res on one side, the resource
            //                                              //         is copyed to the other. 

            //                                              //Ps printshop.
            PsPrintShop ps_I,
            //                                              //Process in workflow on the output-res side.
            int intnPkProcessInWorkflowO_I,
            //                                              //Type or template of the output-res side.
            int intnPkEleetOrEleeleO_I,
            //                                              //True if is type, false if it is template.
            bool boolnIsEleetO_I,
            //                                              //Process in workflow on the input-res side.
            int intnPkProcessInWorkflowI_I,
            //                                              //Type or template of the input-res side.
            int intnPkEleetOrEleeleI_I,
            //                                              //True if is type, false if it is template.    
            bool boolnIsEleetI_I,
            ref int intStatus_IO,
            ref String strDevMessage_IO,
            ref String strUserMessage_IO,
            out WfandlinkjsonWorkflowPkAndLinkJson wfandlinkjson_O
            )
        {
            wfandlinkjson_O = null;

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the piw from DB.
            PiwentityProcessInWorkflowEntityDB piwentityO = context.ProcessInWorkflow.FirstOrDefault(piwentity =>
                piwentity.intPk == intnPkProcessInWorkflowO_I);
            PiwentityProcessInWorkflowEntityDB piwentityI = context.ProcessInWorkflow.FirstOrDefault(piwentity =>
                piwentity.intPk == intnPkProcessInWorkflowI_I);

            strDevMessage_IO = "Either the Input or the Output process is not in the workflow.";
            strUserMessage_IO = "Verify the Input or the Output of the link.";
            intStatus_IO = 401;
            if (
                (piwentityO != null) &&
                (piwentityI != null)
                )
            {
                strDevMessage_IO = "Output process in workflow should be different from Input process in workflow.";
                strUserMessage_IO = "The Output of this process must be different from the Input of the contrary one.";
                intStatus_IO = 402;
                if (
                    piwentityO != piwentityI
                    )
                {
                    intStatus_IO = 403;
                    strUserMessage_IO = "Processes belong to different workflows.";
                    strDevMessage_IO = "Processes are not from the same workflow.";
                    if (
                        piwentityO.intPkWorkflow == piwentityI.intPkWorkflow
                        )
                    {
                        //                                  //Get the pk of the product and the product.
                        WfentityWorkflowEntityDB wfentityO = context.Workflow.FirstOrDefault(wf =>
                            wf.intPk == piwentityO.intPkWorkflow);

                        strDevMessage_IO = "Workflow do not belong to current printshop.";
                        strUserMessage_IO = "Something is wrong.";
                        intStatus_IO = 404;
                        if (
                            (ps_I.intPk == wfentityO.intPkPrintshop)
                            )
                        {
                            //                              //Get the entitys for output side.
                            EleetentityElementElementTypeEntityDB eleetentityFromDBO;
                            EleeleentityElementElementEntityDB eleeleentityFromDBO;

                            ProdtypProductType.GeteleetOreleele(context, intnPkEleetOrEleeleO_I, boolnIsEleetO_I,
                                out eleetentityFromDBO, out eleeleentityFromDBO);

                            strDevMessage_IO = "No output for the process.";
                            strUserMessage_IO = "No output found.";
                            intStatus_IO = 405;
                            if (
                                (eleetentityFromDBO != null) ||
                                (eleeleentityFromDBO != null)
                                )
                            {
                                //                          //Get the entitys for input side.
                                EleetentityElementElementTypeEntityDB eleetentityFromDBI;
                                EleeleentityElementElementEntityDB eleeleeentityFromDBI;

                                ProdtypProductType.GeteleetOreleele(context, intnPkEleetOrEleeleI_I, boolnIsEleetI_I,
                                    out eleetentityFromDBI, out eleeleeentityFromDBI);

                                strDevMessage_IO = "No input for the process.";
                                strUserMessage_IO = "No input found.";
                                intStatus_IO = 406;
                                if (
                                    (eleetentityFromDBI != null) ||
                                    (eleeleeentityFromDBI != null)
                                    )
                                {
                                    //                      //Get the types of the typeOrTemplate.
                                    int? intPkTypeO = boolnIsEleetO_I ? eleetentityFromDBO.intPkElementTypeSon :
                                        ProdtypProductType.GetTypeFromTemplate(eleeleentityFromDBO.intPkElementSon);
                                    int? intPkTypeI = boolnIsEleetI_I ? eleetentityFromDBI.intPkElementTypeSon :
                                        ProdtypProductType.GetTypeFromTemplate(eleeleeentityFromDBI.intPkElementSon);

                                    strDevMessage_IO = "Input and output must derive from the same type.";
                                    strUserMessage_IO = "Input and output must derive from the same type.";
                                    intStatus_IO = 407;
                                    if (
                                        intPkTypeO == intPkTypeI
                                        )
                                    {
                                        strDevMessage_IO = "Input and output must derive from the same template.";
                                        strUserMessage_IO = "Input and output must derive from the same template.";
                                        intStatus_IO = 413;
                                        if (
                                            //              //Input is Type or Output is type.
                                            boolnIsEleetO_I ||
                                            boolnIsEleetI_I ||
                                            //              //Same Template
                                            ((eleeleentityFromDBO != null) &&
                                            (eleeleeentityFromDBI != null) &&
                                            (eleeleentityFromDBO.intPkElementSon ==
                                            eleeleeentityFromDBI.intPkElementSon)) ||
                                            //              //Valid that the template whit other template should be
                                            //              //    relation direct in same branch.
                                            ProdtypProductType.boolIsTemp1AndTemp2ExistInSameBranch(
                                                eleeleentityFromDBO.intPkElementSon,
                                                eleeleeentityFromDBI.intPkElementSon,
                                                (int)intPkTypeI)
                                            )
                                        {
                                            //                      //Get the IO for the output side.
                                            IoentityInputsAndOutputsEntityDB ioentityO;
                                            ProdtypProductType.GetIO(context, piwentityO.intPkWorkflow,
                                                piwentityO.intProcessInWorkflowId, intnPkEleetOrEleeleO_I,
                                                boolnIsEleetO_I, out ioentityO);

                                            strDevMessage_IO = "Output link found.";
                                            strUserMessage_IO = "Output link found.";
                                            intStatus_IO = 408;
                                            if (
                                                (ioentityO == null) ||
                                                ((ioentityO != null) && (ioentityO.strLink == null))
                                                )
                                            {
                                                //          //Get the IO for the input side.
                                                IoentityInputsAndOutputsEntityDB ioentityI;
                                                ProdtypProductType.GetIO(context, piwentityI.intPkWorkflow,
                                                    piwentityI.intProcessInWorkflowId, intnPkEleetOrEleeleI_I,
                                                    boolnIsEleetI_I, out ioentityI);

                                                strDevMessage_IO = "Input link found.";
                                                strUserMessage_IO = "Input link found.";
                                                intStatus_IO = 409;
                                                if (
                                                    (ioentityI == null) ||
                                                    ((ioentityI != null) && (ioentityI.strLink == null))
                                                    )
                                                {
                                                    //      //Finally, this is going to be the link to add.
                                                    bool boolLinkGenerated;
                                                    String strLink = ProdtypProductType.strGenerateLink(
                                                        piwentityI.intPkWorkflow, out boolLinkGenerated);

                                                    strDevMessage_IO = "Link name was not generated. Maybe too many" +
                                                        " links (>20000).";
                                                    strUserMessage_IO = "Something is wrong.";
                                                    intStatus_IO = 412;

                                                    if (
                                                        boolLinkGenerated
                                                        )
                                                    {
                                                        strUserMessage_IO = "Only one link is allowed.";
                                                        strDevMessage_IO = "";
                                                        intStatus_IO = 413;
                                                        if (
                                                            //Only link if there's not final product with link.
                                                            !ProdtypProductType.boolThereIsAFinalProductWithLink(
                                                                piwentityO, context)
                                                            )
                                                        {
                                                            wfandlinkjson_O = new WfandlinkjsonWorkflowPkAndLinkJson(
                                                                piwentityI.intPkWorkflow, strLink);

                                                            WfentityWorkflowEntityDB wfentityBase = context.Workflow.
                                                                FirstOrDefault(wf =>
                                                                wf.intPk == piwentityI.intPkWorkflow);

                                                            //  //Duplicate workflow if necessary.
                                                            WfentityWorkflowEntityDB wfentityNew;
                                                            ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I,
                                                                wfentityBase, context, out wfentityNew);

                                                            int intProcessInWorkflowIdI =
                                                                piwentityI.intProcessInWorkflowId;
                                                            piwentityI = context.ProcessInWorkflow.FirstOrDefault(piw =>
                                                                piw.intPkWorkflow == wfentityNew.intPk &&
                                                                piw.intProcessInWorkflowId == intProcessInWorkflowIdI);

                                                            int intProcessInWorkflowIdO =
                                                                piwentityO.intProcessInWorkflowId;
                                                            piwentityO = context.ProcessInWorkflow.FirstOrDefault(piw =>
                                                                piw.intPkWorkflow == wfentityNew.intPk &&
                                                                piw.intProcessInWorkflowId == intProcessInWorkflowIdO);

                                                            ProdtypProductType.subDeleteIojentityThatHaveNotTheSameResource(
                                                                piwentityI, piwentityO, intnPkEleetOrEleeleI_I,
                                                                boolnIsEleetI_I, intnPkEleetOrEleeleO_I,
                                                                boolnIsEleetO_I);

                                                            //  //Update IOs to link for new wf.
                                                            IoentityInputsAndOutputsEntityDB ioentityONew;
                                                            ProdtypProductType.GetIO(context, piwentityO.intPkWorkflow,
                                                                piwentityO.intProcessInWorkflowId,
                                                                intnPkEleetOrEleeleO_I, boolnIsEleetO_I,
                                                                out ioentityONew);

                                                            IoentityInputsAndOutputsEntityDB ioentityINew;
                                                            ProdtypProductType.GetIO(context, piwentityI.intPkWorkflow,
                                                                piwentityI.intProcessInWorkflowId,
                                                                intnPkEleetOrEleeleI_I, boolnIsEleetI_I,
                                                                out ioentityINew);

                                                            ProdtypProductType.linkIOs(piwentityI.intPkWorkflow,
                                                                ioentityONew, ioentityINew,
                                                                piwentityI.intProcessInWorkflowId,
                                                                intnPkEleetOrEleeleI_I, boolnIsEleetO_I,
                                                                piwentityO.intProcessInWorkflowId,
                                                                intnPkEleetOrEleeleO_I, boolnIsEleetI_I,
                                                                eleeleentityFromDBO, eleeleeentityFromDBI,
                                                                strLink, ref intStatus_IO, ref strUserMessage_IO,
                                                                ref strDevMessage_IO, context);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subDeleteIojentityThatHaveNotTheSameResource(
            PiwentityProcessInWorkflowEntityDB piwentityI_I,
            PiwentityProcessInWorkflowEntityDB piwentityO_I,
            int intPkEleetOrEleeleI_I,
            bool boolIsEleetI_I,
            int intPkEleetOrEleeleO_I,
            bool boolIsEleetO_I
            )
        {
            int? intnPkEleetI = null;
            int? intnPkEleeleI = intPkEleetOrEleeleI_I;
            if (
                boolIsEleetI_I
                )
            {
                intnPkEleetI = intPkEleetOrEleeleI_I;
                intnPkEleeleI = null;
            }

            int? intnPkEleetO = null;
            int? intnPkEleeleO = intPkEleetOrEleeleO_I;
            if (
                boolIsEleetO_I
                )
            {
                intnPkEleetO = intPkEleetOrEleeleO_I;
                intnPkEleeleO = null;
            }

            Odyssey2Context context = new Odyssey2Context();

            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentity = context.InputsAndOutputsForAJob.Where(ioj =>
                (ioj.intPkProcessInWorkflow == piwentityI_I.intPk &&
                ioj.intnPkElementElementType == intnPkEleetI &&
                ioj.intnPkElementElement == intnPkEleeleI) ||
                (ioj.intPkProcessInWorkflow == piwentityO_I.intPk && ioj.intnPkElementElementType == intnPkEleetO &&
                ioj.intnPkElementElement == intnPkEleeleO)).ToList();

            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityToDelete = new
                List<IojentityInputsAndOutputsForAJobEntityDB>();

            foreach (IojentityInputsAndOutputsForAJobEntityDB iojentity in darriojentity)
            {
                if (
                    !darriojentityToDelete.Contains(iojentity)
                    )
                {
                    IojentityInputsAndOutputsForAJobEntityDB iojentityPair = darriojentity.FirstOrDefault(ioj =>
                    ioj.intJobId == iojentity.intJobId &&
                    ioj.intPkProcessInWorkflow != iojentity.intPkProcessInWorkflow);

                    /*CASE*/
                    if (
                        (iojentityPair != null) &&
                        (iojentityPair.intPkResource != iojentity.intPkResource)
                        )
                    {
                        darriojentityToDelete.Add(iojentity);
                        darriojentityToDelete.Add(iojentityPair);
                    }
                    else if (
                        iojentityPair == null
                        )
                    {
                        darriojentityToDelete.Add(iojentity);
                    }
                    /*END-CASE*/
                }
            }

            foreach (IojentityInputsAndOutputsForAJobEntityDB iojentity in
                darriojentityToDelete)
            {
                context.InputsAndOutputsForAJob.Remove(iojentity);
            }
            context.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void linkIOsNode(
            //                                              //Link IO-Node or Node-IO.

            //                                              //Data for support.
            IoentityInputsAndOutputsEntityDB ioentityAssociateToNode_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,

            //                                              //Data Entries for link.            
            int intProcessInWorkflowId_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            GpcondjsonGroupConditionJson gpcondition_I,
            ref IoentityInputsAndOutputsEntityDB ioentity_M,
            Odyssey2Context context_I,
            //                                              //Status.
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            if (
                //                                          //ExistIOAssociateToCurrentNode.
                ioentityAssociateToNode_I != null
                )
            {
                if (
                    //                                      //Same resource.
                    (ioentity_M != null) &&
                    (ioentity_M.intnPkResource != null) &&
                    (ioentity_M.intnGroupResourceId == null) &&
                    (ioentity_M.intnPkResource == ioentityAssociateToNode_I.intnPkResource)
                )
                {
                    ioentity_M.strLink = ioentityNode_I.strLink;
                    context_I.InputsAndOutputs.Update(ioentity_M);

                    strDevMessage_IO = "The output resource will be the input of the next process.";
                    strUserMessage_IO = "The output resource will be the input of the next process.";
                    intStatus_IO = 200;

                    context_I.SaveChanges();

                    //                                      //Add conditions to necessary tables.
                    Tools.subAddCondition(null, null, ioentity_M.intPk, null, gpcondition_I, context_I);
                }
                else if (
                    //                                      //Differente resource.
                    (ioentity_M != null) &&
                    (ioentity_M.intnPkResource != null) &&
                    (ioentity_M.intnGroupResourceId == null)
                    )
                {
                    strDevMessage_IO = "Resources must be the same.";
                    strUserMessage_IO = "Resources must be the same.";
                    intStatus_IO = 421;
                }
                else if (
                        //                                  //ioentityAssociateToCurrentNode_I resource is null.
                        (ioentity_M != null) &&
                        (ioentity_M.intnPkResource != null) &&
                        (ioentity_M.intnGroupResourceId == null) &&
                        (
                        (ioentityAssociateToNode_I.intnPkResource == null) &&
                        (ioentityAssociateToNode_I.intnGroupResourceId == null)
                        )
                    )
                {
                    //                                      //update all ioentity associate to the node.
                    List<IoentityInputsAndOutputsEntityDB> ioentityAllIOAssociateToNode =
                        context_I.InputsAndOutputs.Where(io => io.intPkWorkflow == ioentityNode_I.intPkWorkflow &&
                        io.strLink == ioentityNode_I.strLink &&
                        (io.intnPkElementElementType != null || io.intnPkElementElement != null)).ToList();

                    foreach (IoentityInputsAndOutputsEntityDB ioentity in ioentityAllIOAssociateToNode)
                    {
                        ioentity.intnPkResource = ioentity_M.intnPkResource;
                        context_I.InputsAndOutputs.Update(ioentity);
                    }
                }
                else if (
                        //                                  //IoEntity resource is null.
                        (ioentityAssociateToNode_I != null) &&
                        (ioentityAssociateToNode_I.intnPkResource != null) &&
                        (ioentityAssociateToNode_I.intnGroupResourceId == null) &&
                        (
                            (ioentity_M == null) ||
                            ((ioentity_M != null) && (ioentity_M.intnPkResource == null) &&
                            (ioentity_M.intnGroupResourceId == null))
                        )
                    )
                {
                    ProdtypProductType.subSuccessLinkIOWithNode(intProcessInWorkflowId_I, intPkEleetOrEleele_I,
                        boolIsEleet_I, ioentity_M, ioentityAssociateToNode_I, false, ioentityNode_I, gpcondition_I);

                    strDevMessage_IO = "The resource is set in the other process.";
                    strUserMessage_IO = "The resource is set in the other process.";
                    intStatus_IO = 200;
                }
                else if (
                   //                                       //Has Resource group in Input and output.
                   (ioentityAssociateToNode_I != null) &&
                   (ioentityAssociateToNode_I.intnPkResource == null) &&
                   (ioentityAssociateToNode_I.intnGroupResourceId != null) &&
                   (ioentity_M != null) &&
                   (ioentity_M.intnPkResource == null) &&
                   (ioentity_M.intnGroupResourceId != null)
                   )
                {
                    //                                      //Get Resources from Resources group input and output.
                    List<GpresentityGroupResourceEntityDB> darrgpresResourceGroupIOAssociateToNode =
                        ProdtypProductType.darrgrpresResFromGroup((int)ioentityAssociateToNode_I.intnGroupResourceId);
                    List<GpresentityGroupResourceEntityDB> darrgpresResourceGroupIOentity =
                        ProdtypProductType.darrgrpresResFromGroup((int)ioentity_M.intnGroupResourceId);
                    //                                      //arr has the same length.
                    if (
                        darrgpresResourceGroupIOAssociateToNode.Count == darrgpresResourceGroupIOentity.Count
                        )
                    {
                        if (
                            //                              //Arr has same resources.
                            ProdtypProductType.boolHasTheSameResourcesInInputAndOutput
                                (darrgpresResourceGroupIOAssociateToNode, darrgpresResourceGroupIOentity)
                            )
                        {
                            //                              //Delete Resource group from IOEntity of the table gpres.
                            foreach (GpresentityGroupResourceEntityDB gpresentity in darrgpresResourceGroupIOentity)
                            {
                                context_I.GroupResource.Remove(gpresentity);

                                //                          //If res has calculations, delete them.
                                ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentity_M,
                                    gpresentity.intPkResource, context_I);
                            }

                            foreach (GpresentityGroupResourceEntityDB gpresentityOutput in
                                darrgpresResourceGroupIOAssociateToNode)
                            {
                                //                          //If res has calculations, delete them.
                                ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityAssociateToNode_I,
                                    gpresentityOutput.intPkResource, context_I);
                            }

                            ProdtypProductType.subSuccessLinkIOWithNode(intProcessInWorkflowId_I, intPkEleetOrEleele_I,
                                boolIsEleet_I, ioentity_M, ioentityAssociateToNode_I, false, ioentityNode_I, gpcondition_I);

                            ProdtypProductType.subDeleteEstimations(ioentityAssociateToNode_I.intPkWorkflow);

                            strDevMessage_IO = "The resource group will be shared with the next process.";
                            strUserMessage_IO = "The resource group will be shared with the next process.";
                            intStatus_IO = 200;
                        }
                        else
                        {
                            strDevMessage_IO = "Resource group must contain the compatible resources.";
                            strUserMessage_IO = "Resource group must contain the compatible resources.";
                            intStatus_IO = 413;
                        }
                    }
                    else
                    {
                        strDevMessage_IO = "arr of resources are not even the same lenght.";
                        strUserMessage_IO = "Resource group must contain compatible resources.";
                        intStatus_IO = 414;
                    }
                }
                else if (
                        //                                  //ioentity has Resource group and 
                        //                                  //    ioentityAssociateToNode is null.
                        (ioentity_M != null) &&
                        (ioentity_M.intnGroupResourceId != null) &&
                        (ioentity_M.intnPkResource == null) &&
                        (
                        (ioentityAssociateToNode_I == null) ||
                        ((ioentityAssociateToNode_I != null) && (ioentityAssociateToNode_I.intnPkResource == null) &&
                        (ioentityAssociateToNode_I.intnGroupResourceId == null))
                        )
                    )
                {
                    int intGrpGroupResourceID = (int)ioentity_M.intnGroupResourceId;
                    //                                      //If res has calculations, delete them.
                    List<GpresentityGroupResourceEntityDB> darrgpresentityResourceGroup = context_I.GroupResource.Where(
                        gpresentity => gpresentity.intId == intGrpGroupResourceID).ToList();

                    //                                      //get all ioentity associate to the node.
                    List<IoentityInputsAndOutputsEntityDB> ioentityAllIOAssociateToNode =
                        context_I.InputsAndOutputs.Where(io => io.intPkWorkflow == ioentityNode_I.intPkWorkflow &&
                        io.strLink == ioentityNode_I.strLink &&
                        (io.intnPkElementElementType != null || io.intnPkElementElement != null)).ToList();

                    bool boolIsValid = true;
                    int intI = 0;

                    /*REPEAT-WHILE*/
                    while (
                        intI < ioentityAllIOAssociateToNode.Count &&
                        boolIsValid
                        )
                    {
                        //                                  //Get Eleetoreleele
                        int intPkEleetoreleele = ioentityAllIOAssociateToNode[intI].intnPkElementElementType != null ?
                            (int)ioentityAllIOAssociateToNode[intI].intnPkElementElementType :
                            (int)ioentityAllIOAssociateToNode[intI].intnPkElementElement;

                        bool boolIsEleet = ioentityAllIOAssociateToNode[intI].intnPkElementElementType != null ? true :
                            false;

                        if (
                            //                              //Valid if a resource group is a Type or template.
                            ProdtypProductType.boolIsResourceGroupOfAType(ioentityNode_I.intPkWorkflow,
                            (int)ioentityAllIOAssociateToNode[intI].intnProcessInWorkflowId, intPkEleetoreleele,
                            boolIsEleet, ref darrgpresentityResourceGroup)
                            )
                        {
                            //Nothing To do.
                        }
                        else
                        {
                            boolIsValid = false;
                            strDevMessage_IO = "Some resources are not compatible.";
                            strUserMessage_IO = "Some resources are not compatible.";
                            intStatus_IO = 413;
                        }
                    }

                    if (
                        boolIsValid
                        )
                    {
                        foreach (IoentityInputsAndOutputsEntityDB ioentityAssociateToNode in ioentityAllIOAssociateToNode)
                        {
                            foreach (GpresentityGroupResourceEntityDB gpresentityOutput in darrgpresentityResourceGroup)
                            {
                                //                          //If res has calculations, delete them.
                                ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentity_M,
                                    gpresentityOutput.intPkResource, context_I);
                            }
                        }

                        ProdtypProductType.subSuccessLinkIOWithNode(intProcessInWorkflowId_I, intPkEleetOrEleele_I,
                            boolIsEleet_I, ioentity_M, ioentityAssociateToNode_I, true, ioentityNode_I, gpcondition_I);

                        ProdtypProductType.subDeleteEstimations(ioentityNode_I.intPkWorkflow);

                        strDevMessage_IO = "The resource group is set in the other process.";
                        strUserMessage_IO = "The resource group is set in the other process.";
                        intStatus_IO = 200;
                    }
                }
                else if (
                        //                                  //ioentityAssociateToNode_I has Resource group 
                        //                                  //    and Output is null. 
                        (ioentityAssociateToNode_I != null) &&
                        (ioentityAssociateToNode_I.intnGroupResourceId != null) &&
                        (ioentityAssociateToNode_I.intnPkResource == null) &&
                        (
                            (ioentity_M == null) ||
                            ((ioentity_M != null) && (ioentity_M.intnPkResource == null) &&
                            (ioentity_M.intnGroupResourceId == null))
                        )
                    )
                {
                    //                                      //If res has calculations, delete them.
                    List<GpresentityGroupResourceEntityDB> darrgpresentityResourceGroupIOAssocNode =
                        context_I.GroupResource.Where(gpresentity =>
                        gpresentity.intId == ioentityAssociateToNode_I.intnGroupResourceId).ToList();

                    if (
                        //                                  //Valid if a resource group is a Type or template.
                        ProdtypProductType.boolIsResourceGroupOfAType(ioentityNode_I.intPkWorkflow,
                        intProcessInWorkflowId_I, intPkEleetOrEleele_I, boolIsEleet_I,
                        ref darrgpresentityResourceGroupIOAssocNode)
                        )
                    {
                        foreach (GpresentityGroupResourceEntityDB gpresentityInput in
                            darrgpresentityResourceGroupIOAssocNode)
                        {
                            //                              //If res has calculations, delete them.
                            ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityAssociateToNode_I,
                                gpresentityInput.intPkResource, context_I);
                        }

                        ProdtypProductType.subSuccessLinkIOWithNode(intProcessInWorkflowId_I, intPkEleetOrEleele_I,
                            boolIsEleet_I, ioentity_M, ioentityAssociateToNode_I, false, ioentityNode_I,
                            gpcondition_I);

                        ProdtypProductType.subDeleteEstimations(ioentityNode_I.intPkWorkflow);

                        strDevMessage_IO = "Resource group will be set in the next process.";
                        strUserMessage_IO = "Resource group will be set in the next process.";
                        intStatus_IO = 200;
                    }
                    else
                    {
                        strDevMessage_IO = "Some resources are not compatible.";
                        strUserMessage_IO = "Some resources are not compatible.";
                        intStatus_IO = 414;
                    }
                }
                else if (
                   //                                   //ioentityAssociateToNode_I has resource group 
                   //                                   //    and ioentity_M has resource or
                   //                                   //    ioentity_M has resource group and 
                   //                                   //    ioentityAssociateToNode_I has resource 
                   (
                       //                                   //ioentityAssociateToNode_I has Resource group  and 
                       //                                   //    ioentity_M PIW has a Resource group.
                       (ioentity_M != null) &&
                       (ioentity_M.intnPkResource != null) &&
                       (ioentity_M.intnGroupResourceId == null) &&
                       (ioentityAssociateToNode_I != null) &&
                       (ioentityAssociateToNode_I.intnGroupResourceId != null) &&
                       (ioentityAssociateToNode_I.intnPkResource == null)
                   ) ||
                   (
                       //                                   //Io ioentityAssociateToNode_I has Resource group  and 
                       //                                   //    ioentity_M has a Resource group.
                       (ioentityAssociateToNode_I != null) &&
                       (ioentityAssociateToNode_I.intnPkResource != null) &&
                       (ioentityAssociateToNode_I.intnGroupResourceId == null) &&
                       (ioentity_M != null) &&
                       (ioentity_M.intnGroupResourceId != null) &&
                       (ioentity_M.intnPkResource == null)
                   )
                   )
                {
                    strDevMessage_IO = "Resource is not compatible with the resource group.";
                    strUserMessage_IO = "Resource is not compatible with the resource group.";
                    intStatus_IO = 415;
                }
                else
                //                                          //No resources and not Resources Group.
                {
                    if (
                        (ioentity_M == null) ||
                        (
                            (ioentity_M == null) && (ioentityAssociateToNode_I != null) &&
                            (ioentityAssociateToNode_I.intnPkResource == null) &&
                            (ioentityAssociateToNode_I.intnGroupResourceId == null)
                        ) ||
                        (
                            //                                  //could have a final resource.
                            (ioentity_M != null) && (ioentity_M.intnPkResource == null) &&
                            (ioentity_M.intnGroupResourceId == null)
                        )
                    )
                    {
                        ProdtypProductType.subSuccessLinkIOWithNode(intProcessInWorkflowId_I, intPkEleetOrEleele_I,
                                boolIsEleet_I, ioentity_M, ioentityAssociateToNode_I, false, ioentityNode_I,
                                gpcondition_I);

                        ProdtypProductType.subDeleteEstimations(ioentityNode_I.intPkWorkflow);

                        strDevMessage_IO = "Link set successfully.";
                        strUserMessage_IO = "";
                        intStatus_IO = 200;
                    }
                }
            }
            else
            {
                if (
                    //                                      //The IO exist beacuse was a setted resource or grpResource 
                    //                                      //    or ProductFinal.
                    ioentity_M != null
                    )
                {
                    ioentity_M.strLink = ioentityNode_I.strLink;
                    context_I.InputsAndOutputs.Update(ioentity_M);

                    //                                      //Add conditions to necessary tables.
                    Tools.subAddCondition(null, null, ioentity_M.intPk, null, gpcondition_I, context_I);
                }
                else
                {
                    //                                      //To easy code.
                    int? intnPkEleet = null;
                    int? intnPkEleele = null;
                    if (
                        boolIsEleet_I
                        )
                    {
                        intnPkEleet = intPkEleetOrEleele_I;
                    }
                    else
                    {
                        intnPkEleele = intPkEleetOrEleele_I;
                    }

                    bool? boolnIsFinalProduct = null;
                    if (
                        //                                  //It is an IO output.
                        ProdtypProductType.boolIsOutput(intnPkEleet, intnPkEleele)
                        )
                    {
                        boolnIsFinalProduct = false;
                    }

                    //                                      //Add new register with the link of the node.
                    IoentityInputsAndOutputsEntityDB ioentityNew = new IoentityInputsAndOutputsEntityDB
                    {
                        intPkWorkflow = ioentityNode_I.intPkWorkflow,
                        intnProcessInWorkflowId = intProcessInWorkflowId_I,
                        intnPkElementElementType = intnPkEleet,
                        intnPkElementElement = intnPkEleele,
                        intnPkResource = null,
                        intnGroupResourceId = null,
                        boolnIsFinalProduct = boolnIsFinalProduct,
                        strLink = ioentityNode_I.strLink
                    };
                    context_I.InputsAndOutputs.Add(ioentityNew);
                    context_I.SaveChanges();

                    //                                      //Add conditions to necessary tables.
                    Tools.subAddCondition(null, null, ioentityNew.intPk, null, gpcondition_I, context_I);
                }

                strDevMessage_IO = "Link set successfully.";
                strUserMessage_IO = "";
                intStatus_IO = 200;
            }
            context_I.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subSuccessLinkIOWithNode(
            //                                              //Link IO-Node or Link Node-IO.

            //                                              //Update IO entity or create a new IO entity.
            int intProcessInWorkflowId_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            //                                              //IO support.
            IoentityInputsAndOutputsEntityDB ioentityAssociateToCurrentNode_I,
            //                                              //boolIsUpdateIOAssociate.
            bool boolIsUdpateIOsAssociateToNode_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            GpcondjsonGroupConditionJson gpcondition_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Add or Update Input.

            //                                              //Get other sise of the link data.
            int? intnGroupResourceIdO = ioentityAssociateToCurrentNode_I != null ? ioentityAssociateToCurrentNode_I.intnGroupResourceId : null;
            int? intnPkResourceO = ioentityAssociateToCurrentNode_I != null ? ioentityAssociateToCurrentNode_I.intnPkResource : null;

            if (
                ioentity_I == null
                )
            {
                bool? boolnIsFinalProduct = null;
                if (
                    (boolIsEleet_I &&
                    //                                      //Verify if eleet is an output.
                    ProdtypProductType.boolIsOutput(intPkEleetOrEleele_I, null)) ||
                    (!boolIsEleet_I &&
                    //                                      //Verify if eleele is an output.
                    ProdtypProductType.boolIsOutput(null, intPkEleetOrEleele_I))
                    )
                {
                    //                                      //Output Io's default final product's value must be false.
                    boolnIsFinalProduct = false;
                }

                //                                          //Add.
                ProdtypProductType.subAddIO(context, ioentityNode_I.intPkWorkflow, intProcessInWorkflowId_I,
                    intPkEleetOrEleele_I, boolIsEleet_I, intnPkResourceO, intnGroupResourceIdO, boolnIsFinalProduct,
                    ioentityNode_I.strLink, gpcondition_I);
            }
            else
            {
                //                                          //Update.
                IoentityInputsAndOutputsEntityDB ioentityUpdate = context.InputsAndOutputs.FirstOrDefault(io =>
                io.intPk == ioentity_I.intPk);

                ioentityUpdate.strLink = ioentityNode_I.strLink;
                ioentityUpdate.intnPkResource = ioentityUpdate.intnPkResource == null ? intnPkResourceO :
                    ioentityUpdate.intnPkResource;
                ioentityUpdate.intnGroupResourceId = intnGroupResourceIdO;
                context.Update(ioentityUpdate);

                //                                      //Add conditions to necessary tables.
                Tools.subAddCondition(null, null, ioentityUpdate.intPk, null, gpcondition_I, context);

                if (
                    boolIsUdpateIOsAssociateToNode_I
                    )
                {
                    //                                      //update all ioentity associate to the node.
                    List<IoentityInputsAndOutputsEntityDB> ioentityAllIOAssociateToNode =
                        context.InputsAndOutputs.Where(io => io.intPkWorkflow == ioentityNode_I.intPkWorkflow
                       && io.strLink == ioentityNode_I.strLink &&
                       (io.intnPkElementElementType != null || io.intnPkElementElement != null)).ToList();

                    foreach (IoentityInputsAndOutputsEntityDB ioentity in ioentityAllIOAssociateToNode)
                    {
                        ioentity.intnPkResource = ioentityUpdate.intnPkResource;
                        ioentity.intnGroupResourceId = ioentityUpdate.intnGroupResourceId;
                        context.InputsAndOutputs.Update(ioentity);
                    }
                }
            }

            context.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void linkIOs(
            int intPkWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentityO_I,
            IoentityInputsAndOutputsEntityDB ioentityI_I,
            int intProcessInWorkflowIdI_I,
            int intPkEleetOrEleeleI_I,
            bool boolIsEleetO_I,
            int intProcessInWorkflowIdO_I,
            int intPkEleetOrEleeleO_I,
            bool boolIsEleetI_I,
            EleeleentityElementElementEntityDB eleeleentityFromDBO_I,
            EleeleentityElementElementEntityDB eleeleentityFromDBI_I,
            String strLink_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO,
            Odyssey2Context context_M
            )
        {
            if (
                //                                          //Same resource.
                (ioentityO_I != null) &&
                (ioentityO_I.intnPkResource != null) &&
                (ioentityO_I.intnGroupResourceId == null) &&
                (ioentityI_I != null) &&
                (ioentityI_I.intnPkResource != null) &&
                (ioentityI_I.intnGroupResourceId == null) &&
                (ioentityO_I.intnPkResource == ioentityI_I.intnPkResource)
            )
            {
                ProdtypProductType.subSuccessLink(intPkWorkflow_I, ioentityI_I, intProcessInWorkflowIdO_I,
                    intPkEleetOrEleeleO_I, boolIsEleetO_I, ioentityO_I, intProcessInWorkflowIdI_I, intPkEleetOrEleeleI_I,
                    boolIsEleetI_I, strLink_O);

                //                                          //If res has calculations, delete them.
                ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityI_I, (int)ioentityI_I.intnPkResource, context_M);

                ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityO_I, (int)ioentityO_I.intnPkResource, context_M);

                ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentityO_I, context_M);

                ProdtypProductType.subDeleteEstimations(intPkWorkflow_I);

                strDevMessage_IO = "The output resource will be the input of the next process.";
                strUserMessage_IO = "The output resource will be the input of the next process.";
                intStatus_IO = 200;
            }
            else if (
                //                                          //Differente resource.
                (ioentityO_I != null) &&
                (ioentityO_I.intnPkResource != null) &&
                (ioentityO_I.intnGroupResourceId == null) &&
                (ioentityI_I != null) &&
                (ioentityI_I.intnPkResource != null) &&
                (ioentityI_I.intnGroupResourceId == null)
                )
            {
                strLink_O = null;
                strDevMessage_IO = "Resources must be the same.";
                strUserMessage_IO = "Resources must be the same.";
                intStatus_IO = 410;
            }
            else if (
                    //                                          //Input resource is null.
                    (ioentityO_I != null) &&
                    (ioentityO_I.intnPkResource != null) &&
                    (ioentityO_I.intnGroupResourceId == null) &&
                    (
                        (ioentityI_I == null) ||
                        ((ioentityI_I != null) && (ioentityI_I.intnPkResource == null) &&
                        (ioentityI_I.intnGroupResourceId == null))
                    )
                )
            {
                //                                          //Template of resO, it may be null.
                int? intnPkResourceO = ioentityO_I.intnPkResource;
                ResResource resO = ResResource.resFromDB(intnPkResourceO, false);
                ResResource resTemplateO = resO.resinherited;

                //                                          //Template of Input side.
                int? intnPkTemplateI = boolIsEleetI_I ? null : (int?)eleeleentityFromDBI_I.intPkElementSon;
                ResResource resTemplateI = boolIsEleetI_I ? null : ResResource.resFromDB(intnPkTemplateI, true);

                strDevMessage_IO = "Resource is not from right template.";
                strUserMessage_IO = "Resource is not from the right template.";
                intStatus_IO = 411;
                if (
                    //                                      //No template in Input side.
                    resTemplateI == null ||
                    //                                      //Input side is template.
                    ((resTemplateI != null) &&
                    //                                      //Resource inherited from a template.
                    (resTemplateO != null) &&
                    //                                      //Both templates are the same.
                    (resTemplateO.intPk == resTemplateI.intPk) &&
                    (resTemplateO.boolIsTemplate == true) &&
                    (resTemplateI.boolIsTemplate == true))
                    )
                {
                    ProdtypProductType.subSuccessLink(intPkWorkflow_I, ioentityI_I, intProcessInWorkflowIdO_I,
                        intPkEleetOrEleeleO_I, boolIsEleetO_I, ioentityO_I, intProcessInWorkflowIdI_I,
                        intPkEleetOrEleeleI_I, boolIsEleetI_I, strLink_O);

                    //                                      //If res has calculations, delete them.
                    ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityO_I, (int)ioentityO_I.intnPkResource, context_M);

                    ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentityO_I, context_M);

                    ProdtypProductType.subDeleteEstimations(intPkWorkflow_I);

                    strDevMessage_IO = "The input resource is set in the output of the previous process.";
                    strUserMessage_IO = "The input resource is set in the output of the previous process.";
                    intStatus_IO = 200;
                }
            }
            else if (
                    //                                      //Output resource is null.
                    (ioentityI_I != null) &&
                    (ioentityI_I.intnPkResource != null) &&
                    (ioentityI_I.intnGroupResourceId == null) &&
                    (
                        (ioentityO_I == null) ||
                        ((ioentityO_I != null) && (ioentityO_I.intnPkResource == null) &&
                        (ioentityO_I.intnGroupResourceId == null))
                    )
                )
            {
                //                                          //Template of resI, it may be null.
                int? intnPkResourceI = ioentityI_I.intnPkResource;
                ResResource resI = ResResource.resFromDB(intnPkResourceI, false);
                ResResource resTemplateI = resI.resinherited;

                //                                          //Template of Output side.
                int? intnPkTemplateO = boolIsEleetO_I ? null : (int?)eleeleentityFromDBO_I.intPkElementSon;
                ResResource resTemplateO = boolIsEleetO_I ? null : ResResource.resFromDB(intnPkTemplateO, true);

                strDevMessage_IO = "Resource is not from the right template.";
                strUserMessage_IO = "Resource is not from the right template.";
                intStatus_IO = 412;
                if (
                    //                                      //No template in Input side.
                    resTemplateO == null ||
                    //                                      //Input side is template.
                    ((resTemplateO != null) &&
                    //                                      //Resource inherited from a template.
                    (resTemplateI != null) &&
                    //                                      //Both templates are the same.
                    (resTemplateO.intPk == resTemplateI.intPk) &&
                    (resTemplateO.boolIsTemplate == true) &&
                    (resTemplateI.boolIsTemplate == true))
                    )
                {
                    ProdtypProductType.subSuccessLink(intPkWorkflow_I, ioentityI_I, intProcessInWorkflowIdO_I,
                        intPkEleetOrEleeleO_I, boolIsEleetO_I, ioentityO_I, intProcessInWorkflowIdI_I,
                        intPkEleetOrEleeleI_I, boolIsEleetI_I, strLink_O);

                    //                                      //If res has calculations, delete them.
                    ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityI_I,
                        (int)ioentityI_I.intnPkResource, context_M);

                    ProdtypProductType.subDeleteEstimations(intPkWorkflow_I);

                    strDevMessage_IO = "The output resource is set in the input of the previous process.";
                    strUserMessage_IO = "The output resource is set in the input of the previous process.";
                    intStatus_IO = 200;
                }
            }
            else if (
               //                                           //Has Resource group in Input and output.
               (ioentityI_I != null) &&
               (ioentityI_I.intnPkResource == null) &&
               (ioentityI_I.intnGroupResourceId != null) &&
               (ioentityO_I != null) &&
               (ioentityO_I.intnPkResource == null) &&
               (ioentityO_I.intnGroupResourceId != null)
               )
            {
                //                                          //Get Resources from Resources group input and output.
                List<GpresentityGroupResourceEntityDB> darrgpresResourceGroupInput =
                    ProdtypProductType.darrgrpresResFromGroup((int)ioentityI_I.intnGroupResourceId);
                List<GpresentityGroupResourceEntityDB> darrgpresResourceGroupOutput =
                    ProdtypProductType.darrgrpresResFromGroup((int)ioentityO_I.intnGroupResourceId);
                //                                          //arr has the same length.
                if (
                    darrgpresResourceGroupInput.Count == darrgpresResourceGroupOutput.Count
                    )
                {
                    if (
                        //                                  //Arr has same resources.
                        ProdtypProductType.boolHasTheSameResourcesInInputAndOutput(darrgpresResourceGroupInput,
                            darrgpresResourceGroupOutput)
                        )
                    {
                        //                                  //Delete Resource group from Input of the table gpres.
                        foreach (GpresentityGroupResourceEntityDB gpresentitInput in darrgpresResourceGroupInput)
                        {
                            context_M.GroupResource.Remove(gpresentitInput);

                            //                              //If res has calculations, delete them.
                            ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityI_I,
                                gpresentitInput.intPkResource, context_M);
                        }
                        //                                  //This save is necessary to delete group resource.
                        context_M.SaveChanges();

                        foreach (GpresentityGroupResourceEntityDB gpresentityOutput in darrgpresResourceGroupOutput)
                        {
                            //                              //If res has calculations, delete them.
                            ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityO_I,
                                gpresentityOutput.intPkResource, context_M);

                            ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentityO_I, context_M);
                        }

                        ProdtypProductType.subSuccessLink(intPkWorkflow_I, ioentityI_I, intProcessInWorkflowIdO_I,
                            intPkEleetOrEleeleO_I, boolIsEleetO_I, ioentityO_I, intProcessInWorkflowIdI_I,
                            intPkEleetOrEleeleI_I, boolIsEleetI_I, strLink_O);

                        ProdtypProductType.subDeleteEstimations(intPkWorkflow_I);

                        strDevMessage_IO = "The output resource group will be the input of the next process.";
                        strUserMessage_IO = "The output resource group will be the input of the next process.";
                        intStatus_IO = 200;
                    }
                    else
                    {
                        strDevMessage_IO = "Resource group must contain the compatible resources.";
                        strUserMessage_IO = "Resource group must contain the compatible resources.";
                        intStatus_IO = 413;
                    }
                }
                else
                {
                    strDevMessage_IO = "arr of resources are not even the same lenght.";
                    strUserMessage_IO = "Resource group must contain compatible resources.";
                    intStatus_IO = 414;
                }
            }
            else if (
                    //                                       //Piw Ouput has Resource group and Input is null.
                    (ioentityO_I != null) &&
                    (ioentityO_I.intnGroupResourceId != null) &&
                    (ioentityO_I.intnPkResource == null) &&
                    (
                        (ioentityI_I == null) ||
                        ((ioentityI_I != null) && (ioentityI_I.intnPkResource == null) &&
                        (ioentityI_I.intnGroupResourceId == null))
                    )
                )
            {
                //                                          //If res has calculations, delete them.
                List<GpresentityGroupResourceEntityDB> darrgpresentityResourceGroupOutput = context_M.GroupResource.Where(
                    gpresentity => gpresentity.intId == ioentityO_I.intnGroupResourceId).ToList();

                if (
                    //                                      //Valid if a resource group is a Type or template.
                    ProdtypProductType.boolIsResourceGroupOfAType(intPkWorkflow_I, intProcessInWorkflowIdI_I,
                    intPkEleetOrEleeleI_I, boolIsEleetI_I, ref darrgpresentityResourceGroupOutput)
                    )
                {
                    foreach (GpresentityGroupResourceEntityDB gpresentityOutput in darrgpresentityResourceGroupOutput)
                    {
                        //                                      //If res has calculations, delete them.
                        ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityO_I,
                            gpresentityOutput.intPkResource, context_M);

                        ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentityO_I, context_M);
                    }

                    ProdtypProductType.subSuccessLink(intPkWorkflow_I, ioentityI_I, intProcessInWorkflowIdO_I,
                        intPkEleetOrEleeleO_I, boolIsEleetO_I, ioentityO_I, intProcessInWorkflowIdI_I,
                        intPkEleetOrEleeleI_I, boolIsEleetI_I, strLink_O);

                    ProdtypProductType.subDeleteEstimations(intPkWorkflow_I);

                    strDevMessage_IO = "The input resource group is set in the output of the previous process.";
                    strUserMessage_IO = "The input resource group is set in the output of the previous process.";
                    intStatus_IO = 200;
                }
                else
                {
                    strDevMessage_IO = "Some resources are not compatible.";
                    strUserMessage_IO = "Some resources are not compatible.";
                    intStatus_IO = 413;
                }
            }
            else if (
                    //                                       //Piw Input has Resource group and Output is null. 
                    (ioentityI_I != null) &&
                    (ioentityI_I.intnGroupResourceId != null) &&
                    (ioentityI_I.intnPkResource == null) &&
                    (
                        (ioentityO_I == null) ||
                        ((ioentityO_I != null) && (ioentityO_I.intnPkResource == null) &&
                        (ioentityO_I.intnGroupResourceId == null))
                    )
                )
            {
                //                                          //If res has calculations, delete them.
                List<GpresentityGroupResourceEntityDB> darrgpresentityResourceGroupInput = context_M.GroupResource.Where(
                    gpresentity => gpresentity.intId == ioentityI_I.intnGroupResourceId).ToList();

                if (
                    //                                      //Valid if a resource group is a Type or template.
                    ProdtypProductType.boolIsResourceGroupOfAType(intPkWorkflow_I, intProcessInWorkflowIdO_I,
                    intPkEleetOrEleeleO_I, boolIsEleetO_I, ref darrgpresentityResourceGroupInput)
                    )
                {
                    foreach (GpresentityGroupResourceEntityDB gpresentityInput in darrgpresentityResourceGroupInput)
                    {
                        //                                  //If res has calculations, delete them.
                        ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityI_I,
                            gpresentityInput.intPkResource, context_M);
                    }

                    ProdtypProductType.subSuccessLink(intPkWorkflow_I, ioentityI_I, intProcessInWorkflowIdO_I,
                        intPkEleetOrEleeleO_I, boolIsEleetO_I, ioentityO_I, intProcessInWorkflowIdI_I,
                        intPkEleetOrEleeleI_I, boolIsEleetI_I, strLink_O);

                    ProdtypProductType.subDeleteEstimations(intPkWorkflow_I);

                    strDevMessage_IO = "The output resource group will be set in the input of the next process.";
                    strUserMessage_IO = "The output resource group will be set in the input of the next process.";
                    intStatus_IO = 200;
                }
                else
                {
                    strDevMessage_IO = "Some resources are not compatible.";
                    strUserMessage_IO = "Some resources are not compatible.";
                    intStatus_IO = 414;
                }
            }
            else if (
               //                                           //Piw Output has resource group and input has resource or
               //                                           //    piw input has resource group and output has resource 
               (
                   //                                       //Ouput PIW has Resource group  and 
                   //                                       //    input PIW has a Resource group.
                   (ioentityO_I != null) &&
                   (ioentityO_I.intnPkResource != null) &&
                   (ioentityO_I.intnGroupResourceId == null) &&
                   (ioentityI_I != null) &&
                   (ioentityI_I.intnGroupResourceId != null) &&
                   (ioentityI_I.intnPkResource == null)
               ) ||
               (
                   //                                       //Io Input PIW has Resource group  and 
                   //                                       //    output PIW has a Resource group.
                   (ioentityI_I != null) &&
                   (ioentityI_I.intnPkResource != null) &&
                   (ioentityI_I.intnGroupResourceId == null) &&
                   (ioentityO_I != null) &&
                   (ioentityO_I.intnGroupResourceId != null) &&
                   (ioentityO_I.intnPkResource == null)
               )
               )
            {
                strDevMessage_IO = "Resource is not compatible with the resource group.";
                strUserMessage_IO = "Resource is not compatible with the resource group.";
                intStatus_IO = 415;
            }
            else
            //                                              //No resources and not Resources Group.
            {
                if (
                    (ioentityI_I == null) && (ioentityO_I == null) ||
                    (
                        (ioentityO_I == null) && (ioentityI_I != null) && (ioentityI_I.intnPkResource == null) &&
                        (ioentityI_I.intnGroupResourceId == null)
                    ) ||
                    (
                        (ioentityI_I == null) && (ioentityO_I != null) && (ioentityO_I.intnPkResource == null) &&
                        (ioentityO_I.intnGroupResourceId == null)
                    )
                )
                {
                    ProdtypProductType.subSuccessLink(intPkWorkflow_I, ioentityI_I, intProcessInWorkflowIdO_I,
                        intPkEleetOrEleeleO_I, boolIsEleetO_I, ioentityO_I, intProcessInWorkflowIdI_I,
                        intPkEleetOrEleeleI_I, boolIsEleetI_I, strLink_O);

                    ProdtypProductType.subDeleteEstimations(intPkWorkflow_I);

                    strDevMessage_IO = "Link set successfully.";
                    strUserMessage_IO = "";
                    intStatus_IO = 200;
                }
            }

            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subSuccessLink(
            int intPkWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentityI_I,
            int intProcessInWorkflowIdO_I,
            int intPkEleetOrEleeleO_I,
            bool boolIsEleetO_I,
            IoentityInputsAndOutputsEntityDB ioentityO_I,
            int intProcessInWorkflowIdI_I,
            int intPkEleetOrEleeleI_I,
            bool boolIsEleetI_I,
            String strLink_O
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Add or Update Input.

            //                                              //Get other sise of the link data.
            int? intnGroupResourceIdO = ioentityO_I != null ? ioentityO_I.intnGroupResourceId : null;
            int? intnPkResourceO = ioentityO_I != null ? ioentityO_I.intnPkResource : null;

            if (
                ioentityI_I == null
                )
            {
                bool? boolnIsFinalProduct = null;
                if (
                    (boolIsEleetI_I &&
                    //                                      //Verify if eleet is an output.
                    ProdtypProductType.boolIsOutput(intPkEleetOrEleeleI_I, null)) ||
                    (!boolIsEleetI_I &&
                    //                                      //Verify if eleele is an output.
                    ProdtypProductType.boolIsOutput(null, intPkEleetOrEleeleI_I))
                    )
                {
                    //                                      //Output Io's default final product's value must be false.
                    boolnIsFinalProduct = false;
                }

                //                                          //Add.
                ProdtypProductType.subAddIO(context, intPkWorkflow_I, intProcessInWorkflowIdI_I, intPkEleetOrEleeleI_I,
                    boolIsEleetI_I, intnPkResourceO, intnGroupResourceIdO, boolnIsFinalProduct, strLink_O, null);
            }
            else
            {
                //                                          //Update.
                IoentityInputsAndOutputsEntityDB ioentityI = context.InputsAndOutputs.FirstOrDefault(io =>
                io.intPk == ioentityI_I.intPk);

                ioentityI.strLink = strLink_O;
                ioentityI.intnPkResource = ioentityI.intnPkResource == null ? intnPkResourceO :
                    ioentityI.intnPkResource;
                ioentityI.intnGroupResourceId = intnGroupResourceIdO;
                context.Update(ioentityI);
            }

            //                                              //Add or Update Output.

            //                                              //Get other sise of the link data.
            int? intnGroupResourceIdI = ioentityI_I != null ? ioentityI_I.intnGroupResourceId : null;
            int? intnPkResourceI = ioentityI_I != null ? ioentityI_I.intnPkResource : null;
            if (
                ioentityO_I == null
                )
            {
                bool? boolnIsFinalProduct = null;
                if (
                    (boolIsEleetO_I &&
                    //                                      //Verify if eleet is an output.
                    ProdtypProductType.boolIsOutput(intPkEleetOrEleeleO_I, null)) ||
                    (!boolIsEleetO_I &&
                    //                                      //Verify if eleele is an output.
                    ProdtypProductType.boolIsOutput(null, intPkEleetOrEleeleO_I))
                    )
                {
                    //                                      //Output Io's default final product's value must be false.
                    boolnIsFinalProduct = false;
                }

                //                                          //Add.
                ProdtypProductType.subAddIO(context, intPkWorkflow_I, intProcessInWorkflowIdO_I, intPkEleetOrEleeleO_I,
                    boolIsEleetO_I, intnPkResourceI, intnGroupResourceIdI, boolnIsFinalProduct, strLink_O, null);
            }
            else
            {
                //                                          //Update.
                IoentityInputsAndOutputsEntityDB ioentityO = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPk == ioentityO_I.intPk);

                ioentityO.strLink = strLink_O;
                ioentityO.intnPkResource = ioentityO.intnPkResource == null ? intnPkResourceI :
                    ioentityO.intnPkResource;
                ioentityO.intnGroupResourceId = ioentityO.intnGroupResourceId == null ? intnGroupResourceIdI :
                    ioentityO.intnGroupResourceId;
                context.Update(ioentityO);
            }

            context.SaveChanges();

            //                                              //Copy paperTransformation register if needed.
            ProdtypProductType.subCopyPaperTransformIsNeeded(boolIsEleetO_I, intPkEleetOrEleeleO_I, intPkWorkflow_I,
                intProcessInWorkflowIdO_I, boolIsEleetI_I, intPkEleetOrEleeleI_I, intnPkResourceO,
                intProcessInWorkflowIdI_I);

        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subCopyPaperTransformIsNeeded(
            //                                              //Verify if because of the link a paper transformations 
            //                                              //      needs to be copy.

            bool boolIsEleetO_I,
            int intPkEleetOrEleeleO_I,
            int intPkWorkflow_I,
            int intProcessInWorkflowIdO_I,
            bool boolIsEleetI_I,
            int intPkEleetOrEleeleI_I,
            int? intnPkResourceO_I,
            int intProcessInWorkflowIdI_I
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //To easy code.
            int? intnPkElementElementTypeO = boolIsEleetO_I ? intPkEleetOrEleeleO_I : (int?)null;
            int? intnPkElementElementO = !boolIsEleetO_I ? intPkEleetOrEleeleO_I : (int?)null;
            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw
                => piw.intPkWorkflow == intPkWorkflow_I && piw.intProcessInWorkflowId == intProcessInWorkflowIdO_I);
            int? intnPkElementElementTypeI = boolIsEleetI_I ? intPkEleetOrEleeleI_I : (int?)null;
            int? intnPkElementElementI = !boolIsEleetI_I ? intPkEleetOrEleeleI_I : (int?)null;

            //                                              //Verify if we need to copy a register from 
            //                                              //      paperTransformation.
            List<PatransPaperTransformationEntityDB> darrpatransentity = context.PaperTransformation.Where(pa
                => pa.intnPkElementElementTypeO == intnPkElementElementTypeO &&
                pa.intnPkElementElementO == intnPkElementElementO &&
                pa.intnPkResourceO == intnPkResourceO_I &&
                pa.intPkProcessInWorkflow == piwentity.intPk).ToList();

            foreach (PatransPaperTransformationEntityDB patransentity in darrpatransentity)
            {
                //                                          //Get the ProcessInWorkflow.
                PiwentityProcessInWorkflowEntityDB piwentityLink = context.ProcessInWorkflow.FirstOrDefault(piw =>
                    piw.intPkWorkflow == intPkWorkflow_I && piw.intProcessInWorkflowId == intProcessInWorkflowIdI_I);

                //                                          //Create new register.
                PatransPaperTransformationEntityDB patransNewO = new PatransPaperTransformationEntityDB
                {
                    numWidthI = patransentity.numWidthI,
                    numnHeightI = patransentity.numnHeightI,
                    numWidthO = patransentity.numWidthO,
                    numHeightO = patransentity.numHeightO,
                    numnMarginTop = patransentity.numnMarginTop,
                    numnMarginBottom = patransentity.numnMarginBottom,
                    numnMarginLeft = patransentity.numnMarginLeft,
                    numnMarginRight = patransentity.numnMarginRight,
                    numnVerticalGap = patransentity.numnVerticalGap,
                    numnHorizontalGap = patransentity.numnHorizontalGap,
                    strUnit = patransentity.strUnit,
                    boolTemporary = false,
                    intnPkCalculationLink = patransentity.intnPkCalculationOwn,
                    intPkProcessInWorkflow = piwentityLink.intPk,
                    intPkResourceI = (int)patransentity.intnPkResourceO,
                    intnPkElementElementTypeI = intnPkElementElementTypeI,
                    intnPkElementElementI = intnPkElementElementI,
                    intnPkElementElementTypeO = null,
                    intnPkElementElementO = null,
                    intnPkResourceO = null
                };
                context.Add(patransNewO);
            }
            context.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subDeleteEstimations(
            //                                              //Delete EstimationData entries. 

            int intPkWorkflowBase_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = context.ProcessInWorkflow.Where(
                    piw => piw.intPkWorkflow == intPkWorkflowBase_I).ToList();

            JobJob.subDeleteEstimationDataEntriesForAWorkflow(context, darrpiwentityAll);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolIsTemp1AndTemp2ExistInSameBranch(
            //                                              //Pk Template 1.
            int intPkTemplate1_I,
            //                                              //Pk Template 2.
            int intPkTemplate2_I,
            //                                              //Pk Type.
            int intPkType_I
            )
        {
            //                                              //Establish conection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get Initial Data, Get all template from this Type.
            List<EleentityElementEntityDB> darreleentityTemplate = context.Element.Where(ele =>
            ele.intPkElementType == intPkType_I && ele.boolIsTemplate == true).ToList();

            bool boolIsExistInSomeBranch = false;

            //                                              //Find temp2 from temp1 in the same branch.
            //                                              //    from temp1 until temp2.
            ProdtypProductType.subFromTemp1LookForTemp2InSomeBranchDown(intPkTemplate1_I, intPkTemplate2_I,
                ref darreleentityTemplate, ref boolIsExistInSomeBranch);

            if (
                //                                          //Not Exist temp2 in the same branch of temp1.
                !boolIsExistInSomeBranch
                )
            {
                //                                          //Find temp1 from temp2 in the same branch.
                //                                          //    from temp2 until temp1.
                ProdtypProductType.subFromTemp1LookForTemp2InSomeBranchDown(intPkTemplate2_I, intPkTemplate1_I,
                    ref darreleentityTemplate, ref boolIsExistInSomeBranch);
            }

            return boolIsExistInSomeBranch;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subFromTemp1LookForTemp2InSomeBranchDown(
            //                                              //Pk Template 1.
            int intPkTemplate1_I,
            //                                              //Pk Template 2.
            int intPkTemplate2_I,
            //                                              //Arr initial of template.
            ref List<EleentityElementEntityDB> darreleentityTemplate_M,
            //                                              //bool same branch.
            ref bool boolIsExistInSomeBranch_IO
            )
        {
            //                                              //Get Template of this current template.
            List<EleentityElementEntityDB> darrTemplatesFromCurrentTemplate = darreleentityTemplate_M.Where(
                ele => ele.intnPkElementInherited == intPkTemplate1_I).ToList();

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Repeat while the Template is not be the last element.
                intI < darrTemplatesFromCurrentTemplate.Count &&
                //                                          //Repeat while No exist.
                boolIsExistInSomeBranch_IO == false
                )
            {
                if (
                    //                                      //Temp2 exist in same branch with temp1.
                    darrTemplatesFromCurrentTemplate[intI].intPk == intPkTemplate2_I
                    )
                {
                    //                                      //Exist.
                    boolIsExistInSomeBranch_IO = true;
                }
                else
                {
                    //                                      //Continue looking down the hierarchy.
                    ProdtypProductType.subFromTemp1LookForTemp2InSomeBranchDown(
                        darrTemplatesFromCurrentTemplate[intI].intPk, intPkTemplate2_I,
                        ref darreleentityTemplate_M, ref boolIsExistInSomeBranch_IO);
                }
                intI = intI + 1;
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static List<GpresentityGroupResourceEntityDB> darrgrpresResFromGroup(
            //                                              //Id Group.
            int intIdGroup_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();
            //                                              //Get all pk resource from Group is.
            List<GpresentityGroupResourceEntityDB> darrgrpresResFromGroupId = context.GroupResource.Where(gpres =>
                gpres.intId == intIdGroup_I).ToList();
            return darrgrpresResFromGroupId;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolHasTheSameResourcesInInputAndOutput(
            //                                              //Note. For compare the lists, the two list should be of 
            //                                              //    the same length.
            //                                              //Resource from group in the input of the PIW.
            List<GpresentityGroupResourceEntityDB> darrgpresResourceGroupInput_I,
            //                                              //Resource from group in the output of the PIW.
            List<GpresentityGroupResourceEntityDB> darrgpresResourceGroupOutput_I
            )
        {
            bool boolSameResources = true;

            //Verify that each resInput exist in darrgpresResourceGroupOutput_I
            int intI = 0;
            /*WHILE-DO*/
            while (
                //                                          //intI is less than length arr. 
                intI < darrgpresResourceGroupOutput_I.Count &&
                //                                          //boolSameResources is true;
                boolSameResources == true
                )
            {
                //                                          //if each resource in output arr group
                //                                          //    exist in arr input resource.
                if (
                    darrgpresResourceGroupInput_I.Exists(gpres =>
                    gpres.intPkResource == darrgpresResourceGroupOutput_I.ElementAt(intI).intPkResource)
                    )
                {
                    boolSameResources = true;
                }
                else
                {
                    boolSameResources = false;
                }
                intI = intI + 1;
            }
            return boolSameResources;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolIsResourceGroupOfAType(
            //                                              //Data of process in workflow.
            int intPkWorkflow_I,
            int intProcessInWorkflowId_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            //                                              //Group resource to validate.
            ref List<GpresentityGroupResourceEntityDB> darrgpresentityResourceGroup_I
            )
        {
            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //var not used.
            int intNotUsed = 0;
            String strNotUsed = "";

            //                                              //It is a resource group valid.
            bool IsResourceGroupOfAType = true;

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Take each resource.
                intI < darrgpresentityResourceGroup_I.Count &&
                //                                          //And each resource is of same type.
                IsResourceGroupOfAType == true
                )
            {
                if (
                    //                                      //It is not resource valid.
                    !(
                    ProdtypProductType.boolDataValid(intPkWorkflow_I, intProcessInWorkflowId_I,
                    darrgpresentityResourceGroup_I[intI].intPkResource, intPkEleetOrEleele_I, boolIsEleet_I,
                    ref intNotUsed, ref strNotUsed, ref strNotUsed)
                    )
                    )
                {
                    IsResourceGroupOfAType = false;
                }
                intI = intI + 1;
            }

            return IsResourceGroupOfAType;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static String strGenerateLink(

            int intPkWorkflow_I,
            out bool boolLinkNameGenerated_O
            )
        {
            boolLinkNameGenerated_O = true;

            Odyssey2Context context = new Odyssey2Context();

            String strNewLink = null;

            IQueryable<String> setstrLink =
                from ioentity in context.InputsAndOutputs
                where ioentity.intPkWorkflow == intPkWorkflow_I && ioentity.strLink != null
                select ioentity.strLink;

            List<String> darrstr = setstrLink.ToList();

            if (
                darrstr.Count > 0
                )
            {
                //                                              //Link name will not be generated if any of the string are "".
                int intI = 0;
                while (
                    (intI < darrstr.Count) &&
                    boolLinkNameGenerated_O
                    )
                {
                    if (
                        (darrstr[intI].Length < 1) &&
                        (darrstr[intI].Length > 2)
                        )
                    {
                        boolLinkNameGenerated_O = false;
                    }
                    intI = intI + 1;
                }

                if (
                    boolLinkNameGenerated_O
                    )
                {
                    //                                          //List of numbers, to see in what number we are,
                    //                                          //      intMaxNumber from 0 to n.
                    List<int> darrintNumbers = new List<int>();
                    foreach (String str in darrstr)
                    {
                        int intNumber;
                        if (
                            str.Length > 1
                            )
                        {
                            intNumber = int.Parse(str.Substring(1));
                            if (
                                !darrintNumbers.Exists(int1 => int1 == intNumber)
                                )
                            {
                                darrintNumbers.Add(intNumber);
                            }
                        }
                    }

                    //                                          //Find intMaxNumber.
                    int intMaxNumber = 0;
                    if (
                        darrintNumbers.Count > 0
                        )
                    {
                        darrintNumbers.Sort();
                        intMaxNumber = darrintNumbers.ElementAt(darrintNumbers.Count - 1);
                    }

                    //                                          //List of letters, to see in what letter of the number 
                    //                                          //      we are, intMaxLetter from A-65 to Z-90.
                    List<int> darrintLetters = new List<int>();
                    foreach (String str in darrstr)
                    {
                        int intNumber = 0;
                        if (
                            str.Length > 1
                            )
                        {
                            intNumber = int.Parse(str.Substring(1));
                        }
                        if (
                            intNumber == intMaxNumber
                            )
                        {
                            int intLetter = str[0];
                            if (
                                !darrintLetters.Exists(int1 => int1 == intLetter)
                                )
                            {
                                darrintLetters.Add(intLetter);
                            }
                        }
                    }

                    //                                          //Find intMaxLetter.
                    darrintLetters.Sort();
                    int intMaxLetter = darrintLetters.ElementAt(darrintLetters.Count - 1);

                    //                                          //Next Letter.
                    bool boolReset = false;
                    int intNextLetter = intMaxLetter + 1;
                    if (
                        intMaxLetter == 90
                        )
                    {
                        intNextLetter = 65;
                        boolReset = true;
                    }

                    //                                          //Next Number.
                    int intNextNumber = intMaxNumber;
                    if (
                        boolReset
                        )
                    {
                        intNextNumber = intMaxNumber + 1;
                        if (
                            intNextNumber > 1000
                            )
                        {
                            boolLinkNameGenerated_O = false;
                        }
                    }
                    if (
                        boolLinkNameGenerated_O
                        )
                    {
                        if (
                            intNextNumber == 0
                            )
                        {
                            strNewLink = ((char)intNextLetter + "");
                        }
                        else
                        {
                            strNewLink = ((char)intNextLetter + "") + (intNextNumber + "");
                        }
                    }
                }
            }
            else
            {
                strNewLink = "A";
            }
            return strNewLink;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddIO(
            Odyssey2Context context_I,
            int intPkWorkflow_I,
            int intProcessInWorkflowId_I,
            int intPkeleetOreleele_I,
            bool boolIsType_I,
            int? intnPkResource_I,
            int? intnGroupResourceId_I,
            bool? boolnIsFinalProduct_I,
            String strLink_I,
            //                                              //strConditionToApply only for node to IO.
            //String strConditionToApply_I,
            ////                                              //strConditionQuantity only for node to IO.
            //String strConditioQuantity_I,
            //bool boolConditionAnd_I,
            GpcondjsonGroupConditionJson gpcondition_I
            )
        {
            if (
                boolIsType_I
                )
            {
                IoentityInputsAndOutputsEntityDB ioentityNew = new
                    IoentityInputsAndOutputsEntityDB
                {
                    intPkWorkflow = intPkWorkflow_I,
                    intnProcessInWorkflowId = intProcessInWorkflowId_I,
                    intnPkElementElementType = intPkeleetOreleele_I,
                    intnPkResource = intnPkResource_I,
                    intnGroupResourceId = intnGroupResourceId_I,
                    boolnIsFinalProduct = boolnIsFinalProduct_I,
                    strLink = strLink_I
                    //strConditionToApply = strConditionToApply_I,
                    //strConditionQuantity = strConditioQuantity_I,
                    //boolConditionAnd = boolConditionAnd_I
                };
                context_I.InputsAndOutputs.Add(ioentityNew);
                context_I.SaveChanges();

                //                                          //Add conditions to necessary tables.
                Tools.subAddCondition(null, null, ioentityNew.intPk, null, gpcondition_I, context_I);
            }
            else
            {
                IoentityInputsAndOutputsEntityDB ioentityNew = new
                    IoentityInputsAndOutputsEntityDB
                {
                    intPkWorkflow = intPkWorkflow_I,
                    intnProcessInWorkflowId = intProcessInWorkflowId_I,
                    intnPkElementElement = intPkeleetOreleele_I,
                    intnPkResource = intnPkResource_I,
                    intnGroupResourceId = intnGroupResourceId_I,
                    boolnIsFinalProduct = boolnIsFinalProduct_I,
                    strLink = strLink_I,
                    //strConditionToApply = strConditionToApply_I,
                    //strConditionQuantity = strConditioQuantity_I,
                    //boolConditionAnd = boolConditionAnd_I
                };
                context_I.InputsAndOutputs.Add(ioentityNew);

                context_I.SaveChanges();

                //                                          //Add conditions to necessary tables.
                Tools.subAddCondition(null, null, ioentityNew.intPk, null, gpcondition_I, context_I);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void GeteleetOreleele(

            Odyssey2Context context_I,

            int intPkEleetOrEleele_I,

            bool boolIsEleet_I,

            out EleetentityElementElementTypeEntityDB eleetentityFromDB_O,

            out EleeleentityElementElementEntityDB eleeleentityFromDB_O
            )
        {
            eleetentityFromDB_O = null;
            eleeleentityFromDB_O = null;

            if (
                boolIsEleet_I
                )
            {
                eleetentityFromDB_O = context_I.ElementElementType.FirstOrDefault(eleetentity =>
                eleetentity.intPk == intPkEleetOrEleele_I);
            }
            else
            {
                eleeleentityFromDB_O = context_I.ElementElement.FirstOrDefault(eteleentity =>
                eteleentity.intPk == intPkEleetOrEleele_I);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void GetIO(
            Odyssey2Context context_I,
            int intPkWorkflow_I,
            int intProcessInWorkflowId_I,
            int intPkeleetOreleele_I,
            bool boolIsEleet_I,
            out IoentityInputsAndOutputsEntityDB ioentity_O
            )
        {
            ioentity_O = null;

            if (
                boolIsEleet_I
                )
            {
                ioentity_O = context_I.InputsAndOutputs.FirstOrDefault(ioentityO =>
                    ioentityO.intPkWorkflow == intPkWorkflow_I &&
                    ioentityO.intnProcessInWorkflowId == intProcessInWorkflowId_I &&
                    ioentityO.intnPkElementElementType == intPkeleetOreleele_I);
            }
            else
            {
                ioentity_O = context_I.InputsAndOutputs.FirstOrDefault(ioentityO =>
                    ioentityO.intPkWorkflow == intPkWorkflow_I &&
                    ioentityO.intnProcessInWorkflowId == intProcessInWorkflowId_I &&
                    ioentityO.intnPkElementElement == intPkeleetOreleele_I);
            }
        }

        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static int GetTypeFromTemplate(

            //                                              //FIX IT.
            int? intnPkTemplate_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(eleentity =>
                eleentity.intPk == intnPkTemplate_I);

            return eleentityTemplate.intPkElementType;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subAddResourceAndCreateGroup(
            //                                              //Add the resource to IO table and/or create the 
            //                                              //      resource group.
            //                                              //Cases:
            //                                              //  1.-If is the first resource just add to IO table.
            //                                              //  2.-If is the second resource create entries in 
            //                                              //      GroupResource table, remove PkResource from IO
            //                                              //      table and add PkGroupResourceId in IO table.
            //                                              //  3.-Third plus resource, just add PkResource in 
            //                                              //      GroupResource table.

            int intPkProcessInWorkflow_I,
            int intPkResource_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            PsPrintShop ps_I,
            out Resjson3ResourceJson3 resjson3_O,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            resjson3_O = null;

            //                                      //Find process in workflow.
            PiwentityProcessInWorkflowEntityDB piwentity = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
            piw.intPk == intPkProcessInWorkflow_I);

            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "No process in workflow found.";
            if (
                piwentity != null
                )
            {
                int intPkWorkflow = piwentity.intPkWorkflow;
                int intProcessInWorkflowId = piwentity.intProcessInWorkflowId;

                WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == intPkWorkflow);

                WfentityWorkflowEntityDB wfentityNew;
                ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I, wfentityBase, context_M, out wfentityNew);

                intPkWorkflow = wfentityNew.intPk;
                int intPkProcess = piwentity.intPkProcess;

                //                                          //Get new PkProcessInWorkflow and list of piw´s.
                WfentityWorkflowEntityDB wfentityLast = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == intPkWorkflow);
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityLast = context_M.ProcessInWorkflow.Where(piw =>
                    piw.intPkWorkflow == intPkWorkflow && piw.intPkProcess == intPkProcess &&
                    piw.intProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                int intPkProcessInWorkflow = piwentity.intPk;
                if (
                    darrpiwentityLast.Count() == 1
                    )
                {
                    intPkProcessInWorkflow = darrpiwentityLast[0].intPk;
                }

                //                                          //To easy code.
                int? intnElementElementType = boolIsEleet_I ? (int?)intPkEleetOrEleele_I : null;
                int? intnElementElement = boolIsEleet_I ? null : (int?)intPkEleetOrEleele_I;

                //                                          //Get the IO.
                IoentityInputsAndOutputsEntityDB ioentity = ioentity =
                    context_M.InputsAndOutputs.FirstOrDefault(ioentity =>
                    ioentity.intnPkElementElementType == intnElementElementType &&
                    ioentity.intnPkElementElement == intnElementElement &&
                    ioentity.intPkWorkflow == intPkWorkflow &&
                    ioentity.intnProcessInWorkflowId == intProcessInWorkflowId);

                bool boolIsIn = ProdtypProductType.boolIsIn(intnElementElementType, intnElementElement, boolIsEleet_I);

                //                                          //Get list of process to verify in EstimationData table in
                //                                          //      order to delete estimation.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = context_M.ProcessInWorkflow.Where(piw =>
                    piw.intPkWorkflow == piwentity.intPkWorkflow).ToList();

                /*CASE*/
                if (
                    //                                      //There is not an entry.
                    (ioentity == null) ||
                    //                                      //There is an entry but without res.
                    ((ioentity != null) && (ioentity.intnPkResource == null) && (ioentity.intnGroupResourceId == null))
                    )
                {
                    ProdtypProductType.subAddFirstResource(intPkWorkflow, intProcessInWorkflowId, intPkResource_I, 
                        intPkEleetOrEleele_I, boolIsEleet_I, intPkProcessInWorkflow, ioentity, ref resjson3_O, context_M,
                        ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);
                    if (
                        intStatus_IO == 200 && boolIsIn
                        )
                    {
                        JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentity);
                    }
                }
                else if (
                    //                                      //There is an entry with a resource.
                    (ioentity != null) && (ioentity.intnPkResource != null)
                    )
                {
                    ProdtypProductType.subAddSecondResource(intPkResource_I, intPkEleetOrEleele_I, boolIsEleet_I, 
                        intPkProcessInWorkflow, ioentity, ref resjson3_O, context_M, ref intStatus_IO, 
                        ref strUserMessage_IO, ref strDevMessage_IO);
                    if (
                        intStatus_IO == 200 && boolIsIn
                        )
                    {
                        JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentity);
                    }
                }
                else if (
                    //                                      //There is an entry with a group set.
                    (ioentity != null) && (ioentity.intnGroupResourceId != null)
                    )
                {
                    ProdtypProductType.subAddResourceToAGroup(intPkResource_I, intPkEleetOrEleele_I, boolIsEleet_I,
                        intPkProcessInWorkflow, ioentity, ref resjson3_O, context_M, ref intStatus_IO, 
                        ref strUserMessage_IO, ref strDevMessage_IO);
                    if (
                        intStatus_IO == 200 && boolIsIn
                        )
                    {
                        JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentity);
                    }
                }
                /*END-CASE*/
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static bool boolIsIn(
            int? intnElementElementType_I,
            int? intnElementElement_I,
            bool boolIsEleet_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Verify if the resource to delete belongs to and IN.
            bool boolIsIn = false;
            if (
                boolIsEleet_I
                )
            {
                EleetentityElementElementTypeEntityDB etentity = context.ElementElementType.FirstOrDefault(
                        et => et.intPk == intnElementElementType_I);
                if (
                    //                                      //Resource it's set in an input.
                    etentity.boolUsage == true
                    )
                {
                    boolIsIn = true;
                }
            }
            else
            {
                EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(
                        ele => ele.intPk == intnElementElement_I);
                if (
                    //                                      //Resource it's set in an input.
                    eleeleentity.boolUsage == true
                    )
                {
                    boolIsIn = true;
                }
            }
            return boolIsIn;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subAddFirstResource(
            //                                              //Add the first resource to an IO.
            //                                              //Verify if the IO has link associated and if it has, set 
            //                                              //      the resource to the IOs linked.

            int intPkWorkflow_I,
            int intProcessInWorkflowId_I,
            int intPkResource_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            int intPkProcessInWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            ref Resjson3ResourceJson3 resjson3_M,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            strDevMessage_IO = "Is not a valid resource.";
            if (
                //                                          //It is a valid resource.
                ProdtypProductType.boolDataValid(intPkWorkflow_I, intProcessInWorkflowId_I,
                    intPkResource_I, intPkEleetOrEleele_I, boolIsEleet_I, ref intStatus_IO, ref strUserMessage_IO,
                    ref strDevMessage_IO)
                )
            {
                /*CASE*/
                if (
                   //                                      //a) Link. No matter if is or not final product.
                   (ioentity_I != null) && (ioentity_I.strLink != null)
                   )
                {
                    //                                      //Get the IOs for update the first resorce.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityToUpdate =
                        ProdtypProductType.GetIOSToUpdateFirstResource(ioentity_I, context_M);

                    foreach (IoentityInputsAndOutputsEntityDB ioentityUpdate in darrioentityToUpdate)
                    {
                        //                                  //Update IO table.
                        ioentityUpdate.intnPkResource = intPkResource_I;
                        context_M.InputsAndOutputs.Update(ioentityUpdate);
                    }
                    context_M.SaveChanges();

                    //                                      //Get data to back.
                    EleentityElementEntityDB eleentity = context_M.Element.FirstOrDefault(ele =>
                        ele.intPk == intPkResource_I);

                    //                                      //To easy code.
                    EtentityElementTypeEntityDB etentityRestyp = context_M.ElementType.FirstOrDefault(et =>
                        et.intPk == eleentity.intPkElementType);

                    String strUnit = strUnitFromEleentityResource(eleentity);

                    bool boolIsPaper = (etentityRestyp.strCustomTypeId == ResResource.strComponent) ||
                        (etentityRestyp.strCustomTypeId == ResResource.strMedia);

                    //                                      //To know if is a Device or MiscConsumable.
                    bool boolIsDeviceOrMiscConsumable =
                        (etentityRestyp.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                        etentityRestyp.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                    String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);

                    resjson3_M = new Resjson3ResourceJson3(intPkWorkflow_I, eleentity.intPk, strResourceName,
                        strUnit, RestypResourceType.boolIsPhysical(etentityRestyp.strClassification),
                        intPkProcessInWorkflow_I, boolIsPaper, boolIsDeviceOrMiscConsumable);

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";

                }
                else if (
                    //                                      //b.1) Final Product without link.
                    (ioentity_I != null) &&

                    //((ioentity_I.boolnIsFinalProduct == true) ||
                    ((ioentity_I.boolnIsFinalProduct != null) ||
                    //                                      //b.2) Media with or without Thickness.
                    (ioentity_I.boolnThickness != null) ||
                    //                                      //b.3) IO set as size.
                    (ioentity_I.boolnSize != null))
                    )
                {
                    //                                      //Get the io to update.
                    IoentityInputsAndOutputsEntityDB ioentityUpdate = context_M.InputsAndOutputs.FirstOrDefault(io =>
                        io.intPk == ioentity_I.intPk);

                    //                                      //Update IO table.
                    ioentityUpdate.intnPkResource = intPkResource_I;
                    context_M.InputsAndOutputs.Update(ioentityUpdate);
                    context_M.SaveChanges();

                    //                                      //Get data to back.
                    EleentityElementEntityDB eleentity = context_M.Element.FirstOrDefault(ele =>
                        ele.intPk == intPkResource_I);

                    //                                      //To easy code.
                    EtentityElementTypeEntityDB etentityRestyp = context_M.ElementType.FirstOrDefault(et =>
                        et.intPk == eleentity.intPkElementType);

                    String strUnit = strUnitFromEleentityResource(eleentity);

                    bool boolIsPaper = (etentityRestyp.strCustomTypeId == ResResource.strComponent) ||
                        (etentityRestyp.strCustomTypeId == ResResource.strMedia);

                    //                                      //To know if is a Device or MiscConsumable.
                    bool boolIsDeviceOrMiscConsumable =
                        (etentityRestyp.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                        etentityRestyp.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                    String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);

                    resjson3_M = new Resjson3ResourceJson3(intPkWorkflow_I, eleentity.intPk, strResourceName,
                        strUnit, RestypResourceType.boolIsPhysical(etentityRestyp.strClassification),
                        intPkProcessInWorkflow_I, boolIsPaper, boolIsDeviceOrMiscConsumable);

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";
                }
                else if (
                    //                                      //c) No link and 
                    ioentity_I == null
                    )
                {
                    //                                      //A new entry is required.

                    //                                      //To easy code.
                    int? intnElementElementType = null;
                    int? intnElementElement = null;
                    if (
                        boolIsEleet_I
                        )
                    {
                        intnElementElementType = intPkEleetOrEleele_I;
                    }
                    else
                    {
                        intnElementElement = intPkEleetOrEleele_I;
                    }

                    bool? boolnIsFinalProduct = null;
                    if (
                        //                                  //Verify if eleet or eleele are outputs.
                        ProdtypProductType.boolIsOutput(intnElementElementType, intnElementElement)
                        )
                    {
                        //                                  //Output Io's default final product's value must be false.
                        boolnIsFinalProduct = false;
                    }

                    ioentity_I = new IoentityInputsAndOutputsEntityDB
                    {
                        intPkWorkflow = intPkWorkflow_I,
                        intnProcessInWorkflowId = intProcessInWorkflowId_I,
                        intnPkElementElementType = intnElementElementType,
                        intnPkElementElement = intnElementElement,
                        intnPkResource = intPkResource_I,
                        intnGroupResourceId = null,
                        boolnIsFinalProduct = boolnIsFinalProduct
                    };
                    context_M.InputsAndOutputs.Add(ioentity_I);
                    context_M.SaveChanges();

                    //                                      //Get data to back.
                    EleentityElementEntityDB eleentity = context_M.Element.FirstOrDefault(ele =>
                        ele.intPk == intPkResource_I);

                    //                                      //To easy code.
                    EtentityElementTypeEntityDB etentityRestyp = context_M.ElementType.FirstOrDefault(et =>
                        et.intPk == eleentity.intPkElementType);

                    String strUnit = strUnitFromEleentityResource(eleentity);

                    bool boolIsPaper = (etentityRestyp.strCustomTypeId == ResResource.strComponent) ||
                        (etentityRestyp.strCustomTypeId == ResResource.strMedia);

                    //                                      //To know if is a Device or MiscConsumable.
                    bool boolIsDeviceOrMiscConsumable =
                        (etentityRestyp.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                        etentityRestyp.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                    String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);

                    resjson3_M = new Resjson3ResourceJson3(intPkWorkflow_I, eleentity.intPk, strResourceName,
                        strUnit, RestypResourceType.boolIsPhysical(etentityRestyp.strClassification),
                        intPkProcessInWorkflow_I, boolIsPaper, boolIsDeviceOrMiscConsumable);

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static List<IoentityInputsAndOutputsEntityDB> GetIOSToUpdateFirstResource(
            //                                              //Find the IOs will be update for the setted
            //                                              //    the resource.

            IoentityInputsAndOutputsEntityDB ioentity_I,
            Odyssey2Context context_M
            )
        {
            //                                              //Get the IOs.
            List<IoentityInputsAndOutputsEntityDB> darrioentityToUpdate = darrioentityToUpdate = context_M.InputsAndOutputs.Where(io =>
                        io.strLink == ioentity_I.strLink && io.intPkWorkflow == ioentity_I.intPkWorkflow &&
                        //                                  //And is note a node.
                        io.intnProcessInWorkflowId != null
                        ).ToList();

            if (
                //                                          //IO is a input.
                ProdtypProductType.BoolIOIsInput(ioentity_I)
                )
            {
                //                                          //IOsProcess Before.
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsBeforeProcessesResult;

                //                                          //IOsNodes Before.
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsBeforeNodesResult;

                //                                          //Get IOs before from ioentity_I.
                ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(ioentity_I,
                    false, true, out darriobefornextjsonIOsBeforeProcessesResult,
                    out darriobefornextjsonIOsBeforeNodesResult, context_M);

                if (
                    //                                      //There are Node before.
                    darriobefornextjsonIOsBeforeNodesResult.Count >= 1
                    )
                {
                    //                                      //Get IOs before from ioentityNode.
                    ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
                        darriobefornextjsonIOsBeforeNodesResult[0].ioentityBeforeOrNext,
                        false, true, out darriobefornextjsonIOsBeforeProcessesResult,
                        out darriobefornextjsonIOsBeforeNodesResult, context_M);

                    if (
                        //                                  //Current IO has not IOProcess or IONode
                        //                                  //    before.
                        darriobefornextjsonIOsBeforeProcessesResult.Count == 0 &&
                        darriobefornextjsonIOsBeforeNodesResult.Count == 0
                        )
                    {
                        //                                  //Init the list.
                        darrioentityToUpdate = new List<IoentityInputsAndOutputsEntityDB>();

                        //                                  //Get the IO with this context.
                        IoentityInputsAndOutputsEntityDB ioentityToUpdate = context_M.InputsAndOutputs.
                            FirstOrDefault(io => io.intPk == ioentity_I.intPk);

                        darrioentityToUpdate.Add(ioentityToUpdate);
                    }
                }
            }

            return darrioentityToUpdate;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool boolHasInitialNodeBeforeForTheWorkflow(
            //                                              //find if there are a node initial from a IO of the process.

            IoentityInputsAndOutputsEntityDB ioentity_I,
            Odyssey2Context context_M
            )
        {
            bool boolHasNodeInitial = false;

            if (
                //                                          //IO is a input.
                ProdtypProductType.BoolIOIsInput(ioentity_I)
                )
            {
                //                                          //IOsProcess Before.
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsBeforeProcessesResult;

                //                                          //IOsNodes Before.
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsBeforeNodesResult;

                //                                          //Get IOs before from ioentity_I.
                ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(ioentity_I,
                    false, true, out darriobefornextjsonIOsBeforeProcessesResult,
                    out darriobefornextjsonIOsBeforeNodesResult, context_M);

                if (
                    //                                      //There are Node before.
                    darriobefornextjsonIOsBeforeNodesResult.Count >= 1
                    )
                {
                    //                                      //Get IOs before from ioentityNode.
                    ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
                        darriobefornextjsonIOsBeforeNodesResult[0].ioentityBeforeOrNext,
                        false, true, out darriobefornextjsonIOsBeforeProcessesResult,
                        out darriobefornextjsonIOsBeforeNodesResult, context_M);

                    if (
                        //                                  //Current IO has not IOProcess or IONode
                        //                                  //    before.
                        darriobefornextjsonIOsBeforeProcessesResult.Count == 0 &&
                        darriobefornextjsonIOsBeforeNodesResult.Count == 0
                        )
                    {
                        boolHasNodeInitial = true;
                    }
                }
            }

            return boolHasNodeInitial;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subAddSecondResource(
            //                                              //Add the second resource to an IO.
            //                                              //Create the group with the current and new resource and
            //                                              //      set the resource to the IO.
            //                                              //Verify if the IO has link associated and if it has, set 
            //                                              //      the group to the IOs linked.

            int intPkResource_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            int intPkProcessInWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            ref Resjson3ResourceJson3 resjson3_M,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 406;
            strUserMessage_IO = "Resource already added.";
            strDevMessage_IO = "";
            if (
                //                                          //Verify current resource is not already set.
                ioentity_I.intnPkResource != intPkResource_I
                )
            {
                strDevMessage_IO = "Is not a valid resource.";
                if (//true
                    ProdtypProductType.boolDataValid(ioentity_I.intPkWorkflow, ioentity_I.intnProcessInWorkflowId,
                    intPkResource_I, intPkEleetOrEleele_I, boolIsEleet_I, ref intStatus_IO, ref strUserMessage_IO,
                    ref strDevMessage_IO)
                    )
                {
                    //                                      //Get the last id from GroupResource table.           
                    int intMaxGroupId = 0;
                    if (
                        context_M.GroupResource.Count() > 0
                        )
                    {
                        intMaxGroupId = context_M.GroupResource.Max(gpresentity => gpresentity.intId);
                    }

                    //                                      //Create the id for this group.
                    int intNewGroupId = intMaxGroupId + 1;

                    //                                      //Create the register in GroupResource table for the 
                    //                                      //      current resource.
                    GpresentityGroupResourceEntityDB gpresentity = new GpresentityGroupResourceEntityDB
                    {
                        intId = intNewGroupId,
                        intPkResource = (int)ioentity_I.intnPkResource,
                        intPkWorkflow = ioentity_I.intPkWorkflow
                    };
                    context_M.GroupResource.Add(gpresentity);
                    context_M.SaveChanges();

                    //                                      //Add new resource to GroupResource table.
                    gpresentity = new GpresentityGroupResourceEntityDB
                    {
                        intId = intNewGroupId,
                        intPkResource = intPkResource_I,
                        intPkWorkflow = ioentity_I.intPkWorkflow
                    };
                    context_M.GroupResource.Add(gpresentity);
                    context_M.SaveChanges();

                    if (
                       //                                   //It is a entry with link.
                       ioentity_I.strLink != null
                       )
                    {
                        bool boolHasInitialNode = ProdtypProductType.boolHasInitialNodeBeforeForTheWorkflow(ioentity_I,
                            context_M);

                        if (
                            //                                      //Verify if there are'nt a node initial before.
                            !boolHasInitialNode
                            )
                        {
                            //                                  //Get the ios with the link.
                            List<IoentityInputsAndOutputsEntityDB> darrioentity = context_M.InputsAndOutputs.Where(
                                io => io.strLink == ioentity_I.strLink && io.intPk != ioentity_I.intPk &&
                                io.intPkWorkflow == ioentity_I.intPkWorkflow &&
                                //                              //Is not a node.
                                io.intnProcessInWorkflowId != null
                                ).ToList();

                            foreach (IoentityInputsAndOutputsEntityDB ioentityUpdate in darrioentity)
                            {
                                if (
                                    ioentityUpdate.intPk != ioentity_I.intPk
                                    )
                                {
                                    //                          //Update IO table.
                                    ioentityUpdate.intnPkResource = null;
                                    ioentityUpdate.intnGroupResourceId = intNewGroupId;
                                    context_M.InputsAndOutputs.Update(ioentityUpdate);
                                }
                            }
                            context_M.SaveChanges();
                        }
                    }

                    //                                      //Update IO table.

                    IoentityInputsAndOutputsEntityDB ioentityToUpdate = context_M.InputsAndOutputs.FirstOrDefault(io =>
                        io.intPk == ioentity_I.intPk);

                    ioentityToUpdate.intnGroupResourceId = intNewGroupId;
                    ioentityToUpdate.intnPkResource = null;
                    context_M.InputsAndOutputs.Update(ioentityToUpdate);

                    //                                      //To easy code.
                    int? intnPkEleEt = null;
                    int? intnPkEleEle = null;
                    if (
                        boolIsEleet_I
                        )
                    {
                        intnPkEleEt = intPkEleetOrEleele_I;
                    }
                    else
                    {
                        intnPkEleEle = intPkEleetOrEleele_I;
                    }

                    //                                      //Find if something is set in job workflow.
                    IojentityInputsAndOutputsForAJobEntityDB iojentity =
                        context_M.InputsAndOutputsForAJob.FirstOrDefault(io => io.intnPkElementElement == intnPkEleEle &&
                        io.intnPkElementElementType == intnPkEleEt &&
                        io.intPkProcessInWorkflow == intPkProcessInWorkflow_I);

                    if (
                        iojentity == null
                        )
                    {
                        //                                  //Find periods in current io.
                        List<PerentityPeriodEntityDB> darrperentity = context_M.Period.Where(per =>
                            per.intnPkElementElementType == intnPkEleEt && per.intnPkElementElement == intnPkEleEle &&
                            per.intProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId &&
                            per.intPkWorkflow == ioentity_I.intPkWorkflow).ToList();

                        foreach (PerentityPeriodEntityDB perentity in darrperentity)
                        {
                            context_M.Period.Remove(perentity);
                        }
                    }
                    context_M.SaveChanges();

                    //                                      //Get data to back.
                    EleentityElementEntityDB eleentity = context_M.Element.FirstOrDefault(ele =>
                        ele.intPk == intPkResource_I);

                    //                                      //To easy code.
                    EtentityElementTypeEntityDB etentityRestyp = context_M.ElementType.FirstOrDefault(et =>
                        et.intPk == eleentity.intPkElementType);

                    String strUnit = strUnitFromEleentityResource(eleentity);

                    bool boolIsPaper = (etentityRestyp.strCustomTypeId == ResResource.strComponent) ||
                        (etentityRestyp.strCustomTypeId == ResResource.strMedia);

                    //                                      //To know if is a Device or MiscConsumable.
                    bool boolIsDeviceOrMiscConsumable =
                        (etentityRestyp.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                        etentityRestyp.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                    String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);

                    resjson3_M = new Resjson3ResourceJson3(ioentity_I.intPkWorkflow, eleentity.intPk,
                        strResourceName, strUnit, RestypResourceType.boolIsPhysical(etentityRestyp.strClassification),
                        intPkProcessInWorkflow_I, boolIsPaper, boolIsDeviceOrMiscConsumable);

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subAddResourceToAGroup(
            //                                              //Add the resource to the group that the IO already has. 
            //                                              //Verify that the resource is not in the group and verify
            //                                              //      that it is a valid resource.

            int intPkResource_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            int intPkProcessInWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            ref Resjson3ResourceJson3 resjson3_M,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                          //Verify if the resource to add is already into the table 
            //                                          //      GroupResource.
            GpresentityGroupResourceEntityDB gpresResourceToAdd = context_M.GroupResource.FirstOrDefault(gpres =>
                gpres.intId == ioentity_I.intnGroupResourceId && gpres.intPkWorkflow == ioentity_I.intPkWorkflow &&
                gpres.intPkResource == intPkResource_I);

            intStatus_IO = 406;
            strUserMessage_IO = "Resource already added.";
            strDevMessage_IO = "";
            if (
                gpresResourceToAdd == null
                )
            {
                strDevMessage_IO = "Is not a valid resource.";
                if (
                    ProdtypProductType.boolDataValid(ioentity_I.intPkWorkflow, ioentity_I.intnProcessInWorkflowId,
                        intPkResource_I, intPkEleetOrEleele_I, boolIsEleet_I, ref intStatus_IO, ref strUserMessage_IO,
                        ref strDevMessage_IO)
                    )
                {
                    //                                  //Add new resource to GroupResource table.
                    GpresentityGroupResourceEntityDB gpresentity = new GpresentityGroupResourceEntityDB
                    {
                        intId = (int)ioentity_I.intnGroupResourceId,
                        intPkResource = (int)intPkResource_I,
                        intPkWorkflow = ioentity_I.intPkWorkflow
                    };
                    context_M.GroupResource.Add(gpresentity);
                    context_M.SaveChanges();

                    //                                  //Get data to back.
                    EleentityElementEntityDB eleentity = context_M.Element.FirstOrDefault(ele =>
                        ele.intPk == intPkResource_I);

                    EtentityElementTypeEntityDB etentityRestyp = context_M.ElementType.FirstOrDefault(et =>
                        et.intPk == eleentity.intPkElementType);

                    String strUnit = strUnitFromEleentityResource(eleentity);

                    bool boolIsPaper = (etentityRestyp.strCustomTypeId == ResResource.strComponent) ||
                        (etentityRestyp.strCustomTypeId == ResResource.strMedia);

                    //                                      //To know if is a Device or MiscConsumable.
                    bool boolIsDeviceOrMiscConsumable =
                        (etentityRestyp.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                        etentityRestyp.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                    String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);

                    resjson3_M = new Resjson3ResourceJson3(ioentity_I.intPkWorkflow, eleentity.intPk,
                        strResourceName, strUnit, RestypResourceType.boolIsPhysical(
                        etentityRestyp.strClassification), intPkProcessInWorkflow_I, boolIsPaper,
                        boolIsDeviceOrMiscConsumable);

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolDataValid(

            //                                              //Support method to validate if the data sent to set a 
            //                                              //      resource is valid.
            int intPkWorkflow_I,
            int? intnProcessInWorkflowId_I,
            int intPkResource_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            bool boolIsValid = false;

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the process in workflow.
            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPkWorkflow == intPkWorkflow_I && piw.intProcessInWorkflowId == intnProcessInWorkflowId_I);

            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "No process in workflow found.";
            if (
                //                                          //Process in workflow does not exist.
                piwentity != null
                )
            {
                //                                          //Get the type or template.
                EleetentityElementElementTypeEntityDB eleetentity = null;
                EleeleentityElementElementEntityDB eleeleentity = null;
                if (
                    boolIsEleet_I
                    )
                {
                    //                                      //Get the type and the template is null.
                    eleetentity = context.ElementElementType.FirstOrDefault(eleet =>
                         eleet.intPk == intPkEleetOrEleele_I);
                }
                else
                {
                    //                                      //Get the template and the type is null.
                    eleeleentity = context.ElementElement.FirstOrDefault(eleele =>
                         eleele.intPk == intPkEleetOrEleele_I);
                }

                intStatus_IO = 403;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "No type or template found.";
                if (
                    //                                      //The type exist and its process is the process of piw.
                    ((eleetentity != null) && (eleetentity.intPkElementDad == piwentity.intPkProcess)) ||
                    ((eleeleentity != null) && (eleeleentity.intPkElementDad == piwentity.intPkProcess))
                    )
                {
                    ResResource res = ResResource.resFromDB(intPkResource_I, false);

                    intStatus_IO = 404;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "No resource found.";
                    if (
                        //                                  //Resource exists.
                        res != null
                        )
                    {
                        List<EleentityElementEntityDB> darreleentityResource = new List<EleentityElementEntityDB>();
                        List<TyportempresjsonTypeOrTemplateResourceJson> darrtyportempresjsonResourcesFromTemp =
                            new List<TyportempresjsonTypeOrTemplateResourceJson>();

                        if (
                            eleetentity != null
                            )
                        {
                            darreleentityResource = context.Element.Where(ele =>
                                ele.intPkElementType == eleetentity.intPkElementTypeSon &&
                                ele.boolIsTemplate == false).ToList();
                        }
                        else
                        {
                            //                      //Get All resources from template and derivate template resources.
                            ResResource.subGetAllResourcesFromTemplateAndDerivateTempResources(
                                eleeleentity.intPkElementSon, ref darrtyportempresjsonResourcesFromTemp, ref context);
                        }

                        intStatus_IO = 406;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "Resource is not from the type or template.";
                        if (
                            //                      //The resource is from the correct type.
                            ((eleetentity != null) &&
                            (darreleentityResource.Exists(ele => ele.intPk == res.intPk))) ||
                            //                      //The resource is from the correct template.
                            ((eleeleentity != null) &&
                            (darrtyportempresjsonResourcesFromTemp.Exists(typeortempres =>
                                typeortempres.intPk == res.intPk)))
                            )
                        {
                            intStatus_IO = 200;
                            strUserMessage_IO = "Success.";
                            strDevMessage_IO = "";
                            boolIsValid = true;
                        }
                    }
                }
            }

            return boolIsValid;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool boolIsOutput(
            //                                              //Find if Eleet or Eleele are outputs by comparing their
            //                                              //      usage values.

            int? intnPkEleet_I,
            int? intnPkEleele_I
            )
        {
            bool boolIsOutput = false;
            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            if (
                //                                          //It is a type.

                intnPkEleet_I != null
                )
            {
                EleetentityElementElementTypeEntityDB eleetentity = context.ElementElementType.FirstOrDefault(
                    eleet => eleet.intPk == intnPkEleet_I);

                if (
                    eleetentity != null &&
                    eleetentity.boolUsage == false
                    )
                {
                    boolIsOutput = true;
                }
            }
            else
            {
                //                                          //It is a template.

                EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(
                    eleele => eleele.intPk == intnPkEleele_I);

                if (
                    eleeleentity != null &&
                    eleeleentity.boolUsage == false
                    )
                {
                    boolIsOutput = true;
                }
            }

            return boolIsOutput;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool boolConditionAndIsValid(
            //                                              //When condition to apply or/and superior and 
            //                                              //      inferior limit come null, boolConditionAnd must be
            //                                              //      True

            String strConditionToApply_I,
            double? numnInferiorLimit_I,
            double? numnSuperiorLimit_I,
            bool boolConditionAnd_I
            )
        {
            bool boolConditionAndIsValid = false;

            if (
                //                                          //Both come null.

                //                                          //No condition to apply.
                ((strConditionToApply_I == null ||
                strConditionToApply_I.Length == 0) &&
                //                                          //Limit does not exist.
                (numnInferiorLimit_I == null &&
                numnSuperiorLimit_I == null)) &&
                //                                          //bool coming false from front.
                boolConditionAnd_I == false
                )
            {
                boolConditionAndIsValid = true;
            }
            else if (
                //                                          //One come null.

                //                                          //No condition to apply.
                ((strConditionToApply_I == null ||
                strConditionToApply_I.Length == 0) ||
                //                                          //Limit does not exist.
                (numnInferiorLimit_I == null &&
                numnSuperiorLimit_I == null)) &&
                //                                          //bool coming true from front.
                boolConditionAnd_I == true
                )
            {
                boolConditionAndIsValid = true;
            }
            else if (
                //                                          //both values were added.

                //                                          //condition to apply.
                (strConditionToApply_I != null &&
                strConditionToApply_I.Length > 0) &&
                //                                          //Limit exists.
                (numnInferiorLimit_I != null ||
                numnSuperiorLimit_I != null) &&
                (boolConditionAnd_I ||
                boolConditionAnd_I == false)
                )
            {
                boolConditionAndIsValid = true;
            }
            else
            {
                //                                          //Do nothing.
            }

            return boolConditionAndIsValid;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subSetFinalProduct(
            //                                              //Set IO-Output as final.
            //                                              //      Unset any other process as final.
            //                                              //      Transform following processes to post-processes.
            //                                              //      Transform this and previous processes to normal
            //                                              //      if it is necessary.

            //                                              //Set IO-Input as final.
            //                                              //      Unset any other process as final.
            //                                              //      Trasnform this and following processes to
            //                                              //      post-processes.
            //                                              //      Tranform previous processes to normal if it
            //                                              //      is necesary.

            //                                              //Unset IO as final.
            //                                              //      All processes are back to normal.

            //                                              //IO information.
            int intPkProcessInWorkflow_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            bool boolIsFinalProduct_I,
            //                                              //Printshop.
            PsPrintShop ps_I,
            bool boolSuperAdmin_I,
            //                                              //Context for the transaction.
            Odyssey2Context context_I,
            //                                              //Returns the PkWorkflow.
            out int intPkWorkflow_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intPkWorkflow_O = -1;

            //                                              //Get piw considering printshop.
            //                                              //(LGF: Porque se requiere usar el ps?)
            PiwentityProcessInWorkflowEntityDB piwentity = (from piwentity1 in context_I.ProcessInWorkflow
                                                            join wfentity in context_I.Workflow
                                                            on piwentity1.intPkWorkflow equals wfentity.intPk
                                                            where piwentity1.intPk == intPkProcessInWorkflow_I &&
                                                            wfentity.intPkPrintshop == ps_I.intPk
                                                            select piwentity1).FirstOrDefault();

            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "No process in workflow found.";
            if (
                //                                          //Process in workflow does not exist.
                piwentity != null
                )
            {
                WfentityWorkflowEntityDB wfentityBase = context_I.Workflow.FirstOrDefault(wf =>
                    wf.intPk == piwentity.intPkWorkflow);

                intStatus_IO = 403;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "The WF generic only can be modified for the administrator.";
                if (
                    (
                    //                                      //The workflow is generic and
                    //                                      //Only can be modified for the 
                    //                                      //  admin(super user.)
                    wfentityBase.boolnGeneric == true &&
                    boolSuperAdmin_I
                    )
                    ||
                    (
                    (wfentityBase.boolnGeneric == null || wfentityBase.boolnGeneric == false)
                    )
                    )
                {
                    WfentityWorkflowEntityDB wfentityNew;
                    ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I, wfentityBase, context_I, out wfentityNew);

                    //                                          //New workflow.
                    int intPkWorkflow = wfentityNew.intPk;
                    intPkWorkflow_O = intPkWorkflow;

                    //                                          //ProcessInWorkflowId.
                    //                                          //Even when piw can be differente for the new workflow,
                    //                                          //      Id is the same.
                    int intProcessInWorkflowId = piwentity.intProcessInWorkflowId;

                    //                                          //Find new piw if workflow was cloned.
                    PiwentityProcessInWorkflowEntityDB piwentityLast = context_I.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPkWorkflow == intPkWorkflow && piw.intProcessInWorkflowId == intProcessInWorkflowId);

                    //                                          //To easy code.
                    int? intnPkElementElementType = null;
                    int? intnPkElementElement = null;
                    EleetentityElementElementTypeEntityDB eleetentity = null;
                    EleeleentityElementElementEntityDB eleeleentity = null;
                    if (
                        boolIsEleet_I
                        )
                    {
                        intnPkElementElementType = intPkEleetOrEleele_I;
                        eleetentity = context_I.ElementElementType.FirstOrDefault(
                            eleet => eleet.intPk == intnPkElementElementType);
                    }
                    else
                    {
                        intnPkElementElement = intPkEleetOrEleele_I;
                        eleeleentity = context_I.ElementElement.FirstOrDefault(
                            eleele => eleele.intPk == intnPkElementElement);
                    }

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Eleet or eleele not found.";
                    if (
                        piwentityLast != null &&
                        ((eleetentity != null && piwentityLast.intPkProcess == eleetentity.intPkElementDad) ||
                        (eleeleentity != null && piwentityLast.intPkProcess == eleeleentity.intPkElementDad))
                        )
                    {
                        //                                      //At this point all incoming data is valid.

                        if (
                            ////////////////////////////////////////////////////////////////////////////////////////////////
                            //                                  //It is an Output.
                            ////////////////////////////////////////////////////////////////////////////////////////////////
                            (eleetentity != null && eleetentity.boolUsage == false) ||
                            (eleeleentity != null && eleeleentity.boolUsage == false)
                            )
                        {
                            //                                  //Set the Output as final.
                            ProdtypProductType.subSetIOOutputAsFinal(ps_I, intPkWorkflow, intProcessInWorkflowId,
                                piwentityLast, intnPkElementElementType, intnPkElementElement, boolIsFinalProduct_I,
                                context_I, ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);
                        }
                        else
                        {
                            ////////////////////////////////////////////////////////////////////////////////////////////////
                            //                                  //It is an Input.
                            ////////////////////////////////////////////////////////////////////////////////////////////////

                            int? intnPkElementElementTypeO = null;
                            int? intnPkElementElementO = null;

                            if (
                                //                              //Set. Means set also one Output as final.
                                boolIsFinalProduct_I
                                )
                            {
                                ProdtypProductType.PickOneIOOutput(intPkWorkflow, intProcessInWorkflowId, piwentityLast,
                                    context_I, out intnPkElementElementTypeO, out intnPkElementElementO);

                                //                                  //Set the Picked Output as final.
                                ProdtypProductType.subSetIOOutputAsFinal(ps_I, intPkWorkflow, intProcessInWorkflowId,
                                    piwentityLast, intnPkElementElementTypeO, intnPkElementElementO, boolIsFinalProduct_I,
                                    context_I, ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);
                            }
                            else
                            {
                                //                              //Unset. Means unset any one Output as final (types & templates).

                                //                              //Unset types.
                                List<EleetentityElementElementTypeEntityDB> darreleetentity =
                                    context_I.ElementElementType.Where(eleet => eleet.intPkElementDad == piwentityLast.intPkProcess &&
                                    eleet.boolUsage == false).ToList();

                                foreach (EleetentityElementElementTypeEntityDB eleetentityO in darreleetentity)
                                {
                                    intnPkElementElementTypeO = eleetentityO.intPk;
                                    ProdtypProductType.subSetIOOutputAsFinal(ps_I, intPkWorkflow, intProcessInWorkflowId,
                                    piwentityLast, intnPkElementElementTypeO, intnPkElementElementO, boolIsFinalProduct_I,
                                    context_I, ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);
                                }

                                //                              //Unset templates.
                                List<EleeleentityElementElementEntityDB> darreleeleentity =
                                    context_I.ElementElement.Where(eleele => eleele.intPkElementDad == piwentityLast.intPkProcess &&
                                    eleele.boolUsage == false).ToList();

                                foreach (EleeleentityElementElementEntityDB eleeleentityO in darreleeleentity)
                                {
                                    intnPkElementElementO = eleeleentityO.intPk;
                                    ProdtypProductType.subSetIOOutputAsFinal(ps_I, intPkWorkflow, intProcessInWorkflowId,
                                    piwentityLast, intnPkElementElementTypeO, intnPkElementElementO, boolIsFinalProduct_I,
                                    context_I, ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);
                                }
                            }

                            //                                  //Set the Input as final.
                            ProdtypProductType.subSetIOInputAsFinal(ps_I, intPkWorkflow, intProcessInWorkflowId,
                                piwentityLast, intnPkElementElementType, intnPkElementElement, boolIsFinalProduct_I,
                                context_I, ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);

                            //                                  //Make this processes, post-processes, if final.
                            piwentityLast.boolIsPostProcess = boolIsFinalProduct_I;
                            context_I.Update(piwentityLast);
                            context_I.SaveChanges();

                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subSetIOOutputAsFinal(
            //                                              //Set an IO (Output) as final.

            PsPrintShop ps_I,
            int intPkWorkflow_I,
            int intProcessInWorkflowId_I,
            PiwentityProcessInWorkflowEntityDB piwentityLast_I,
            int? intnPkElementElementType_I,
            int? intnPkElementElement_I,
            bool boolIsFinalProduct_I,
            Odyssey2Context context_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Get the IO from DB.
            IoentityInputsAndOutputsEntityDB ioentity = context_I.InputsAndOutputs.FirstOrDefault(io =>
                io.intPkWorkflow == intPkWorkflow_I &&
                io.intnProcessInWorkflowId == intProcessInWorkflowId_I &&
                io.intnPkElementElementType == intnPkElementElementType_I &&
                io.intnPkElementElement == intnPkElementElement_I);

            if (
                //                                          //There is no record in the IO table.
                //                                          //This IO does not have a resurce, a link, id not final yet
                //                                          //      is not size, is not media...
                ioentity == null
                )
            {
                //                                          //Add new IO.
                IoentityInputsAndOutputsEntityDB ioentityNew = new IoentityInputsAndOutputsEntityDB
                {
                    intPkWorkflow = intPkWorkflow_I,
                    intnPkElementElementType = intnPkElementElementType_I,
                    intnPkElementElement = intnPkElementElement_I,
                    boolnIsFinalProduct = boolIsFinalProduct_I,
                    intnProcessInWorkflowId = intProcessInWorkflowId_I
                };
                context_I.InputsAndOutputs.Add(ioentityNew);
                context_I.SaveChanges();

                intStatus_IO = 200;
                strUserMessage_IO = "Success.";
                strDevMessage_IO = "";
            }
            else
            {
                //                                          //Record in the IO table already exists.

                /*CASE*/
                if (
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                    //                                      //Unset.
                    //                                      //IO is already a final product and user wants to unset it.
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                    ioentity.boolnIsFinalProduct == true &&
                    boolIsFinalProduct_I == false
                    )
                {
                    //                                      //When useting a final, some post-processes will
                    //                                      //      be now Normal Processes.
                    //                                      //Transform calculations in the outputs are not
                    //                                      //      useful anylonger.
                    ProdtypProductType.subTransformProcessesConnectedToFinalProduct(context_I, piwentityLast_I, false);

                    //                                      //Change final product status.
                    //                                      //There is no need of deleting a record in the IO table,
                    //                                      //because if it was a final, it has link.    
                    ioentity.boolnIsFinalProduct = boolIsFinalProduct_I;
                    context_I.Update(ioentity);
                    context_I.SaveChanges();

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";
                }
                else if (
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                    //                                      //Set.
                    //                                      //IO is not a final product and user wants to set it.
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                    (ioentity.boolnIsFinalProduct == null ||
                    ioentity.boolnIsFinalProduct == false) &&
                    boolIsFinalProduct_I == true
                    )
                {
                    intStatus_IO = 404;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Final product already set.";
                    if (
                        //                                  //Verify if this PIW has already a final product.
                        //                                  //If there's a final product in this wf,
                        //                                  //      user cannot set another.
                        !ProdtypProductType.boolThereIsAFinalProduct(piwentityLast_I, context_I)
                        )
                    {
                        //                                  //Unset size forward.

                        List<IoentityInputsAndOutputsEntityDB> darrioentityWithIOSizeSetted =
                            new List<IoentityInputsAndOutputsEntityDB>();
                        List<int> darrintProcessInWorkflowIDAnalyzed = new List<int>();
                        ProdtypProductType.subGetIOWithSizeAtSameWayForward(ioentity.intPkWorkflow,
                            ioentity, ref darrintProcessInWorkflowIDAnalyzed,
                            ref darrioentityWithIOSizeSetted, context_I);
                        foreach (IoentityInputsAndOutputsEntityDB ioentityMakeIONotSize in darrioentityWithIOSizeSetted)
                        {
                            IoentityInputsAndOutputsEntityDB ioentityIONotSize = ioentityMakeIONotSize;

                            //                              //Make IO as not size.
                            ioentityIONotSize.boolnSize = false;

                            ProdtypProductType.subDeleteCalculationsOfIOAsSize(ioentityIONotSize, context_I);
                        }

                        //                                  //Change final product status.
                        ioentity.boolnIsFinalProduct = boolIsFinalProduct_I;
                        context_I.Update(ioentity);

                        //                                  //When a piw has a final product, the other outputs
                        //                                  //can not have links.
                        //                                  //Delete process's output IO's links except current 
                        //                                  //      IO marked as final product.
                        ProdtypProductType.subDeleteProcessOutputLinks(ps_I, context_I, ioentity, piwentityLast_I);

                        //                                  //Set all processes connected to PIW containing final 
                        //                                  //      product IO as postprocesses.
                        ProdtypProductType.subTransformProcessesConnectedToFinalProduct(context_I, piwentityLast_I,
                            true);
                        //                                  //This save changes is necessary to mark 
                        //                                  //      normal processes as post processes.
                        //                                  //Without this, the following recursive method 
                        //                                  //      won't work properly.
                        context_I.SaveChanges();

                        //                                  //Normal processes that are not final, can not be connected
                        //                                  //      to a postprocess.
                        //                                  //Delete post processes' input links connected to normal
                        //                                  //      processes.
                        ProdtypProductType.subDeleteNormalProcessLinkConnectedToPostProcess(ps_I, context_I,
                            piwentityLast_I);

                        if (
                            //                              //There is a resource
                            ioentity.intnPkResource != null
                            )
                        {
                            //                              //Find the transform calculation for this PIW Eleet and res.
                            List<TrfcalentityTransformCalculationEntityDB> darrtrfcalentity =
                                context_I.TransformCalculation.Where(
                                trfcal => trfcal.intPkProcessInWorkflow == piwentityLast_I.intPk &&
                                trfcal.intnPkElementElementTypeO == intnPkElementElementType_I &&
                                trfcal.intnPkElementElementO == intnPkElementElement_I &&
                                trfcal.intPkResourceO == ioentity.intnPkResource).ToList();

                            foreach (TrfcalentityTransformCalculationEntityDB trfcalentity in darrtrfcalentity)
                            {
                                Tools.subDeleteCondition(null, null, null, trfcalentity.intPk, context_I);
                                context_I.TransformCalculation.Remove(trfcalentity);
                            }
                        }
                        else if (
                            //                              //There is a resource group
                            ioentity.intnGroupResourceId != null
                            )
                        {
                            List<GpresentityGroupResourceEntityDB> darrgpresentity = context_I.GroupResource.Where(
                                gp => gp.intPkWorkflow == piwentityLast_I.intPkWorkflow &&
                                gp.intId == ioentity.intnGroupResourceId).ToList();

                            foreach (GpresentityGroupResourceEntityDB gpresentity in darrgpresentity)
                            {
                                //                          //Find the transform calculation for this PIW Eleet and res.
                                List<TrfcalentityTransformCalculationEntityDB> darrtrfcalentity =
                                    context_I.TransformCalculation.Where(
                                    trfcal => trfcal.intPkProcessInWorkflow == piwentityLast_I.intPk &&
                                    trfcal.intnPkElementElementTypeO == intnPkElementElementType_I &&
                                    trfcal.intnPkElementElementO == intnPkElementElement_I &&
                                    trfcal.intPkResourceO == gpresentity.intPkResource).ToList();

                                foreach (TrfcalentityTransformCalculationEntityDB trfcalentity in darrtrfcalentity)
                                {
                                    Tools.subDeleteCondition(null, null, null, trfcalentity.intPk, context_I);
                                    context_I.TransformCalculation.Remove(trfcalentity);
                                }
                            }
                        }

                        //                                  //Without this save changes, method cannot run.
                        context_I.SaveChanges();

                        intStatus_IO = 200;
                        strUserMessage_IO = "Success.";
                        strDevMessage_IO = "";
                    }
                }
                else
                {
                    //                                      //Do nothing.
                }
                /*END-CASE*/
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subSetIOInputAsFinal(
            //                                              //Set an IO (Input) as final.

            PsPrintShop ps_I,
            int intPkWorkflow_I,
            int intProcessInWorkflowId_I,
            PiwentityProcessInWorkflowEntityDB piwentityLast_I,
            int? intnPkElementElementType_I,
            int? intnPkElementElement_I,
            bool boolIsFinalProduct_I,
            Odyssey2Context context_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Get the IO from DB.
            IoentityInputsAndOutputsEntityDB ioentity = context_I.InputsAndOutputs.FirstOrDefault(io =>
                io.intPkWorkflow == intPkWorkflow_I &&
                io.intnProcessInWorkflowId == intProcessInWorkflowId_I &&
                io.intnPkElementElementType == intnPkElementElementType_I &&
                io.intnPkElementElement == intnPkElementElement_I);

            if (
                //                                          //There is no record in the IO table.
                //                                          //This IO does not have a resurce, a link, id not final yet
                //                                          //      is not size, is not media...
                ioentity == null
                )
            {
                //                                          //Add new IO.
                IoentityInputsAndOutputsEntityDB ioentityNew = new IoentityInputsAndOutputsEntityDB
                {
                    intPkWorkflow = intPkWorkflow_I,
                    intnPkElementElementType = intnPkElementElementType_I,
                    intnPkElementElement = intnPkElementElement_I,
                    boolnIsFinalProduct = boolIsFinalProduct_I,
                    intnProcessInWorkflowId = intProcessInWorkflowId_I
                };
                context_I.InputsAndOutputs.Add(ioentityNew);
                context_I.SaveChanges();

                intStatus_IO = 200;
                strUserMessage_IO = "Success.";
                strDevMessage_IO = "";
            }
            else
            {
                //                                          //Record in the IO table already exists.

                /*CASE*/
                if (
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                    //                                      //Unset.
                    //                                      //IO is already a final product and user wants to unset it.
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                    ioentity.boolnIsFinalProduct == true &&
                    boolIsFinalProduct_I == false
                    )
                {
                    //                                      //Change final product status.
                    //                                      //There is no need of deleting a record in the IO table,
                    //                                      //because if it was a final, it has link.    
                    ioentity.boolnIsFinalProduct = boolIsFinalProduct_I;
                    context_I.Update(ioentity);
                    context_I.SaveChanges();

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";
                }
                else if (
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                    //                                      //Set.
                    //                                      //IO is not a final product and user wants to set it.
                    ////////////////////////////////////////////////////////////////////////////////////////////////////
                    (ioentity.boolnIsFinalProduct == null ||
                    ioentity.boolnIsFinalProduct == false) &&
                    boolIsFinalProduct_I == true
                    )
                {
                    intStatus_IO = 404;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Final product already set.";

                    //                                  //Change final product status.
                    ioentity.boolnIsFinalProduct = boolIsFinalProduct_I;
                    context_I.Update(ioentity);
                    context_I.SaveChanges();

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";
                }
                else
                {
                    //                                      //Do nothing.
                }
                /*END-CASE*/
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void PickOneIOOutput(
            int intPkWorkflow_I,
            int intProcessInWorkflowId_I,
            PiwentityProcessInWorkflowEntityDB piwentityLast_I,
            Odyssey2Context context_I,
            out int? intnPkElementElementTypeO_O,
            out int? intnPkElementElementO_O
            )
        {
            intnPkElementElementTypeO_O = null;
            intnPkElementElementO_O = null;
            bool boolOutputWithLink = false;

            //                                              //Pick an IO that is Output to be set as
            //                                              //      final. If there is one IO with link, pick that.

            //                                              //List of types IO-outputs.
            List<EleetentityElementElementTypeEntityDB> darreleetentity =
                context_I.ElementElementType.Where(eleet => eleet.intPkElementDad == piwentityLast_I.intPkProcess &&
                eleet.boolUsage == false).ToList();

            if (
                darreleetentity.Count > 0
                )
            {
                //                                          //Look in the list of types.
                foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
                {
                    if (
                        //                                  //Output with link not found yet.
                        !boolOutputWithLink
                        )
                    {
                        //                                  //Get the IO from DB.
                        IoentityInputsAndOutputsEntityDB ioentity = context_I.InputsAndOutputs.FirstOrDefault(io =>
                            io.intPkWorkflow == intPkWorkflow_I &&
                            io.intnProcessInWorkflowId == intProcessInWorkflowId_I &&
                            io.intnPkElementElementType == eleetentity.intPk &&
                            io.intnPkElementElement == null);
                        if (
                            ioentity != null
                            )
                        {
                            intnPkElementElementTypeO_O = eleetentity.intPk;
                            boolOutputWithLink = ioentity.strLink != null ? true : false;
                        }
                    }
                }
            }

            if (
                //                                          //If the output does not have link, keep looking.
                !boolOutputWithLink
                )
            {
                //                                          //List of templates IO-outputs.
                List<EleetentityElementElementTypeEntityDB> darreleeleentity =
                    context_I.ElementElementType.Where(eleele =>
                    eleele.intPkElementDad == piwentityLast_I.intPkProcess && eleele.boolUsage == false).ToList();

                if (
                    darreleeleentity.Count > 0
                    )
                {
                    //                                          //Look in the list of templates.
                    foreach (EleetentityElementElementTypeEntityDB eleeleentity in darreleeleentity)
                    {
                        if (
                            //                                  //Output with link not found yet.
                            !boolOutputWithLink
                            )
                        {
                            //                                      //Get the IO from DB.
                            IoentityInputsAndOutputsEntityDB ioentity = context_I.InputsAndOutputs.FirstOrDefault(io =>
                            io.intPkWorkflow == intPkWorkflow_I &&
                            io.intnProcessInWorkflowId == intProcessInWorkflowId_I &&
                            io.intnPkElementElementType == null &&
                            io.intnPkElementElement == eleeleentity.intPk);
                            if (
                                ioentity != null
                                )
                            {
                                intnPkElementElementO_O = eleeleentity.intPk;
                                intnPkElementElementTypeO_O = null;
                                boolOutputWithLink = ioentity.strLink != null ? true : false;
                            }
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subTransformProcessesConnectedToFinalProduct(
            //                                              //Find process's Ios output that have a link and mark all 
            //                                              //      of the processes connected to as post processes.

            Odyssey2Context context_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            bool boolIsPostProcess_I
            )
        {
            //                                              //List containing Pknodes that were already walked.
            List<int> darrintPkNodesAlreadyWalked = new List<int>();

            //                                              //List containing PkPiw that were already walked.
            List<int> darrintPkPIWAlreadyWalked = new List<int>();

            ProdtypProductType.subSetAsPostProcessesToProcessesConnectedToFinalProductRecursive(context_I,
                piwentity_I, null, boolIsPostProcess_I, darrintPkNodesAlreadyWalked, darrintPkPIWAlreadyWalked);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static void subSetAsPostProcessesToProcessesConnectedToFinalProductRecursive(
            Odyssey2Context context_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            bool boolIsPostProcess_I,
            List<int> darrintPkNodesAlreadyWalked_I,
            List<int> darrintPkPIWAlreadyWalked_I
            )
        {
            if (
                //                                          //It is a process.

                piwentity_I != null &&
                ioentityNode_I == null
                )
            {
                //                                          //Find process's ios with link.
                List<IoentityInputsAndOutputsEntityDB> darrioentity = context_I.InputsAndOutputs.Where(
                    io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.strLink != null).ToList();

                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                {
                    //                                      //To easy code.
                    EleetentityElementElementTypeEntityDB eleetentity = null;
                    EleeleentityElementElementEntityDB eleeleentity = null;
                    if (
                        ioentity.intnPkElementElementType != null
                        )
                    {
                        //                                  //Find element element type.
                        eleetentity = context_I.ElementElementType.FirstOrDefault(
                            eleet => eleet.intPk == ioentity.intnPkElementElementType);
                    }
                    else
                    {
                        //                                  //Find element element.
                        eleeleentity = context_I.ElementElement.FirstOrDefault(
                            eleele => eleele.intPk == ioentity.intnPkElementElement);
                    }

                    if (
                        //                                  //It is an output (with link).
                        (eleetentity != null &&
                        eleetentity.boolUsage == false) ||
                        (eleeleentity != null &&
                        eleeleentity.boolUsage == false)
                        )
                    {
                        //                                  //Find otherside of the link.
                        List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide =
                            context_I.InputsAndOutputs.Where(io => io.intPkWorkflow == ioentity.intPkWorkflow &&
                            io.strLink == ioentity.strLink &&
                            io.intPk != ioentity.intPk).ToList();

                        int intI = 0;
                        bool boolThereIsANode = false;
                        IoentityInputsAndOutputsEntityDB ioentityNodeFound = null;
                        /*WHILE-DO*/
                        while (
                            intI < darrioentityOtherSide.Count &&
                            !boolThereIsANode
                            )
                        {
                            if (
                                //                          //Connection to node.
                                ProdtypProductType.boolIsTheIOANode(darrioentityOtherSide[intI])
                                )
                            {
                                boolThereIsANode = true;
                                ioentityNodeFound = darrioentityOtherSide[intI];
                            }

                            intI = intI + 1;
                        }

                        if (
                            //                              //There is a node among processes.
                            boolThereIsANode
                            )
                        {
                            if (
                                //                          //Avoid going through the same node.
                                !darrintPkNodesAlreadyWalked_I.Contains(ioentityNodeFound.intPk)
                                )
                            {
                                //                          //Add node to memory.
                                darrintPkNodesAlreadyWalked_I.Add(ioentityNodeFound.intPk);

                                subSetAsPostProcessesToProcessesConnectedToFinalProductRecursive(context_I, null,
                                    ioentityNodeFound, boolIsPostProcess_I, darrintPkNodesAlreadyWalked_I,
                                    darrintPkPIWAlreadyWalked_I);
                            }
                        }
                        else
                        {
                            //                              //Process to process.

                            //                              //Find the other process with link.
                            PiwentityProcessInWorkflowEntityDB piwentityOtherSide =
                                context_I.ProcessInWorkflow.FirstOrDefault(piw =>
                                piw.intPkWorkflow == darrioentityOtherSide[0].intPkWorkflow &&
                                piw.intProcessInWorkflowId == darrioentityOtherSide[0].intnProcessInWorkflowId);

                            if (
                                piwentityOtherSide != null
                                )
                            {
                                if (
                                    //                      //Avoid going through the same PIW.
                                    !darrintPkPIWAlreadyWalked_I.Contains(piwentityOtherSide.intPk)
                                    )
                                {
                                    //                      //Add PIW to memory.
                                    darrintPkPIWAlreadyWalked_I.Add(piwentityOtherSide.intPk);

                                    //                      //Make process post process or normal process 
                                    //                      //      depending on bool.
                                    piwentityOtherSide.boolIsPostProcess = boolIsPostProcess_I;
                                    context_I.Update(piwentityOtherSide);

                                    ProdtypProductType.subMakePIWIOsNotFinalProduct(context_I,
                                        piwentityOtherSide);

                                    //                      //Do the same with the opposite process.
                                    subSetAsPostProcessesToProcessesConnectedToFinalProductRecursive(context_I,
                                        piwentityOtherSide, null, boolIsPostProcess_I, darrintPkNodesAlreadyWalked_I,
                                        darrintPkPIWAlreadyWalked_I);
                                }
                            }
                        }
                    }
                }
            }
            else if (
                //                                          //It is a node.

                piwentity_I == null &&
                ioentityNode_I != null
                )
            {
                //                                          //Elements connected to node.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwProcessesConnectedToNode;
                List<IoentityInputsAndOutputsEntityDB> darrioentityNodesConnectedToNode;
                ProdtypProductType.subElementsConnectedToNodeFinalProduct(ioentityNode_I, context_I,
                    out darrpiwProcessesConnectedToNode, out darrioentityNodesConnectedToNode);

                foreach (PiwentityProcessInWorkflowEntityDB piwentityProcess in darrpiwProcessesConnectedToNode)
                {
                    if (
                        //                                  //Avoid going through the same PIW.
                        !darrintPkPIWAlreadyWalked_I.Contains(piwentityProcess.intPk)
                        )
                    {
                        //                                  //Add PIW to memory.
                        darrintPkPIWAlreadyWalked_I.Add(piwentityProcess.intPk);

                        //                                  //Make process post process or normal process depending on
                        //                                  //      bool.
                        piwentityProcess.boolIsPostProcess = boolIsPostProcess_I;
                        context_I.Update(piwentityProcess);
                    }

                    ProdtypProductType.subMakePIWIOsNotFinalProduct(context_I, piwentityProcess);

                    //                                      //Do the same with the opposite process.
                    subSetAsPostProcessesToProcessesConnectedToFinalProductRecursive(context_I, piwentityProcess,
                        null, boolIsPostProcess_I, darrintPkNodesAlreadyWalked_I, darrintPkPIWAlreadyWalked_I);
                }

                foreach (IoentityInputsAndOutputsEntityDB ioentityOutputNode in darrioentityNodesConnectedToNode)
                {
                    //                                      //Do the same with the opposite node.
                    subSetAsPostProcessesToProcessesConnectedToFinalProductRecursive(context_I, null,
                        ioentityOutputNode, boolIsPostProcess_I, darrintPkNodesAlreadyWalked_I,
                        darrintPkPIWAlreadyWalked_I);
                }
            }
            else
            {
                //                                          //Do nothing.
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static void subElementsConnectedToNodeFinalProduct(
            //                                              //Find process or nodes connected to a node.

            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            Odyssey2Context context_I,
            //                                              //Node to processes.
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesConnectedToNode_O,
            //                                              //Node to nodes.
            out List<IoentityInputsAndOutputsEntityDB> darrioentityNodesToNode_O
            )
        {
            //                                              //List that will hold processes.       
            darrpiwentityProcessesConnectedToNode_O = new List<PiwentityProcessInWorkflowEntityDB>();

            //                                              //List that will hold nodes connected to node.
            darrioentityNodesToNode_O = new List<IoentityInputsAndOutputsEntityDB>();

            //                                              //Find ios sharing the same link.

            List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide = context_I.InputsAndOutputs.Where(io =>

                io.intPkWorkflow == ioentityNode_I.intPkWorkflow &&
                io.strLink == ioentityNode_I.strLink &&
                io.intPk != ioentityNode_I.intPk).ToList();

            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityOtherSide)
            {
                //                                          //To easy code.
                EleetentityElementElementTypeEntityDB eleetentity = null;
                EleeleentityElementElementEntityDB eleeleentity = null;
                if (
                    ioentity.intnPkElementElementType != null
                    )
                {
                    //                                      //Find element element type.
                    eleetentity = context_I.ElementElementType.FirstOrDefault(
                        eleet => eleet.intPk == ioentity.intnPkElementElementType);
                }
                else
                {
                    //                                      //Find element element.
                    eleeleentity = context_I.ElementElement.FirstOrDefault(
                        eleele => eleele.intPk == ioentity.intnPkElementElement);
                }

                if (
                    //                                      //It is an Io input.
                    (eleetentity != null &&
                    eleetentity.boolUsage) ||
                    (eleeleentity != null &&
                    eleeleentity.boolUsage)
                    )
                {
                    //                                      //Find process.
                    PiwentityProcessInWorkflowEntityDB piwentity = context_I.ProcessInWorkflow.FirstOrDefault(
                        piw => piw.intPkWorkflow == ioentity.intPkWorkflow &&
                        piw.intProcessInWorkflowId == ioentity.intnProcessInWorkflowId);

                    if (
                        piwentity != null
                        )
                    {
                        darrpiwentityProcessesConnectedToNode_O.Add(piwentity);
                    }
                }
            }

            //                                              //Find links among nodes.
            List<LinknodLinkNodeEntityDB> darrlinknodNodesConnectedToNode = context_I.LinkNode.Where(link =>
                link.intPkNodeO == ioentityNode_I.intPk).ToList();

            foreach (LinknodLinkNodeEntityDB ioentityNode in darrlinknodNodesConnectedToNode)
            {
                //                                          //Find output node.
                IoentityInputsAndOutputsEntityDB ioentityNodeOutput = context_I.InputsAndOutputs.FirstOrDefault(
                    io => io.intPk == ioentityNode.intPkNodeI);

                if (
                    ioentityNodeOutput != null
                    )
                {
                    darrioentityNodesToNode_O.Add(ioentityNodeOutput);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static void subMakePIWIOsNotFinalProduct(
            //                                              //Find all of the process in workflow's IOs and 
            //                                              //      change their boolIsFinalProduct to false.

            Odyssey2Context context_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I
            )
        {
            //                                              //Find PIW's IOs.
            List<IoentityInputsAndOutputsEntityDB> darrioentity = context_I.InputsAndOutputs.Where(io =>
                io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId).ToList();

            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
            {
                ioentity.boolnIsFinalProduct = false;
                context_I.Update(ioentity);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subDeleteProcessOutputLinks(
            //                                              //Delete output IOs' links except the one marked as final
            //                                              //      product.

            PsPrintShop ps_I,
            Odyssey2Context context_I,
            //                                              //Current IO marked as final product.
            IoentityInputsAndOutputsEntityDB ioentityExcludedIO_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I
            )
        {
            //                                              //Find process's ios with link.
            List<IoentityInputsAndOutputsEntityDB> darrioentity = context_I.InputsAndOutputs.Where(
                io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                io.strLink != null &&
                //                                          //Avoid finding current IO marked as final product.
                io.intPk != ioentityExcludedIO_I.intPk).ToList();

            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
            {
                //                                          //To easy code.
                EleetentityElementElementTypeEntityDB eleetentity = null;
                EleeleentityElementElementEntityDB eleeleentity = null;
                if (
                    ioentity.intnPkElementElementType != null
                    )
                {
                    //                                      //Find element element type.
                    eleetentity = context_I.ElementElementType.FirstOrDefault(
                        eleet => eleet.intPk == ioentity.intnPkElementElementType);
                }
                else
                {
                    //                                      //Find element element.
                    eleeleentity = context_I.ElementElement.FirstOrDefault(
                        eleele => eleele.intPk == ioentity.intnPkElementElement);
                }

                if (
                    //                                      //It is an output (with link).
                    (eleetentity != null &&
                    eleetentity.boolUsage == false) ||
                    (eleeleentity != null &&
                    eleeleentity.boolUsage == false)
                    )
                {
                    //                                      //Find other side of the link.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide = context_I.InputsAndOutputs.Where(
                        io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                        io.strLink == ioentity.strLink &&
                        //                                  //Avoid finding current IO.
                        io.intPk != ioentity.intPk).ToList();

                    if (
                        //                                  //IO to IO
                        darrioentityOtherSide.Count == 1
                        )
                    {
                        //                                  //Create object to unlink.
                        IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexjson =
                            new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentity, darrioentityOtherSide[0]);
                        //                                  //Create list.
                        List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexjson =
                            new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();
                        darriobefornexjson.Add(iobefornexjson);
                        //                                  //Unlink.
                        ProdtypProductType.subIOsExtendToUnlink(darriobefornexjson, context_I);
                    }
                    else if (
                        //                                  //IO to node.
                        darrioentityOtherSide.Count > 1
                        )
                    {
                        //                                  //Find node.
                        IoentityInputsAndOutputsEntityDB ioentityNode = darrioentityOtherSide.FirstOrDefault(
                            io => io.intnProcessInWorkflowId == null && io.intnPkElementElement == null &&
                            io.intnPkElementElementType == null);

                        if (
                            ioentityNode != null
                            )
                        {
                            //                              //Create object to unlink.
                            IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexjson =
                                new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentity, ioentityNode);
                            //                              //Create list.
                            List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexjson =
                                new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();
                            darriobefornexjson.Add(iobefornexjson);
                            //                              //Unlink.
                            ProdtypProductType.subIOsExtendToUnlink(darriobefornexjson, context_I);
                        }
                    }
                    else
                    {
                        //                                  //Do nothing.
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static void subDeleteNormalProcessLinkConnectedToPostProcess(
            PsPrintShop ps_I,
            Odyssey2Context context_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I
            )
        {
            //                                              //List containing Pknodes that were already walked.
            List<int> darrintPkNodesAlreadyWalked = new List<int>();

            //                                              //List containing PkPiw that were already walked.
            List<int> darrintPkPIWAlreadyWalked = new List<int>();

            ProdtypProductType.subDeleteNormalProcessLinkConnectedToPostProcessRecursive(ps_I, context_I, piwentity_I,
                null, darrintPkNodesAlreadyWalked, darrintPkPIWAlreadyWalked);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static void subDeleteNormalProcessLinkConnectedToPostProcessRecursive(
            PsPrintShop ps_I,
            Odyssey2Context context_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            List<int> darrintPkNodesAlreadyWalked_M,
            List<int> darrintPkPIWAlreadyWalked_M
            )
        {
            if (
                //                                          //It is a process.

                piwentity_I != null &&
                ioentityNode_I == null
                )
            {
                //                                          //Find process's ios with link.
                List<IoentityInputsAndOutputsEntityDB> darrioentity = context_I.InputsAndOutputs.Where(
                    io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.strLink != null).ToList();

                if (
                    //                                      //Avoid considering PIW containing final product
                    //                                      //      because before this PIW, all processes are normal.
                    !ProdtypProductType.boolThereIsAFinalProduct(piwentity_I, context_I)
                    )
                {
                    //                                      //A normal processes cannot be linked to a post process
                    //                                      //      that's why this method will look for those 
                    //                                      //      incorrect links and delete them.
                    ProdtypProductType.subDeleteInputIOLinkConnectedToNormalProcess(ps_I, context_I, darrioentity);
                }

                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                {
                    //                                      //To easy code.
                    EleetentityElementElementTypeEntityDB eleetentity = null;
                    EleeleentityElementElementEntityDB eleeleentity = null;
                    if (
                        ioentity.intnPkElementElementType != null
                        )
                    {
                        //                                  //Find element element type.
                        eleetentity = context_I.ElementElementType.FirstOrDefault(
                            eleet => eleet.intPk == ioentity.intnPkElementElementType);
                    }
                    else
                    {
                        //                                  //Find element element.
                        eleeleentity = context_I.ElementElement.FirstOrDefault(
                            eleele => eleele.intPk == ioentity.intnPkElementElement);
                    }

                    if (
                        //                                  //It is an output (with link).
                        (eleetentity != null &&
                        eleetentity.boolUsage == false) ||
                        (eleeleentity != null &&
                        eleeleentity.boolUsage == false)
                        )
                    {
                        //                                  //Find otherside of the link.
                        List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide =
                            context_I.InputsAndOutputs.Where(io => io.intPkWorkflow == ioentity.intPkWorkflow &&
                            io.strLink == ioentity.strLink &&
                            io.intPk != ioentity.intPk).ToList();

                        int intI = 0;
                        bool boolThereIsANode = false;
                        IoentityInputsAndOutputsEntityDB ioentityNodeFound = null;
                        /*WHILE-DO*/
                        while (
                            intI < darrioentityOtherSide.Count &&
                            !boolThereIsANode
                            )
                        {
                            if (
                                //                          //Connection to node.
                                ProdtypProductType.boolIsTheIOANode(darrioentityOtherSide[intI])
                                )
                            {
                                boolThereIsANode = true;
                                ioentityNodeFound = darrioentityOtherSide[intI];
                            }

                            intI = intI + 1;
                        }

                        if (
                            //                              //There is a node among processes.
                            boolThereIsANode
                            )
                        {
                            if (
                                //                          //Avoid going through the same node.
                                !darrintPkNodesAlreadyWalked_M.Contains(ioentityNodeFound.intPk)
                                )
                            {
                                //                          //Delete normal processes links connected to node where
                                //                          //      a post process is connected to.
                                ProdtypProductType.subDeleteIOLinksConnectedToNode(ps_I, context_I, ioentityNodeFound);

                                //                          //Add node to memory.
                                darrintPkNodesAlreadyWalked_M.Add(ioentityNodeFound.intPk);

                                ProdtypProductType.subDeleteNormalProcessLinkConnectedToPostProcessRecursive(ps_I,
                                    context_I, null, ioentityNodeFound, darrintPkNodesAlreadyWalked_M,
                                    darrintPkPIWAlreadyWalked_M);
                            }
                        }
                        else
                        {
                            //                              //Process to process.

                            //                              //Find the other process with link.
                            PiwentityProcessInWorkflowEntityDB piwentityOtherSide =
                                context_I.ProcessInWorkflow.FirstOrDefault(piw =>
                                piw.intPkWorkflow == darrioentityOtherSide[0].intPkWorkflow &&
                                piw.intProcessInWorkflowId == darrioentityOtherSide[0].intnProcessInWorkflowId);

                            if (
                                piwentityOtherSide != null
                                )
                            {
                                if (
                                    //                      //Avoid going through the same PIW.
                                    !darrintPkPIWAlreadyWalked_M.Contains(piwentityOtherSide.intPk)
                                    )
                                {
                                    //                      //Add PIW to memory.
                                    darrintPkPIWAlreadyWalked_M.Add(piwentityOtherSide.intPk);

                                    ProdtypProductType.subMakePIWIOsNotFinalProduct(context_I,
                                        piwentityOtherSide);

                                    //                      //Do the same with the opposite process.
                                    ProdtypProductType.subDeleteNormalProcessLinkConnectedToPostProcessRecursive
                                        (ps_I, context_I, piwentityOtherSide, null, darrintPkNodesAlreadyWalked_M,
                                        darrintPkPIWAlreadyWalked_M);
                                }
                            }
                        }
                    }
                }
            }
            else if (
                //                                          //It is a node.

                piwentity_I == null &&
                ioentityNode_I != null
                )
            {
                //                                          //Elements connected to node.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwProcessesConnectedToNode;
                List<IoentityInputsAndOutputsEntityDB> darrioentityNodesConnectedToNode;
                ProdtypProductType.subElementsConnectedToNodeFinalProduct(ioentityNode_I, context_I,
                    out darrpiwProcessesConnectedToNode, out darrioentityNodesConnectedToNode);

                foreach (PiwentityProcessInWorkflowEntityDB piwentityProcess in darrpiwProcessesConnectedToNode)
                {
                    ProdtypProductType.subMakePIWIOsNotFinalProduct(context_I, piwentityProcess);

                    //                                      //Do the same with the opposite process.
                    ProdtypProductType.subDeleteNormalProcessLinkConnectedToPostProcessRecursive(ps_I, context_I,
                        piwentityProcess, null, darrintPkNodesAlreadyWalked_M, darrintPkPIWAlreadyWalked_M);
                }

                foreach (IoentityInputsAndOutputsEntityDB ioentityOutputNode in darrioentityNodesConnectedToNode)
                {
                    //                                      //Delete normal processes links connected to node where
                    //                                      //      a post process is connected to.
                    ProdtypProductType.subDeleteIOLinksConnectedToNode(ps_I, context_I, ioentityOutputNode);

                    //                                      //Do the same with the opposite node.
                    ProdtypProductType.subDeleteNormalProcessLinkConnectedToPostProcessRecursive(ps_I, context_I, null,
                        ioentityOutputNode, darrintPkNodesAlreadyWalked_M, darrintPkPIWAlreadyWalked_M);
                }
            }
            else
            {
                //                                          //Do nothing.
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static void subDeleteInputIOLinkConnectedToNormalProcess(
            //                                              //Delete post process's input IO links that are connected
            //                                              //      to a normal process or a node connected to a normal
            //                                              //      process.

            PsPrintShop ps_I,
            Odyssey2Context context_I,
            //                                              //Piw IOs with link.
            List<IoentityInputsAndOutputsEntityDB> darrioentity_I
           )
        {
            //                                              //Find input IOs.

            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity_I)
            {
                //                                          //To easy code.
                EleetentityElementElementTypeEntityDB eleetentity = null;
                EleeleentityElementElementEntityDB eleeleentity = null;
                if (
                    ioentity.intnPkElementElementType != null
                    )
                {
                    //                                      //Find element element type.
                    eleetentity = context_I.ElementElementType.FirstOrDefault(
                        eleet => eleet.intPk == ioentity.intnPkElementElementType);
                }
                else
                {
                    //                                      //Find element element.
                    eleeleentity = context_I.ElementElement.FirstOrDefault(
                        eleele => eleele.intPk == ioentity.intnPkElementElement);
                }

                if (
                    //                                      //It is an input (with link).
                    (eleetentity != null &&
                    eleetentity.boolUsage == true) ||
                    (eleeleentity != null &&
                    eleeleentity.boolUsage == true)
                    )
                {
                    //                                      //Verify if otherside of the link is a post process, a 
                    //                                      //      process with final product or a node connected
                    //                                      //      to a final product.

                    //                                      //Find otherside of the link.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide =
                        context_I.InputsAndOutputs.Where(io => io.intPkWorkflow == ioentity.intPkWorkflow &&
                        io.strLink == ioentity.strLink &&
                        io.intPk != ioentity.intPk).ToList();

                    if (
                        //                                  //It is connected to a node.
                        darrioentityOtherSide.Count > 1 ||
                        (darrioentityOtherSide.Count == 1 &&
                        darrioentityOtherSide[0].intnProcessInWorkflowId == null &&
                        darrioentityOtherSide[0].intnPkElementElementType == null &&
                         darrioentityOtherSide[0].intnPkElementElement == null)
                        )
                    {
                        //                                  //Find node.
                        IoentityInputsAndOutputsEntityDB ioentityNodeOtherSide = darrioentityOtherSide.FirstOrDefault(
                            io => io.intnProcessInWorkflowId == null && io.intnPkElementElementType == null &&
                            io.intnPkElementElement == null &&
                            io.strLink == ioentity.strLink);

                        if (
                            ioentityNodeOtherSide != null
                            )
                        {
                            if (
                                //                          //Processes connected to node are not post processes or 
                                //                          //      have no final product.
                                !ProdtypProductType.boolThereIsAFinalProductInPreviousProcessesRecursive(null,
                                ioentityNodeOtherSide, context_I)
                                )
                            {
                                //                          //Create object to unlink.
                                IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexjson =
                                    new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentityNodeOtherSide,
                                    ioentity);
                                //                          //Create list.
                                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexjson =
                                    new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();
                                darriobefornexjson.Add(iobefornexjson);
                                //                          //Unlink.
                                ProdtypProductType.subIOsExtendToUnlink(darriobefornexjson, context_I);
                            }
                        }
                    }
                    else if (
                        //                                  //It is connected to a process.
                        darrioentityOtherSide.Count == 1 &&
                        darrioentityOtherSide[0].intnProcessInWorkflowId != null
                        )
                    {
                        //                                  //Find process in workflow.
                        PiwentityProcessInWorkflowEntityDB piwentityOtherSide =
                            context_I.ProcessInWorkflow.FirstOrDefault(piw =>
                            piw.intPkWorkflow == darrioentityOtherSide[0].intPkWorkflow &&
                            piw.intProcessInWorkflowId == darrioentityOtherSide[0].intnProcessInWorkflowId);

                        if (
                            piwentityOtherSide != null
                            )
                        {
                            if (
                                //                          //Does not contain final product.
                                !ProdtypProductType.boolThereIsAFinalProduct(piwentityOtherSide, context_I) &&
                                //                          //It is a normal process.
                                piwentityOtherSide.boolIsPostProcess == false
                                )
                            {
                                //                          //Create object to unlink.
                                IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexjson =
                                    new IobefornexjsonInputsAndOutputsBeforeOrNextJson(darrioentityOtherSide[0],
                                    ioentity);
                                //                          //Create list.
                                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexjson =
                                    new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();
                                darriobefornexjson.Add(iobefornexjson);
                                //                          //Unlink.
                                ProdtypProductType.subIOsExtendToUnlink(darriobefornexjson, context_I);
                            }
                        }
                    }
                    else
                    {
                        //                                  //Do nothing.
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static void subDeleteIOLinksConnectedToNode(
            //                                              //Delete post process's input IO links that are connected
            //                                              //      to a normal process or a node connected to a normal
            //                                              //      process.

            PsPrintShop ps_I,
            Odyssey2Context context_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I
           )
        {
            //                                              //Find ios sharing the same link.
            List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide = context_I.InputsAndOutputs.Where(io =>
                io.intPkWorkflow == ioentityNode_I.intPkWorkflow &&
                io.strLink == ioentityNode_I.strLink &&
                io.intPk != ioentityNode_I.intPk).ToList();

            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityOtherSide)
            {
                //                                          //To easy code.
                EleetentityElementElementTypeEntityDB eleetentity = null;
                EleeleentityElementElementEntityDB eleeleentity = null;
                if (
                    ioentity.intnPkElementElementType != null
                    )
                {
                    //                                      //Find element element type.
                    eleetentity = context_I.ElementElementType.FirstOrDefault(
                        eleet => eleet.intPk == ioentity.intnPkElementElementType);
                }
                else
                {
                    //                                      //Find element element.
                    eleeleentity = context_I.ElementElement.FirstOrDefault(
                        eleele => eleele.intPk == ioentity.intnPkElementElement);
                }

                if (
                    //                                      //It is an IO output.
                    (eleetentity != null &&
                    eleetentity.boolUsage == false) ||
                    (eleeleentity != null &&
                    eleeleentity.boolUsage == false)
                    )
                {
                    //                                      //Find process.
                    PiwentityProcessInWorkflowEntityDB piwentity = context_I.ProcessInWorkflow.FirstOrDefault(
                        piw => piw.intPkWorkflow == ioentity.intPkWorkflow &&
                        piw.intProcessInWorkflowId == ioentity.intnProcessInWorkflowId);

                    if (
                        piwentity != null &&
                        //                                  //Process is not post process.
                        (piwentity.boolIsPostProcess == false &&
                        //                                  //Process does not contain final product.
                        !ProdtypProductType.boolThereIsAFinalProduct(piwentity, context_I))
                        )
                    {
                        //                                  //Create object to unlink.
                        IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexjson =
                            new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentity,
                            ioentityNode_I);
                        //                                  //Create list.
                        List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexjson =
                            new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();
                        darriobefornexjson.Add(iobefornexjson);
                        //                                  //Unlink.
                        ProdtypProductType.subIOsExtendToUnlink(darriobefornexjson, context_I);
                    }
                }
            }

            //                                              //Find links among nodes.
            List<LinknodLinkNodeEntityDB> darrlinknodNodesConnectedToNode = context_I.LinkNode.Where(link =>
                link.intPkNodeI == ioentityNode_I.intPk).ToList();

            foreach (LinknodLinkNodeEntityDB ioentityNode in darrlinknodNodesConnectedToNode)
            {
                //                                          //Find output node.
                IoentityInputsAndOutputsEntityDB ioentityNodeOutput = context_I.InputsAndOutputs.FirstOrDefault(
                    io => io.intPk == ioentityNode.intPkNodeO);

                if (
                    ioentityNodeOutput != null
                    )
                {
                    if (
                        //                                  //Processes connected to node are not post processes or 
                        //                                  //      have no final product.
                        !ProdtypProductType.boolThereIsAFinalProductInPreviousProcessesRecursive(null,
                        ioentityNodeOutput, context_I)
                        )
                    {
                        //                                  //Create object to unlink.
                        IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexjson =
                            new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentityNodeOutput,
                            ioentityNode_I);
                        //                                  //Create list.
                        List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexjson =
                            new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();
                        darriobefornexjson.Add(iobefornexjson);
                        //                                  //Unlink.
                        ProdtypProductType.subIOsExtendToUnlink(darriobefornexjson, context_I);
                    }
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subSetResourceForAJob(
            //                                              //Create the row in the InputsAndOutputsForAJob with the data 
            //                                              //      about the resource.

            int intJobId_I,
            String strPrintshopId_I,
            int intPkProcessInWorkflow_I,
            int? intnPkResource_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            IConfiguration configuration_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Find PIW.
            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPk == intPkProcessInWorkflow_I);

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "No PIW found";
            if (
                piwentity != null
                )
            {
                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Invalid Job";
                JobjsonJobJson jobjson;
                if (
                    //                                      //Valid Job and Get data from Order form.
                    JobJob.boolIsValidJobId(intJobId_I, strPrintshopId_I, configuration_I, out jobjson,
                        ref strUserMessage_IO, ref strDevMessage_IO)
                    )
                {
                    //                                      //Find PkWorkflow.
                    int intPkWorkflow = piwentity.intPkWorkflow;

                    //                                      //Get all the processes.
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentity;
                    List<DynLkjsonDynamicLinkJson> darrdynlkjson;
                    ProdtypProductType.subGetWorkflowValidWay(intPkWorkflow, jobjson, out darrpiwentity,
                        out darrdynlkjson);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Many workflow possibilities found.";
                    strDevMessage_IO = "";
                    if (
                        darrpiwentity != null
                        )
                    {
                        int intI = 0;
                        bool boolPIWExistsInJobsWorkflow = false;
                        /*WHILE-DO*/
                        while (
                            intI < darrpiwentity.Count &&
                            !boolPIWExistsInJobsWorkflow
                            )
                        {
                            if (
                                //                          //PIW to set the resource exists in job's workflow.
                                darrpiwentity[intI].intPk == piwentity.intPk
                                )
                            {
                                boolPIWExistsInJobsWorkflow = true;
                            }

                            intI = intI + 1;
                        }

                        intStatus_IO = 404;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "PIW not found in workflow.";
                        if (
                            boolPIWExistsInJobsWorkflow
                            )
                        {
                            //                              //To easy code.
                            int? intnElementElementType = boolIsEleet_I ? (int?)intPkEleetOrEleele_I : null;
                            int? intnElementElement = boolIsEleet_I ? null : (int?)intPkEleetOrEleele_I;

                            //                              //Reviewing if the line already exist in the product 
                            //                              //      workflow.
                            IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                                io.intPkWorkflow == piwentity.intPkWorkflow &&
                                io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                                io.intnPkElementElementType == intnElementElementType &&
                                io.intnPkElementElement == intnElementElement);

                            //                              //Reviewing if the line already exist in the job workflow.
                            IojentityInputsAndOutputsForAJobEntityDB iojentity =
                                context.InputsAndOutputsForAJob.FirstOrDefault(ioj =>
                                ioj.intPkProcessInWorkflow == intPkProcessInWorkflow_I &&
                                ioj.intnPkElementElementType == intnElementElementType &&
                                ioj.intnPkElementElement == intnElementElement &&
                                ioj.intJobId == intJobId_I);

                            /*CASE*/
                            if (
                                //                          //There is not a resource or link set for that io in 
                                //                          //      product workflow.
                                ((ioentity == null) ||
                                //                          //There is a resource set for that io in product workflow 
                                //                          //      but it has not link.
                                ((ioentity != null) && ioentity.strLink == null)) &&
                                //                          //There is not resource set for the job workflow.
                                (iojentity == null)
                                )
                            {
                                intStatus_IO = 300;
                                strUserMessage_IO = "Pick an option.";
                                if (
                                    intnPkResource_I != null
                                    )
                                {
                                    if (
                                    //                      //The resource to set is valid for the io.
                                    ProdtypProductType.boolDataValid(piwentity.intPkWorkflow,
                                        piwentity.intProcessInWorkflowId, (int)intnPkResource_I,
                                        intPkEleetOrEleele_I, boolIsEleet_I, ref intStatus_IO,
                                        ref strUserMessage_IO, ref strDevMessage_IO)
                                    )
                                    {
                                        iojentity = new IojentityInputsAndOutputsForAJobEntityDB
                                        {
                                            intJobId = intJobId_I,
                                            intPkProcessInWorkflow = intPkProcessInWorkflow_I,
                                            intnPkElementElementType = intnElementElementType,
                                            intnPkElementElement = intnElementElement,
                                            intPkResource = (int)intnPkResource_I,
                                            boolnWasSetAutomatically = false
                                        };
                                        context.InputsAndOutputsForAJob.Add(iojentity);
                                        context.SaveChanges();

                                        intStatus_IO = 200;
                                        strUserMessage_IO = "Success.";

                                        //                  //Method to delete estimation.
                                        ProdtypProductType.subDeleteEstimation(intJobId_I, intPkProcessInWorkflow_I,
                                                intPkEleetOrEleele_I, boolIsEleet_I);
                                    }
                                }
                            }
                            else if (
                                //                          //There is not a resource or link set for that io in 
                                //                          //      product workflow.
                                ((ioentity == null) ||
                                //                          //There is a resource set for that io in product workflow
                                //                          //      but it has not link.
                                ((ioentity != null) && ioentity.strLink == null)) &&
                                //                          //There is a resource set for the job workflow.
                                (iojentity != null)
                                )
                            {
                                EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                                    ele.intPk == intnPkResource_I);
                                EleentityElementEntityDB eleentityResourceOld = context.Element.FirstOrDefault(ele =>
                                    ele.intPk == iojentity.intPkResource);

                                intStatus_IO = 300;
                                strUserMessage_IO = "Pick an option.";
                                if (
                                    (eleentityResourceOld != null) &&
                                    (eleentityResource != null)
                                    )
                                {
                                    intStatus_IO = 405;
                                    strUserMessage_IO = "Resource is not from the type or template.";
                                    if (
                                        (eleentityResourceOld.intPkElementType == eleentityResource.intPkElementType) &&
                                        (eleentityResourceOld.intnPkElementInherited ==
                                        eleentityResource.intnPkElementInherited)
                                        )
                                    {
                                        //                  //Delete all periods associated with this io and job.
                                        ProdtypProductType.subDeletePeriodsForThisIOJ(iojentity);

                                        iojentity.intPkResource = eleentityResource.intPk;
                                        iojentity.boolnWasSetAutomatically = false;
                                        context.SaveChanges();

                                        intStatus_IO = 200;
                                        strUserMessage_IO = "Success.";

                                        //                  //Method to delete estimation.
                                        ProdtypProductType.subDeleteEstimation(intJobId_I, intPkProcessInWorkflow_I,
                                                intPkEleetOrEleele_I, boolIsEleet_I);
                                    }
                                }

                            }
                            else if (
                                //                          //There is a resource set for that io in product workflow
                                //                          //      and it has link.
                                (ioentity != null) && (ioentity.strLink != null) &&
                                //                          //There is not resource set for the job workflow.
                                (iojentity == null)
                                )
                            {
                                List<int> darrintPkIoentity;
                                if (
                                    ProdtypProductType.boolValidResourceForLink(ioentity.intPkWorkflow,
                                    ioentity.strLink, intnPkResource_I, out darrintPkIoentity,
                                    ref intStatus_IO, ref strUserMessage_IO)
                                    )
                                {
                                    intStatus_IO = 300;
                                    strUserMessage_IO = "Pick an option.";
                                    if (
                                        intnPkResource_I != null
                                        )
                                    {
                                        foreach (int intPkIoentity in darrintPkIoentity)
                                        {
                                            //              //Get the io linked.
                                            IoentityInputsAndOutputsEntityDB ioentityLinked =
                                                context.InputsAndOutputs.FirstOrDefault(io =>
                                                io.intPk == intPkIoentity);

                                            PiwentityProcessInWorkflowEntityDB piwentityForLink =
                                                context.ProcessInWorkflow.FirstOrDefault(piw =>
                                                piw.intPkWorkflow == ioentityLinked.intPkWorkflow &&
                                                piw.intProcessInWorkflowId == ioentityLinked.intnProcessInWorkflowId);

                                            //              //Create the ioj.
                                            IojentityInputsAndOutputsForAJobEntityDB iojentityLinked =
                                                new IojentityInputsAndOutputsForAJobEntityDB
                                                {
                                                    intPkProcessInWorkflow = piwentityForLink.intPk,
                                                    intnPkElementElementType = ioentityLinked.intnPkElementElementType,
                                                    intnPkElementElement = ioentityLinked.intnPkElementElement,
                                                    intPkResource = (int)intnPkResource_I,
                                                    intJobId = intJobId_I,
                                                    boolnWasSetAutomatically = false
                                                };

                                            context.InputsAndOutputsForAJob.Add(iojentityLinked);
                                            context.SaveChanges();

                                            //              //Delete all previuos periods associated with this io.
                                            ProdtypProductType.subDeletePeriodsForThisIOJ(iojentityLinked);

                                            intStatus_IO = 200;
                                            strUserMessage_IO = "Success.";

                                            //              //Method to delete estimation.
                                            ProdtypProductType.subDeleteEstimation(intJobId_I,
                                                intPkProcessInWorkflow_I, intPkEleetOrEleele_I, boolIsEleet_I);
                                        }
                                    }
                                }
                            }
                            else if (
                                //                          //There is a resource set for that io in product workflow
                                //                          //      and it has link.
                                (ioentity != null) && (ioentity.strLink != null) &&
                                //                          //There is a resource set for the job workflow.
                                (iojentity != null)
                                )
                            {
                                List<int> darrintPkIoentity;
                                if (
                                    ProdtypProductType.boolValidResourceForLink(ioentity.intPkWorkflow,
                                    ioentity.strLink, intnPkResource_I, out darrintPkIoentity,
                                    ref intStatus_IO, ref strUserMessage_IO)
                                    )
                                {
                                    intStatus_IO = 300;
                                    strUserMessage_IO = "Pick an option.";
                                    if (
                                        intnPkResource_I != null
                                        )
                                    {
                                        foreach (int intPkIoentity in darrintPkIoentity)
                                        {
                                            //              //Get the io linked.
                                            IoentityInputsAndOutputsEntityDB ioentityLinked =
                                                context.InputsAndOutputs.FirstOrDefault(io =>
                                                io.intPk == intPkIoentity);

                                            PiwentityProcessInWorkflowEntityDB piwentityForLink =
                                                context.ProcessInWorkflow.FirstOrDefault(piw =>
                                                piw.intPkWorkflow == ioentityLinked.intPkWorkflow &&
                                                piw.intProcessInWorkflowId == ioentityLinked.intnProcessInWorkflowId);

                                            //              //Get the ioj linked.
                                            IojentityInputsAndOutputsForAJobEntityDB iojentityLinked =
                                                context.InputsAndOutputsForAJob.FirstOrDefault(ioj =>
                                                ioj.intJobId == intJobId_I &&
                                                ioj.intPkProcessInWorkflow == piwentityForLink.intPk &&
                                                (ioj.intnPkElementElementType == ioentityLinked.intnPkElementElementType &&
                                                ioj.intnPkElementElement == ioentityLinked.intnPkElementElement));

                                            if (
                                                iojentityLinked != null
                                                )
                                            {
                                                iojentityLinked.intPkResource = (int)intnPkResource_I;
                                                iojentityLinked.boolnWasSetAutomatically = false;
                                                context.InputsAndOutputsForAJob.Update(iojentityLinked);
                                                context.SaveChanges();

                                                //          //Delete all previos periods associated with this io.
                                                ProdtypProductType.subDeletePeriodsForThisIOJ(iojentityLinked);

                                                intStatus_IO = 200;
                                                strUserMessage_IO = "Success.";

                                                //          //Method to delete estimation.
                                                ProdtypProductType.subDeleteEstimation(intJobId_I,
                                                    intPkProcessInWorkflow_I, intPkEleetOrEleele_I, boolIsEleet_I);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /*END-CASE*/
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolValidResourceForLink(
            int intPkWorkflow_I,
            String strLink_I,
            int? intnPkResource_I,
            out List<int> darrintPkIoentity_O,
            //                                              //Status:
            //                                              //      0 - Success.
            //                                              //      4 - Resource not found.
            //                                              //      5 - Resource is not from the type or template.
            ref int intStatus_IO,
            ref String strUserMessage_IO
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                io.intPkWorkflow == intPkWorkflow_I && io.strLink == strLink_I &&
                //                                          //Avoid finding nodes.
                io.intnProcessInWorkflowId != null && (io.intnPkElementElementType != null ||
                io.intnPkElementElement != null)).ToList();

            EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                ele.intPk == intnPkResource_I);

            darrintPkIoentity_O = new List<int>();
            foreach (IoentityInputsAndOutputsEntityDB ioentityLinked in darrioentity)
            {
                darrintPkIoentity_O.Add(ioentityLinked.intPk);
            }

            bool boolIsValidResource = false;
            if (
                intnPkResource_I != null
                )
            {
                if (
                    eleentityResource != null
                    )
                {
                    int intI = 0;
                    boolIsValidResource = true;
                    intStatus_IO = 0;
                    strUserMessage_IO = "Success.";
                    /*UNTIL-DO*/
                    while (!(
                        (intI >= darrioentity.Count()) ||
                        !boolIsValidResource
                        ))
                    {
                        if (
                            //                  //The input or output is a type.
                            darrioentity[intI].intnPkElementElementType != null
                            )
                        {
                            EleetentityElementElementTypeEntityDB eleet = context.ElementElementType.
                                FirstOrDefault(eleet =>
                                eleet.intPk == darrioentity[intI].intnPkElementElementType);
                            if (
                                (eleet == null) ||
                                ((eleet != null) &&
                                (eleet.intPkElementTypeSon != eleentityResource.intPkElementType))
                                )
                            {
                                boolIsValidResource = false;
                                intStatus_IO = 5;
                                strUserMessage_IO = "Resource is not from the type or template.";
                            }
                        }
                        else
                        {
                            EleeleentityElementElementEntityDB eleele = context.ElementElement.
                                FirstOrDefault(eleele =>
                                eleele.intPk == darrioentity[intI].intnPkElementElement);
                            if (
                                (eleele == null) ||
                                ((eleele != null) &&
                                (eleele.intPkElementSon != eleentityResource.intnPkElementInherited))
                                )
                            {
                                boolIsValidResource = false;
                                intStatus_IO = 5;
                                strUserMessage_IO = "Resource is not from the type or template.";
                            }
                        }

                        intI = intI + 1;
                    }
                }
            }
            else
            {
                boolIsValidResource = true;
            }

            return boolIsValidResource;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subDeletePeriodsForThisIOJ(
            IojentityInputsAndOutputsForAJobEntityDB iojentity_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPk == iojentity_I.intPkProcessInWorkflow);

            List<PerentityPeriodEntityDB> darrperentity = context.Period.Where(per =>
                per.intJobId == iojentity_I.intJobId &&
                per.intnPkElementElement == iojentity_I.intnPkElementElement &&
                per.intnPkElementElementType == iojentity_I.intnPkElementElementType &&
                per.intPkWorkflow == piwentity.intPkWorkflow &&
                per.intProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

            foreach (PerentityPeriodEntityDB perentity in darrperentity)
            {
                context.Period.Remove(perentity);
            }
            context.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subDeleteQtyCalculationAsociated(

            int intPkRes_I,
            int intPkWorflow_I,
            int intPkProcessInWorkflowId_I,
            Odyssey2Context context_M
            )
        {
            //                                              //Get calculations for where resource is Quantity from.
            List<CalentityCalculationEntityDB> darrcalentity = context_M.Calculation.Where(cal =>
                cal.intnPkQFromResource == intPkRes_I &&
                cal.intnPkWorkflow == intPkWorflow_I &&
                cal.intnProcessInWorkflowId == intPkProcessInWorkflowId_I).ToList();

            //                                              //Remove calculation ByResource from workflow if
            //                                              //      the calculation exist for this.
            foreach (CalentityCalculationEntityDB calentity in darrcalentity)
            {
                //                                          //Get the paper transformation asociated to this.
                List<PatransPaperTransformationEntityDB> darrpatransentity = context_M.PaperTransformation.Where(
                    patrans => patrans.intnPkCalculationOwn == calentity.intPk ||
                    patrans.intnPkCalculationLink == calentity.intPk).ToList();
                foreach (PatransPaperTransformationEntityDB patransentity in darrpatransentity)
                {
                    context_M.PaperTransformation.Remove(patransentity);
                }

                //                                          //Delete conditions.
                Tools.subDeleteCondition(calentity.intPk, null, null, null, context_M);

                context_M.Calculation.Remove(calentity);
            }

            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subDeleteEstimation(
            //                                              //Deletes estimation data, estimates, prices related to 
            //                                              //      estimates and temporary periods.

            int intJobId_I,
            int intPkProcessInWorkflow_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get PkProcessInWorkflow register.
            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw => piw.intPk ==
                intPkProcessInWorkflow_I);

            //                                              //Get IOs depends if we receive a Eleet or Eleele.
            EleetentityElementElementTypeEntityDB eleetentity = new EleetentityElementElementTypeEntityDB();
            EleeleentityElementElementEntityDB eleeleentity = new EleeleentityElementElementEntityDB();
            IoentityInputsAndOutputsEntityDB ioentity = new IoentityInputsAndOutputsEntityDB();

            if (
                boolIsEleet_I
                )
            {
                eleetentity = context.ElementElementType.FirstOrDefault(et => et.intPk == intPkEleetOrEleele_I);

                ioentity = context.InputsAndOutputs.FirstOrDefault(io => io.intPkWorkflow == piwentity.intPkWorkflow &&
                    io.intnPkElementElementType == intPkEleetOrEleele_I && io.intnProcessInWorkflowId == piwentity.
                    intProcessInWorkflowId);
            }
            else
            {
                eleeleentity = context.ElementElement.FirstOrDefault(ele => ele.intPk == intPkEleetOrEleele_I);

                ioentity = context.InputsAndOutputs.FirstOrDefault(io => io.intPkWorkflow == piwentity.intPkWorkflow &&
                    io.intnPkElementElement == intPkEleetOrEleele_I && io.intnProcessInWorkflowId == piwentity.
                    intProcessInWorkflowId);
            }

            //                                              //Delete Estimation only if:
            //                                              //      Is an input without link.

            if (
                //                                          //Is an Input.
                (ioentity == null) &&
                ((boolIsEleet_I && eleetentity.boolUsage == true) ||
                (!boolIsEleet_I && eleeleentity.boolUsage == true)) ||
                //                                          //There is not link and is an Input.
                (ioentity != null) &&
                ((boolIsEleet_I && eleetentity.boolUsage == true && ioentity.strLink == null) ||
                (!boolIsEleet_I && eleeleentity.boolUsage == true && ioentity.strLink == null))
                )
            {
                //                                          //Get estimations for the job and Workflow.
                List<EstdataentityEstimationDataEntityDB> darrestdataentity =
                    (from estdataentity in context.EstimationData
                     join piwentityFromWF in context.ProcessInWorkflow
                     on estdataentity.intPkProcessInWorkflow equals piwentityFromWF.intPk
                     where piwentityFromWF.intPkWorkflow == piwentity.intPkWorkflow &&
                     estdataentity.intJobId == intJobId_I
                     select estdataentity).ToList();

                //                                          //Delete register from EstimationData table.
                foreach (EstdataentityEstimationDataEntityDB estdataentityToDelete in darrestdataentity)
                {
                    context.EstimationData.Remove(estdataentityToDelete);

                    EstentityEstimateEntityDB estentity = context.Estimate.FirstOrDefault(est =>
                        (est.intId == estdataentityToDelete.intId) && (est.intJobId == intJobId_I) &&
                        (est.intPkWorkflow == piwentity.intPkWorkflow));

                    if (
                        estentity != null
                        )
                    {
                        //                                  //Find estimate prices.
                        List<PriceentityPriceEntityDB> darrpriceentity = context.Price.Where(price =>
                            (price.intnPkEstimate == estentity.intPk) && (price.intJobId == intJobId_I)).ToList();

                        foreach (PriceentityPriceEntityDB priceentity in darrpriceentity)
                        {
                            context.Price.Remove(priceentity);
                            context.SaveChanges();
                        }

                        context.Estimate.Remove(estentity);
                        context.SaveChanges();
                    }
                }

                //                                          //Find temporary periods.
                List<PerentityPeriodEntityDB> darrperentity = context.Period.Where(per =>
                    per.intPkWorkflow == piwentity.intPkWorkflow && per.intJobId == intJobId_I &&
                    per.intnEstimateId != null).ToList();

                foreach (PerentityPeriodEntityDB perentity in darrperentity)
                {
                    context.Period.Remove(perentity);
                }

                context.SaveChanges();
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subSetPrice(
            //                                              //Add the price of the job to price table.

            int intJobId_I,
            String strPrintshopId_I,
            double numPrice_I,
            String strDescription_I,
            int intContactId_I,
            IConfiguration configuration_I,
            int intPkWorkflow_I,
            int? intnEstimateId_I,
            int? intnCopyNumber_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 401;
            strUserMessage_IO = "Price cannot be less than 0";
            strDevMessage_IO = "";
            if (
                numPrice_I >= 0
                )
            {
                intStatus_IO = 402;
                JobjsonJobJson jobjson;
                if (
                    JobJob.boolIsValidJobId(intJobId_I, strPrintshopId_I, configuration_I, out jobjson,
                        ref strUserMessage_IO, ref strDevMessage_IO)
                    )
                {
                    //                                      //Validate Workflow.
                    WfentityWorkflowEntityDB wfentity = context_M.Workflow.FirstOrDefault(wf =>
                        wf.intPk == intPkWorkflow_I && wf.boolDeleted == false);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Workflow not found.";
                    if (
                        wfentity != null
                        )
                    {
                        //                                  //Find job.
                        JobentityJobEntityDB jobentity = context_M.Job.FirstOrDefault(job =>
                            job.intJobID == intJobId_I);

                        intStatus_IO = 404;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "Cannot change job's price with invoice.";
                        if (
                            //                              //Only completed jobs without invoice can change its 
                            //                              //      prices.
                            (jobentity != null &&
                            jobentity.intStage == JobJob.intCompletedStage &&
                            jobentity.boolInvoiced == false) ||
                            //                              //Pending job.
                            jobentity == null ||
                            //                              //In progress job.
                            (jobentity != null &&
                            jobentity.intStage == JobJob.intInProgressStage)
                            )
                        {
                            //                              //Get EstimationData entry.
                            List<EstdataentityEstimationDataEntityDB> darrestentity =
                                (from estentity in context_M.EstimationData
                                 join piwentity in context_M.ProcessInWorkflow
                                 on estentity.intPkProcessInWorkflow equals piwentity.intPk
                                 where estentity.intId == intnEstimateId_I && estentity.intJobId == intJobId_I &&
                                 piwentity.intPkWorkflow == intPkWorkflow_I
                                 select estentity).ToList();

                            intStatus_IO = 405;
                            strUserMessage_IO = "Something is wrong.";
                            strDevMessage_IO = "Invalid EstimateId.";
                            if (
                                (intnEstimateId_I == null) ||
                                (intnEstimateId_I != null &&
                                darrestentity.Count() > 0) ||
                                (darrestentity.Count() == 0 &&
                                intnEstimateId_I == 0)
                                )
                            {
                                int? intnPkEstimate;
                                if (
                                    //                      //Is a Job's price.
                                    intnEstimateId_I == null
                                    )
                                {
                                    intnPkEstimate = intnEstimateId_I;
                                    //                      //Get Prices.
                                    List<PriceentityPriceEntityDB> darrpriceentityPrice = context_M.Price.Where(
                                        price => price.intJobId == intJobId_I &&
                                        price.intnPkWorkflow == intPkWorkflow_I).ToList();

                                    if (
                                        darrpriceentityPrice.Count > 0
                                        )
                                    {
                                        //                  //The first element is the current price.
                                        darrpriceentityPrice.Sort();

                                        //                  //Current price.
                                        PriceentityPriceEntityDB priceentityCurrent = darrpriceentityPrice.First();

                                        if (
                                            //              //It is a price reset.
                                            priceentityCurrent.boolIsReset
                                            )
                                        {
                                            ProdtypProductType.subAddPrice(numPrice_I, intJobId_I, strDescription_I,
                                                    intContactId_I, intPkWorkflow_I, intnPkEstimate, context_M);

                                            intStatus_IO = 200;
                                            strUserMessage_IO = "Job's price added.";
                                            strDevMessage_IO = "";
                                        }
                                        else
                                        {
                                            if (
                                                //          //It is diferent prices.
                                                priceentityCurrent.numnPrice != numPrice_I
                                                )
                                            {
                                                ProdtypProductType.subAddPrice(numPrice_I, intJobId_I, strDescription_I,
                                                        intContactId_I, intPkWorkflow_I, intnPkEstimate, context_M);

                                                intStatus_IO = 200;
                                                strUserMessage_IO = "Job's price added.";
                                                strDevMessage_IO = "";
                                            }
                                            else
                                            {
                                                priceentityCurrent.strDescription = strDescription_I;
                                                context_M.Price.Update(priceentityCurrent);
                                                context_M.SaveChanges();

                                                intStatus_IO = 200;
                                                strUserMessage_IO = "Job's description updated.";
                                                strDevMessage_IO = "";
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //                  //There is not price for this job therefore add price.
                                        ProdtypProductType.subAddPrice(numPrice_I, intJobId_I, strDescription_I,
                                            intContactId_I, intPkWorkflow_I, intnPkEstimate, context_M);

                                        intStatus_IO = 200;
                                        strUserMessage_IO = "Job's price added.";
                                        strDevMessage_IO = "";
                                    }
                                }
                                else
                                {
                                    //                      //Is a Estimation Price.
                                    //                      //Get PkEstimate.
                                    EstentityEstimateEntityDB estentity = context_M.Estimate.FirstOrDefault(est =>
                                        est.intId == intnEstimateId_I && est.intnCopyNumber == intnCopyNumber_I &&
                                        est.intJobId == intJobId_I && est.intPkWorkflow == intPkWorkflow_I);

                                    intStatus_IO = 405;
                                    strUserMessage_IO = "Something is wrong.";
                                    strDevMessage_IO = "Estimate does not exists.";
                                    if (
                                        //                  //PkEstimate exists.
                                        estentity != null
                                        )
                                    {
                                        intnPkEstimate = estentity.intPk;
                                        //                  //Get Prices.
                                        List<PriceentityPriceEntityDB> darrpriceentityPrice = context_M.Price.Where(
                                            price => price.intJobId == intJobId_I &&
                                            price.intnPkWorkflow == intPkWorkflow_I &&
                                            price.intnPkEstimate == intnPkEstimate).ToList();

                                        int? intnPkWorkflowToAdd = null;
                                        if (
                                            darrpriceentityPrice.Count > 0
                                            )
                                        {
                                            //              //The first element is the current price.
                                            darrpriceentityPrice.Sort();

                                            //              //Current price.
                                            PriceentityPriceEntityDB priceentityCurrent = darrpriceentityPrice.First();

                                            if (
                                                //          //It is a price reset.
                                                priceentityCurrent.boolIsReset
                                                )
                                            {
                                                ProdtypProductType.subAddPrice(numPrice_I, intJobId_I, strDescription_I,
                                                        intContactId_I, intnPkWorkflowToAdd, intnPkEstimate,
                                                        context_M);

                                                intStatus_IO = 200;
                                                strUserMessage_IO = "Job's price added.";
                                                strDevMessage_IO = "";
                                            }
                                            else
                                            {
                                                if (
                                                    //      //It is diferent prices.
                                                    priceentityCurrent.numnPrice != numPrice_I
                                                    )
                                                {
                                                    ProdtypProductType.subAddPrice(numPrice_I, intJobId_I, strDescription_I,
                                                            intContactId_I, intnPkWorkflowToAdd, intnPkEstimate,
                                                            context_M);

                                                    intStatus_IO = 200;
                                                    strUserMessage_IO = "Job's price added.";
                                                    strDevMessage_IO = "";
                                                }
                                                else
                                                {
                                                    priceentityCurrent.strDescription = strDescription_I;
                                                    context_M.Price.Update(priceentityCurrent);
                                                    context_M.SaveChanges();

                                                    intStatus_IO = 200;
                                                    strUserMessage_IO = "Job's price updated.";
                                                    strDevMessage_IO = "";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //              //There is not price for this job therefore add price.
                                            ProdtypProductType.subAddPrice(numPrice_I, intJobId_I, strDescription_I,
                                                    intContactId_I, intnPkWorkflowToAdd, intnPkEstimate,
                                                    context_M);

                                            intStatus_IO = 200;
                                            strUserMessage_IO = "Job's price added.";
                                            strDevMessage_IO = "";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subAddPrice(
            //                                              //Add price to estimate or a Job.

            double numPrice_I,
            int intJobId_I,
            String strDescription_I,
            int intContactId_I,
            int? intnPkWorkflow_I,
            int? intnPkEstimate_I,
            Odyssey2Context context_M
            )
        {
            PriceentityPriceEntityDB priceentity = new PriceentityPriceEntityDB
            {
                numnPrice = numPrice_I,
                intJobId = intJobId_I,
                strStartDate = Date.Now(ZonedTimeTools.timezone).ToString(),
                strStartTime = Time.Now(ZonedTimeTools.timezone).ToString(),
                strDescription = strDescription_I,
                intContactId = intContactId_I,
                boolIsReset = false,
                intnPkWorkflow = intnPkWorkflow_I,
                intnPkEstimate = intnPkEstimate_I
            };

            //                                              //Get the estimate.
            EstentityEstimateEntityDB estentityEstimate = context_M.Estimate.FirstOrDefault(
                est => est.intPk == intnPkEstimate_I);

            if (
                estentityEstimate != null
                )
            {
                //Update the last price for estimate confirmed.
                estentityEstimate.numnLastPrice = estentityEstimate.intId == 0 ? (numPrice_I) : (double?)null;
                context_M.Estimate.Update(estentityEstimate);
            }

            context_M.Price.Add(priceentity);
            context_M.SaveChanges();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subResetPrice(
            //                                              //Creates a row in the DB showing that someone pressed on 
            //                                              //      the reset price button.

            int intJobId_I,
            int intPkWorkflow_I,
            int? intnEstimateId_I,
            int? intnCopyNumber_I,
            String strPrintshopId_I,
            int intContactId_I,
            IConfiguration configuration_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 401;
            strUserMessage_IO = "You cannot make changes to the final price.";
            strDevMessage_IO = "";
            if (
                //                                          //Verify employee.
                intContactId_I > 0 &&
                ResResource.boolEmployeeOrOwnerIsFromPrintshop(strPrintshopId_I, intContactId_I)
                )
            {
                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Invalid job.";
                JobjsonJobJson jobjsonJob;
                if (
                    JobJob.boolIsValidJobId(intJobId_I, strPrintshopId_I, configuration_I, out jobjsonJob,
                        ref strUserMessage_IO, ref strDevMessage_IO)
                   )
                {
                    PsPrintShop ps = PsPrintShop.psGet(strPrintshopId_I);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Printshop not found.";
                    if (
                        ps != null
                        )
                    {
                        //                                  //Find workflow.
                        WfentityWorkflowEntityDB wfentity = context_M.Workflow.FirstOrDefault(wf =>
                                wf.intPk == intPkWorkflow_I && wf.boolDeleted == false);

                        intStatus_IO = 404;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "Workflow not found.";
                        if (
                            wfentity != null
                            )
                        {
                            //                              //Find job.
                            JobentityJobEntityDB jobentity = context_M.Job.FirstOrDefault(job =>
                                job.intJobID == intJobId_I);

                            intStatus_IO = 405;
                            strUserMessage_IO = "Something is wrong.";
                            strDevMessage_IO = "Cannot change job's price with invoice.";
                            if (
                                //                          //Only completed jobs without invoice can change its 
                                //                          //      prices.
                                (jobentity != null &&
                                jobentity.intStage == JobJob.intCompletedStage &&
                                jobentity.boolInvoiced == false) ||
                                //                          //Pending job.
                                jobentity == null ||
                                //                          //In progress job.
                                (jobentity != null &&
                                jobentity.intStage == JobJob.intInProgressStage)
                                )
                            {
                                int? intnPkWorkflow = null;
                                int? intnPkEstimate = null;
                                bool boolIsValidData = false;

                                if (
                                    //                      //Reset executed in an estimate price.
                                    intnEstimateId_I >= 0
                                    )
                                {
                                    //                      //Find estimate.
                                    EstentityEstimateEntityDB estentity = context_M.Estimate.FirstOrDefault(est =>
                                        est.intId == intnEstimateId_I && est.intJobId == intJobId_I &&
                                        est.intPkWorkflow == intPkWorkflow_I &&
                                        est.intnCopyNumber == intnCopyNumber_I);

                                    if (
                                        estentity != null
                                        )
                                    {
                                        intnPkEstimate = estentity.intPk;

                                        boolIsValidData = true;

                                        //                  //Clean the lastPrice from the estimate.
                                        estentity.numnLastPrice = null;
                                        context_M.Estimate.Update(estentity);
                                    }
                                }

                                if (
                                    intnEstimateId_I == null
                                    )
                                {
                                    intnPkWorkflow = intPkWorkflow_I;

                                    boolIsValidData = true;
                                }

                                intStatus_IO = 406;
                                strUserMessage_IO = "Something is wrong.";
                                strDevMessage_IO = "Data not valid.";
                                if (
                                    boolIsValidData
                                    )
                                {
                                    //                      //Add data to price table.
                                    PriceentityPriceEntityDB priceentityResetPrice = new PriceentityPriceEntityDB
                                    {
                                        intJobId = intJobId_I,
                                        strStartDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                                        strStartTime = Time.Now(ZonedTimeTools.timezone).ToText(),
                                        strDescription = "Reset",
                                        intContactId = intContactId_I,
                                        boolIsReset = true,
                                        intnPkWorkflow = intnPkWorkflow,
                                        intnPkEstimate = intnPkEstimate
                                    };
                                    context_M.Add(priceentityResetPrice);
                                    context_M.SaveChanges();

                                    intStatus_IO = 200;
                                    strUserMessage_IO = "";
                                    strDevMessage_IO = "";
                                }
                            }
                        }
                    }
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subAddNode(
            //                                              //Add node to Workflow.

            int intPkWorkflow_I,
            PsPrintShop ps_I,
            bool boolSuperAdmin_I,
            Odyssey2Context context_M,
            out NodejsonNodeJson nodejson_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            nodejson_O = null;

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "PkWokflow is empty.";
            if (
                //                                          //Pkworkflow is not empty.
                intPkWorkflow_I > 0
                )
            {
                //                                          //Find workflow.
                WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                  wf.intPk == intPkWorkflow_I && wf.boolDeleted == false &&
                  wf.intPkPrintshop == ps_I.intPk);

                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Workflow not found.";
                if (
                    //                                      //Workflow exists.
                    wfentityBase != null
                    )
                {
                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "The WF generic only can be modified for the administrator.";
                    if (
                        (
                        //                                  //The workflow is generic and
                        //                                  //Only can be modified for the 
                        //                                  //  admin(super user.)
                        wfentityBase.boolnGeneric == true &&
                        boolSuperAdmin_I
                        )
                        ||
                        (
                        (wfentityBase.boolnGeneric == null || wfentityBase.boolnGeneric == false)
                        )
                        )
                    {
                        //                                  //Verify if workflow needs a copy.
                        WfentityWorkflowEntityDB wfentityNew;
                        ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I, wfentityBase, context_M, out wfentityNew);

                        //                                  //Finally, this is going to be the node to add.
                        bool boolNodeGenerated;
                        String strLink = ProdtypProductType.strGenerateLink(wfentityNew.intPk, out boolNodeGenerated);

                        intStatus_IO = 403;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "Link name was not generated. Maybe too many" +
                            " links or nodes (>20000).";
                        if (
                            boolNodeGenerated
                            )
                        {
                            IoentityInputsAndOutputsEntityDB ioentity = new IoentityInputsAndOutputsEntityDB
                            {
                                intPkWorkflow = wfentityNew.intPk,
                                strLink = strLink,
                            };

                            context_M.InputsAndOutputs.Add(ioentity);
                            context_M.SaveChanges();

                            nodejson_O = new NodejsonNodeJson(ioentity.intPk, strLink, wfentityNew.intPk);

                            intStatus_IO = 200;
                            strUserMessage_IO = "Success";
                            strDevMessage_IO = "";
                        }
                    }
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subSetGeneric(
            //                                              //Copy a Workflow and set it as generic.

            int intPkWorkflow_I,
            PsPrintShop ps_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "PkWokflow is empty.";
            if (
                //                                          //Pkworkflow is not empty.
                intPkWorkflow_I > 0
                )
            {
                WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == intPkWorkflow_I && wf.boolDeleted == false);

                intStatus_IO = 403;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Workflow not found.";
                if (
                    wfentityBase != null
                    )
                {
                    intStatus_IO = 404;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "This workflow is already generic.";
                    if (
                        wfentityBase.boolnGeneric != true
                        )
                    {
                        ProdtypProductType.subAddGenericWorkflow(ps_I.intPk, wfentityBase, context_M, ref intStatus_IO,
                        ref strUserMessage_IO, ref strDevMessage_IO);
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddGenericWorkflow(

            int intPkPrintShop_I,
            WfentityWorkflowEntityDB wfentityBase_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            String strBaseWorkflowName = wfentityBase_I.strName;

            //                                          //Find base workflows
            List<WfentityWorkflowEntityDB> darrwfentity = context_M.Workflow.Where(wf =>
                wf.boolnGeneric == true && wf.intPk != wfentityBase_I.intPk).ToList();

            String strNewWorkflowName = strBaseWorkflowName;
            bool boolThereIsAWorkflowWithTheSameName;
            int intProgressiveNumber = 2;
            /*LOOP*/
            while (
                true
                )
            {
                //                                          //Valid if there is a wf with the same name
                boolThereIsAWorkflowWithTheSameName = darrwfentity.Exists(
                    wf => wf.strName.ToLower() == strNewWorkflowName.ToLower());

                /*EXIT-IF*/
                if (
                    //                                      //The name is not repeated
                    !boolThereIsAWorkflowWithTheSameName
                    )
                {
                    break;
                }

                strNewWorkflowName = strBaseWorkflowName + " " + intProgressiveNumber;
                intProgressiveNumber++;
            }
            /*END-LOOP*/

            //                                              //Generate WorkflowId
            int intWorkflowId = ProdtypProductType.intWorkflowIdForANewOne(darrwfentity);

            WfentityWorkflowEntityDB wfentityNew = new WfentityWorkflowEntityDB
            {
                intnPkProduct = wfentityBase_I.intnPkProduct,
                intPkPrintshop = intPkPrintShop_I,
                strName = strNewWorkflowName,
                intWorkflowId = intWorkflowId,
                strStartDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                strStartTime = Time.Now(ZonedTimeTools.timezone).ToText(),
                boolDeleted = false,
                boolDefault = false,
                boolnGeneric = true
            };
            context_M.Workflow.Add(wfentityNew);
            context_M.SaveChanges();

            ProdtypProductType.subCopyPiwIOJAndTransformCalToNewWorkflow(wfentityBase_I, wfentityNew, false, null,
                context_M);
            ProdtypProductType.subCopyAllInputsAndOutputsForTheNewWorkflow(wfentityBase_I, wfentityNew, null,
                context_M);
            ProdtypProductType.subCopyAllCalculationsAndPeriodsForTheNewWorkflow(wfentityBase_I, wfentityNew, false,
                null, context_M);
            ProdtypProductType.subCopyResourceGroupForAWorkflow(wfentityBase_I, wfentityNew, null, context_M);

            intStatus_IO = 200;
            strUserMessage_IO = "Success.";
            strDevMessage_IO = "";
        }

        //--------------------------------------------------------------------------------------------------------------
        //                                                  //ACCESS METHODS.

        //--------------------------------------------------------------------------------------------------------------
        public static ProdtypProductType prodtypGetFromDB(
            int intProductKey_I,
            String strPrintshopId_I
            )
        {
            //                                              //Get product
            Odyssey2Context context = new Odyssey2Context();

            EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
                    et.intWebsiteProductKey == intProductKey_I);

            ProdtypProductType prodtem = null;
            if (
                etentity != null
                )
            {
                prodtem = new ProdtypProductType(etentity.intPk, etentity.strXJDFTypeId, etentity.strAddedBy,
                    etentity.intPrintshopPk, etentity.strCustomTypeId, etentity.intWebsiteProductKey,
                    etentity.strCategory, etentity.strClassification, etentity.boolnIsPublic, etentity.intnPkAccount);
            }
            else
            {
                PsPrintShop ps = PsPrintShop.psGet(strPrintshopId_I);
                if (
                    ps != null
                    )
                {
                    Dictionary<int, ProdtypProductType> dicprodtem = ps.dicprodtyp;
                    if (
                        dicprodtem != null
                        )
                    {
                        prodtem = dicprodtem.FirstOrDefault(d => d.Value.intWebsiteProductKey == intProductKey_I).Value;
                    }
                }
            }

            return prodtem;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static PiwjsonProcessInWorkflowJson piwjsonGetProcessDetails(
            int intPkProcessInWorkflow_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            PiwjsonProcessInWorkflowJson piwjson = null;

            //                                              //Get the piw entity.
            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPk == intPkProcessInWorkflow_I);

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong";
            strDevMessage_IO = "Process in workflow not found.";
            if (
                piwentity != null
                )
            {
                //                                          //Get the process.
                ProProcess proProcess = ProProcess.proFromDB(piwentity.intPkProcess);

                //                                          //List of Inputs.
                List<IojsonInputOrOutputJson> darrresortypjsonInput = new List<IojsonInputOrOutputJson>();

                //                                          //Get the input types.
                darrresortypjsonInput.AddRange(ProdtypProductType.arrresortypjson1GetTypes(piwentity, true));

                //                                          //Get the input templates.
                darrresortypjsonInput.AddRange(ProdtypProductType.arrresortypjson1GetTemplates(piwentity, true));

                //                                          //List of Outputs.
                List<IojsonInputOrOutputJson> darrresortypjsonOutput = new List<IojsonInputOrOutputJson>();

                //                                          //Get the output types.
                darrresortypjsonOutput.AddRange(ProdtypProductType.arrresortypjson1GetTypes(piwentity, false));

                //                                          //Get the output templates.
                darrresortypjsonOutput.AddRange(ProdtypProductType.arrresortypjson1GetTemplates(piwentity, false));

                //                                          //Get the calculations for that process in the product.
                CalentityCalculationEntityDB calentity = context.Calculation.FirstOrDefault(cal =>
                    cal.intnPkProcess == proProcess.intPk &&
                    cal.intnPkWorkflow == piwentity.intPkWorkflow &&
                    cal.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId);
                bool boolHasCalculations = calentity != null;

                //                                          //Get process type.
                ProtypProcessType protypeProcessType = proProcess.protypBelongsTo;

                String strProcessNameAndId = piwentity.intnId != null ? proProcess.strName + " (" + piwentity.intnId +
                    ")" : proProcess.strName;

                //                                          //Used to show the checkbok in front, the one that is used 
                //                                          //      to marck the IOs in this process af final product.
                bool boolIsNormal = !piwentity.boolIsPostProcess;

                //                                          //Used to hide final product checkboxes after setting
                //                                          //      an IO as final product.
                bool boolContainsFinalProduct = ProdtypProductType.boolThereIsAFinalProduct(piwentity, context);

                piwjson = new PiwjsonProcessInWorkflowJson(piwentity.intPk,
                    proProcess.intPk, strProcessNameAndId, boolHasCalculations, darrresortypjsonInput.ToArray(),
                    darrresortypjsonOutput.ToArray(), protypeProcessType.intPk, protypeProcessType.strCustomTypeId,
                    boolIsNormal, boolContainsFinalProduct);

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "";

            }
            return piwjson;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static List<PronodjsonProcessNodesJson> pronodjsonGetProcessesAndNodes(
            //                                              //Search and send back an array of processes and nodes.

            int intPkWorkflow_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //To fill and return.
            List<PronodjsonProcessNodesJson> darrpronodjson = new List<PronodjsonProcessNodesJson>();

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Validate workflow.
            WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf => wf.intPk == intPkWorkflow_I &&
                wf.boolDeleted == false);

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Workflow not valid.";
            if (
                wfentity != null
                )
            {
                //                                          //Get workflow's processes.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = context.ProcessInWorkflow.Where(piw
                    => piw.intPkWorkflow == intPkWorkflow_I).ToList();

                foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity)
                {
                    //                                      //To easy code.
                    String strProcessName = ProProcess.proFromDB(piwentity.intPkProcess).strName;
                    strProcessName = piwentity.intnId != null ?
                        strProcessName + " (" + piwentity.intnId + ")" : strProcessName;

                    //                                      //Create json and add to list to send back.
                    PronodjsonProcessNodesJson pronodjson = new PronodjsonProcessNodesJson(piwentity.intPk, null,
                        strProcessName);
                    darrpronodjson.Add(pronodjson);
                }

                //                                          //Get workflow's nodes.
                List<IoentityInputsAndOutputsEntityDB> darrioentityNodes = context.InputsAndOutputs.Where(io
                    => io.intPkWorkflow == intPkWorkflow_I &&
                    io.intnPkElementElementType == null &&
                    io.intnPkElementElement == null &&
                    io.intnProcessInWorkflowId == null).ToList();

                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodes)
                {
                    //                                      //Create json and add to list to send back.
                    PronodjsonProcessNodesJson pronodjson = new PronodjsonProcessNodesJson(null, ioentity.intPk,
                        ioentity.strLink);
                    darrpronodjson.Add(pronodjson);
                }

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "";
            }

            return darrpronodjson;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static List<PronodjsonProcessNodesJson> pronodjsonGeNodes(
            //                                              //Search and send back an array of nodes.

            int intPkWorkflow_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //To fill and return.
            List<PronodjsonProcessNodesJson> darrpronodjson = new List<PronodjsonProcessNodesJson>();

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Validate workflow.
            WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf => wf.intPk == intPkWorkflow_I &&
                wf.boolDeleted == false);

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Workflow not valid.";
            if (
                wfentity != null
                )
            {
                //                                          //Get workflow's nodes.
                List<IoentityInputsAndOutputsEntityDB> darrioentityNodes = context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == intPkWorkflow_I &&
                    io.intnPkElementElementType == null &&
                    io.intnPkElementElement == null &&
                    //                                      //Just with the wfid = null is enough.
                    //                                      //Commented to delete some bad added nodes.
                    //                                      //Uncomment later, the result is the same.
                    //io.intnPkResource == null &&
                    io.intnProcessInWorkflowId == null).ToList();

                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodes)
                {
                    //                                      //Create json and add to list to send back.
                    PronodjsonProcessNodesJson pronodjson = new PronodjsonProcessNodesJson(null, ioentity.intPk,
                        ioentity.strLink);
                    darrpronodjson.Add(pronodjson);
                }

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "";
            }

            darrpronodjson = darrpronodjson.OrderBy(pronod => pronod.strName).ToList();

            return darrpronodjson;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static List<ProiojsonProcessInputsOutputsJson> darrproiojsonGetProcessIOs(
            //                                              //Search and send back an array of process's IOs.
            //                                              //      (Inputs or Outputs).

            int intPkProcessInWorkflow_I,
            bool boolIsInput_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //To fill with IOs and return.
            List<ProiojsonProcessInputsOutputsJson> darrproiojson = new List<ProiojsonProcessInputsOutputsJson>();

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Validate ProcessInWorkflow.
            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw
                => piw.intPk == intPkProcessInWorkflow_I);

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "ProcessInWorkflow not valid.";
            if (
                piwentity != null
                )
            {
                //                                          //Depends of the boolean's value, we have to send back 
                //                                          //      inputs or outputs.

                if (
                    //                                      //Inputs requested.
                    boolIsInput_I
                    )
                {
                    darrproiojson = ProdtypProductType.darrproiojsonGetProcessInputs(piwentity);
                }
                else
                {
                    //                                      //Outputs requested.
                    darrproiojson = ProdtypProductType.darrproiojsonGetProcessOutputs(piwentity);
                }

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "";
            }

            return darrproiojson;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static List<ProiojsonProcessInputsOutputsJson> darrproiojsonGetProcessInputs(
            //                                              //Create and return an array of process Inputs.

            PiwentityProcessInWorkflowEntityDB piwentity_I
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //To fill and return.
            List<ProiojsonProcessInputsOutputsJson> darrproiojson = new List<ProiojsonProcessInputsOutputsJson>();

            //                                              //Get Inputs types.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = context.ElementElementType.Where(et
                => et.intPkElementDad == piwentity_I.intPkProcess &&
                et.boolUsage == true).ToList();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                //                                          //Get type's name.
                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et
                    => et.intPk == eleetentity.intPkElementTypeSon);

                //                                          //Look up Resource's name.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io
                    => io.intnPkElementElementType == eleetentity.intPk &&
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId);

                String strResourceName = "To be defined";
                if (
                    //                                      //Input exists in IO table.
                    ioentity != null
                    )
                {
                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        //                                  //Get Resource's name.
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele
                            => ele.intPk == ioentity.intnPkResource);
                        strResourceName = eleentity.strElementName;
                    }
                }

                //                                          //Create strIO. "(Type : Template) Resource"
                String strIO = "(" + etentity.strXJDFTypeId + ")" + " " + strResourceName;

                //                                          //Create json and add to list.
                ProiojsonProcessInputsOutputsJson proiojson = new ProiojsonProcessInputsOutputsJson(eleetentity.intPk,
                    true, strIO);
                darrproiojson.Add(proiojson);
            }

            //                                              //Get Inputs Templates.
            List<EleeleentityElementElementEntityDB> darreleeleentity = context.ElementElement.Where(ele
                => ele.intPkElementDad == piwentity_I.intPkProcess &&
                ele.boolUsage == true).ToList();

            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                //                                          //Get Template's name.
                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele
                    => ele.intPk == eleeleentity.intPkElementSon);

                //                                          //Look up Resource's name.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io
                    => io.intnPkElementElement == eleeleentity.intPk &&
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId);

                String strResourceName = "To be defined";
                if (
                    //                                      //Input exists in IO table.
                    ioentity != null
                    )
                {
                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        //                                  //Get Resource's name.
                        EleentityElementEntityDB eleentityName = context.Element.FirstOrDefault(ele
                            => ele.intPk == ioentity.intnPkResource);
                        strResourceName = eleentityName.strElementName;
                    }
                }

                //                                          //Create strIO. "(Type : Template) Resource"
                String strIO = "(" + eleentity.strElementName + ")" + " " + strResourceName;

                //                                          //Create json and add to list.
                ProiojsonProcessInputsOutputsJson proiojson = new ProiojsonProcessInputsOutputsJson(eleeleentity.intPk,
                    false, strIO);
                darrproiojson.Add(proiojson);
            }

            return darrproiojson;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static List<ProiojsonProcessInputsOutputsJson> darrproiojsonGetProcessOutputs(
            //                                              //Create and return an array of process Outputs.

            PiwentityProcessInWorkflowEntityDB piwentity_I
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //To fill and return.
            List<ProiojsonProcessInputsOutputsJson> darrproiojson = new List<ProiojsonProcessInputsOutputsJson>();

            //                                              //Get Outputs types.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = context.ElementElementType.Where(et
                => et.intPkElementDad == piwentity_I.intPkProcess &&
                et.boolUsage == false).ToList();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                //                                          //Get type's name.
                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et
                    => et.intPk == eleetentity.intPkElementTypeSon);

                //                                          //Look up Resource's name.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io
                    => io.intnPkElementElementType == eleetentity.intPk &&
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId);

                String strResourceName = "";
                if (
                    //                                      //Output exists in IO table.
                    ioentity != null
                    )
                {
                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        //                                  //Get Resource's name.
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele
                            => ele.intPk == ioentity.intnPkResource);
                        strResourceName = eleentity.strElementName;
                    }
                }

                //                                          //Create strIO. "(Type : Template) Resource"
                String strIO = "(" + etentity.strXJDFTypeId + ")" + " " + strResourceName;

                //                                          //Create json and add to list.
                ProiojsonProcessInputsOutputsJson proiojson = new ProiojsonProcessInputsOutputsJson(eleetentity.intPk,
                    true, strIO);
                darrproiojson.Add(proiojson);
            }

            //                                              //Get Outputs Templates.
            List<EleeleentityElementElementEntityDB> darreleeleentity = context.ElementElement.Where(ele
                => ele.intPkElementDad == piwentity_I.intPkProcess &&
                ele.boolUsage == false).ToList();

            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                //                                          //Get Template's name.
                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele
                    => ele.intPk == eleeleentity.intPkElementSon);

                //                                          //Look up Resource's name.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io
                    => io.intnPkElementElement == eleeleentity.intPk &&
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId);

                String strResourceName = "";
                if (
                    //                                      //Output exists in IO table.
                    ioentity != null
                    )
                {
                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        //                                  //Get Resource's name.
                        EleentityElementEntityDB eleentityName = context.Element.FirstOrDefault(ele
                            => ele.intPk == ioentity.intnPkResource);
                        strResourceName = eleentity.strElementName;
                    }
                }

                //                                          //Create strIO. "(Type : Template) Resource"
                String strIO = "(" + eleentity.strElementName + ")" + " " + strResourceName;

                //                                          //Create json and add to list.
                ProiojsonProcessInputsOutputsJson proiojson = new ProiojsonProcessInputsOutputsJson(eleeleentity.intPk,
                    false, strIO);
                darrproiojson.Add(proiojson);
            }

            return darrproiojson;
        }

        //--------------------------------------------------------------------------------------------------------------
        public List<CalCalculation> GetCalculationsDependingDate(
            ZonedTime ztimeJobDate_I
            )
        {
            List<CalCalculation> darrcalentity = new List<CalCalculation>();
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();
            //                                              //Get all calculations of the product.
            List<CalentityCalculationEntityDB> darrcalentityFromDB = context.Calculation.Where(cal =>
                cal.intnPkProduct == this.intPk).ToList();

            //                                              //Sort list.
            darrcalentityFromDB.Sort();
            foreach (CalentityCalculationEntityDB calentity in darrcalentityFromDB)
            {
                //                                          //Create the calcalculation
                CalCalculation cal = new CalCalculation(calentity.intPk,
                    calentity.strUnit, calentity.numnQuantity, calentity.numnCost,
                    calentity.intnHours, calentity.intnMinutes, calentity.intnSeconds,
                    calentity.numnBlock, calentity.boolIsEnable, calentity.strValue, calentity.strAscendants,
                    calentity.strDescription, calentity.numnProfit,
                    calentity.intnPkProduct, calentity.intnPkProcess,
                    calentity.intnPkResource, calentity.strCalculationType, calentity.strByX, calentity.strStartDate,
                    calentity.strStartTime, calentity.strEndDate, calentity.strEndTime, calentity.numnNeeded,
                    calentity.numnPerUnits, calentity.numnMin, calentity.numnQuantityWaste, calentity.numnPercentWaste,
                    calentity.intnPkWorkflow, calentity.intnProcessInWorkflowId,
                    calentity.intnPkElementElementType, calentity.intnPkElementElement,
                    calentity.intnPkQFromElementElementType, calentity.intnPkQFromElementElement,
                    calentity.intnPkQFromResource, calentity.intnPkAccount,
                    calentity.boolnFromThickness, calentity.boolnIsBlock, calentity.boolnByArea);

                if (
                    //                                      //Calculation still able.
                    cal.strEndDate == null
                    )
                {
                    //                                      //Get ztime object for star date and time.
                    ZonedTime ztimeStartDate = ZonedTimeTools.NewZonedTime(cal.strStartDate.ParseToDate(),
                            cal.strStartTime.ParseToTime());
                    if (
                        //                                  //Calculation apply for the job.
                        ztimeJobDate_I >= ztimeStartDate
                        )
                    {
                        darrcalentity.Add(cal);
                    }
                }
                else
                {
                    //                                      //Calculation has been deleted.
                    //                                      //Get ztime object for star date and time and
                    //                                      //      end date and time.
                    ZonedTime ztimeStartDate = ZonedTimeTools.NewZonedTime(cal.strStartDate.ParseToDate(),
                            cal.strStartTime.ParseToTime());
                    ZonedTime ztimeEndDate = ZonedTimeTools.NewZonedTime(cal.strEndDate.ParseToDate(),
                            cal.strEndTime.ParseToTime());
                    if (
                        ztimeJobDate_I >= ztimeStartDate &&
                        ztimeJobDate_I < ztimeEndDate
                        )
                    {
                        darrcalentity.Add(cal);
                    }
                }
            }
            return darrcalentity;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static List<CalCalculation> GetCalculationsDependingDate(
            int intPkProduct_I,
            ZonedTime ztimeJobDate_I
            )
        {
            List<CalCalculation> darrcalentity = new List<CalCalculation>();
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();
            //                                              //Get all calculations of the product.
            List<CalentityCalculationEntityDB> darrcalentityFromDB = context.Calculation.Where(cal =>
                cal.intnPkProduct == intPkProduct_I).ToList();

            //                                              //Sort list.
            darrcalentityFromDB.Sort();
            foreach (CalentityCalculationEntityDB calentity in darrcalentityFromDB)
            {
                //                                          //Create the calcalculation
                CalCalculation cal = new CalCalculation(calentity.intPk,
                    calentity.strUnit, calentity.numnQuantity, calentity.numnCost,
                    calentity.intnHours, calentity.intnMinutes, calentity.intnSeconds,
                    calentity.numnBlock, calentity.boolIsEnable, calentity.strValue, calentity.strAscendants,
                    calentity.strDescription, calentity.numnProfit,
                    calentity.intnPkProduct, calentity.intnPkProcess,
                    calentity.intnPkResource, calentity.strCalculationType, calentity.strByX, calentity.strStartDate,
                    calentity.strStartTime, calentity.strEndDate, calentity.strEndTime, calentity.numnNeeded,
                    calentity.numnPerUnits, calentity.numnMin, calentity.numnQuantityWaste, calentity.numnPercentWaste,
                    calentity.intnPkWorkflow, calentity.intnProcessInWorkflowId,
                    calentity.intnPkElementElementType, calentity.intnPkElementElement,
                    calentity.intnPkQFromElementElementType, calentity.intnPkQFromElementElement,
                    calentity.intnPkQFromResource, calentity.intnPkAccount,
                    calentity.boolnFromThickness, calentity.boolnIsBlock, calentity.boolnByArea);

                if (
                    //                                      //Calculation still able.
                    cal.strEndDate == null
                    )
                {
                    //                                      //Get ztime object for star date and time.
                    ZonedTime ztimeStartDate = ZonedTimeTools.NewZonedTime(cal.strStartDate.ParseToDate(),
                            cal.strStartTime.ParseToTime());
                    if (
                        //                                  //Calculation apply for the job.
                        ztimeJobDate_I >= ztimeStartDate
                        )
                    {
                        darrcalentity.Add(cal);
                    }
                }
                else
                {
                    //                                      //Calculation has been deleted.
                    //                                      //Get ztime object for star date and time and
                    //                                      //      end date and time.
                    ZonedTime ztimeStartDate = ZonedTimeTools.NewZonedTime(cal.strStartDate.ParseToDate(),
                            cal.strStartTime.ParseToTime());
                    ZonedTime ztimeEndDate = ZonedTimeTools.NewZonedTime(cal.strEndDate.ParseToDate(),
                            cal.strEndTime.ParseToTime());
                    if (
                        ztimeJobDate_I >= ztimeStartDate &&
                        ztimeJobDate_I < ztimeEndDate
                        )
                    {
                        darrcalentity.Add(cal);
                    }
                }
            }
            return darrcalentity;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subCalculateJob(
            int intJobId_I,
            String strPrintshopId_I,
            IConfiguration configuration_I,
            out JobjsonJobJson jobjson_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            jobjson_O = null;

            intStatus_IO = 401;
            JobjsonJobJson jobjson;
            if (
                JobJob.boolIsValidJobId(intJobId_I, strPrintshopId_I, configuration_I, out jobjson,
                    ref strUserMessage_IO, ref strDevMessage_IO)
                )
            {
                //                                          //Get the product.
                ProdtypProductType prodtyp = ProdtypProductType.prodtypGetFromDB((int)jobjson.intnProductKey,
                    strPrintshopId_I);

                intStatus_IO = 404;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Product not found.";
                if (
                    prodtyp != null
                    )
                {
                    intStatus_IO = 405;
                    strUserMessage_IO = "No quantity to calculate.";
                    strDevMessage_IO = "";
                    if (
                        (jobjson.intnQuantity != null) &&
                        (jobjson.intnQuantity >= 0)
                        )
                    {
                        //                                  //Establish the connection.
                        Odyssey2Context context = new Odyssey2Context();

                        //                                  //Get Calculations.
                        //                                  //All calculations or depends job's date calculation.
                        List<CalCalculation> darrcalFromDB =
                            prodtyp.darrcalGetCalculationsCurrentByJobsStageAndWFFromDB(jobjson.intJobId, null);

                        //                                  //Get all the calculations for this product.
                        List<CalCalculation> darrcal = new List<CalCalculation>();
                        foreach (CalCalculation cal in darrcalFromDB)
                        {
                            if (
                                //                          //By Product.
                                (cal.strByX == CalCalculation.strByProduct) ||
                                //                          //By Intent.
                                (cal.strByX == CalCalculation.strByIntent) ||
                                //                          //It is by process, the wfj cals are not consider to this.
                                ((cal.strByX == CalCalculation.strByProcess) &&
                                (cal.intnPkWorkflowBelongsTo == null)) ||
                                //                          //It is by resource, the wfj cals are not consider to this.
                                ((cal.strByX == CalCalculation.strByResource) &&
                                (cal.intnPkWorkflowBelongsTo == null))

                                )
                            {
                                darrcal.Add(cal);
                            }
                        }

                        CalCalculation[] arrcal = darrcal.ToArray();
                        //                                  //Sort the calculations by group.
                        Std.Sort(arrcal);

                        //                                  //To be filled with the calculations, the values are set
                        //                                  //      within the while, but used after the while.
                        double numMinCostEstimated = 0;
                        double numMaxCostEstimated = 0;
                        double numProfit = 0;

                        //                                  //For each calcultion.
                        int intI = 0;
                        /*WHILE-DO*/
                        while (
                            intI < arrcal.Length
                            )
                        {
                            //                              //To easy code.
                            CalCalculation cal = arrcal[intI];

                            if (
                                //                          //Calculation is enable.
                                cal.boolIsEnable &&
                                //                          //Verify calculations conditions.
                                Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson)
                                )
                            {
                                /*CASE*/
                                if (
                                    //                      //Profit calculation.
                                    cal.strCalculationType == CalCalculation.strProfit
                                    )
                                {
                                    numProfit = (double)cal.numnProfit;
                                    intI = intI + 1;
                                }
                                else if (
                                    //                      //Base calculation.
                                    cal.strCalculationType == CalCalculation.strBase
                                    )
                                {
                                    numMinCostEstimated = numMinCostEstimated + (double)cal.numnCost;
                                    numMaxCostEstimated = numMaxCostEstimated + (double)cal.numnCost;
                                    intI = intI + 1;
                                }
                                else if (
                                    //                      //Per Unit calculation.
                                    cal.strCalculationType == CalCalculation.strPerUnit
                                    )
                                {
                                    numMinCostEstimated = numMinCostEstimated +
                                        ProdtypProductType.numGetPerUnitCost(cal, jobjson);
                                    numMaxCostEstimated = numMaxCostEstimated +
                                        ProdtypProductType.numGetPerUnitCost(cal, jobjson);
                                    intI = intI + 1;
                                }
                                else if (
                                    //                      //Per Quantity calculation.
                                    cal.strCalculationType == CalCalculation.strPerQuantity
                                    )
                                {
                                    CalCalculation calMin;
                                    CalCalculation calMax;
                                    ProdtypProductType.GetMinAndMaxCostOfThisGroup(intJobId_I,
                                        strPrintshopId_I, out calMin, out calMax, arrcal, ref intI);

                                    double numQuantityWithoutWasteNotUsed;
                                    double numWasteCalculatedNotUsed;
                                    double numFactorNotUsed;
                                    double numJobQuantityMinEstimated;
                                    bool boolWorkflowJobisReadyNotUsed = true;
                                    numMinCostEstimated = numMinCostEstimated +
                                        ProdtypProductType.numGetPerQuantityCost(calMin, jobjson,
                                        jobjson.intnQuantity, true, null, 0, null, out numQuantityWithoutWasteNotUsed,
                                        out numJobQuantityMinEstimated, out numWasteCalculatedNotUsed,
                                        out numFactorNotUsed, ref boolWorkflowJobisReadyNotUsed, ref intStatus_IO,
                                        ref strUserMessage_IO, ref strDevMessage_IO);

                                    numMaxCostEstimated = numMaxCostEstimated +
                                        ProdtypProductType.numGetPerQuantityCost(calMax, jobjson,
                                        jobjson.intnQuantity, true, null, 0, null, out numQuantityWithoutWasteNotUsed,
                                        out numJobQuantityMinEstimated, out numWasteCalculatedNotUsed,
                                        out numFactorNotUsed, ref boolWorkflowJobisReadyNotUsed, ref intStatus_IO,
                                        ref strUserMessage_IO, ref strDevMessage_IO);
                                }
                                /*END-CASE*/
                            }
                            else
                            {
                                intI = intI + 1;
                            }
                        }

                        //                                  //Min and Max Price Estimation.
                        double numMinPriceEstimated = numMinCostEstimated * (1 + (numProfit / 100));
                        double numMaxPriceEstimated = numMaxCostEstimated * (1 + (numProfit / 100));

                        //                                  //Assign cost to the output json.
                        jobjson.numMinCost = numMinCostEstimated.Round(2);
                        jobjson.numMaxCost = numMaxCostEstimated.Round(2);

                        jobjson.numMinPrice = numMinPriceEstimated.Round(2);
                        jobjson.numMaxPrice = numMaxPriceEstimated.Round(2);

                        jobjson_O = jobjson;

                        intStatus_IO = 200;
                        strUserMessage_IO = "";
                        strDevMessage_IO = "";
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static double numGetPerUnitCost(
            CalCalculation cal_I,
            JobjsonJobJson jobjson_I
            )
        {
            double numCost = 0.0;

            if (
                jobjson_I.intnQuantity != null
                )
            {
                int intJobQuantity = (int)jobjson_I.intnQuantity;
                if (
                    cal_I.numnMin != null && cal_I.numnMin > 0 && cal_I.numnMin >= intJobQuantity
                    )
                {
                    intJobQuantity = (int)cal_I.numnMin;
                }

                if (
                    cal_I.numnBlock != null && cal_I.numnBlock > 0
                    )
                {
                    int intBlocksToProduce = intJobQuantity / (int)cal_I.numnBlock;
                    if (
                        intJobQuantity % (int)cal_I.numnBlock > 0
                        )
                    {
                        intBlocksToProduce = intBlocksToProduce + 1;
                    }

                    intJobQuantity = intBlocksToProduce * (int)cal_I.numnBlock;
                }

                numCost = intJobQuantity * (double)cal_I.numnCost;
            }

            return numCost;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void GetMinAndMaxCostOfThisGroup(
            int intJobId_I,
            String strPrintshopId_I,
            //                                              //Calculation with min cost of the group.
            out CalCalculation calMinCostOfGroup_O,
            //                                              //Calculation with max cost of the group.
            out CalCalculation calMaxCostOfGroup_O,
            //                                              //Array of calculations of the product.
            CalCalculation[] arrcal_I,
            //                                              //Position of the begining of the group.
            //                                              //It will be modify to the beginin of the next group.
            ref int intI_IO
            )
        {
            int? intnGroupId = null;
            int? intnGroupIdNext = null;

            //                                              //At the begining the Calculation with the Min and Max cost
            //                                              //      is the first calculation.
            //                                              //This may change while I go through the other calculations 
            //                                              //      or the group.
            calMinCostOfGroup_O = arrcal_I[intI_IO];
            calMaxCostOfGroup_O = arrcal_I[intI_IO];

            //                                              //For each calculation of the group.
            //                                              //The first calculation is in the group.
            //                                              //I will be in this do, while the next calculations is from the same group.
            do
            {
                //                                          //Group Id and cost of the current calculation.
                //                                          //If is null, there is no group, must return the current calculation.
                intnGroupId = arrcal_I[intI_IO].intnGroup;
                double? numCost = arrcal_I[intI_IO].numnCost;

                //                                          //Next calculation of the group or first calclution of the next group.
                intI_IO = intI_IO + 1;

                if (
                    intnGroupId != null
                    )
                {
                    if (
                        //                                  //Does exist another calculation?
                        intI_IO < arrcal_I.Length
                        )
                    {
                        intnGroupIdNext = arrcal_I[intI_IO].intnGroup;
                        if (
                            //                              //This nexts calculations is from the same group.
                            (intnGroupIdNext == intnGroupId)
                            )
                        {
                            //                              //Set the cost and quantity if it is not a by resource cal.
                            double? numnCurrentMinCost = calMinCostOfGroup_O.numnCost;
                            double? numnCurrentQuantityOfMinCost = calMinCostOfGroup_O.numnQuantity;

                            if (
                                //                          //It is a by resource cal.
                                calMinCostOfGroup_O.intnPkResourceElementBelongsTo != null
                                )
                            {
                                //                          //To easy code.
                                int intResOfCurrentMin = (int)calMinCostOfGroup_O.intnPkResourceElementBelongsTo;
                                Odyssey2Context context = new Odyssey2Context();
                                ResResource resOfCurrentCost = ResResource.resFromDB(intResOfCurrentMin, false);

                                //                          //Verify job's status.
                                JobentityJobEntityDB jobjob = context.Job.FirstOrDefault(job => job.intJobID ==
                                    intJobId_I);

                                CostentityCostEntityDB costentityCurrentCost = null;
                                if (
                                    //                      //Job's still pending.
                                    jobjob == null
                                    )
                                {
                                    //                      //Get the current cost.
                                    costentityCurrentCost = resOfCurrentCost.costentityCurrent;
                                }
                                else
                                {
                                    //                      //Job is inprogress or completed.
                                    //                      //Get the cost checking date.
                                    ZonedTime ztimeJobDate;
                                    ProdtypProductType.GetJobDate(jobjob, out ztimeJobDate);
                                    costentityCurrentCost = resOfCurrentCost.GetCostDependingDate(ztimeJobDate);
                                }
                                if (
                                    //                      //The resource has a cost.
                                    costentityCurrentCost != null
                                    )
                                {
                                    //                          //Set the cost and quantity.
                                    numnCurrentMinCost = costentityCurrentCost.numnCost;
                                    numnCurrentQuantityOfMinCost = costentityCurrentCost.numnQuantity;
                                }

                            }

                            //                              //Set the cost and quantity if it is not a by resource cal.
                            double? numnNextCost = arrcal_I[intI_IO].numnCost;
                            double? numnNextQuantityCost = arrcal_I[intI_IO].numnQuantity;

                            if (
                                //                          //It is a by resource cal.
                                arrcal_I[intI_IO].intnPkResourceElementBelongsTo != null
                                )
                            {
                                //                          //To easy code.
                                int intResOfNext = (int)arrcal_I[intI_IO].intnPkResourceElementBelongsTo;
                                Odyssey2Context context = new Odyssey2Context();
                                ResResource resOfCurrentCost = ResResource.resFromDB(intResOfNext, false);

                                //                          //Verify job's status.
                                JobentityJobEntityDB jobjob = context.Job.FirstOrDefault(job => job.intJobID ==
                                    intJobId_I);

                                CostentityCostEntityDB costentityNext = null;
                                if (
                                    //                      //Job's still pending.
                                    jobjob == null
                                    )
                                {
                                    //                      //Get the current cost.
                                    costentityNext = resOfCurrentCost.costentityCurrent;
                                }
                                else
                                {
                                    //                      //Job is inprogress or completed.
                                    //                      //Get the cost checking date.
                                    ZonedTime ztimeJobDate;
                                    ProdtypProductType.GetJobDate(jobjob, out ztimeJobDate);
                                    costentityNext = resOfCurrentCost.GetCostDependingDate(ztimeJobDate);
                                }
                                if (
                                    //                      //The resource has a cost.
                                    costentityNext != null
                                    )
                                {
                                    //                      //Set the cost and quantity.
                                    numnNextCost = costentityNext.numnCost;
                                    numnNextQuantityCost = costentityNext.numnQuantity;
                                }
                            }

                            if (
                                ((numnCurrentMinCost != null) && (numnCurrentMinCost > 0) &&
                                (numnCurrentQuantityOfMinCost != null) && (numnCurrentQuantityOfMinCost > 0) &&
                                (numnNextCost != null) && (numnNextCost > 0) &&
                                (numnNextQuantityCost != null) && (numnNextQuantityCost > 0)) &&
                                //                          //Current per quantity cost.
                                ((numnCurrentMinCost / numnCurrentQuantityOfMinCost) *
                                //                          //Current quantity needed.
                                (calMinCostOfGroup_O.numnNeeded / calMinCostOfGroup_O.numnPerUnits)) >
                                //                          //Next per quantity cost.
                                ((numnNextCost / numnNextQuantityCost) *
                                //                          //Next quantity needed.
                                (arrcal_I[intI_IO].numnNeeded / arrcal_I[intI_IO].numnPerUnits))
                                )
                            {
                                calMinCostOfGroup_O = arrcal_I[intI_IO];
                            }

                            //                              //Set the cost and quantity if it is not a by resource cal.
                            double? numnCurrentMaxCost = calMaxCostOfGroup_O.numnCost;
                            double? numnCurrentQuantityOfMaxCost = calMaxCostOfGroup_O.numnQuantity;

                            if (
                                //                          //It is a by resource cal.
                                calMaxCostOfGroup_O.intnPkResourceElementBelongsTo != null
                                )
                            {
                                //                          //To easy code.
                                int intResOfCurrentMax = (int)calMaxCostOfGroup_O.intnPkResourceElementBelongsTo;
                                Odyssey2Context context = new Odyssey2Context();
                                ResResource resOfCurrentCost = ResResource.resFromDB(intResOfCurrentMax, false);

                                //                          //Verify job's status.
                                JobentityJobEntityDB jobjob = context.Job.FirstOrDefault(job => job.intJobID ==
                                    intJobId_I);

                                CostentityCostEntityDB costentityCurrentMax = null;
                                if (
                                    //                      //Job's still pending.
                                    jobjob == null
                                    )
                                {
                                    //                      //Get the current cost.
                                    costentityCurrentMax = resOfCurrentCost.costentityCurrent;
                                }
                                else
                                {
                                    //                      //Job is inprogress or completed.
                                    //                      //Get the cost checking date.
                                    ZonedTime ztimeJobDate;
                                    ProdtypProductType.GetJobDate(jobjob, out ztimeJobDate);
                                    costentityCurrentMax = resOfCurrentCost.GetCostDependingDate(ztimeJobDate);
                                }
                                if (
                                    //                      //Resource has a cost.
                                    costentityCurrentMax != null
                                    )
                                {
                                    //                      //Set cost and quantity.
                                    numnCurrentMaxCost = costentityCurrentMax.numnCost;
                                    numnCurrentQuantityOfMaxCost = costentityCurrentMax.numnQuantity;
                                }
                            }

                            if (
                                ((numnCurrentMaxCost != null) && (numnCurrentMaxCost > 0) &&
                                (numnCurrentQuantityOfMaxCost != null) && (numnCurrentQuantityOfMaxCost > 0) &&
                                (numnNextCost != null) && (numnNextCost > 0) &&
                                (numnNextQuantityCost != null) && (numnNextQuantityCost > 0)) &&
                                ((numnCurrentMaxCost / numnCurrentQuantityOfMaxCost) *
                                (calMaxCostOfGroup_O.numnNeeded / calMaxCostOfGroup_O.numnPerUnits)) <
                                ((numnNextCost / numnNextQuantityCost) *
                                (arrcal_I[intI_IO].numnNeeded / arrcal_I[intI_IO].numnPerUnits))
                                )
                            {
                                calMaxCostOfGroup_O = arrcal_I[intI_IO];
                            }
                        }
                    }
                }
            }
            while (
                //                                          //The calculation is part of a group.
                (intnGroupId != null) &&
                //                                          //The next calculation is form the same group.
                (intnGroupIdNext == intnGroupId)
            );
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void GetJobDate(
            JobentityJobEntityDB jobentity_I,
            out ZonedTime ztimeJobDate_O
            )
        {
            if (
                jobentity_I == null
                )
            {
                ztimeJobDate_O = ZonedTimeTools.NewZonedTime(Date.Now(ZonedTimeTools.timezone),
                    Time.Now(ZonedTimeTools.timezone));
            }
            else
            {
                //                                              //Create ztime objects.
                Date dateStartDate = jobentity_I.strStartDate.ParseToDate();
                Time timeStartTime = jobentity_I.strStartTime.ParseToTime();
                ztimeJobDate_O = ZonedTimeTools.NewZonedTime(dateStartDate, timeStartTime);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static double numGetPerQuantityCost(
            //                                              //Return the cost using the input quantity.

            CalCalculation cal_I,
            JobjsonJobJson jobjson_I,
            //                                              //QFrom Quantity.
            double? numnQuantityFrom_I,
            bool boolAllowDecimal_I,
            bool? boolnQFromIsSize_I,
            int intPkProcessInWorkflow_I,
            List<ResthkjsonResourceThicknessJson> darrResourceThickness_I,
            out double numQuantityWithoutWaste_O,
            out double numQuantityWithWaste_O,
            out double numWasteCalculated_O,
            out double numFactor_O,
            ref bool boolWorkflowJobIsReady_IO,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            double numCost = 0.0;
            numQuantityWithoutWaste_O = 0.0;
            numQuantityWithWaste_O = 0.0;
            numWasteCalculated_O = 0.0;
            numFactor_O = 0.0;

            if (
                numnQuantityFrom_I != null
                )
            {
                double numnQuantityFrom = (double)numnQuantityFrom_I;

                double? numnNeeded = null;
                double? numnPerUnit = null;

                /*CASE*/
                if (
                    //                                      //Has needed and per units.
                    (cal_I.numnNeeded != null) && (cal_I.numnNeeded != 0) &&
                    (cal_I.numnPerUnits != null) && (cal_I.numnPerUnits != 0) &&
                    (cal_I.boolnIsBlock != true)
                    )
                {
                    //                                      //Normal calculation with Needed y PerUnit
                    numnNeeded = cal_I.numnNeeded;
                    numnPerUnit = cal_I.numnPerUnits;
                }
                else if (
                    //                                      //Calculation without PerUnit and needed
                    //                                      //    with QFrom-Size.
                    (
                    (
                    (cal_I.numnNeeded != null) && (cal_I.numnNeeded != 0) &&
                    (cal_I.numnPerUnits == null)
                    )
                    ||
                    (
                    cal_I.numnNeeded == null &&
                    cal_I.numnPerUnits == null
                    )
                    ) &&
                    boolnQFromIsSize_I != null && boolnQFromIsSize_I == true
                    )
                {
                    ProdtypProductType.GetNeededAndPerQuantityFromSize(intPkProcessInWorkflow_I,
                        cal_I, jobjson_I, darrResourceThickness_I, ref numnNeeded, ref numnPerUnit, ref intStatus_IO,
                        ref strUserMessage_IO, ref strDevMessage_IO);

                    boolWorkflowJobIsReady_IO = intStatus_IO == 200 ? true : false;
                }
                else if (
                    //                                      //Calculation has to take perunit from thickness.
                    cal_I.boolnFromThickness == true
                    )
                {
                    numnPerUnit = CalCalculation.intGetPerUnit(cal_I.intnPkQFromElementElementTypeBelongsTo,
                        cal_I.intnPkQFromElementElementBelongsTo, (int)cal_I.intnPkResourceElementBelongsTo,
                        (int)cal_I.intnPkQFromResourceElementBelongsTo, intPkProcessInWorkflow_I,
                        darrResourceThickness_I);
                    numnNeeded = 1;
                }
                else if (
                    //                                      //Calculation is by block.
                    cal_I.boolnIsBlock == true
                    )
                {
                    numnPerUnit = cal_I.numnPerUnits;
                    numnNeeded = 1;
                }
                /*END-CASE*/

                if (
                    boolWorkflowJobIsReady_IO
                    )
                {
                    if (
                    (numnNeeded != null) && (numnNeeded > 0) &&
                    (numnPerUnit != null) && (numnPerUnit > 0)
                    )
                    {
                        double numQuantityThisIO;

                        double numNeededPerUnitOrLength;

                        ResResource res = ResResource.resFromDB(cal_I.intnPkResourceElementBelongsTo, false);

                        String strWidthUnitNotUsed;
                        String strUnitOfMeasurementNotUsed;
                        if (
                            //                                          //It is a roll.
                            res != null && res.subFunIsMediaTypeMediaUnitRoll(out strWidthUnitNotUsed, 
                            out strUnitOfMeasurementNotUsed)
                            )
                        {
                            numNeededPerUnitOrLength = (double)numnNeeded;

                            //                                          //Get needed of the roll.
                            numQuantityThisIO = ProdtypProductType.numNeededFinal(numnQuantityFrom, (double)numnNeeded,
                                (double)numnPerUnit);
                        }
                        else
                        {
                            //                                      //Obtain the needed per unit.
                            numNeededPerUnitOrLength = (double)numnNeeded / (double)numnPerUnit;

                            if (
                                cal_I.boolnByArea == true
                                )
                            {
                                numQuantityThisIO = 0;

                                ResResource resQFrom = ResResource.resFromDB(cal_I.intnPkQFromResourceElementBelongsTo,
                                    false);
                                if (
                                    resQFrom != null
                                    )
                                {
                                    //                          //If resource is media, get dimensions from attributes.
                                    double numWidth = 0.0;
                                    double? numnHeight = 0.0;
                                    String strDimUnit = "";
                                    bool boolHasDimensions = false;

                                    if (
                                        resQFrom.restypBelongsTo.strXJDFTypeId ==
                                            ProdtypProductType.strResourceTypeMedia
                                        )
                                    {
                                        CalCalculation.subGetDimensionsValues(
                                            (int)cal_I.intnPkQFromResourceElementBelongsTo, ref numWidth,
                                            ref numnHeight, ref strDimUnit, ref boolHasDimensions);

                                        if (
                                            //              //QFrom is a paper.
                                            !resQFrom.boolMediaRoll()
                                            )
                                        {
                                            //              //Get total area used.
                                            numQuantityThisIO = (double)numnQuantityFrom *
                                                (
                                                //          //One paper
                                                (numWidth * (double)numnHeight) *
                                                //          //Needed per one paper.
                                                numNeededPerUnitOrLength);
                                        }
                                        else
                                        {
                                            //              //QFrom is a roll.

                                            String strLengthUnitComponent =
                                                CalCalculation.strGetLengthUnit((int)cal_I.intnPkQFromResourceElementBelongsTo);
                                            if (
                                                strDimUnit != strLengthUnitComponent
                                                )
                                            {
                                                numnQuantityFrom = CvtConvert.to((double)numnQuantityFrom, strLengthUnitComponent,
                                                    strDimUnit);
                                            }

                                            //              //Get total area used.
                                            numQuantityThisIO = (
                                                //          //One secction of roll
                                                (numWidth * (double)numnQuantityFrom) *
                                                //          //Needed per one paper.
                                                numNeededPerUnitOrLength);
                                        }
                                    }
                                    else if (
                                        resQFrom.restypBelongsTo.strXJDFTypeId ==
                                            ProdtypProductType.strResourceTypeComponent
                                        )
                                    {
                                        //                  //Get propagated dimension
                                        List<ResthkjsonResourceThicknessJson> darrresthkjson =
                                            darrResourceThickness_I.Where(resthk =>
                                            resthk.intnPkEleet == cal_I.intnPkQFromElementElementTypeBelongsTo &&
                                            resthk.intnPkEleele == cal_I.intnPkQFromElementElementBelongsTo &&
                                            resthk.intPkProcessInWorkflow == intPkProcessInWorkflow_I &&
                                            resthk.intPkResource == (int)cal_I.intnPkQFromResourceElementBelongsTo)
                                            .ToList();

                                        if (
                                            darrresthkjson.Count > 0
                                            )
                                        {
                                            if (
                                                //          //if there is only one propagated dimension,
                                                //          //      the calculation is made
                                                darrresthkjson.Count == 1
                                                )
                                            {
                                                double? numnWidth = darrresthkjson[0].numnWidth;
                                                double? numnLength = darrresthkjson[0].numnLength;

                                                if (
                                                    numnWidth != null &&
                                                    numnLength != null
                                                    )
                                                {
                                                    String strWidthUnitPropagated = darrresthkjson[0].strWidthUnit;
                                                    String strWidthUnitComponent =
                                                        CalCalculation.strGetWidthUnit((int)cal_I.intnPkQFromResourceElementBelongsTo);
                                                    if (
                                                        strWidthUnitPropagated != strWidthUnitComponent
                                                        )
                                                    {
                                                        numnWidth = CvtConvert.to((double)numnWidth, strWidthUnitPropagated,
                                                            strWidthUnitComponent);
                                                        numnLength = CvtConvert.to((double)numnLength, strWidthUnitPropagated,
                                                            strWidthUnitComponent);
                                                    }
                                                }

                                                numWidth = numnWidth != null ? (double)numnWidth : 0;
                                                numnHeight = numnLength != null ? (double)numnLength : 0;
                                                //          //Get total area used.
                                                numQuantityThisIO = (double)numnQuantityFrom *
                                                    (
                                                    //      //One paper
                                                    (numWidth * (double)numnHeight) *
                                                    //      //Needed per one paper.
                                                    numNeededPerUnitOrLength);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //                                      //Update the quantity as the needed per unit (product) 
                                //                                      //      multiplied by the products needed for the job.
                                numQuantityThisIO = numnQuantityFrom * numNeededPerUnitOrLength;
                            }
                        }

                        numFactor_O = numNeededPerUnitOrLength;

                        numQuantityWithoutWaste_O = boolAllowDecimal_I ? numQuantityThisIO.Round(2) :
                            Math.Ceiling(numQuantityThisIO);

                        //                                      //Obtain the cost.
                        double? numnCalculationCost = cal_I.numnCost;
                        double? numnCalculationQuantity = cal_I.numnQuantity;
                        double? numnCalculationMin = cal_I.numnMin;
                        double? numnCalculationBlock = cal_I.numnBlock;

                        if (
                            cal_I.intnPkResourceElementBelongsTo != null
                            )
                        {
                            //                                  //Get quantity and cost of the resource
                            ProdtypProductType.subGetResourceCostData((int)cal_I.intnPkResourceElementBelongsTo,
                                jobjson_I.intJobId, ref numnCalculationCost, ref numnCalculationQuantity,
                                ref numnCalculationMin, ref numnCalculationBlock);
                        }

                        double numCostPerUnit = 0.0;
                        if (
                            (numnCalculationCost != null) && (numnCalculationCost > 0) &&
                            (numnCalculationQuantity != null) && (numnCalculationQuantity > 0)
                            )
                        {
                            numCostPerUnit = (double)numnCalculationCost / (double)numnCalculationQuantity;
                        }

                        //                                      //Add Quantity waste.
                        double numPercentWaste = (cal_I.numnPercentWaste != null) ? (double)cal_I.numnPercentWaste : 0;
                        double numQuantityWaste = (cal_I.numnQuantityWaste != null) ? (double)cal_I.numnQuantityWaste : 0;

                        numWasteCalculated_O = ProdtypProductType.numCalculateWaste(numQuantityThisIO, numPercentWaste,
                            numQuantityWaste);

                        numWasteCalculated_O = boolAllowDecimal_I ? numWasteCalculated_O :
                            Math.Ceiling(numWasteCalculated_O);
                        numQuantityThisIO = numQuantityThisIO + numWasteCalculated_O;

                        if (
                            //                                  //If the calculation is not from a resource, use minToUse
                            cal_I.strByX != CalCalculation.strByResource
                            )
                        {
                            ProdtypProductType.subGetNewQuantityDependingMinToUse(boolAllowDecimal_I, numnCalculationMin,
                                numnCalculationBlock, ref numQuantityThisIO);
                        }

                        //                                      //Final quantity considering by block and min.
                        numQuantityWithWaste_O = boolAllowDecimal_I ? numQuantityThisIO :
                            Math.Ceiling(numQuantityThisIO);

                        //                                      //If the calc use FromThickness, re-calculate neededPerUnit
                        if (
                            (cal_I.boolnFromThickness == true) ||
                            (cal_I.boolnIsBlock == true)
                            )
                        {
                            numQuantityWithWaste_O = Math.Ceiling(numQuantityWithWaste_O) * (double)cal_I.numnNeeded;
                        }

                        //                                      //Obtaining the final cost.
                        numCost = (numQuantityWithWaste_O * numCostPerUnit);
                    }
                }
            }
            return numCost;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static double numNeededFinal(
            //                                              //Return the neededLength of the roll.

            //                                              //Qty from.
            double numQty_I,
            //                                              //needed the length of the resource.
            double numNeeded_I,
            //                                              //per quantity needed from the resource.
            double numPer_I
            )
        {
            double numNeededFinal = numNeeded_I;
            int intI = 0;
            int intJ = -1;

            /*REPEAT-WHILE*/
            while (
                intI < numQty_I
                )
            {
                intJ = intJ + 1;
                if (
                    //                                      //Ciclo.
                    intJ < numPer_I
                    )
                {
                    //                                      //Do not something.
                }
                else
                {
                    //                                      //Add Length of the roll
                    numNeededFinal = numNeededFinal + numNeeded_I;
                    intJ = 0;
                }
                intI = intI + 1;
            }

            return numNeededFinal;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void GetNeededAndPerQuantityFromSize(

            int intPkProcessInWorkflow_I,
            CalCalculation cal_I,
            JobjsonJobJson jobjson_I,
            List<ResthkjsonResourceThicknessJson> darrResourceThickness_I,
            ref double? numnNeeded_IO,
            ref double? numnPerUnit_IO,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the Needed from the calculation. It would be 1.          
            numnNeeded_IO = cal_I.numnNeeded;
            numnPerUnit_IO = null;

            //                                              //Get Resource and resource type entities.
            EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                ele.intPk == cal_I.intnPkResourceElementBelongsTo);
            EtentityElementTypeEntityDB etentityRes = context.ElementType.FirstOrDefault(et =>
                et.intPk == eleentityRes.intPkElementType);

            //                                              //To know if is Media Resource.
            bool boolIsMedia = etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeMedia ? true : false;
            bool boolIsComponent = etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeComponent ? true : false;

            //                                              //To know if the resource is a roll.
            ResResource resResource = ResResource.resFromDB(cal_I.intnPkResourceElementBelongsTo, false);
            bool boolMediaRoll = resResource.boolMediaRoll();

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Invalid type of resource to get the PerUnit from QFrom.";
            if (
                boolIsMedia || boolIsComponent
                )
            {
                PatransPaperTransformationEntityDB patransentity = context.PaperTransformation.FirstOrDefault(pt =>
                    pt.intnPkCalculationOwn == cal_I.intPk);

                if (
                    patransentity != null
                    )
                {
                    //                                      //Get input dimensions from paper transformation.
                    double numWithI = patransentity.numWidthI;
                    double? numnLengthI = patransentity.numnHeightI;
                    String strDimensionI = patransentity.strUnit;

                    //                                      //Get output dimensions from Job.
                    double numWithO = 0.0;
                    double numLengthO = 0.0;
                    String strDimensionsJobOriginal = "";
                    double? numnLengthOToSend = 0.0;
                    CalCalculation.subGetWidthAndLengthOutput(jobjson_I, strDimensionI, ref numWithO,
                        ref numnLengthOToSend, ref strDimensionsJobOriginal, ref intStatus_IO, ref strUserMessage_IO,
                        ref strDevMessage_IO);//ll
                    numLengthO = (double)numnLengthOToSend;

                    if (
                        intStatus_IO == 200
                        )
                    {
                        CutdatajsonCutDataJson cutdatajson;

                        CalCalculation.subfunCalculateCutsOrFoldedFactor(patransentity.intPkResourceI, numWithI,
                            numnLengthI, numWithO, numLengthO, patransentity.numnMarginTop,
                            patransentity.numnMarginBottom, patransentity.numnMarginLeft,
                            patransentity.numnMarginRight, patransentity.numnVerticalGap,
                            patransentity.numnHorizontalGap, patransentity.boolOptimized,
                            out cutdatajson, ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);

                        //                                      //Get the PerUnit.
                        numnPerUnit_IO = cutdatajson.numPerUnit;
                        //                                      //The resource with MediaUnit roll, 
                        //                                      //  It has not needed.
                        numnNeeded_IO = cal_I.numnNeeded == null ? cutdatajson.numNeeded : numnNeeded_IO;
                        intStatus_IO = 200;
                        strUserMessage_IO = "";
                        strDevMessage_IO = "";
                    }
                }
                else
                {
                    //                                      //A calculation without PaperTransformation,
                    //                                      //      but still without PerUnit and QFrom with Size.

                    //                                      //Like having a dinamic Paper Tranformation.
                    //                                      //Get the attributes from Resource or from Propagation PT.

                    double? numnWidthI = null;
                    double? numnLengthI = null;
                    String strDimensionsUnit = null;
                    String strWidthUnit = null;
                    String strLengthUnit = null;
                    if (
                    //                                      //Resource is media.
                    boolIsMedia
                    )
                    {
                        ProdtypProductType.GetDimensionsFromResourceAttributes(eleentityRes, etentityRes, boolMediaRoll,
                            out numnWidthI, out numnLengthI, out strDimensionsUnit, out strWidthUnit, out strLengthUnit,
                            ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);

                        strDimensionsUnit = strDimensionsUnit == null ? strWidthUnit : strDimensionsUnit;

                        if (
                            !boolMediaRoll &&
                             strWidthUnit != null && strLengthUnit != null &&
                             numnLengthI != null && numnLengthI != null &&
                             strWidthUnit != strLengthUnit
                            )
                        {
                            numnLengthI = CvtConvert.to((double)numnLengthI, strLengthUnit, strWidthUnit);
                        }
                    }
                    else
                    {
                        //                                  //Resource is component.
                        //                                  //Look for WidthI and LengthI from Propagation 
                        //                                  //      paper transformation.

                        PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                            piw.intPkWorkflow == cal_I.intnPkWorkflowBelongsTo &&
                            piw.intProcessInWorkflowId == cal_I.intnProcessInWorkflowId);

                        //                                  //Propagation Paper Transformation for this IO.
                        List<PatransPaperTransformationEntityDB> darrpatransentityPropagation =
                            context.PaperTransformation.Where(pt =>
                            pt.intPkProcessInWorkflow == piwentity.intPk &&
                            pt.intnPkElementElementTypeI == cal_I.intnPkElementElementTypeBelongsTo &&
                            pt.intnPkElementElementI == cal_I.intnPkElementElementBelongsTo &&
                            pt.intPkResourceI == cal_I.intnPkResourceElementBelongsTo &&
                            pt.intnPkCalculationOwn == null &&
                            pt.intnPkCalculationLink != null).ToList();

                        List<PatransPaperTransformationEntityDB> darrpatransentityApply =
                            new List<PatransPaperTransformationEntityDB>();

                        foreach (PatransPaperTransformationEntityDB patransentityPropagation in
                            darrpatransentityPropagation)
                        {
                            CalCalculation cal = CalCalculation.calGetFromDb(
                                (int)patransentityPropagation.intnPkCalculationLink);

                            if (
                                Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null,
                                jobjson_I)
                                )
                            {
                                darrpatransentityApply.Add(patransentity);
                            }
                        }
                        if (
                            darrpatransentityApply.Count == 1
                            )
                        {
                            //                              //Found in Propagation Paper Transformation.

                            numnWidthI = darrpatransentityApply[0].numWidthI;
                            numnLengthI = darrpatransentityApply[0].numnHeightI;
                            strDimensionsUnit = darrpatransentityApply[0].strUnit;
                        }
                    }

                    if (
                        numnWidthI != null && strDimensionsUnit != null
                        )
                    {
                        //                          //Get output dimensions from Job.
                        double numWithO = 0.0;
                        double numLengthO = 0.0;
                        String strDimesionsJobOriginal = "";
                        double? numnLengthOToSend = 0.0;
                        CalCalculation.subGetWidthAndLengthOutput(jobjson_I, strDimensionsUnit,
                            ref numWithO, ref numnLengthOToSend, ref strDimesionsJobOriginal, ref intStatus_IO,
                            ref strUserMessage_IO, ref strDevMessage_IO);

                        numLengthO = numnLengthOToSend != null ? (double)numnLengthOToSend : numLengthO;

                        numnLengthI = boolMediaRoll ? numLengthO : numnLengthI;
                        if (
                            intStatus_IO == 200
                            )
                        {
                            CutdatajsonCutDataJson cutdatajson;
                            CalCalculation.subfunCalculateCutsOrFoldedFactor(patransentity.intPkResourceI,
                                (double)numnWidthI, (double)numnLengthI, numWithO, numLengthO,
                                0, 0, 0, 0, 0, 0, false, out cutdatajson, ref intStatus_IO, ref strUserMessage_IO,
                                ref strDevMessage_IO);

                            //                              //Get the PerUnit.
                            numnPerUnit_IO = cutdatajson.numPerUnit;
                            //                              //The resource with MediaUnit roll, 
                            //                              //It has not needed.
                            numnNeeded_IO = cal_I.numnNeeded == null ? cutdatajson.numNeeded : numnNeeded_IO;
                            intStatus_IO = 200;
                            strUserMessage_IO = "";
                            strDevMessage_IO = "";
                        }
                    }
                }
            }
            else if (
                etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice
                )
            {
                numnPerUnit_IO = CalCalculation.intGetPerUnit(cal_I.intnPkQFromElementElementTypeBelongsTo,
                        cal_I.intnPkQFromElementElementBelongsTo, (int)cal_I.intnPkResourceElementBelongsTo,
                        (int)cal_I.intnPkQFromResourceElementBelongsTo, intPkProcessInWorkflow_I,
                        darrResourceThickness_I);

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "";
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static double numResourceArea(
            //                                              //Receive a media resource and verify if the cost of that 
            //                                              //      resource is a cost by area.

            int intPkResource_I
            )
        {
            double numResourceArea = 0.0;

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the resource's type.
            EtentityElementTypeEntityDB etentity = (from element in context.Element
                                                    join elementtype in context.ElementType on
                                                    element.intPkElementType equals elementtype.intPk
                                                    where element.intPk == intPkResource_I
                                                    select elementtype).FirstOrDefault();

            List<ValentityValueEntityDB> darrvalentity = context.Value.Where(val =>
                val.intPkElement == intPkResource_I).ToList();

            //                                      //Get the pks of dimensions attributes.
            int[] arrintPkDimensionsAttribute = ResResource.arrintPkDimensionsAttributeGet(etentity.intPk);

            //                                      //Find the first attribute.
            ValentityValueEntityDB valentityWidth = darrvalentity.FirstOrDefault(val =>
            val.intPkAttribute == arrintPkDimensionsAttribute[0]);

            //                                      //Find the second attribute.
            ValentityValueEntityDB valentityLength = darrvalentity.FirstOrDefault(val =>
            val.intPkAttribute == arrintPkDimensionsAttribute[1]);

            if (
                valentityWidth != null &&
                valentityLength != null
                )
            {
                numResourceArea = valentityWidth.strValue.ParseToNum() * valentityLength.strValue.ParseToNum();
            }

            return numResourceArea;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void GetDimensionsFromResourceAttributes(
            EleentityElementEntityDB eleentityRes_I,
            EtentityElementTypeEntityDB etentityRes_I,
            bool boolMediaRoll_I,
            out double? numnWidth_O,
            out double? numnLength_O,
            out String strDimesionsUnit_O,
            out String strWidthUnit_O,
            out String strLengthUnit_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            numnWidth_O = null;
            numnLength_O = null;
            strDimesionsUnit_O = null;
            strWidthUnit_O = null;
            strLengthUnit_O = null;

            //                                              //Attributes for Resource.
            List<AttrentityAttributeEntityDB> darrattrResource =
                (from attrentity in context.Attribute
                 join attretentity in context.AttributeElementType
                 on attrentity.intPk equals attretentity.intPkAttribute
                 where attretentity.intPkElementType == etentityRes_I.intPk
                 select attrentity).ToList();

            //                                              //Get the Width, Length and DimensionsUnit.
            AttrentityAttributeEntityDB attrentityWidth = darrattrResource.FirstOrDefault(a =>
                a.strXJDFName == "Width" || a.strCustomName == "XJDFWidth");
            AttrentityAttributeEntityDB attrentityLength = darrattrResource.FirstOrDefault(a =>
                a.strXJDFName == "Length" || a.strCustomName == "XJDFLength");
            AttrentityAttributeEntityDB attrentityDimensionsUnit = darrattrResource.FirstOrDefault(a =>
                a.strXJDFName == "DimensionsUnit" || a.strCustomName == "XJDFDimensionsUnit");
            AttrentityAttributeEntityDB attrentityWidthUnit = darrattrResource.FirstOrDefault(a =>
                a.strXJDFName == "WidthUnit" || a.strCustomName == "XJDFWidthUnit");
            AttrentityAttributeEntityDB attrentityLengthUnit = darrattrResource.FirstOrDefault(a =>
                a.strXJDFName == "LengthUnit" || a.strCustomName == "XJDFLengthUnit");

            if (
                !boolMediaRoll_I
                )
            {
                ValentityValueEntityDB valentityWidth = null;
                ValentityValueEntityDB valentityLength = null;
                if (
                    attrentityWidth != null && attrentityLength != null &&
                    (attrentityDimensionsUnit != null || (attrentityWidthUnit != null && attrentityLengthUnit != null))
                    )
                {
                    //                                          //Get the Width value.
                    valentityWidth = context.Value.FirstOrDefault(val =>
                        val.intPkElement == eleentityRes_I.intPk &&
                        val.intPkAttribute == attrentityWidth.intPk);

                    //                                          //Get the Length value.
                    valentityLength = context.Value.FirstOrDefault(val =>
                        val.intPkElement == eleentityRes_I.intPk &&
                        val.intPkAttribute == attrentityLength.intPk);
                }
                if (
                    attrentityDimensionsUnit != null
                    )
                {
                    //                                          //Get the DimesionsUnit value.
                    ValentityValueEntityDB valentityDimesionsUnit = context.Value.FirstOrDefault(val =>
                        val.intPkElement == eleentityRes_I.intPk &&
                        val.intPkAttribute == attrentityDimensionsUnit.intPk);

                    intStatus_IO = 402;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "No values for attributes.";
                    if (
                        valentityWidth != null && valentityLength != null && valentityDimesionsUnit != null
                        )
                    {
                        numnWidth_O = (valentityWidth.strValue).ParseToNum();
                        numnLength_O = (valentityLength.strValue).ParseToNum();
                        strDimesionsUnit_O = valentityDimesionsUnit.strValue;
                    }
                }
                if (
                    attrentityWidthUnit != null && attrentityLengthUnit != null
                    )
                {
                    //                                          //Get the WidthUnit value.
                    ValentityValueEntityDB valentityWidthUnit = context.Value.FirstOrDefault(val =>
                        val.intPkElement == eleentityRes_I.intPk &&
                        val.intPkAttribute == attrentityWidthUnit.intPk);

                    //                                          //Get the LengthUnit value.
                    ValentityValueEntityDB valentityLengthUnit = context.Value.FirstOrDefault(val =>
                        val.intPkElement == eleentityRes_I.intPk &&
                        val.intPkAttribute == attrentityLengthUnit.intPk);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "No values for attributes.";
                    if (
                        valentityWidth != null && valentityLength != null &&
                        valentityWidthUnit != null && valentityLengthUnit != null
                        )
                    {
                        numnWidth_O = (valentityWidth.strValue).ParseToNum();
                        numnLength_O = (valentityLength.strValue).ParseToNum();
                        strWidthUnit_O = valentityWidthUnit.strValue;
                        strLengthUnit_O = valentityLengthUnit.strValue;
                    }
                }
            }
            else
            {
                //                                          //Is roll.

                ValentityValueEntityDB valentityWidth = null;
                if (
                       attrentityWidth != null &&
                       (attrentityWidthUnit != null && attrentityLengthUnit != null)
                       )
                {
                    //                                          //Get the Width value.
                    valentityWidth = context.Value.FirstOrDefault(val =>
                        val.intPkElement == eleentityRes_I.intPk &&
                        val.intPkAttribute == attrentityWidth.intPk);

                    //                                          //Get the WidthUnit value.
                    ValentityValueEntityDB valentityWidthUnit = context.Value.FirstOrDefault(val =>
                        val.intPkElement == eleentityRes_I.intPk &&
                        val.intPkAttribute == attrentityWidthUnit.intPk);

                    //                                          //Get the LengthUnit value.
                    ValentityValueEntityDB valentityLengthUnit = context.Value.FirstOrDefault(val =>
                        val.intPkElement == eleentityRes_I.intPk &&
                        val.intPkAttribute == attrentityLengthUnit.intPk);

                    intStatus_IO = 404;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "No values for attributes.";
                    if (
                        valentityWidth != null &&
                        valentityWidthUnit != null && valentityLengthUnit != null
                        )
                    {
                        numnWidth_O = (valentityWidth.strValue).ParseToNum();
                        strWidthUnit_O = valentityWidthUnit.strValue;
                        strLengthUnit_O = valentityLengthUnit.strValue;
                    }
                }
            }
        }
        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static double numCalculateWaste(
            double numJobQuantity_I,
            double numPercentWaste_I,
            double numQuantityWaste_I
            )
        {
            //                                              //Calculate waste.   
            return numPercentWaste_I * numJobQuantity_I / (100 - numPercentWaste_I) + numQuantityWaste_I;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subGetNewQuantityDependingMinToUse(

            bool boolAllowDecimal_I,
            double? numnCalculationMin_I,
            double? numnCalculationBlock_I,
            ref double numQuantity_IO
            )
        {
            if (
                //                                           //If the minToUse is greater or equal than quantity
                numnCalculationMin_I != null && numnCalculationMin_I > 0 && numnCalculationMin_I >= numQuantity_IO
                )
            {
                numQuantity_IO = (double)numnCalculationMin_I;
            }

            if (
                //                                          //Is a production by blocks.
                numnCalculationBlock_I != null && numnCalculationBlock_I > 0
                )
            {
                //                                          //Obtain the blocks to produce to complete the job.
                double numBlocksToProduce = Math.Truncate(numQuantity_IO / (double)numnCalculationBlock_I);
                if (
                    numQuantity_IO % (double)numnCalculationBlock_I > 0
                    )
                {
                    numBlocksToProduce = numBlocksToProduce + 1;
                }

                //                                          //Obtain the new job quantity considering the blocks.
                numQuantity_IO = numBlocksToProduce * (double)numnCalculationBlock_I;
            }

            //                                              //Final quantity considering by block and min.
            numQuantity_IO = boolAllowDecimal_I ? numQuantity_IO.Round(2) : Math.Ceiling(numQuantity_IO);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subGetResourceCostData(

            int intPkResource_I,
            int intJobId_I,
            ref double? numnCalculationCost_IO,
            ref double? numnCalculationQuantity_IO,
            ref double? numnCalculationMin_IO,
            ref double? numnCalculationBlock_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();
            ResResource resOfCurrentCost = ResResource.resFromDB(intPkResource_I, false);

            //                                  //Verify job's status.
            JobentityJobEntityDB jobjob = context.Job.FirstOrDefault(job => job.intJobID == intJobId_I);

            CostentityCostEntityDB costentity = null;
            if (
                //                              //Job's still pending.
                jobjob == null
                )
            {
                //                              //Get the current cost.
                costentity = resOfCurrentCost.costentityCurrent;
            }
            else
            {
                //                              //Job is inprogress or completed.
                //                              //Get the cost checking date.
                ZonedTime ztimeJobDate;
                ProdtypProductType.GetJobDate(jobjob, out ztimeJobDate);
                costentity = resOfCurrentCost.GetCostDependingDate(ztimeJobDate);
            }
            if (
                costentity != null
                )
            {
                ProdtypProductType.subGetCostEntityData(costentity, ref numnCalculationCost_IO,
                    ref numnCalculationQuantity_IO, ref numnCalculationMin_IO,
                    ref numnCalculationBlock_IO);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subGetCostEntityData(

            CostentityCostEntityDB costentity_I,
            ref double? numnCalculationCost_IO,
            ref double? numnCalculationQuantity_IO,
            ref double? numnCalculationMin_IO,
            ref double? numnCalculationBlock_IO
            )
        {
            if (
                costentity_I.boolnArea == true
                )
            {
                double numResArea = ProdtypProductType.numResourceArea(costentity_I.intPkResource);
                numnCalculationCost_IO = (numResArea / costentity_I.numnQuantity) * costentity_I.numnCost;
                numnCalculationQuantity_IO = 1;
                numnCalculationMin_IO = costentity_I.numnMin;
                numnCalculationBlock_IO = costentity_I.numnBlock;
            }
            else
            {
                numnCalculationCost_IO = costentity_I.numnCost;
                numnCalculationQuantity_IO = costentity_I.numnQuantity;
                numnCalculationMin_IO = costentity_I.numnMin;
                numnCalculationBlock_IO = costentity_I.numnBlock;
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subIsPriceChangeableForWorkflow(
            //                                              //Verify status of the job in order to know if we can
            //                                              //      change job's price.

            int intJobId_I,
            PsPrintShop ps_I,
            IConfiguration configuration_I,
            out bool? boolnIsPriceChangeable_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            boolnIsPriceChangeable_O = true;

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            intStatus_IO = 401;
            JobjsonJobJson jobjsonJob;
            if (
                JobJob.boolIsValidJobId(intJobId_I, ps_I.strPrintshopId, configuration_I, out jobjsonJob,
                    ref strUserMessage_IO, ref strDevMessage_IO)
                )
            {
                //                                          //Get job from job table.
                JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID == intJobId_I &&
                    job.intPkPrintshop == ps_I.intPk);

                if (
                    jobentity != null
                    )
                {
                    if (
                        //                                  //Job completed.
                        jobentity.intStage == JobJob.intCompletedStage
                        )
                    {
                        //                                  //Completed job's price cannot be changed.
                        boolnIsPriceChangeable_O = false;
                    }

                    intStatus_IO = 200;
                    strUserMessage_IO = "Job" + " " + intJobId_I + " " + "is already completed. " +
                        "Do you really want to change the price?";
                    strDevMessage_IO = "";
                }
                else
                {
                    intStatus_IO = 200;
                    strUserMessage_IO = "";
                    strDevMessage_IO = "Pending Job";
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static AttrAttribute[] darrattrGetGeneralAttribute(
            //                                                  //Return an array of common attr for XJDF processes.
            )
        {
            //                                              //Get the general type.
            Odyssey2Context context = new Odyssey2Context();
            EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(etentity =>
                etentity.strXJDFTypeId == ProdtypProductType.strGeneralTypeId &&
                etentity.intPrintshopPk == null);

            int intTypePk = etentity.intPk;
            List<AttrAttribute> darrattr = new List<AttrAttribute>();
            if (
                //                                          //ype found.
                etentity != null
                )
            {
                //                                          //Get the relations for general attributes.
                IQueryable<AttretentityAttributeElementTypeEntityDB> setattrentity = context.
                AttributeElementType.Where(attretentity =>
                attretentity.intPkElementType == intTypePk);

                List<int> darrint = new List<int>();
                foreach (AttretentityAttributeElementTypeEntityDB attretentity in setattrentity)
                {
                    darrint.Add((int)attretentity.intPkAttribute);
                }

                //                                      //Get the name for every attribute associated with the general 
                //                                      //      type.
                foreach (int intPk in darrint)
                {
                    AttrentityAttributeEntityDB attrentity = context.Attribute.FirstOrDefault(attr =>
                    attr.intPk == intPk);

                    //                                  //Create the attribute.
                    AttrAttribute attr = new AttrAttribute(attrentity.intPk, attrentity.strCustomName,
                        attrentity.strXJDFName, attrentity.strCardinality, attrentity.strDatatype,
                        attrentity.strDescription, attrentity.strScope, attrentity.intWebsiteAttributeId,
                        null);
                    darrattr.Add(attr);
                }
            }
            return darrattr.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static PiwjsonProcessInWorkflowJson[] arrpiwjsonGetWorkflow(
            //                                              //Get all the processes with their inputs and outputs.
            int intPkWorkflow_I
            )
        {
            //                                              //Get all the processes.
            Odyssey2Context context = new Odyssey2Context();

            IQueryable<PiwentityProcessInWorkflowEntityDB> setpiwentity = context.ProcessInWorkflow.Where(piw =>
                piw.intPkWorkflow == intPkWorkflow_I);
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = setpiwentity.ToList();

            List<PiwjsonProcessInWorkflowJson> darrprojson3 = new List<PiwjsonProcessInWorkflowJson>();
            //                                              //Get the inputs and outputs for every process.
            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity)
            {
                //                                          //Get the process.
                ProProcess proProcess = ProProcess.proFromDB(piwentity.intPkProcess);

                List<IojsonInputOrOutputJson> darrresortypjson1Input =
                    new List<IojsonInputOrOutputJson>();

                //                                          //Get the input types.
                darrresortypjson1Input.AddRange(ProdtypProductType.arrresortypjson1GetTypes(piwentity, true));

                //                                          //Get the input templates.
                darrresortypjson1Input.AddRange(ProdtypProductType.arrresortypjson1GetTemplates(piwentity, true));

                List<IojsonInputOrOutputJson> darrresortypjson1Output =
                        new List<IojsonInputOrOutputJson>();

                //                                          //Get the output types.
                darrresortypjson1Output.AddRange(ProdtypProductType.arrresortypjson1GetTypes(piwentity, false));

                //                                          //Get the output templates.
                darrresortypjson1Output.AddRange(ProdtypProductType.arrresortypjson1GetTemplates(piwentity, false));

                //                                          //Get the calculations for that process in the product.
                CalentityCalculationEntityDB calentity = context.Calculation.FirstOrDefault(cal =>
                    cal.intnPkProcess == proProcess.intPk &&
                    cal.intnPkWorkflow == piwentity.intPkWorkflow &&
                    cal.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId);
                bool boolHasCalculations = calentity != null;

                //                                          //Get process type.
                ProtypProcessType protypeProcessType = proProcess.protypBelongsTo;

                String strProcessNameAndId = proProcess.strName;
                if (
                    piwentity.intnId != null
                    )
                {
                    strProcessNameAndId = proProcess.strName + " (" + piwentity.intnId + ")";
                }

                //                                          //Used to show the checkbok in front, the one that is used 
                //                                          //      to marck the IOs in this process af final product.
                bool boolIsNormal = !piwentity.boolIsPostProcess;

                //                                          //Used to hide final product checkboxes after setting
                //                                          //      an IO as final product.
                bool boolContainsFinalProduct = ProdtypProductType.boolThereIsAFinalProduct(piwentity, context);

                PiwjsonProcessInWorkflowJson protypjson3 = new PiwjsonProcessInWorkflowJson(piwentity.intPk,
                    proProcess.intPk, strProcessNameAndId, boolHasCalculations, darrresortypjson1Input.ToArray(),
                    darrresortypjson1Output.ToArray(), protypeProcessType.intPk, protypeProcessType.strCustomTypeId,
                    boolIsNormal, boolContainsFinalProduct);

                darrprojson3.Add(protypjson3);
            }
            return darrprojson3.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subAddNewWorkflow(
            //                                              //Method that add a new workflow to the given product, if 
            //                                              //      the intPkWorkflow comes then the new workflow is a 
            //                                              //      copy of the given workflow.

            int? intnPkProduct_I,
            String strWorkflowName_I,
            int? intnPkWorkflow_I,
            PsPrintShop ps_I,
            List<int> darrintPkPiw_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            if (
                //                                          //There is a product
                intnPkProduct_I != null
                )
            {
                EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(context_M, intnPkProduct_I);

                intStatus_IO = 401;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "No product found.";
                if (
                    //                                      //The product exists.
                    (et != null) &&
                    (et.strResOrPro == EtElementTypeAbstract.strProduct)
                    )
                {
                    ProdtypProductType prodtyp = (ProdtypProductType)et;

                    intStatus_IO = 402;
                    strUserMessage_IO = "There is already a workflow with the same name.";
                    strDevMessage_IO = "";
                    if (
                        !ProdtypProductType.boolThereIsAWorkflowWithTheSameName(prodtyp, strWorkflowName_I, context_M)
                        )
                    {
                        if (
                            //                              //It is a new workflow.
                            intnPkWorkflow_I == null
                            )
                        {
                            int intWorkflowId = ProdtypProductType.intWorkflowIdForANewOne(prodtyp, context_M);

                            ProdtypProductType.subAddAWorkflow(strWorkflowName_I, intWorkflowId, intnPkProduct_I,
                                ps_I.intPk, context_M, ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);
                        }
                        else
                        {
                            WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                                wf.intPk == intnPkWorkflow_I && wf.boolDeleted == false);

                            intStatus_IO = 403;
                            strUserMessage_IO = "Something is wrong.";
                            strDevMessage_IO = "Workflow not found.";
                            if (
                                wfentityBase != null
                                )
                            {
                                int intWorkflowId = ProdtypProductType.intWorkflowIdForANewOne(prodtyp, context_M);

                                if (
                                    wfentityBase.boolnGeneric == true
                                    )
                                {
                                    ProdtypProductType.subCopyAGenericWorkflow(strWorkflowName_I, intWorkflowId,
                                        prodtyp.intPk, ps_I, wfentityBase, context_M, ref intStatus_IO,
                                        ref strUserMessage_IO, ref strDevMessage_IO);
                                }
                                else
                                {
                                    /*CASE*/
                                    if (
                                        //                      //All the piw will be copied
                                        darrintPkPiw_I == null
                                        )
                                    {
                                        ProdtypProductType.subCopyAWorkflow(strWorkflowName_I, intWorkflowId, prodtyp.intPk,
                                            ps_I.intPk, wfentityBase, context_M, ref intStatus_IO, ref strUserMessage_IO,
                                            ref strDevMessage_IO);
                                    }
                                    else if (
                                        //                      //Only the selected piw will be copied
                                        darrintPkPiw_I.Count > 0
                                        )
                                    {
                                        ProdtypProductType.subPartiallyCopyAWorkflow(strWorkflowName_I, intWorkflowId,
                                            prodtyp.intPk, ps_I.intPk, wfentityBase, darrintPkPiw_I, context_M,
                                            ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);
                                    }
                                    else if (
                                        darrintPkPiw_I.Count == 0
                                        )
                                    {
                                        intStatus_IO = 404;
                                        strUserMessage_IO = "Something is wrong.";
                                        strDevMessage_IO = "At least one process in workflow must be selected.";
                                    }
                                    /*END-CASE*/
                                }
                            }
                        }
                    }
                }
            }
            else
            //                                              //Add a base wf
            {
                //                                          //Find base workflows
                List<WfentityWorkflowEntityDB> darrwfentity = context_M.Workflow.Where(wf =>
                   wf.intPkPrintshop == ps_I.intPk && wf.intnPkProduct == null && wf.intnJobId == null).ToList();

                //                                          //Valid if there is a wf with the same name
                bool boolThereIsAWorkflowWithTheSameName = darrwfentity.Exists(wf =>
                    wf.strName.ToLower() == strWorkflowName_I.ToLower());

                intStatus_IO = 402;
                strUserMessage_IO = "There is already a workflow with the same name.";
                strDevMessage_IO = "";
                if (
                    !boolThereIsAWorkflowWithTheSameName
                    )
                {
                    //                                      //Generate WorkflowId
                    int intWorkflowId = ProdtypProductType.intWorkflowIdForANewOne(darrwfentity);

                    if (
                        //                                  //It is a new workflow.
                        intnPkWorkflow_I == null
                        )
                    {
                        ProdtypProductType.subAddAWorkflow(strWorkflowName_I, intWorkflowId, intnPkProduct_I,
                            ps_I.intPk, context_M, ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);
                    }
                    else
                    //                                      //A wf is being copied
                    {
                        WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                            wf.intPk == intnPkWorkflow_I && wf.intnPkProduct == null);

                        intStatus_IO = 403;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "Workflow not found.";
                        if (
                            wfentityBase != null
                            )
                        {
                            ProdtypProductType.subCopyAWorkflow(strWorkflowName_I, intWorkflowId, intnPkProduct_I,
                                ps_I.intPk, wfentityBase, context_M, ref intStatus_IO, ref strUserMessage_IO,
                                ref strDevMessage_IO);
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddAWorkflow(

            String strWorkflowName_I,
            int intWorkflowId_I,
            int? intnPkProduct_I,
            int intPkPrintShop_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            String strDate = Date.Now(ZonedTimeTools.timezone).ToText();
            String strTime = Time.Now(ZonedTimeTools.timezone).ToText();

            WfentityWorkflowEntityDB wfentity = new WfentityWorkflowEntityDB
            {
                intnPkProduct = intnPkProduct_I,
                intPkPrintshop = intPkPrintShop_I,
                strName = strWorkflowName_I,
                intWorkflowId = intWorkflowId_I,
                strStartDate = strDate,
                strStartTime = strTime,
                boolDeleted = false,
                boolDefault = false
            };

            context_M.Workflow.Add(wfentity);
            context_M.SaveChanges();

            intStatus_IO = 200;
            strUserMessage_IO = "Success.";
            strDevMessage_IO = "";
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subCopyAGenericWorkflow(

            String strWorkflowName_I,
            int intWorkflowId_I,
            int intPkProduct_I,
            PsPrintShop ps_I,
            WfentityWorkflowEntityDB wfentityBase_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            bool boolIsDefaultWf = false;

            int intExistingWf = context_M.Workflow.Where(wf => wf.intnPkProduct == intPkProduct_I).Count();

            if (
                //                                          //The product does not have workflows yet
                intExistingWf == 0
                )
            {
                boolIsDefaultWf = true;
            }

            WfentityWorkflowEntityDB wfentityNew = new WfentityWorkflowEntityDB
            {
                intnPkProduct = intPkProduct_I,
                intPkPrintshop = ps_I.intPk,
                strName = strWorkflowName_I,
                intWorkflowId = intWorkflowId_I,
                strStartDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                strStartTime = Time.Now(ZonedTimeTools.timezone).ToText(),
                boolDeleted = false,
                boolDefault = boolIsDefaultWf,
                boolnGeneric = null
            };
            context_M.Workflow.Add(wfentityNew);
            context_M.SaveChanges();

            if (
                //                                          //The workflow is being copied to the same printshop
                ps_I.intPk == wfentityBase_I.intPkPrintshop
                )
            {
                ProdtypProductType.subCopyPiwIOJAndTransformCalToNewWorkflow(wfentityBase_I, wfentityNew, false, null,
                    context_M);
                ProdtypProductType.subCopyAllInputsAndOutputsForTheNewWorkflow(wfentityBase_I, wfentityNew, null,
                    context_M);
                ProdtypProductType.subCopyAllCalculationsAndPeriodsForTheNewWorkflow(wfentityBase_I, wfentityNew, false,
                    null, context_M);
                ProdtypProductType.subCopyResourceGroupForAWorkflow(wfentityBase_I, wfentityNew, null, context_M);

                intStatus_IO = 200;
                strUserMessage_IO = "Success.";
                strDevMessage_IO = "";
            }
            else
            {
                ProdtypProductType.subAddRelatedDataToNewWorkflow(wfentityBase_I, wfentityNew, ps_I, context_M);

                intStatus_IO = 200;
                strUserMessage_IO = "Success.";
                strDevMessage_IO = "";
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddRelatedDataToNewWorkflow(
            //                                              //Make a copy of all the data related to the base workflow
            //                                              //      for the new workflow

            WfentityWorkflowEntityDB wfentityBase_I,
            WfentityWorkflowEntityDB wfentityNew_I,
            PsPrintShop ps_I,
            Odyssey2Context context_M
            )
        {
            //                                              //Find base product type.
            ProdtypProductType prodtypBase = (ProdtypProductType)EtElementTypeAbstract.etFromDB(context_M,
                wfentityBase_I.intnPkProduct);
            //                                              //Get base product attributes
            List<Attrjson1AttributeJson1> darrattrjson1BaseProd = ProdtypProductType.darrattrjson1GetProductAttributes(
                prodtypBase, context_M);

            //                                              //Find new product type.
            ProdtypProductType prodtypNew = (ProdtypProductType)EtElementTypeAbstract.etFromDB(context_M,
                wfentityNew_I.intnPkProduct);
            //                                              //Get new product attributes
            List<Attrjson1AttributeJson1> darrattrjson1NewProd = ProdtypProductType.darrattrjson1GetProductAttributes(
                prodtypNew, context_M);

            //                                              //Dictionary to store all base and new processes.
            Dictionary<int, int> dicProcess = new Dictionary<int, int>();
            //                                              //Dictionary to store base and new piws.
            Dictionary<int, int> dicProcessInWorkflow = new Dictionary<int, int>();
            ProdtypProductType.subAddPiwAndProcessToNewWorkflow(wfentityBase_I.intPk, wfentityNew_I.intPk, ps_I,
                context_M, ref dicProcess, ref dicProcessInWorkflow);

            //                                              //Dictionary to store base and new eleets.
            Dictionary<int, int> dicEleet = new Dictionary<int, int>();
            //                                              //Dictionary to store base and new eleeles.
            Dictionary<int, int> dicEleele = new Dictionary<int, int>();
            //                                              //Dictionary to store base and new resources.
            Dictionary<int, int> dicResource = new Dictionary<int, int>();
            ProdtypProductType.subAddEleetAndEleeleToGenericProcess(ps_I, dicProcess, context_M, ref dicEleet,
                ref dicEleele, ref dicResource);

            ProdtypProductType.subAddIOsAndResourcesToNewWorkflow(wfentityBase_I.intPk, wfentityNew_I.intPk, ps_I,
                dicEleet, dicEleele, darrattrjson1BaseProd, darrattrjson1NewProd, context_M, ref dicResource);

            ProdtypProductType.subAddDataRelatedToGenericResource(ps_I, dicResource, context_M);

            ProdtypProductType.subAddCalculationsToNewWorkflow(wfentityBase_I.intPk, wfentityNew_I, ps_I, dicEleet,
                dicEleele, dicProcess, dicResource, dicProcessInWorkflow, darrattrjson1BaseProd, darrattrjson1NewProd,
                context_M);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static List<Attrjson1AttributeJson1> darrattrjson1GetProductAttributes(

            ProdtypProductType prodtyp,
            Odyssey2Context context_I
            )
        {

            //                                              //Initialize the dicattr.
            List<Attrjson1AttributeJson1> darrattrjson1 = new List<Attrjson1AttributeJson1>();

            //                                              //Get all PKs from the attributes.
            List<AttretentityAttributeElementTypeEntityDB> darrattretentity = context_I.AttributeElementType
                .Where(attretentity => attretentity.intPkElementType == prodtyp.intPk).ToList();

            if (
                darrattretentity.Count > 0
                )
            {
                foreach (AttretentityAttributeElementTypeEntityDB attretentity in darrattretentity)
                {
                    //                                      //Get the attr from db.
                    AttrentityAttributeEntityDB attrentity = context_I.Attribute.FirstOrDefault(attrentity =>
                        attrentity.intPk == attretentity.intPkAttribute);

                    //                                      //Build the attr.
                    Attrjson1AttributeJson1 attrjson1 = new Attrjson1AttributeJson1();

                    attrjson1.intPk = attrentity.intPk;
                    attrjson1.strCustomName = attrentity.strCustomName;
                    //                                      //Add the attr to the list.
                    darrattrjson1.Add(attrjson1);
                }
            }
            else
            {
                List<Field2jsonField2Json> darrfield2json = new List<Field2jsonField2Json>();

                bool boolIsValidData = prodtyp.boolAddAttributesToExistingProduct(
                        (int)prodtyp.intWebsiteProductKey, prodtyp.intPk, context_I,
                        out darrfield2json);

                if (
                    boolIsValidData
                    )
                {
                    //                                      //Get all PKs from the attributes.
                    darrattretentity = context_I.AttributeElementType.Where(attretentity => 
                        attretentity.intPkElementType == prodtyp.intPk).ToList();

                    foreach (AttretentityAttributeElementTypeEntityDB attretentity in darrattretentity)
                    {
                        //                                  //Get the attr from db.
                        AttrentityAttributeEntityDB attrentity = context_I.Attribute.FirstOrDefault(attrentity =>
                            attrentity.intPk == attretentity.intPkAttribute);

                        //                                  //Build the attr.
                        Attrjson1AttributeJson1 attrjson1 = new Attrjson1AttributeJson1();

                        attrjson1.intPk = attrentity.intPk;
                        attrjson1.strCustomName = attrentity.strCustomName;
                        //                                  //Add the attr to the list.
                        darrattrjson1.Add(attrjson1);
                    }
                }
                else
                {
                    throw new CustomException("Attributes could not be obtained.");
                }
            }
            
            return darrattrjson1;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddPiwAndProcessToNewWorkflow(
            //                                              //Make a copy of each process if doesn't already yet.
            //                                              //Make a copy of each process in workflow to the new 
            //                                              //      wokflow.

            int intPkBaseWorkflow_I,
            int intPkNewWorkflow_I,
            PsPrintShop ps_I,
            Odyssey2Context context_M,
            ref Dictionary<int, int> dicProcess_M,
            ref Dictionary<int, int> dicProcessInWorkflow_M
            )
        {
            //                                              //Dictionary to store base and new process types.
            Dictionary<int, int> dicProcessType = new Dictionary<int, int>();

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = context_M.ProcessInWorkflow.Where(piw =>
                piw.intPkWorkflow == intPkBaseWorkflow_I).ToList();

            int intPkNewProcess = 0;
            int intPkNewProcessType = 0;
            int intStatus;
            String strProcessName;
            foreach (PiwentityProcessInWorkflowEntityDB piwentityBase in darrpiwentity)
            {
                //                                          //Find base workflow process
                EleentityElementEntityDB eleentityBaseProcess = context_M.Element.FirstOrDefault(ele =>
                    ele.intPk == piwentityBase.intPkProcess);

                intStatus = 400;
                if (
                    //                                      //The process is not yet in the dictionary
                    !dicProcess_M.ContainsKey(eleentityBaseProcess.intPk)
                    )
                {
                    if (
                        //                                  //The process type is not yet in the dictionary
                        !dicProcessType.ContainsKey(eleentityBaseProcess.intPkElementType)
                        )
                    {
                        ProtypProcessType.subAddProcessType(eleentityBaseProcess.intPkElementType, ps_I, context_M,
                            ref intPkNewProcessType);

                        //                                  //Add relationship between the base and the new process type 
                        //                                  //      to the dictionary
                        dicProcessType.Add(eleentityBaseProcess.intPkElementType, intPkNewProcessType);
                    }
                    else
                    {
                        intPkNewProcessType = dicProcessType.FirstOrDefault(protyp =>
                            protyp.Key == eleentityBaseProcess.intPkElementType).Value;
                    }

                    strProcessName = eleentityBaseProcess.strElementName + " (Generic)";
                    //                                      //Find new workflow process
                    EleentityElementEntityDB eleentityNewProcess = context_M.Element.FirstOrDefault(ele =>
                        ele.strElementName == strProcessName &&
                        ele.intPkElementType == intPkNewProcessType);

                    if (
                        //                                  //There is already a process with the same data.
                        eleentityNewProcess != null
                        )
                    {
                        //                                  //Do nothing
                    }
                    else
                    {
                        ProProcess.subAddGenericProcess(intPkNewProcessType, strProcessName,
                            context_M, out eleentityNewProcess);
                    }

                    intPkNewProcess = eleentityNewProcess.intPk;

                    //                                      //Add relationship between the base and the new process 
                    //                                      //      to the dictionary
                    dicProcess_M.Add(eleentityBaseProcess.intPk, intPkNewProcess);

                    intStatus = 200;
                }
                else
                {
                    intPkNewProcess = dicProcess_M.FirstOrDefault(process =>
                        process.Key == eleentityBaseProcess.intPk).Value;

                    intStatus = 200;
                }

                if (
                    intStatus == 200
                    )
                {
                    //                                          //Create a new one with the pk of new workflow.
                    PiwentityProcessInWorkflowEntityDB piwentityNew = new PiwentityProcessInWorkflowEntityDB
                    {
                        intPkWorkflow = intPkNewWorkflow_I,
                        intPkProcess = intPkNewProcess,
                        intnId = piwentityBase.intnId,
                        intProcessInWorkflowId = piwentityBase.intProcessInWorkflowId,
                        boolIsPostProcess = piwentityBase.boolIsPostProcess
                    };
                    context_M.ProcessInWorkflow.Add(piwentityNew);
                    context_M.SaveChanges();

                    //                                      //Add relationship between base piw and new piw 
                    //                                      //      to the dictionary
                    dicProcessInWorkflow_M.Add(piwentityBase.intPk, piwentityNew.intPk);
                }
                else
                {
                    throw new CustomException("The process in workflow could not be added.");
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddEleetAndEleeleToGenericProcess(
            //                                              //Make a copy of each eleet and eleele of the a base
            //                                              //      process to the new process.

            PsPrintShop ps_I,
            Dictionary<int, int> dicProcess_I,
            Odyssey2Context context_M,
            ref Dictionary<int, int> dicEleet_M,
            ref Dictionary<int, int> dicEleele_M,
            ref Dictionary<int, int> dicResource_M
            )
        {
            //                                              //Dictionary to store base and new types.
            Dictionary<int, int> dicType = new Dictionary<int, int>();
            int intPkBaseProcess;
            int intPkNewProcess;
            int intPkTypeNew;
            int intPkTemplateNew;
            foreach (KeyValuePair<int, int> process in dicProcess_I)
            {
                //                                          //Easy code
                intPkBaseProcess = process.Key;
                intPkNewProcess = process.Value;

                //****************************************ELEET****************************************
                //                                          //Find Eleet related to base process.
                List<EleetentityElementElementTypeEntityDB> darreleetentityBase = context_M.ElementElementType.Where(
                    eleet => eleet.intPkElementDad == intPkBaseProcess && eleet.boolDeleted == false).ToList();
                //                                          //Find Eleet related to new process.
                List<EleetentityElementElementTypeEntityDB> darreleetentityNew = context_M.ElementElementType.Where(
                    eleet => eleet.intPkElementDad == intPkNewProcess).ToList();
                //                                          //Duplicate Eleet.
                foreach (EleetentityElementElementTypeEntityDB eleetBase in darreleetentityBase)
                {
                    if (
                        //                                  //The type is not yet in the dictionary
                        !dicType.ContainsKey(eleetBase.intPkElementTypeSon)
                        )
                    {
                        ProtypProcessType.subAddTypeToGenericProcess(eleetBase, ps_I, context_M, out intPkTypeNew);

                        //                                  //Add relationship between the base and the new type 
                        //                                  //      to the dictionary
                        dicType.Add(eleetBase.intPkElementTypeSon, intPkTypeNew);
                    }
                    else
                    {
                        intPkTypeNew = dicType.FirstOrDefault(type => type.Key == eleetBase.intPkElementTypeSon).Value;
                    }

                    EleetentityElementElementTypeEntityDB eleetentityNew = darreleetentityNew.FirstOrDefault(eleet =>
                        eleet.intPkElementDad == intPkNewProcess && eleet.intPkElementTypeSon == intPkTypeNew &&
                        eleet.boolUsage == eleetBase.boolUsage && eleet.boolDeleted == false &&
                        eleet.intnId == eleetBase.intnId);

                    if (
                        //                                  //The eleet already exists
                        eleetentityNew != null
                        )
                    {
                        //                                  //Do nothing
                    }
                    else
                    {
                        //                                  //Create the relation between the process and 
                        //                                  //      resource type.
                        eleetentityNew = new EleetentityElementElementTypeEntityDB
                        {
                            intPkElementDad = intPkNewProcess,
                            intPkElementTypeSon = intPkTypeNew,
                            boolUsage = eleetBase.boolUsage,
                            boolDeleted = false,
                            intnId = eleetBase.intnId
                        };
                        context_M.ElementElementType.Add(eleetentityNew);
                        context_M.SaveChanges();
                    }

                    //                                      //Add relationship between the base and the new eleet 
                    //                                      //      to the dictionary
                    dicEleet_M.Add(eleetBase.intPk, eleetentityNew.intPk);
                }

                //****************************************ELEELE****************************************
                //                                          //Find Eleele related to base process.
                List<EleeleentityElementElementEntityDB> darreleeleentityBase = context_M.ElementElement.Where(
                    eleele => eleele.intPkElementDad == intPkBaseProcess && eleele.boolDeleted == false).ToList();
                //                                          //Find Eleele related to new process.
                List<EleeleentityElementElementEntityDB> darreleeleentityNew = context_M.ElementElement.Where(
                    eleet => eleet.intPkElementDad == intPkNewProcess).ToList();
                //                                          //Duplicate Eleele.
                foreach (EleeleentityElementElementEntityDB eleeleBase in darreleeleentityBase)
                {
                    if (
                        //                                  //The template is not yet in the dictionary
                        !dicResource_M.ContainsKey(eleeleBase.intPkElementSon)
                        )
                    {
                        ProtypProcessType.subAddTemplateToGenericProcess(eleeleBase, ps_I, context_M,
                            out intPkTemplateNew, ref dicResource_M);
                    }
                    else
                    {
                        intPkTemplateNew = dicResource_M.FirstOrDefault(type =>
                            type.Key == eleeleBase.intPkElementSon).Value;
                    }

                    EleeleentityElementElementEntityDB eleeleentityNew = darreleeleentityNew.FirstOrDefault(eleele =>
                        eleele.intPkElementDad == intPkNewProcess && eleele.intPkElementSon == intPkTemplateNew &&
                        eleele.boolUsage == eleeleBase.boolUsage && eleele.boolDeleted == false &&
                        eleele.intnId == eleeleBase.intnId);

                    if (
                        //                                  //The eleet already exists
                        eleeleentityNew != null
                        )
                    {
                        //                                  //Do nothing
                    }
                    else
                    {
                        //                                  //Create the relation between the process and 
                        //                                  //      template.
                        eleeleentityNew = new EleeleentityElementElementEntityDB
                        {
                            intPkElementDad = intPkNewProcess,
                            intPkElementSon = intPkTemplateNew,
                            boolUsage = eleeleBase.boolUsage,
                            boolDeleted = false,
                            intnId = eleeleBase.intnId
                        };
                        context_M.ElementElement.Add(eleeleentityNew);
                        context_M.SaveChanges();
                    }

                    //                                      //Add relationship between the base and the new eleele
                    //                                      //      to the dictionary
                    dicEleele_M.Add(eleeleBase.intPk, eleeleentityNew.intPk);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddIOsAndResourcesToNewWorkflow(
            //                                              //Make a copy of each IO from the base 
            //                                              //      workflow to the new wokflow.
            //                                              //Make a copy of each resource if doesn't already yet.

            int intPkBaseWorkflow_I,
            int intPkNewWorkflow_I,
            PsPrintShop ps_I,
            Dictionary<int, int> dicEleet_I,
            Dictionary<int, int> dicEleele_I,
            //                                              //Base product attributes
            List<Attrjson1AttributeJson1> darrattrjson1BaseProd_I,
            //                                              //New product attributes
            List<Attrjson1AttributeJson1> darrattrjson1NewProd_I,
            Odyssey2Context context_M,
            ref Dictionary<int, int> dicResource_M
            )
        {
            //                                              //Dictionary to store base and new IOs.
            Dictionary<int, int> dicIO = new Dictionary<int, int>();
            //                                              //Dictionary to store base and new resource types.
            Dictionary<int, int> dicResourceType = new Dictionary<int, int>();

            //****************************************IO****************************************
            List<IoentityInputsAndOutputsEntityDB> darrioentity = context_M.InputsAndOutputs.Where(io =>
                io.intPkWorkflow == intPkBaseWorkflow_I).ToList();

            int? intnPkNewResource = null;
            int? intnPkEleetNew = null;
            int? intnPkEleeleNew = null;
            int intPkNewResourceType = 0;
            int intStatus;
            String strResourceName;
            //                                              //Copy IO to new workflow
            foreach (IoentityInputsAndOutputsEntityDB ioentityBase in darrioentity)
            {
                intStatus = 400;
                /*CASE*/
                if (
                    //                                      //There is a resource
                    ioentityBase.intnPkResource != null
                    )
                {
                    //                                      //Find base workflow resource
                    EleentityElementEntityDB eleentityBaseResource = context_M.Element.FirstOrDefault(ele =>
                        ele.intPk == ioentityBase.intnPkResource);

                    if (
                        //                                  //The resource is not yet in the dictionary
                        !dicResource_M.ContainsKey(eleentityBaseResource.intPk)
                        )
                    {
                        if (
                            //                              //The resource type is not yet in the dictionary
                            !dicResourceType.ContainsKey(eleentityBaseResource.intPkElementType)
                            )
                        {
                            RestypResourceType.subAddResourceType(eleentityBaseResource.intPkElementType, ps_I, context_M,
                                ref intPkNewResourceType);

                            //                              //Add relationship between the base and the new process type 
                            //                              //      to the dictionary
                            dicResourceType.Add(eleentityBaseResource.intPkElementType, intPkNewResourceType);
                        }
                        else
                        {
                            //                              //Get new resource type from dicResourceType
                            intPkNewResourceType = dicResourceType.FirstOrDefault(restyp =>
                                restyp.Key == eleentityBaseResource.intPkElementType).Value;
                        }

                        strResourceName = eleentityBaseResource.strElementName + " (Generic)";

                        //                                  //Find new resource
                        EleentityElementEntityDB eleentityNewResource = context_M.Element.FirstOrDefault(ele =>
                            ele.strElementName == strResourceName &&
                            ele.intPkElementType == intPkNewResourceType);

                        if (
                            //                              //There is already a resource with the same data.
                            eleentityNewResource != null
                            )
                        {
                            //                              //Add relationship between the base and the new resource 
                            //                              //      to the dictionary
                            dicResource_M.Add(eleentityBaseResource.intPk, eleentityNewResource.intPk);
                        }
                        else
                        {
                            ResResource.subAddGenericResource(intPkNewResourceType, strResourceName,
                                eleentityBaseResource, context_M, out eleentityNewResource, ref dicResource_M);
                        }

                        intnPkNewResource = eleentityNewResource.intPk;
                    }
                    else
                    {
                        //                                  //Get new resource from dicResource
                        intnPkNewResource = dicResource_M.FirstOrDefault(resource =>
                            resource.Key == eleentityBaseResource.intPk).Value;
                    }

                    intStatus = 200;
                }
                else if (
                    //                                      //There is a resource group
                    ioentityBase.intnGroupResourceId != null ||
                    //                                      //There is a node
                    ProdtypProductType.boolIsTheIOANode(ioentityBase) ||
                    //                                      //There is a link
                    ioentityBase.strLink != null  ||
                    //                                      //There is a size
                    ioentityBase.boolnSize == true ||
                    //                                      //There is a Final Product
                    ioentityBase.boolnIsFinalProduct == true 
                    )
                {
                    intnPkNewResource = null;
                    intStatus = 200;
                }
                else
                {
                    intStatus = 400;
                }
                /*END-CASE*/

                if (
                    intStatus == 200
                    )
                {
                    ProdtypProductType.subGetNewEleetAndEleele(ioentityBase.intnPkElementElementType,
                        ioentityBase.intnPkElementElement, dicEleet_I, dicEleele_I, ref intnPkEleetNew,
                        ref intnPkEleeleNew);

                    //                                      //Create a new one with the pk of new workflow.
                    IoentityInputsAndOutputsEntityDB ioentityNew = new IoentityInputsAndOutputsEntityDB
                    {
                        intPkWorkflow = intPkNewWorkflow_I,
                        intnProcessInWorkflowId = ioentityBase.intnProcessInWorkflowId,
                        intnPkElementElementType = intnPkEleetNew,
                        intnPkElementElement = intnPkEleeleNew,
                        intnPkResource = intnPkNewResource,
                        intnGroupResourceId = ioentityBase.intnGroupResourceId,
                        boolnIsFinalProduct = ioentityBase.boolnIsFinalProduct,
                        strLink = ioentityBase.strLink,
                        boolnSize = ioentityBase.boolnSize,
                        boolnThickness = ioentityBase.boolnThickness
                    };
                    context_M.InputsAndOutputs.Add(ioentityNew);
                    context_M.SaveChanges();

                    GpcondjsonGroupConditionJson gpcondjson = Tools.gpcondjsonGetCondition(null, null, 
                        ioentityBase.intPk, null);

                    ProdtypProductType.subCopyConditionsToADifferentProduct(null, null, ioentityNew.intPk, null,
                        gpcondjson, darrattrjson1BaseProd_I, darrattrjson1NewProd_I, context_M);

                    //                                      //Add relationship between base and new IO 
                    //                                      //      to the dictionary
                    dicIO.Add(ioentityBase.intPk, ioentityNew.intPk);
                }
                else
                {
                    throw new CustomException("The IO Could not be added.");
                }

                //                                          //Reset values
                intnPkNewResource = null;
                intnPkEleetNew = null;
                intnPkEleeleNew = null;
                intStatus = 400;
            }

            //****************************************RESOURCE GROUP****************************************
            List<GpresentityGroupResourceEntityDB> darrgpresentity = context_M.GroupResource.Where(group =>
                group.intPkWorkflow == intPkBaseWorkflow_I).ToList();
            int intPkNewResource;
            //                                              //Copy resource group to new workflow
            foreach (GpresentityGroupResourceEntityDB gpresentityBase in darrgpresentity)
            {
                //                                          //Find the base group resource
                EleentityElementEntityDB eleentityBaseResource = context_M.Element.FirstOrDefault(ele =>
                    ele.intPk == gpresentityBase.intPkResource);

                intStatus = 400;
                if (
                    //                                      //The resource is not yet in the dictionary
                    !dicResource_M.ContainsKey(eleentityBaseResource.intPk)
                    )
                {
                    if (
                        //                                  //The resource type is not yet in the dictionary
                        !dicResourceType.ContainsKey(eleentityBaseResource.intPkElementType)
                        )
                    {
                        RestypResourceType.subAddResourceType(eleentityBaseResource.intPkElementType, ps_I, context_M,
                            ref intPkNewResourceType);

                        //                                  //Add relationship between the base and the new process type 
                        //                                  //      to the dictionary
                        dicResourceType.Add(eleentityBaseResource.intPkElementType, intPkNewResourceType);
                    }
                    else
                    {
                        //                                  //Get resource type from dicResourceType
                        intPkNewResourceType = dicResourceType.FirstOrDefault(restyp =>
                            restyp.Key == eleentityBaseResource.intPkElementType).Value;
                    }

                    strResourceName = eleentityBaseResource.strElementName + " (Generic)";

                    //                                      //Find new resource
                    EleentityElementEntityDB eleentityNewResource = context_M.Element.FirstOrDefault(ele =>
                        ele.strElementName == strResourceName &&
                        ele.intPkElementType == intPkNewResourceType);

                    if (
                        //                                  //There is already a resource with the same data.
                        eleentityNewResource != null
                        )
                    {
                        //                                  //Add relationship between the base and the new resource 
                        //                                  //      to the dictionary
                        dicResource_M.Add(eleentityBaseResource.intPk, eleentityNewResource.intPk);
                    }
                    else
                    {
                        ResResource.subAddGenericResource(intPkNewResourceType, strResourceName,
                            eleentityBaseResource, context_M, out eleentityNewResource, ref dicResource_M);
                    }

                    intPkNewResource = eleentityNewResource.intPk;
                    intStatus = 200;
                }
                else
                {
                    //                                      //Get resource from dicResource
                    intPkNewResource = dicResource_M.FirstOrDefault(res =>
                        res.Key == eleentityBaseResource.intPk).Value;
                    intStatus = 200;
                }

                if (
                    intStatus == 200
                    )
                {
                    //                                          //Create a new one with the pk of new workflow.
                    GpresentityGroupResourceEntityDB gpresentityNew = new GpresentityGroupResourceEntityDB
                    {
                        intPkResource = intPkNewResource,
                        intPkWorkflow = intPkNewWorkflow_I,
                        intId = gpresentityBase.intId
                    };
                    context_M.GroupResource.Add(gpresentityNew);
                }
                else
                {
                    throw new CustomException("The resource group could not be added.");
                }
            }
            context_M.SaveChanges();

            //****************************************LINK NODE****************************************
            List<LinknodLinkNodeEntityDB> darrioentityNode = context_M.LinkNode.Where(node =>
                node.intPkWorkflow == intPkBaseWorkflow_I).ToList();
            
            int intNodeI;
            int intNodeO;
            //                                              //Copy link node to new workflow
            foreach (LinknodLinkNodeEntityDB linknodentityBase in darrioentityNode)
            {
                //                                          //Get nodes from dicIO
                intNodeI = dicIO.FirstOrDefault(nodeI => nodeI.Key == linknodentityBase.intPkNodeI).Value;
                intNodeO = dicIO.FirstOrDefault(nodeO => nodeO.Key == linknodentityBase.intPkNodeO).Value;

                //                                          //Create a new one with the pk of new workflow.
                LinknodLinkNodeEntityDB linknodeNew = new LinknodLinkNodeEntityDB
                {
                    intPkWorkflow = intPkNewWorkflow_I,
                    intPkNodeI = intNodeI,
                    intPkNodeO = intNodeO
                };
                context_M.LinkNode.Add(linknodeNew);
                context_M.SaveChanges();

                GpcondjsonGroupConditionJson gpcondjson = Tools.gpcondjsonGetCondition(null, linknodentityBase.intPk,
                    null, null);

                ProdtypProductType.subCopyConditionsToADifferentProduct(null, linknodeNew.intPk, null, null, 
                    gpcondjson, darrattrjson1BaseProd_I, darrattrjson1NewProd_I, context_M);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subGetNewEleetAndEleele(
            //                                              //Get data from dictionaries

            int? intnPkEleetBase_I,
            int? intnPkEleeleBase_I,
            Dictionary<int, int> dicEleet_I,
            Dictionary<int, int> dicEleele_I,
            ref int? intnPkEleetNew_IO,
            ref int? intnPkEleeleNew_IO
            )
        {
            if (
                intnPkEleetBase_I != null
                )
            {
                //                                          //Get new eleet from dicEleet
                intnPkEleetNew_IO = dicEleet_I.FirstOrDefault(eleet =>
                    eleet.Key == intnPkEleetBase_I).Value;

                intnPkEleeleNew_IO = null;
            }
            else if (
                intnPkEleeleBase_I != null
                )
            {
                //                                          //Get new eleele from dicEleele
                intnPkEleeleNew_IO = dicEleele_I.FirstOrDefault(eleele =>
                    eleele.Key == intnPkEleeleBase_I).Value;

                intnPkEleetNew_IO = null;
            }
            else
            {
                //                                          //It is a node
                intnPkEleetNew_IO = null;
                intnPkEleeleNew_IO = null;
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddDataRelatedToGenericResource(
            //                                              //Make a copy of each value from the base 
            //                                              //      resource to the generic resource.
            //                                              //Make a copy of each cost from the base 
            //                                              //      resource to the generic resource.
            //                                              //Make a copy of each time from the base 
            //                                              //     resource to the generic resource.
            //                                              //Make a copy of each ascendant from the base 
            //                                              //     resource to the generic resource.

            PsPrintShop ps_I,
            Dictionary<int, int> dicResource_I,
            Odyssey2Context context_M
            )
        {

            //                              //Takes Uncategorized Expense account.
            int intPkUncategorizedExpense = (from accentity in context_M.Account
                                             join acctypentity in context_M.AccountType
                                             on accentity.intPkAccountType equals acctypentity.intPk
                                             where accentity.intPkPrintshop == ps_I.intPk &&
                                             acctypentity.strType == AccAccounting.strAccountTypeExpense &&
                                             accentity.strName == AccAccounting.strUncategorizedExpenseName &&
                                             accentity.boolGeneric == true &&
                                             //                 //Since there is not only one generic expense account.
                                             accentity.strNumber == AccAccounting.strUncategorizedExpenseNumber
                                             select accentity).FirstOrDefault().intPk;

            int intPkBaseRes;
            int intPkNewRes;
            int? intnPkNewResourceInherited = null;
            int? intnPkNewValueInherited = null;
            int? intnPkNewCostInherited = null;
            int intPkNewValue = 0;
            int intPkNewCost = 0;
            //                                              //Dictionary to store base and new values.
            Dictionary<int, int> dicValue = new Dictionary<int, int>();
            //                                              //Dictionary to store base and new costs.
            Dictionary<int, int> dicCost = new Dictionary<int, int>();

            EleentityElementEntityDB eleentityBase;
            EleentityElementEntityDB eleentityNew;
            List<ValentityValueEntityDB> darrvalentityBase;
            List<ValentityValueEntityDB> darrvalentityNew;
            CostentityCostEntityDB costentityBase;
            CostentityCostEntityDB costentityNew;
            List<TimeentityTimeEntityDB> darrtimeentityBase;
            List<TimeentityTimeEntityDB> darrtimeentityNew;
            List<AscentityAscendantsEntityDB> darrascentityBase;
            List<AscentityAscendantsEntityDB> darrascentityNew;
            //                                              //Copy data to new workflow
            foreach (KeyValuePair<int, int> res in dicResource_I)
            {
                intPkBaseRes = res.Key;
                intPkNewRes = res.Value;

                //****************************************VALUE****************************************
                darrvalentityBase = context_M.Value.Where(value => value.intPkElement == intPkBaseRes).ToList();
                darrvalentityNew = context_M.Value.Where(value => value.intPkElement == intPkNewRes).ToList();
                eleentityBase = context_M.Element.FirstOrDefault(res => res.intPk == intPkBaseRes);
                if (
                    //                                      //It is a custom resource
                    RestypResourceType.boolIsCustom(eleentityBase.intPkElementType, context_M)
                    )
                {
                    eleentityNew = context_M.Element.FirstOrDefault(res => res.intPk == intPkNewRes);

                    foreach (ValentityValueEntityDB valentityBase in darrvalentityBase)
                    {
                        AttrentityAttributeEntityDB attrentityBase = context_M.Attribute.FirstOrDefault(attr =>
                            attr.intPk == valentityBase.intPkAttribute);

                        //                                  //Filter attributes
                        List<ValentityValueEntityDB> darrvalentityNewFiltered = darrvalentityNew.Where(value =>
                            value.strValue == valentityBase.strValue &&
                            value.boolnIsDecimal == valentityBase.boolnIsDecimal).ToList();

                        if (
                            darrvalentityNewFiltered.Count > 0
                            )
                        {
                            int intI = 0;
                            bool boolAttributeExists = false;
                            //                              //Check if the attribute exists
                            /*WHILE-DO*/
                            while (
                                intI < darrvalentityNewFiltered.Count && !boolAttributeExists
                                )
                            {
                                AttrentityAttributeEntityDB attrentityNew = context_M.Attribute.FirstOrDefault(attr =>
                                    attr.intPk == darrvalentityNewFiltered[intI].intPkAttribute);

                                if (
                                    attrentityBase.strCustomName == attrentityNew.strCustomName &&
                                    attrentityBase.strDatatype == attrentityNew.strDatatype
                                )
                                {
                                    boolAttributeExists = true;
                                }

                                intI = intI + 1;
                            }

                            if (
                                //                          //The attibute does not exist
                                !boolAttributeExists
                                )
                            {
                                ResResource.subAddAttributeToCustom(eleentityNew.intPkElementType, intPkNewRes,
                                    attrentityBase, valentityBase, context_M);
                            }
                        }
                        else
                        {
                            ResResource.subAddAttributeToCustom(eleentityNew.intPkElementType, intPkNewRes,
                                attrentityBase, valentityBase, context_M);
                        }
                    }
                }
                else
                //                                          //It is not a custom resource
                {
                    foreach (ValentityValueEntityDB valentityBase in darrvalentityBase)
                    {
                        ValentityValueEntityDB valentityNew = darrvalentityNew.FirstOrDefault(value =>
                            value.strValue == valentityBase.strValue &&
                            value.boolnIsChangeable == valentityBase.boolnIsChangeable &&
                            value.boolnIsDecimal == valentityBase.boolnIsDecimal &&
                            value.intPkAttribute == valentityBase.intPkAttribute);

                        if (
                            valentityNew != null
                            )
                        {
                            //                              //Add relationship between the base and the new value 
                            //                              //      to the dictionary
                            dicValue.Add(valentityBase.intPk, valentityNew.intPk);
                        }
                        else
                        {
                            if (
                                valentityBase.intnPkValueInherited != null
                                )
                            {
                                //                          //Find base value inherited
                                ValentityValueEntityDB valentityBaseValueInherited = context_M.Value.FirstOrDefault(value =>
                                    value.intPk == valentityBase.intnPkValueInherited);

                                if (
                                    //                      //The resource is in the dictionary
                                    dicResource_I.ContainsKey(valentityBaseValueInherited.intPkElement)
                                    )
                                {
                                    if (
                                        //                  //The value was already added
                                        dicValue.ContainsKey(valentityBaseValueInherited.intPk)
                                        )
                                    {
                                        //                  //Get new value from dicValue
                                        intPkNewValue = dicValue.FirstOrDefault(value =>
                                            value.Key == valentityBaseValueInherited.intPk).Value;

                                        intnPkNewValueInherited = intPkNewValue;
                                    }
                                    else
                                    {
                                        //                  //Get resource from dicResource
                                        intnPkNewResourceInherited = dicResource_I.FirstOrDefault(res =>
                                            res.Key == valentityBaseValueInherited.intPkElement).Value;

                                        //                  //Adding the value.
                                        ValentityValueEntityDB valentityNewValueInherited = new ValentityValueEntityDB
                                        {
                                            strValue = valentityBaseValueInherited.strValue,
                                            boolnIsChangeable = valentityBaseValueInherited.boolnIsChangeable,
                                            strSetDate = valentityBaseValueInherited.strSetDate,
                                            strSetTime = valentityBaseValueInherited.strSetTime,
                                            boolnIsDecimal = valentityBaseValueInherited.boolnIsDecimal,
                                            intPkAttribute = valentityBaseValueInherited.intPkAttribute,
                                            intPkElement = (int)intnPkNewResourceInherited,
                                            //              //Will be updated later
                                            intnPkValueInherited = null
                                        };
                                        context_M.Value.Add(valentityNewValueInherited);

                                        context_M.SaveChanges();

                                        intnPkNewValueInherited = valentityNewValueInherited.intPk;

                                        //                  //Add relationship between the base and the new value 
                                        //                  //      to the dictionary
                                        dicValue.Add(valentityBaseValueInherited.intPk, (int)intnPkNewValueInherited);
                                    }
                                }
                            }

                            if (
                                //                          //The value was already added in an inheritance
                                dicValue.ContainsKey(valentityBase.intPk)
                                )
                            {
                                if (
                                    intnPkNewValueInherited != null
                                    )
                                {
                                    //                      //Get value from dicValue
                                    intPkNewValue = dicValue.FirstOrDefault(value =>
                                        value.Key == valentityBase.intPk).Value;

                                    //                      //Find new value inherited
                                    valentityNew = context_M.Value.FirstOrDefault(value =>
                                        value.intPk == intPkNewValue);

                                    valentityNew.intnPkValueInherited = intnPkNewValueInherited;

                                    context_M.Value.Update(valentityNew);
                                }
                            }
                            else
                            {
                                //                          //Adding the value.
                                valentityNew = new ValentityValueEntityDB
                                {
                                    strValue = valentityBase.strValue,
                                    boolnIsChangeable = valentityBase.boolnIsChangeable,
                                    strSetDate = valentityBase.strSetDate,
                                    strSetTime = valentityBase.strSetTime,
                                    boolnIsDecimal = valentityBase.boolnIsDecimal,
                                    intPkAttribute = valentityBase.intPkAttribute,
                                    intPkElement = intPkNewRes,
                                    intnPkValueInherited = intnPkNewValueInherited
                                };
                                context_M.Value.Add(valentityNew);

                                context_M.SaveChanges();

                                //                          //Add relationship between the base and the new value 
                                //                          //      to the dictionary
                                dicValue.Add(valentityBase.intPk, valentityNew.intPk);
                            }

                            context_M.SaveChanges();
                        }

                        //                                  //Reset values
                        intnPkNewValueInherited = null;
                        intnPkNewResourceInherited = null;
                    }

                    //****************************************ASCENDANTS****************************************
                    darrascentityBase = context_M.Ascendants.Where(asc => asc.intPkElement == intPkBaseRes).ToList();
                    darrascentityNew = context_M.Ascendants.Where(asc => asc.intPkElement == intPkNewRes).ToList();
                    foreach (AscentityAscendantsEntityDB ascentityBase in darrascentityBase)
                    {
                        AscentityAscendantsEntityDB ascentityNew = darrascentityNew.FirstOrDefault(asc =>
                            asc.strAscendants == ascentityBase.strAscendants);

                        if (
                            ascentityNew != null
                            )
                        {
                            //                              //Do nothing
                        }
                        else
                        {
                            ascentityNew = new AscentityAscendantsEntityDB
                            {
                                strAscendants = ascentityBase.strAscendants,
                                intPkElement = intPkNewRes
                            };
                            context_M.Ascendants.Add(ascentityNew);
                        }
                    }
                    context_M.SaveChanges();
                }

                //****************************************COST****************************************
                costentityBase = context_M.Cost.FirstOrDefault(cost => cost.intPkResource == intPkBaseRes);
                costentityNew = context_M.Cost.FirstOrDefault(cost => cost.intPkResource == intPkNewRes);
                /*CASE*/
                if (
                    //                                      //Add cost to new resource
                    costentityBase != null && costentityNew == null
                    )
                {
                    if (
                        costentityBase.intnPkCostInherited != null
                        )
                    {
                        //                                  //Find base cost inherited
                        CostentityCostEntityDB costentityBaseCostInherited = context_M.Cost.FirstOrDefault(cost =>
                            cost.intPk == costentityBase.intnPkCostInherited);

                        if (
                            //                              //The resource is in the dictionary
                            dicResource_I.ContainsKey(costentityBaseCostInherited.intPkResource)
                            )
                        {
                            if (
                                //                          //The cost was already added
                                dicCost.ContainsKey(costentityBaseCostInherited.intPk)
                                )
                            {
                                //                          //Get new cost from dicValue
                                intPkNewCost = dicCost.FirstOrDefault(cost =>
                                    cost.Key == costentityBaseCostInherited.intPk).Value;

                                intnPkNewCostInherited = intPkNewCost;
                            }
                            else
                            {
                                //                          //Get resource from dicResource
                                intnPkNewResourceInherited = dicResource_I.FirstOrDefault(res =>
                                    res.Key == costentityBaseCostInherited.intPkResource).Value;

                                //                          //Adding the value.
                                CostentityCostEntityDB costentityNewCostInherited = new CostentityCostEntityDB
                                {
                                    numnQuantity = costentityBaseCostInherited.numnQuantity,
                                    numnCost = costentityBaseCostInherited.numnCost,
                                    numnMin = costentityBaseCostInherited.numnMin,
                                    numnBlock = costentityBaseCostInherited.numnBlock,
                                    strSetDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                                    strSetTime = Time.Now(ZonedTimeTools.timezone).ToText(),
                                    boolnIsChangeable = costentityBaseCostInherited.boolnIsChangeable,
                                    numnHourlyRate = costentityBaseCostInherited.numnHourlyRate,
                                    boolnArea = costentityBaseCostInherited.boolnArea,
                                    intPkResource = (int)intnPkNewResourceInherited,
                                    //                      //Will be updated later
                                    intnPkCostInherited = null,
                                    intPkAccount = intPkUncategorizedExpense
                                };
                                context_M.Cost.Add(costentityNewCostInherited);

                                context_M.SaveChanges();

                                intnPkNewCostInherited = costentityNewCostInherited.intPk;

                                //                          //Add relationship between the base and the new cost 
                                //                          //      to the dictionary
                                dicCost.Add(costentityBaseCostInherited.intPk, (int)intnPkNewCostInherited);
                            }
                        }
                    }

                    if (
                        //                                  //The cost was already added in an inheritance
                        dicCost.ContainsKey(costentityBase.intPk)
                        )
                    {
                        if (
                            intnPkNewCostInherited != null
                            )
                        {
                            //                              //Get cost from dicCost
                            intPkNewCost = dicCost.FirstOrDefault(res => res.Key == costentityBase.intPk).Value;

                            //                              //Find new cost inherited
                            costentityNew = context_M.Cost.FirstOrDefault(cost =>
                                cost.intPk == intPkNewCost);

                            costentityNew.intnPkCostInherited = intnPkNewCostInherited;

                            context_M.Cost.Update(costentityNew);
                        }
                    }
                    else
                    {
                        //                                  //Adding the cost.
                        costentityNew = new CostentityCostEntityDB
                        {
                            numnQuantity = costentityBase.numnQuantity,
                            numnCost = costentityBase.numnCost,
                            numnMin = costentityBase.numnMin,
                            numnBlock = costentityBase.numnBlock,
                            strSetDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                            strSetTime = Time.Now(ZonedTimeTools.timezone).ToText(),
                            boolnIsChangeable = costentityBase.boolnIsChangeable,
                            numnHourlyRate = costentityBase.numnHourlyRate,
                            boolnArea = costentityBase.boolnArea,
                            intPkResource = intPkNewRes,
                            intnPkCostInherited = intnPkNewCostInherited,
                            intPkAccount = intPkUncategorizedExpense
                        };
                        context_M.Cost.Add(costentityNew);

                        context_M.SaveChanges();

                        //                                  //Add relationship between the base and the new cost 
                        //                                  //      to the dictionary
                        dicCost.Add(costentityBase.intPk, costentityNew.intPk);
                    }

                    context_M.SaveChanges();

                    //                                      //Reset values
                    intnPkNewCostInherited = null;
                    intnPkNewResourceInherited = null;
                }
                else if (
                    //                                      //The new resource cost already exists
                    costentityBase != null && costentityNew != null
                    )
                {
                    //                                      //Add relationship between the base and the new cost 
                    //                                      //      to the dictionary
                    dicCost.Add(costentityBase.intPk, costentityNew.intPk);
                }
                else
                {
                    //                                      //Do nothing
                }
                /*END-CASE*/

                //****************************************TIME****************************************
                darrtimeentityBase = context_M.Time.Where(time =>
                    time.intPkResource == intPkBaseRes && time.strEndDate == null && time.strEndTime == null).ToList();
                darrtimeentityNew = context_M.Time.Where(time =>
                    time.intPkResource == intPkNewRes && time.strEndDate == null && time.strEndTime == null).ToList();
                foreach (TimeentityTimeEntityDB timeentityBase in darrtimeentityBase)
                {
                    TimeentityTimeEntityDB timeentityNew = darrtimeentityNew.FirstOrDefault(time =>
                        time.numQuantity == timeentityBase.numQuantity && time.intHours == timeentityBase.intHours &&
                        time.intMinutes == timeentityBase.intMinutes && time.intSeconds == timeentityBase.intSeconds &&
                        time.numnMinThickness == timeentityBase.numnMinThickness &&
                        time.numnMaxThickness == timeentityBase.numnMaxThickness &&
                        time.strThicknessUnit == timeentityBase.strThicknessUnit);

                    if (
                        timeentityNew != null
                        )
                    {
                        //                                  //Do nothing
                    }
                    else
                    {
                        timeentityNew = new TimeentityTimeEntityDB
                        {
                            numQuantity = timeentityBase.numQuantity,
                            intHours = timeentityBase.intHours,
                            intMinutes = timeentityBase.intMinutes,
                            intSeconds = timeentityBase.intSeconds,
                            strStartDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                            strStartTime = Time.Now(ZonedTimeTools.timezone).ToText(),
                            strEndDate = null,
                            strEndTime = null,
                            numnMinThickness = timeentityBase.numnMinThickness,
                            numnMaxThickness = timeentityBase.numnMaxThickness,
                            strThicknessUnit = timeentityBase.strThicknessUnit,
                            intPkResource = intPkNewRes
                        };
                        context_M.Time.Add(timeentityNew);
                    }
                }
                context_M.SaveChanges();
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subAddCalculationsToNewWorkflow(
            //                                              //Make a copy of each calculation from the base 
            //                                              //      workflow to the new wokflow.
            //                                              //Make a copy of each paper transformation from the base 
            //                                              //      workflow to the new wokflow.
            //                                              //Make a copy of each transform calculation from the base 
            //                                              //      workflow to the new wokflow.

            int intPkBaseWorkflow_I,
            WfentityWorkflowEntityDB wfentityNew_I,
            PsPrintShop ps_I,
            Dictionary<int, int> dicEleet_I,
            Dictionary<int, int> dicEleele_I,
            Dictionary<int, int> dicProcess_I,
            Dictionary<int, int> dicResource_I,
            Dictionary<int, int> dicProcessInWorkflow_I,
            //                                              //Base product attributes
            List<Attrjson1AttributeJson1> darrattrjson1BaseProd_I,
            //                                              //New product attributes
            List<Attrjson1AttributeJson1> darrattrjson1NewProd_I,
            Odyssey2Context context_M
            )
        {
            //                                              //Takes Uncategorized Expense account.
            int intPkUncategorizedExpense = (from accentity in context_M.Account
                                             join acctypentity in context_M.AccountType
                                             on accentity.intPkAccountType equals acctypentity.intPk
                                             where accentity.intPkPrintshop == ps_I.intPk &&
                                             acctypentity.strType == AccAccounting.strAccountTypeExpense &&
                                             accentity.strName == AccAccounting.strUncategorizedExpenseName &&
                                             accentity.boolGeneric == true &&
                                             //             //Since there is not only one generic expense account.
                                             accentity.strNumber == AccAccounting.strUncategorizedExpenseNumber
                                             select accentity).FirstOrDefault().intPk;

            //                                              //Dictionary to store base and new values.
            Dictionary<int, int> dicCalculation = new Dictionary<int, int>();

            //****************************************CALCULATION****************************************
            List<CalentityCalculationEntityDB> darrcalentity = context_M.Calculation.Where(cal =>
                cal.intnPkWorkflow == intPkBaseWorkflow_I).ToList();

            int? intnPkEleetNew = null;
            int? intnPkEleeleNew = null;
            int? intnPkResourceNew = null;
            int? intnPkEleetQFromNew = null;
            int? intnPkEleeleQFromNew = null;
            int? intnPkResourceQFromNew = null;
            int? intnPkProcessNew = null;
            //                                              //Copy calculation to new workflow
            foreach (CalentityCalculationEntityDB calentityBase in darrcalentity)
            {
                if (
                    calentityBase.strByX == CalCalculation.strByResource
                    )
                {
                    ProdtypProductType.subGetNewResAndEleetAndEleele((int)calentityBase.intnPkResource,
                        calentityBase.intnPkElementElementType, calentityBase.intnPkElementElement,
                        calentityBase.intnPkQFromResource, calentityBase.intnPkQFromElementElementType,
                        calentityBase.intnPkQFromElementElement, dicEleet_I, dicEleele_I, dicResource_I,
                        ref intnPkResourceNew, ref intnPkEleetNew, ref intnPkEleeleNew, ref intnPkResourceQFromNew,
                        ref intnPkEleetQFromNew, ref intnPkEleeleQFromNew);
                }
                else if (
                    calentityBase.strByX == CalCalculation.strByProcess
                    )
                {
                    //                                      //Get new process from dicProcess
                    intnPkProcessNew = dicProcess_I.FirstOrDefault(process =>
                        process.Key == calentityBase.intnPkProcess).Value;
                }

                CalentityCalculationEntityDB calentityNew = new CalentityCalculationEntityDB
                {
                    strUnit = calentityBase.strUnit,
                    numnQuantity = calentityBase.numnQuantity,
                    numnNeeded = calentityBase.numnNeeded,
                    numnPerUnits = calentityBase.numnPerUnits,
                    numnCost = calentityBase.numnCost,
                    intnHours = calentityBase.intnHours,
                    intnMinutes = calentityBase.intnMinutes,
                    intnSeconds = calentityBase.intnSeconds,
                    numnMin = calentityBase.numnMin,
                    numnBlock = calentityBase.numnBlock,
                    boolIsEnable = calentityBase.boolIsEnable,
                    strValue = calentityBase.strValue,
                    strAscendants = calentityBase.strAscendants,
                    strDescription = calentityBase.strDescription,
                    numnProfit = calentityBase.numnProfit,
                    strCalculationType = calentityBase.strCalculationType,
                    strByX = calentityBase.strByX,
                    strStartDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                    strEndDate = calentityBase.strEndDate,
                    strStartTime = Time.Now(ZonedTimeTools.timezone).ToText(),
                    strEndTime = calentityBase.strEndTime,
                    numnQuantityWaste = calentityBase.numnQuantityWaste,
                    numnPercentWaste = calentityBase.numnPercentWaste,
                    intnPkProduct = wfentityNew_I.intnPkProduct,
                    intnPkProcess = intnPkProcessNew,
                    intnPkResource = intnPkResourceNew,
                    intnPkElementElementType = intnPkEleetNew,
                    intnPkElementElement = intnPkEleeleNew,
                    intnPkWorkflow = wfentityNew_I.intPk,
                    intnProcessInWorkflowId = calentityBase.intnProcessInWorkflowId,
                    intnPkQFromElementElementType = intnPkEleetQFromNew,
                    intnPkQFromElementElement = intnPkEleeleQFromNew,
                    intnPkQFromResource = intnPkResourceQFromNew,
                    intnPkAccount = intPkUncategorizedExpense,
                    boolnFromThickness = calentityBase.boolnFromThickness,
                    boolnIsBlock = calentityBase.boolnIsBlock
                };
                context_M.Calculation.Add(calentityNew);
                context_M.SaveChanges();

                GpcondjsonGroupConditionJson gpcondjson = Tools.gpcondjsonGetCondition(calentityBase.intPk, null, 
                    null, null);

                ProdtypProductType.subCopyConditionsToADifferentProduct(calentityNew.intPk, null, null, null, gpcondjson, 
                    darrattrjson1BaseProd_I, darrattrjson1NewProd_I, context_M);

                //                                          //Add relationship between base and new calculation 
                //                                          //      to the dictionary
                dicCalculation.Add(calentityBase.intPk, calentityNew.intPk);

                //                                          //Reset values
                intnPkEleetNew = null;
                intnPkEleeleNew = null;
                intnPkResourceNew = null;
                intnPkEleetQFromNew = null;
                intnPkEleeleQFromNew = null;
                intnPkResourceQFromNew = null;
                intnPkProcessNew = null;
            }

            //****************************************PAPER TRANS****************************************
            int intPkBaseCal;
            int intPkNewCal;
            int intPkProcessInWorkflowNew;
            int? intnPkNewPatransOwn = null;
            int? intnPkNewPatransLink = null;
            //                                              //Copy paper transformation to new workflow
            foreach (KeyValuePair<int, int> calculation in dicCalculation)
            {
                //                                          //Easy code
                intPkBaseCal = calculation.Key;
                intPkNewCal = calculation.Value;

                List<PatransPaperTransformationEntityDB> darrpatransentity = context_M.PaperTransformation.Where(
                    patrans => (patrans.intnPkCalculationOwn == intPkBaseCal ||
                    patrans.intnPkCalculationLink == intPkBaseCal)).ToList();

                //                                          //Copy paper transformation to new workflow
                foreach (PatransPaperTransformationEntityDB patransentityBase in darrpatransentity)
                {
                    if (
                        patransentityBase.intnPkCalculationOwn != null
                        )
                    {
                        intnPkNewPatransOwn = intPkNewCal;
                        intnPkNewPatransLink = null;
                    }
                    else if (
                        patransentityBase.intnPkCalculationLink != null
                        )
                    {
                        intnPkNewPatransOwn = null;
                        intnPkNewPatransLink = intPkNewCal;
                    }

                    ProdtypProductType.subGetNewResAndEleetAndEleele(patransentityBase.intPkResourceI,
                        patransentityBase.intnPkElementElementTypeI, patransentityBase.intnPkElementElementI,
                        patransentityBase.intnPkResourceO, patransentityBase.intnPkElementElementTypeO,
                        patransentityBase.intnPkElementElementO, dicEleet_I, dicEleele_I, dicResource_I,
                        ref intnPkResourceNew, ref intnPkEleetNew, ref intnPkEleeleNew, ref intnPkResourceQFromNew,
                        ref intnPkEleetQFromNew, ref intnPkEleeleQFromNew);

                    //                                      //Get new eleet from dicEleet
                    intPkProcessInWorkflowNew = dicProcessInWorkflow_I.FirstOrDefault(piw =>
                        piw.Key == patransentityBase.intPkProcessInWorkflow).Value;

                    PatransPaperTransformationEntityDB patransNew = new PatransPaperTransformationEntityDB
                    {
                        numWidthI = patransentityBase.numWidthI,
                        numnHeightI = patransentityBase.numnHeightI,
                        numWidthO = patransentityBase.numWidthO,
                        numHeightO = patransentityBase.numHeightO,
                        numnMarginTop = patransentityBase.numnMarginTop,
                        numnMarginBottom = patransentityBase.numnMarginBottom,
                        numnMarginLeft = patransentityBase.numnMarginLeft,
                        numnMarginRight = patransentityBase.numnMarginRight,
                        numnVerticalGap = patransentityBase.numnVerticalGap,
                        numnHorizontalGap = patransentityBase.numnHorizontalGap,
                        strUnit = patransentityBase.strUnit,
                        boolTemporary = patransentityBase.boolTemporary,
                        intPkProcessInWorkflow = intPkProcessInWorkflowNew,
                        intPkResourceI = (int)intnPkResourceNew,
                        intnPkElementElementTypeI = intnPkEleetNew,
                        intnPkElementElementI = intnPkEleeleNew,
                        intnPkElementElementTypeO = intnPkEleetQFromNew,
                        intnPkElementElementO = intnPkEleeleQFromNew,
                        intnPkResourceO = intnPkResourceQFromNew,
                        boolOptimized = patransentityBase.boolOptimized,
                        intnPkCalculationOwn = intnPkNewPatransOwn,
                        intnPkCalculationLink = intnPkNewPatransLink,
                        boolCut = patransentityBase.boolCut,
                        intFoldFactor = patransentityBase.intFoldFactor
                    };

                    context_M.Add(patransNew);

                    //                                      //Reset values
                    intnPkEleetNew = null;
                    intnPkEleeleNew = null;
                    intnPkResourceNew = null;
                    intnPkEleetQFromNew = null;
                    intnPkEleeleQFromNew = null;
                    intnPkResourceQFromNew = null;
                    intnPkNewPatransOwn = null;
                    intnPkNewPatransLink = null;
                }
                context_M.SaveChanges();
            }

            //****************************************TRANSFORM CAL****************************************
            int intPkBasePiw;
            int intPkNewPiw;
            //                                              //Copy transform calculation to new workflow
            foreach (KeyValuePair<int, int> piw in dicProcessInWorkflow_I)
            {
                //                                          //To easy code
                intPkBasePiw = piw.Key;
                intPkNewPiw = piw.Value;

                //                                          //Find transform calculations with the old piw.
                List<TrfcalentityTransformCalculationEntityDB> darrtrfcalentity =
                    context_M.TransformCalculation.Where(trf => trf.intPkProcessInWorkflow == intPkBasePiw &&
                    trf.strEndDate == null && trf.strEndTime == null).ToList();

                foreach (TrfcalentityTransformCalculationEntityDB trfcalentityBase in darrtrfcalentity)
                {
                    ProdtypProductType.subGetNewResAndEleetAndEleele(trfcalentityBase.intPkResourceI,
                        trfcalentityBase.intnPkElementElementTypeI, trfcalentityBase.intnPkElementElementI,
                        trfcalentityBase.intPkResourceO, trfcalentityBase.intnPkElementElementTypeO,
                        trfcalentityBase.intnPkElementElementO, dicEleet_I, dicEleele_I, dicResource_I,
                        ref intnPkResourceNew, ref intnPkEleetNew, ref intnPkEleeleNew, ref intnPkResourceQFromNew,
                        ref intnPkEleetQFromNew, ref intnPkEleeleQFromNew);

                    //                                      //Create new transform calculation with new piw.
                    TrfcalentityTransformCalculationEntityDB trfcalentityNew =
                        new TrfcalentityTransformCalculationEntityDB
                        {
                            numNeeded = trfcalentityBase.numNeeded,
                            numPerUnits = trfcalentityBase.numPerUnits,
                            strStartDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                            strStartTime = Time.Now(ZonedTimeTools.timezone).ToText(),
                            strEndDate = null,
                            strEndTime = null,
                            intPkProcessInWorkflow = intPkNewPiw,
                            intnPkElementElementTypeI = intnPkEleetNew,
                            intnPkElementElementI = intnPkEleeleNew,
                            intPkResourceI = (int)intnPkResourceNew,
                            intnPkElementElementTypeO = intnPkEleetQFromNew,
                            intnPkElementElementO = intnPkEleeleQFromNew,
                            intPkResourceO = (int)intnPkResourceQFromNew,
                            strConditionToApply = trfcalentityBase.strConditionToApply,
                            boolConditionAnd = trfcalentityBase.boolConditionAnd,
                            strConditionQuantity = trfcalentityBase.strConditionQuantity
                        };
                    context_M.TransformCalculation.Add(trfcalentityNew);
                    context_M.SaveChanges();

                    GpcondjsonGroupConditionJson gpcondjson = Tools.gpcondjsonGetCondition(null, null,null,
                        trfcalentityBase.intPk);

                    ProdtypProductType.subCopyConditionsToADifferentProduct(null, null, null, trfcalentityNew.intPk,
                        gpcondjson, darrattrjson1BaseProd_I, darrattrjson1NewProd_I, context_M);

                    //                                          //Reset values
                    intnPkEleetNew = null;
                    intnPkEleeleNew = null;
                    intnPkResourceNew = null;
                    intnPkEleetQFromNew = null;
                    intnPkEleeleQFromNew = null;
                    intnPkResourceQFromNew = null;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subGetNewResAndEleetAndEleele(
            //                                              //Get data from dictionaries

            int intPkResourceBase_I,
            int? intnPkEleetBase_I,
            int? intnPkEleeleBase_I,
            int? intnPkResourceQFromBase_I,
            int? intnPkEleetQFromBase_I,
            int? intnPkEleeleQFromBase_I,
            Dictionary<int, int> dicEleet_I,
            Dictionary<int, int> dicEleele_I,
            Dictionary<int, int> dicResource_I,
            ref int? intnPkResourceNew_IO,
            ref int? intnPkEleetNew_IO,
            ref int? intnPkEleeleNew_IO,
            ref int? intnPkResourceQFromNew_IO,
            ref int? intnPkEletQFromNew_IO,
            ref int? intnPkEleeleQFromNew_IO
            )
        {
            //                                              //Get new resource from dicResource
            intnPkResourceNew_IO = dicResource_I.FirstOrDefault(res =>
                res.Key == intPkResourceBase_I).Value;

            if (
                intnPkEleetBase_I != null
                )
            {
                //                                          //Get new eleet from dicEleet
                intnPkEleetNew_IO = dicEleet_I.FirstOrDefault(eleet =>
                    eleet.Key == intnPkEleetBase_I).Value;

                intnPkEleeleNew_IO = null;
            }
            else
            {
                //                                          //Get new eleele from dicEleele
                intnPkEleeleNew_IO = dicEleele_I.FirstOrDefault(eleele =>
                    eleele.Key == intnPkEleeleBase_I).Value;

                intnPkEleetNew_IO = null;
            }

            if (
                intnPkResourceQFromBase_I != null
                )
            {
                //                                          //Get new resourceQFrom from dicResource
                intnPkResourceQFromNew_IO = dicResource_I.FirstOrDefault(res =>
                    res.Key == intnPkResourceQFromBase_I).Value;

                if (
                    intnPkEleetQFromBase_I != null
                    )
                {
                    //                                      //Get new eleetQFrom from dicEleet
                    intnPkEletQFromNew_IO = dicEleet_I.FirstOrDefault(eleet =>
                        eleet.Key == intnPkEleetQFromBase_I).Value;

                    intnPkEleeleQFromNew_IO = null;
                }
                else
                {
                    //                                      //Get new eleeleQFrom from dicEleele
                    intnPkEleeleQFromNew_IO = dicEleele_I.FirstOrDefault(eleele =>
                        eleele.Key == intnPkEleeleQFromBase_I).Value;

                    intnPkEletQFromNew_IO = null;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subCopyConditionsToADifferentProduct(

            int? intnPkCalculation_I,
            int? intnPkLinkNode_I,
            int? intnPkIoentity_I,
            int? intnPkTransformCalculation_I,
            GpcondjsonGroupConditionJson gpcondjson_I,
            //                                              //Base product attributes
            List<Attrjson1AttributeJson1> darrattrjson1BaseProd_I,
            //                                              //New product attributes
            List<Attrjson1AttributeJson1> darrattrjson1NewProd_I,
            Odyssey2Context context_M
            )
        {
            if (
                gpcondjson_I != null
                )
            {
                bool boolTheGroupHasConditions = true;
                ProdtypProductType.subUpdateConditionsAttrPksRecursive(gpcondjson_I, darrattrjson1BaseProd_I,
                    darrattrjson1NewProd_I, ref boolTheGroupHasConditions);

                if (
                    boolTheGroupHasConditions
                    )
                {
                    Tools.subAddCondition(intnPkCalculation_I, intnPkLinkNode_I, intnPkIoentity_I, 
                        intnPkTransformCalculation_I, gpcondjson_I, context_M);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subUpdateConditionsAttrPksRecursive(
            //                                              //Update a group condition, it verifies if the condition is
            //                                              //      a group or a single condition to update the group.

            //                                              //Group to be added, the first group must contain one
            //                                              //      condition or one group.
            GpcondjsonGroupConditionJson gpcondjson_I,
            //                                              //Base product attributes
            List<Attrjson1AttributeJson1> darrattrjson1BaseProd_I,
            //                                              //New product attributes
            List<Attrjson1AttributeJson1> darrattrjson1NewProd_I,
            ref bool boolTheGroupHasConditions_IO
            )
        {
            if (
                gpcondjson_I.arrcond != null
                )
            {
                List<CondjsonConditionJson> darrcondjsonNew = new List<CondjsonConditionJson>();

                //                                          //Update the single conditions.
                foreach (CondjsonConditionJson conjson in gpcondjson_I.arrcond)
                {
                    if (
                        conjson.intnPkAttribute != null
                        )
                    {
                        Attrjson1AttributeJson1 attrjson1BaseProd = darrattrjson1BaseProd_I.FirstOrDefault(attr =>
                            attr.intPk == conjson.intnPkAttribute);

                        if (
                            attrjson1BaseProd != null
                            )
                        {
                            //                              //Check if the attribute exists in the new product
                            Attrjson1AttributeJson1 attrjson1NewProd = darrattrjson1NewProd_I.FirstOrDefault(attr =>
                                attr.strCustomName.ToLower() == attrjson1BaseProd.strCustomName.ToLower());
                            if (
                                attrjson1NewProd != null
                                )
                            {
                                CondjsonConditionJson condjson = new CondjsonConditionJson(attrjson1NewProd.intPk,
                                    conjson.strCondition, conjson.strValue);
                                darrcondjsonNew.Add(condjson);
                            }
                        }
                    }
                    else
                    //                                      //Is a quantity condition
                    {
                        CondjsonConditionJson condjson = new CondjsonConditionJson(conjson.intnPkAttribute,
                            conjson.strCondition, conjson.strValue);
                        darrcondjsonNew.Add(condjson);
                    }
                }

                //                                          //Replace individual conditions
                gpcondjson_I.arrcond = darrcondjsonNew.ToArray();
            }

            if (
                gpcondjson_I.arrgpcond != null
                )
            {
                List<GpcondjsonGroupConditionJson> darrgpcondjsonNew = new List<GpcondjsonGroupConditionJson>();

                foreach (GpcondjsonGroupConditionJson gpcondjson in gpcondjson_I.arrgpcond)
                {
                    bool boolTheGroupHasConditions = true;
                    ProdtypProductType.subUpdateConditionsAttrPksRecursive(gpcondjson, darrattrjson1BaseProd_I,
                        darrattrjson1NewProd_I, ref boolTheGroupHasConditions);

                    if (
                        boolTheGroupHasConditions
                        )
                    {
                        darrgpcondjsonNew.Add(gpcondjson);
                    }
                }

                //                                          //Replace condition groups
                gpcondjson_I.arrgpcond = darrgpcondjsonNew.ToArray();
            }

            if (
                gpcondjson_I.arrcond.Length == 0 && gpcondjson_I.arrgpcond.Length == 0
                )
            {
                boolTheGroupHasConditions_IO = false;
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subCopyAWorkflow(

            String strWorkflowName_I,
            int intWorkflowId_I,
            int? intnPkProduct_I,
            int intPkPrintShop_I,
            WfentityWorkflowEntityDB wfentityBase_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            bool boolIsDefaultWf = false;

            if (
                //                                          //There is a product
                intnPkProduct_I != null
                )
            {
                int intExistingWf = context_M.Workflow.Where(wf => wf.intnPkProduct == intnPkProduct_I).Count();

                if (
                    //                                      //The product does not have workflows yet
                    intExistingWf == 0
                    )
                {
                    boolIsDefaultWf = true;
                }
            }

            //                                      //Get current time and date.
            Time timeCurrentTime = Time.Now(ZonedTimeTools.timezone);
            Date dateCurrentDate = Date.Now(ZonedTimeTools.timezone);

            WfentityWorkflowEntityDB wfentityNew = new WfentityWorkflowEntityDB
            {
                intnPkProduct = intnPkProduct_I,
                intPkPrintshop = intPkPrintShop_I,
                strName = strWorkflowName_I,
                intWorkflowId = intWorkflowId_I,
                strStartDate = dateCurrentDate.ToText(),
                strStartTime = timeCurrentTime.ToString(),
                boolDeleted = false,
                boolDefault = boolIsDefaultWf
            };
            context_M.Workflow.Add(wfentityNew);
            context_M.SaveChanges();

            if (
                //                                          //Copy how workflow default.
                boolIsDefaultWf
                )
            {
                //                                          //Create the defaultHistory.
                DefwfhisentityDefaultWorkflowHistoryEntityDB defwfhisentityDefault = 
                    new DefwfhisentityDefaultWorkflowHistoryEntityDB
                {
                    intPkWorkflow = wfentityNew.intPk,
                    strStartDate = dateCurrentDate.ToText(),
                    strStartTime = timeCurrentTime.ToString(),
                };
                context_M.DefaultWorkflowHistory.Add(defwfhisentityDefault);
                context_M.SaveChanges();
            }

            ProdtypProductType.subCopyPiwIOJAndTransformCalToNewWorkflow(wfentityBase_I, wfentityNew, false, null,
                context_M);
            ProdtypProductType.subCopyAllInputsAndOutputsForTheNewWorkflow(wfentityBase_I, wfentityNew, null,
                context_M);
            ProdtypProductType.subCopyAllCalculationsAndPeriodsForTheNewWorkflow(wfentityBase_I, wfentityNew, false,
                null, context_M);
            ProdtypProductType.subCopyResourceGroupForAWorkflow(wfentityBase_I, wfentityNew, null, context_M);

            intStatus_IO = 200;
            strUserMessage_IO = "Success.";
            strDevMessage_IO = "";
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subPartiallyCopyAWorkflow(

            String strWorkflowName_I,
            int intWorkflowId_I,
            int? intnPkProduct_I,
            int intPkPrintShop_I,
            WfentityWorkflowEntityDB wfentityBase_I,
            List<int> darrintPkPiw_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            bool boolNoPkRepeats = true;
            String strMsg = null;
            //                                              //Check for repeating pks
            foreach (var pkgroup in darrintPkPiw_I.GroupBy(pk => pk).Where(pk => pk.Count() != 1))
            {
                strMsg = string.Format("PkPiw '{0}' is repeated {1} times.", pkgroup.Key, pkgroup.Count());
                boolNoPkRepeats = false;
                break;
            }

            intStatus_IO = 405;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = strMsg;
            if (
                //                                          //No pkpiw is repeated
                boolNoPkRepeats
                )
            {
                bool boolAreAllPksValid = true;
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityToCopy =
                    new List<PiwentityProcessInWorkflowEntityDB>();

                int intI = 0;
                //                                          //Check if all pk are valid
                /*WHILE-DO*/
                while (
                    intI < darrintPkPiw_I.Count && boolAreAllPksValid
                    )
                {
                    PiwentityProcessInWorkflowEntityDB piwentity = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPk == darrintPkPiw_I[intI] && piw.intPkWorkflow == wfentityBase_I.intPk);

                    if (
                        piwentity != null
                        )
                    {
                        darrpiwentityToCopy.Add(piwentity);
                    }
                    else
                    {
                        boolAreAllPksValid = false;
                    }

                    intI = intI + 1;
                }

                intStatus_IO = 406;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "An invalid pk was found.";
                if (
                    //                                      //All pks exist in the DB
                    boolAreAllPksValid
                    )
                {
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityInDB = context_M.ProcessInWorkflow.Where(
                        piw => piw.intPkWorkflow == wfentityBase_I.intPk).ToList();

                    if (
                        //                                  //All piw are selected
                        darrpiwentityToCopy.Count == darrpiwentityInDB.Count
                        )
                    {
                        //                                  //null means it is a full copy
                        darrpiwentityToCopy = null;
                    }

                    bool boolIsDefaultWf = false;
                    if (
                        //                                  //There is a product
                        intnPkProduct_I != null
                        )
                    {
                        int intExistingWf = context_M.Workflow.Where(wf => wf.intnPkProduct == intnPkProduct_I).Count();

                        if (
                            //                              //The product does not have workflows yet
                            intExistingWf == 0
                            )
                        {
                            boolIsDefaultWf = true;
                        }
                    }

                    //                                      //Get current time and date.
                    Time timeCurrentTime = Time.Now(ZonedTimeTools.timezone);
                    Date dateCurrentDate = Date.Now(ZonedTimeTools.timezone);

                    WfentityWorkflowEntityDB wfentityNew = new WfentityWorkflowEntityDB
                    {
                        intnPkProduct = intnPkProduct_I,
                        intPkPrintshop = intPkPrintShop_I,
                        strName = strWorkflowName_I,
                        intWorkflowId = intWorkflowId_I,
                        strStartDate = dateCurrentDate.ToText(),
                        strStartTime = timeCurrentTime.ToString(),
                        boolDeleted = false,
                        boolDefault = boolIsDefaultWf
                    };
                    context_M.Workflow.Add(wfentityNew);
                    context_M.SaveChanges();

                    if (
                        //                                          //Copy how workflow default.
                        boolIsDefaultWf
                    )
                    {
                        //                                          //Create the defaultHistory.
                        DefwfhisentityDefaultWorkflowHistoryEntityDB defwfhisentityDefault = new DefwfhisentityDefaultWorkflowHistoryEntityDB
                        {
                            intPkWorkflow = wfentityNew.intPk,
                            strStartDate = dateCurrentDate.ToText(),
                            strStartTime = timeCurrentTime.ToString(),
                        };
                        context_M.DefaultWorkflowHistory.Add(defwfhisentityDefault);
                        context_M.SaveChanges();
                    }

                    ProdtypProductType.subCopyPiwIOJAndTransformCalToNewWorkflow(wfentityBase_I, wfentityNew, false,
                        darrpiwentityToCopy, context_M);
                    ProdtypProductType.subCopyAllInputsAndOutputsForTheNewWorkflow(wfentityBase_I, wfentityNew,
                        darrpiwentityToCopy, context_M);
                    ProdtypProductType.subCopyAllCalculationsAndPeriodsForTheNewWorkflow(wfentityBase_I, wfentityNew,
                        false, darrpiwentityToCopy, context_M);
                    ProdtypProductType.subCopyResourceGroupForAWorkflow(wfentityBase_I, wfentityNew,
                        darrpiwentityToCopy, context_M);

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolThereIsAWorkflowWithTheSameName(
            //                                              //Get the wf of a product but only the current ones:
            //                                              //      1. Wf that is not deleted.
            //                                              //      2. The last wf of a set of wf with the same id.

            ProdtypProductType prodtyp_I,
            String strWorkflowName_I,
            Odyssey2Context context_M
            )
        {
            bool boolThereIs = false;

            //                                              //Get all the wf for the product except the deleted.
            IQueryable<WfentityWorkflowEntityDB> setwfentity = context_M.Workflow.Where(wf =>
                (wf.intnPkProduct == prodtyp_I.intPk) && (wf.boolDeleted == false));
            List<WfentityWorkflowEntityDB> darrwfentity = setwfentity.ToList();

            boolThereIs = darrwfentity.Exists(wf => wf.strName.ToLower() == strWorkflowName_I.ToLower());

            return boolThereIs;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static int intWorkflowIdForANewOne(
            ProdtypProductType prodtyp_I,
            Odyssey2Context context_M
            )
        {
            int intId = 0;

            //                                              //Get all the wf for the product except the deleted.
            IQueryable<WfentityWorkflowEntityDB> setwfentity = context_M.Workflow.Where(wf =>
                wf.intnPkProduct == prodtyp_I.intPk);
            List<WfentityWorkflowEntityDB> darrwfentity = setwfentity.ToList();

            if (
                darrwfentity.Count == 0
                )
            {
                intId = 1;
            }
            else
            {
                intId = darrwfentity.Max(wf => wf.intWorkflowId) + 1;
            }

            return intId;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static int intWorkflowIdForANewOne(

            List<WfentityWorkflowEntityDB> darrwfentity_I
            )
        {
            int intId = 0;

            if (
                darrwfentity_I.Count == 0
                )
            {
                intId = 1;
            }
            else
            {
                intId = darrwfentity_I.Max(wf => wf.intWorkflowId) + 1;
            }

            return intId;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subCopyPiwIOJAndTransformCalToNewWorkflow(
            //                                              //Make a copy of each process in workflow from the base 
            //                                              //      workflow to the new wokflow.
            //                                              //Update piw pk in InputAndOuputForAJob.
            //                                              //Duplicate transform calculations with the new piw pk.
            //                                              //If boolIsTheNewWfCreatingAStoryPoint is equal to true, the
            //                                              //      calculation EndDate of the base workflow is expired.

            WfentityWorkflowEntityDB wfentityBase_I,
            WfentityWorkflowEntityDB wfentityNew_I,
            bool boolIsTheNewWfCreatingAStoryPoint_I,
            //                                              //Is different from null only if it is a partial copy
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            Odyssey2Context context_M
            )
        {
            //                                              //To storage base product attributes
            List<Attrjson1AttributeJson1> darrattrjson1BaseProd = new List<Attrjson1AttributeJson1>();
            //                                              //To storage new product attributes
            List<Attrjson1AttributeJson1> darrattrjson1NewProd = new List<Attrjson1AttributeJson1>();

            bool boolIsTheSameProduct = wfentityBase_I.intnPkProduct == wfentityNew_I.intnPkProduct;
            bool boolIsBaseWfASystemWf = false;
            if (
                //                                          //It does not the same product
                !boolIsTheSameProduct
                )
            {
                if (
                    //                                      //It is a system workflow
                    wfentityBase_I.intnPkProduct == null
                    )
                {
                    boolIsBaseWfASystemWf = true;
                }
                else
                {
                    //                                      //Find base product type.
                    ProdtypProductType prodtypBase = (ProdtypProductType)EtElementTypeAbstract.etFromDB(context_M,
                        wfentityBase_I.intnPkProduct);
                    //                                      //Get base product attributes
                    darrattrjson1BaseProd = ProdtypProductType.darrattrjson1GetProductAttributes(prodtypBase,
                        context_M);

                    //                                      //Find new product type.
                    ProdtypProductType prodtypNew = (ProdtypProductType)EtElementTypeAbstract.etFromDB(context_M,
                        wfentityNew_I.intnPkProduct);
                    //                                      //Get new product attributes
                    darrattrjson1NewProd = ProdtypProductType.darrattrjson1GetProductAttributes(prodtypNew,
                        context_M);
                }
            }

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity;

            if (
                //                                          //It is a full copy
                darrpiwentity_I == null ||
                darrpiwentity_I.Count == 0
                )
            {
                //                                          //Get all the piws of workflow base.
                IQueryable<PiwentityProcessInWorkflowEntityDB> setpiwentity = context_M.ProcessInWorkflow.Where(piw =>
                    piw.intPkWorkflow == wfentityBase_I.intPk);
                darrpiwentity = setpiwentity.ToList();
            }
            else
            //                                              //It is a partial copy
            {
                darrpiwentity = darrpiwentity_I.OrderBy(piw => piw.intPk).ToList();
            }

            foreach (PiwentityProcessInWorkflowEntityDB piwentityBase in darrpiwentity)
            {
                //                                          //Create a new one with the pk of new workflow.
                PiwentityProcessInWorkflowEntityDB piwentityNew = new PiwentityProcessInWorkflowEntityDB
                {
                    intPkWorkflow = wfentityNew_I.intPk,
                    intPkProcess = piwentityBase.intPkProcess,
                    intnId = piwentityBase.intnId,
                    intProcessInWorkflowId = piwentityBase.intProcessInWorkflowId,
                    boolIsPostProcess = piwentityBase.boolIsPostProcess
                };
                context_M.ProcessInWorkflow.Add(piwentityNew);
                context_M.SaveChanges();

                //                                          //Find transform calculations with the old piw.
                List<TrfcalentityTransformCalculationEntityDB> darrtrfcalentity =
                    context_M.TransformCalculation.Where(trf =>
                    trf.intPkProcessInWorkflow == piwentityBase.intPk && trf.strEndDate == null &&
                    trf.strEndTime == null).ToList();

                foreach (TrfcalentityTransformCalculationEntityDB trfcalentity in darrtrfcalentity)
                {
                    //                                      //Create new transform calculation with new piw.
                    TrfcalentityTransformCalculationEntityDB trfcalentityNew =
                        new TrfcalentityTransformCalculationEntityDB
                        {
                            numNeeded = trfcalentity.numNeeded,
                            numPerUnits = trfcalentity.numPerUnits,
                            strStartDate = trfcalentity.strStartDate,
                            strStartTime = trfcalentity.strStartTime,
                            strEndDate = trfcalentity.strEndDate,
                            strEndTime = trfcalentity.strEndTime,
                            intPkProcessInWorkflow = piwentityNew.intPk,
                            intnPkElementElementTypeI = trfcalentity.intnPkElementElementTypeI,
                            intnPkElementElementI = trfcalentity.intnPkElementElementI,
                            intPkResourceI = trfcalentity.intPkResourceI,
                            intnPkElementElementTypeO = trfcalentity.intnPkElementElementTypeO,
                            intnPkElementElementO = trfcalentity.intnPkElementElementO,
                            intPkResourceO = trfcalentity.intPkResourceO,
                            strConditionToApply = trfcalentity.strConditionToApply,
                            boolConditionAnd = trfcalentity.boolConditionAnd,
                            strConditionQuantity = trfcalentity.strConditionQuantity
                        };
                    context_M.TransformCalculation.Add(trfcalentityNew);

                    if (
                        boolIsTheNewWfCreatingAStoryPoint_I
                        )
                    {
                        //                                      //The calculation is expired.
                        trfcalentity.strEndDate = Date.Now(ZonedTimeTools.timezone).ToText();
                        trfcalentity.strEndTime = Time.Now(ZonedTimeTools.timezone).ToText();

                        context_M.TransformCalculation.Update(trfcalentity);
                    }
                    context_M.SaveChanges();

                    if (
                        boolIsBaseWfASystemWf
                        )
                    {
                        //                                  //Do nothing.
                        //                                  //A system workflow does not have conditions
                    }
                    else
                    {
                        //                                  //If the base calculation has conditions, copy the 
                        //                                  //      conditions to the new calculation.
                        GpcondjsonGroupConditionJson gpcondjson = Tools.gpcondjsonGetCondition(null, null, null,
                            trfcalentity.intPk);

                        if (
                            boolIsTheSameProduct
                            )
                        {
                            Tools.subAddCondition(null, null, null, trfcalentityNew.intPk, gpcondjson, context_M);
                        }
                        else
                        {
                            ProdtypProductType.subCopyConditionsToADifferentProduct(null, null, null,
                                trfcalentityNew.intPk, gpcondjson, darrattrjson1BaseProd, darrattrjson1NewProd, 
                                context_M);
                        }
                    }
                }

                //                                          //Find IOJs with the old Piw.
                List<IojentityInputsAndOutputsForAJobEntityDB> darriojentity = context_M.InputsAndOutputsForAJob.Where(
                    ioj => ioj.intPkProcessInWorkflow == piwentityBase.intPk).ToList();

                foreach (IojentityInputsAndOutputsForAJobEntityDB iojentityBase in darriojentity)
                {
                    //                                      //Job is in progress or completed.
                    JobentityJobEntityDB jobentity = context_M.Job.FirstOrDefault(job =>
                        job.intJobID == iojentityBase.intJobId);

                    if (
                        jobentity == null
                        )
                    {
                        IojentityInputsAndOutputsForAJobEntityDB iojentityNew =
                            new IojentityInputsAndOutputsForAJobEntityDB
                            {
                                intPkProcessInWorkflow = piwentityNew.intPk,
                                intnPkElementElementType = iojentityBase.intnPkElementElementType,
                                intnPkElementElement = iojentityBase.intnPkElementElement,
                                intPkResource = iojentityBase.intPkResource,
                                intJobId = iojentityBase.intJobId,
                                boolnWasSetAutomatically = iojentityBase.boolnWasSetAutomatically
                            };
                        //                                  //Add IOJs. 
                        context_M.InputsAndOutputsForAJob.Add(iojentityNew);
                    }
                }

                context_M.SaveChanges();
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subCopyAllInputsAndOutputsForTheNewWorkflow(
            //                                              //Make a copy of each input and output from the base 
            //                                              //      workflow to the new wokflow.

            WfentityWorkflowEntityDB wfentityBase_I,
            WfentityWorkflowEntityDB wfentityNew_I,
            //                                              //Is different from null only if it is a partial copy
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            Odyssey2Context context_M
            )
        {
            //                                              //To storage base product attributes
            List<Attrjson1AttributeJson1> darrattrjson1BaseProd = new List<Attrjson1AttributeJson1>();
            //                                              //To storage new product attributes
            List<Attrjson1AttributeJson1> darrattrjson1NewProd = new List<Attrjson1AttributeJson1>();

            bool boolIsTheSameProduct = wfentityBase_I.intnPkProduct == wfentityNew_I.intnPkProduct;
            bool boolIsBaseWfASystemWf = false;
            if (
                //                                          //It does not the same product
                !boolIsTheSameProduct
                )
            {
                if (
                    //                                      //It is a system workflow
                    wfentityBase_I.intnPkProduct == null
                    )
                {
                    boolIsBaseWfASystemWf = true;
                }
                else
                {
                    //                                      //Find base product type.
                    ProdtypProductType prodtypBase = (ProdtypProductType)EtElementTypeAbstract.etFromDB(context_M,
                        wfentityBase_I.intnPkProduct);
                    //                                      //Get base product attributes
                    darrattrjson1BaseProd = ProdtypProductType.darrattrjson1GetProductAttributes(prodtypBase,
                        context_M);

                    //                                      //Find new product type.
                    ProdtypProductType prodtypNew = (ProdtypProductType)EtElementTypeAbstract.etFromDB(context_M,
                        wfentityNew_I.intnPkProduct);
                    //                                      //Get new product attributes
                    darrattrjson1NewProd = ProdtypProductType.darrattrjson1GetProductAttributes(prodtypNew,
                        context_M);
                }
            }

            List<Iojsonin2InputOrOutputJsonInternal2> darriojsonin2 = new List<Iojsonin2InputOrOutputJsonInternal2>();

            if (
                //                                          //It is a full copy
                darrpiwentity_I == null ||
                darrpiwentity_I.Count == 0
                )
            {
                //                                          //Get all the nodes for workflow base.
                List<LinknodLinkNodeEntityDB> darrlinknodeentity = context_M.LinkNode.Where(io =>
                io.intPkWorkflow == wfentityBase_I.intPk).ToList();

                foreach (LinknodLinkNodeEntityDB linknodeBase in darrlinknodeentity)
                {
                    //                                      //Create a new one with the pk of new workflow.
                    LinknodLinkNodeEntityDB linknodeNew = new LinknodLinkNodeEntityDB
                    {
                        intPkWorkflow = wfentityNew_I.intPk,
                        intPkNodeI = linknodeBase.intPkNodeI,
                        intPkNodeO = linknodeBase.intPkNodeO
                    };
                    context_M.LinkNode.Add(linknodeNew);
                    context_M.SaveChanges();
                    
                    if (
                        boolIsBaseWfASystemWf
                        )
                    {
                        //                                  //Do nothing.
                        //                                  //A system workflow does not have conditions
                    }
                    else
                    {
                        //                                  //Verify the current linknode to copy and:
                        //                                  //      if has conditions, we have to copy the conditions
                        //                                  //      to the new linknode created for the new workflow.

                        //                                  //Get the possible conditions for the linknode to be
                        //                                  //      copied.
                        GpcondjsonGroupConditionJson gpcondjson = Tools.gpcondjsonGetCondition(null, linknodeBase.intPk,
                            null, null);

                        if (
                            boolIsTheSameProduct
                            )
                        {
                            //                              //If the old linknode has conditions, copy the conditions
                            //                              //       to the new linknode for the new workflow.
                            Tools.subAddCondition(null, linknodeNew.intPk, null, null, gpcondjson, context_M);
                        }
                        else
                        {
                            ProdtypProductType.subCopyConditionsToADifferentProduct(null, linknodeNew.intPk, null, null,
                                gpcondjson, darrattrjson1BaseProd, darrattrjson1NewProd, context_M);
                        }
                    }
                }

                context_M.SaveChanges();

                //                                          //Get all the ios for workflow base.
                List<IoentityInputsAndOutputsEntityDB> darrioentity = context_M.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == wfentityBase_I.intPk).ToList();

                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                {
                    Iojsonin2InputOrOutputJsonInternal2 iojsonin2 = new Iojsonin2InputOrOutputJsonInternal2(
                        ioentity.intPk, ioentity.intPkWorkflow, ioentity.intnPkElementElementType,
                        ioentity.intnPkElementElement, ioentity.intnPkResource, ioentity.strLink,
                        ioentity.intnGroupResourceId, ioentity.boolnIsFinalProduct, ioentity.intnProcessInWorkflowId,
                        ioentity.boolnSize, ioentity.boolnThickness);


                    darriojsonin2.Add(iojsonin2);
                }
            }
            else
            //                                              //It is a partial copy
            {
                darriojsonin2 = ProdtypProductType.darriojsonin2GetIOsToCopy(context_M, darrpiwentity_I);
            }

            foreach (Iojsonin2InputOrOutputJsonInternal2 iojsonin2Base in darriojsonin2)
            {
                //                                          //Create a new one with the pk of new workflow.
                IoentityInputsAndOutputsEntityDB ioentityNew = new IoentityInputsAndOutputsEntityDB
                {
                    intPkWorkflow = wfentityNew_I.intPk,
                    intnProcessInWorkflowId = iojsonin2Base.intnProcessInWorkflowId,
                    intnPkElementElementType = iojsonin2Base.intnPkElementElementType,
                    intnPkElementElement = iojsonin2Base.intnPkElementElement,
                    intnPkResource = iojsonin2Base.intnPkResource,
                    intnGroupResourceId = iojsonin2Base.intnGroupResourceId,
                    boolnIsFinalProduct = iojsonin2Base.boolnIsFinalProduct,
                    strLink = iojsonin2Base.strLink,
                    boolnSize = iojsonin2Base.boolnSize,
                    boolnThickness = iojsonin2Base.boolnThickness
                };
                context_M.InputsAndOutputs.Add(ioentityNew);
                context_M.SaveChanges();

                if (
                       boolIsBaseWfASystemWf
                       )
                {
                    //                                      //Do nothing.
                    //                                      //A system workflow does not have conditions
                }
                else
                {
                    //                                      //Verify the current IO to copy and:
                    //                                      //      if has conditions, we have to copy the conditions
                    //                                      //      to the new IO created for the new workflow.

                    //                                      //Get the possible conditions for the IO to be copied.
                    GpcondjsonGroupConditionJson gpcondjson = Tools.gpcondjsonGetCondition(null, null, 
                        iojsonin2Base.intPk, null);

                    if (
                        boolIsTheSameProduct
                        )
                    {
                        //                              //If the old linknode has conditions, copy the conditions
                        //                              //       to the new linknode for the new workflow.
                        Tools.subAddCondition(null, null, ioentityNew.intPk, null, gpcondjson, context_M);
                    }
                    else
                    {
                        ProdtypProductType.subCopyConditionsToADifferentProduct(null, null, ioentityNew.intPk, null,
                            gpcondjson, darrattrjson1BaseProd, darrattrjson1NewProd, context_M);
                    }
                }

                if (
                    //                                      //It is a node
                    iojsonin2Base.intnPkElementElement == null && iojsonin2Base.intnPkElementElementType == null &&
                        iojsonin2Base.intnProcessInWorkflowId == null
                    )
                {
                    //                                      //Get all the nodes related with this node(ioentityBase) 
                    //                                      //      and with the new workflow.
                    List<LinknodLinkNodeEntityDB> darrlinknodeentityByNode = context_M.LinkNode.Where(node =>
                        node.intPkWorkflow == wfentityNew_I.intPk && (node.intPkNodeI == iojsonin2Base.intPk ||
                        node.intPkNodeO == iojsonin2Base.intPk)).ToList();

                    foreach (LinknodLinkNodeEntityDB linknode in darrlinknodeentityByNode)
                    {
                        if (
                            //                              //It is a input node
                            linknode.intPkNodeI == iojsonin2Base.intPk
                            )
                        {
                            //                              //Update input node by new node(ioentityNew)
                            linknode.intPkNodeI = ioentityNew.intPk;
                        }
                        else if (
                            //                              //It is a output node
                            linknode.intPkNodeO == iojsonin2Base.intPk
                            )
                        {
                            //                              //Update output node by new node(ioentityNew)
                            linknode.intPkNodeO = ioentityNew.intPk;
                        }

                        context_M.LinkNode.Update(linknode);
                    }
                    context_M.SaveChanges();
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static List<Iojsonin2InputOrOutputJsonInternal2> darriojsonin2GetIOsToCopy(

            Odyssey2Context context_M,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I
            )
        {
            //                                              //IOs list to copy
            List<Iojsonin2InputOrOutputJsonInternal2> darriojsonin2 = new List<Iojsonin2InputOrOutputJsonInternal2>();

            //                                              //IOs list from DB
            List<IoentityInputsAndOutputsEntityDB> darrioentity = new List<IoentityInputsAndOutputsEntityDB>();

            foreach (PiwentityProcessInWorkflowEntityDB piwentityBase in darrpiwentity_I)
            {
                List<IoentityInputsAndOutputsEntityDB> darrioentityToCopy = context_M.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == piwentityBase.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentityBase.intProcessInWorkflowId).ToList();

                darrioentity.AddRange(darrioentityToCopy);
            }

            //                                              //Adding IOs from DB to list (darriojsonin2)
            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
            {
                Iojsonin2InputOrOutputJsonInternal2 iojsonin2 = new Iojsonin2InputOrOutputJsonInternal2(
                    ioentity.intPk, ioentity.intPkWorkflow, ioentity.intnPkElementElementType,
                    ioentity.intnPkElementElement, ioentity.intnPkResource, ioentity.strLink,
                    ioentity.intnGroupResourceId, ioentity.boolnIsFinalProduct, ioentity.intnProcessInWorkflowId,
                    ioentity.boolnSize, ioentity.boolnThickness);

                darriojsonin2.Add(iojsonin2);
            }

            //                                              //Nodes list from DB
            List<IoentityInputsAndOutputsEntityDB> darrioentityNodes = new List<IoentityInputsAndOutputsEntityDB>();

            //                                              //Check if the link is copied or not
            foreach (Iojsonin2InputOrOutputJsonInternal2 iojsonin2 in darriojsonin2)
            {
                if (
                    iojsonin2.strLink != null
                    )
                {
                    List<IoentityInputsAndOutputsEntityDB> darrIOsWithTheSameLink = darrioentity.Where(io =>
                        io.intnProcessInWorkflowId != null &&
                        io.intnProcessInWorkflowId != iojsonin2.intnProcessInWorkflowId &&
                        io.strLink == iojsonin2.strLink).ToList();

                    if (
                        //                                  //The other side of the link is not being copied
                        darrIOsWithTheSameLink.Count == 0
                        )
                    {
                        //                                  //Remove link from current IO
                        iojsonin2.strLink = null;

                        ////                                  //Conditions are no longer necessary
                        //iojsonin2.strConditionToApply = null;
                        //iojsonin2.strConditionQuantity = null;
                    }
                    else if (
                        //                                  //Possibly the other side of the link is being copied
                        darrIOsWithTheSameLink.Count == 1
                        )
                    {
                        if (
                            //                              //The other side of the link is not being copied
                            ProdtypProductType.boolIsTheOtherSideOfTheLinkBeingCopied(iojsonin2,
                                darrIOsWithTheSameLink[0], context_M)
                            )
                        {
                            //                              //Do nothing
                        }
                        else
                        {
                            //                              //Remove link from current IO
                            iojsonin2.strLink = null;
                        }

                        ////                                  //Conditions are no longer necessary
                        //iojsonin2.strConditionToApply = null;
                        //iojsonin2.strConditionQuantity = null;
                    }
                    else if (
                        //                                  //Posibly the other side of the link there is a node
                        darrIOsWithTheSameLink.Count > 1
                        )
                    {
                        if (
                            //                              //The other side of the link is being copied
                            ProdtypProductType.boolIsTheOtherSideOfTheLinkBeingCopied(iojsonin2,
                                darrIOsWithTheSameLink, context_M, ref darrioentityNodes)
                            )
                        {
                            //                              //Do nothing
                        }
                        else
                        {
                            //                              //Remove link from current IO
                            iojsonin2.strLink = null;
                            ////                              //Conditions are no longer necessary
                            //iojsonin2.strConditionToApply = null;
                            //iojsonin2.strConditionQuantity = null;
                        }
                    }
                }
            }

            //                                              //Adding nodes to the list (darriojsonin2)
            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodes)
            {
                Iojsonin2InputOrOutputJsonInternal2 iojsonin2 = new Iojsonin2InputOrOutputJsonInternal2(
                    ioentity.intPk, ioentity.intPkWorkflow, ioentity.intnPkElementElementType,
                    ioentity.intnPkElementElement, ioentity.intnPkResource, ioentity.strLink,
                    ioentity.intnGroupResourceId, ioentity.boolnIsFinalProduct, ioentity.intnProcessInWorkflowId,
                    ioentity.boolnSize, ioentity.boolnThickness);


                darriojsonin2.Add(iojsonin2);
            }

            darriojsonin2 = darriojsonin2.OrderBy(io => io.intPk).ToList();

            return darriojsonin2;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolIsTheOtherSideOfTheLinkBeingCopied(

            Iojsonin2InputOrOutputJsonInternal2 iojsonin2CurrentSideLink_I,
            IoentityInputsAndOutputsEntityDB ioentityOtherSideLink_I,
            Odyssey2Context context_M
            )
        {
            bool boolIsTheOtherSideOfTheLinkBeingCopied = true;
            if (
                //                              //The current IO is an input IO
                ProdtypProductType.boolIsInputIO(iojsonin2CurrentSideLink_I.intnPkElementElementType,
                    iojsonin2CurrentSideLink_I.intnPkElementElement, context_M)
                )
            {
                if (
                   //                           //The other side of the link is an input IO
                   ProdtypProductType.boolIsInputIO(ioentityOtherSideLink_I.intnPkElementElementType,
                       ioentityOtherSideLink_I.intnPkElementElement, context_M)
                   )
                {
                    boolIsTheOtherSideOfTheLinkBeingCopied = false;
                }
                else
                //                              //The other side of the link is an output IO
                {
                    //                          //Do nothing
                }
            }
            else
            //                                  //The current IO is an output IO
            {
                if (
                   //                           //The other side of the link is an input IO
                   ProdtypProductType.boolIsInputIO(ioentityOtherSideLink_I.intnPkElementElementType,
                       ioentityOtherSideLink_I.intnPkElementElement, context_M)
                   )
                {
                    //                          //Do nothing
                }
                else
                //                              //The other side of the link is an output IO
                {
                    boolIsTheOtherSideOfTheLinkBeingCopied = false;
                }
            }

            return boolIsTheOtherSideOfTheLinkBeingCopied;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolIsTheOtherSideOfTheLinkBeingCopied(

            Iojsonin2InputOrOutputJsonInternal2 iojsonin2CurrentSideLink_I,
            List<IoentityInputsAndOutputsEntityDB> darrIOsWithTheSameLink_I,
            Odyssey2Context context_M,
            ref List<IoentityInputsAndOutputsEntityDB> darrioentityNodes_M
            )
        {
            bool boolIsTheOtherSideOfTheLinkBeingCopied = true;

            bool boolThereIsAnInputIO = false;
            bool boolThereIsAnOutputIO = false;
            foreach (IoentityInputsAndOutputsEntityDB ioentityWithTheSameLink in darrIOsWithTheSameLink_I)
            {
                if (
                    //                                      //The other side of the link is an input IO
                    ProdtypProductType.boolIsInputIO(ioentityWithTheSameLink.intnPkElementElementType,
                        ioentityWithTheSameLink.intnPkElementElement, context_M)
                    )
                {
                    boolThereIsAnInputIO = true;
                }

                if (
                    //                                      //The other side of the link is an output IO
                    !ProdtypProductType.boolIsInputIO(ioentityWithTheSameLink.intnPkElementElementType,
                        ioentityWithTheSameLink.intnPkElementElement, context_M)
                    )
                {
                    boolThereIsAnOutputIO = true;
                }
            }

            if (
                //                                          //The current IO is an input IO
                ProdtypProductType.boolIsInputIO(iojsonin2CurrentSideLink_I.intnPkElementElementType,
                    iojsonin2CurrentSideLink_I.intnPkElementElement, context_M)
                )
            {
                if (
                    //                                      //The other side of the link is being copied
                    boolThereIsAnOutputIO
                    )
                {
                    IoentityInputsAndOutputsEntityDB ioentitynode = darrioentityNodes_M.FirstOrDefault(node =>
                        node.intPkWorkflow == iojsonin2CurrentSideLink_I.intPkWorkflow &&
                        node.intnPkElementElementType == null &&
                        node.intnPkElementElement == null &&
                        node.intnProcessInWorkflowId == null &&
                        node.strLink == iojsonin2CurrentSideLink_I.strLink);

                    if (
                        //                                  //The node is not in the list(darrioentityNodes) yet
                        ioentitynode == null
                        )
                    {
                        ioentitynode = context_M.InputsAndOutputs.FirstOrDefault(node =>
                            node.intPkWorkflow == iojsonin2CurrentSideLink_I.intPkWorkflow &&
                            node.intnPkElementElementType == null &&
                            node.intnPkElementElement == null &&
                            node.intnProcessInWorkflowId == null &&
                            node.strLink == iojsonin2CurrentSideLink_I.strLink);

                        //                                  //Add the node
                        darrioentityNodes_M.Add(ioentitynode);
                    }
                }
                else
                {
                    boolIsTheOtherSideOfTheLinkBeingCopied = false;
                }
            }
            else
            //                                              //The current IO is an output IO
            {
                if (
                    //                                      //The other side of the link is being copied
                    boolThereIsAnInputIO
                    )
                {
                    IoentityInputsAndOutputsEntityDB ioentitynode = darrioentityNodes_M.FirstOrDefault(node =>
                        node.intPkWorkflow == iojsonin2CurrentSideLink_I.intPkWorkflow &&
                        node.intnPkElementElementType == null &&
                        node.intnPkElementElement == null &&
                        node.intnProcessInWorkflowId == null &&
                        node.strLink == iojsonin2CurrentSideLink_I.strLink);

                    if (
                        //                                  //The node is not in the list(darrioentityNodes) yet
                        ioentitynode == null
                        )
                    {
                        ioentitynode = context_M.InputsAndOutputs.FirstOrDefault(node =>
                            node.intPkWorkflow == iojsonin2CurrentSideLink_I.intPkWorkflow &&
                            node.intnPkElementElementType == null &&
                            node.intnPkElementElement == null &&
                            node.intnProcessInWorkflowId == null &&
                            node.strLink == iojsonin2CurrentSideLink_I.strLink);

                        //                                  //Add the node
                        darrioentityNodes_M.Add(ioentitynode);
                    }
                }
                else
                {
                    boolIsTheOtherSideOfTheLinkBeingCopied = false;
                }
            }

            return boolIsTheOtherSideOfTheLinkBeingCopied;
        }



        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolIsInputIO(

            int? intnPkElementElementType_I,
            int? intnPkElementElement_I,
            Odyssey2Context context_M
            )
        {
            //                                              //To easy code.
            EleetentityElementElementTypeEntityDB eleetentity = null;
            EleeleentityElementElementEntityDB eleeleentity = null;
            if (
                intnPkElementElementType_I != null
                )
            {
                //                                          //Find element element type.
                eleetentity = context_M.ElementElementType.FirstOrDefault(
                    eleet => eleet.intPk == intnPkElementElementType_I);
            }
            else
            {
                //                                          //Find element element.
                eleeleentity = context_M.ElementElement.FirstOrDefault(
                    eleele => eleele.intPk == intnPkElementElement_I);
            }

            bool boolIsInputIO = true;
            if (
                //                                          //It is an output IO.
                (eleetentity != null &&
                !eleetentity.boolUsage) ||
                (eleeleentity != null &&
                !eleeleentity.boolUsage)
                )
            {
                boolIsInputIO = false;
            }
            else if (
                //                                          //It is an input IO.
                (eleetentity != null &&
                eleetentity.boolUsage) ||
                (eleeleentity != null &&
                eleeleentity.boolUsage)
                )
            {
                boolIsInputIO = true;
            }

            return boolIsInputIO;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subCopyAllCalculationsAndPeriodsForTheNewWorkflow(
            //                                              //Make a copy of each calculation from the base 
            //                                              //      workflow to the new wokflow.
            //                                              //Make a copy of each period from the base 
            //                                              //      workflow to the new wokflow.
            //                                              //If boolIsTheNewWfCreatingAStoryPoint is equal to true, the
            //                                              //      calculation EndDate of the base workflow is expired.

            WfentityWorkflowEntityDB wfentityBase_I,
            WfentityWorkflowEntityDB wfentityNew_I,
            bool boolIsTheNewWfCreatingAStoryPoint_I,
            //                                              //Is different from null only if it is a partial copy
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            Odyssey2Context context_M
            )
        {
            //                                              //To storage base product attributes
            List<Attrjson1AttributeJson1> darrattrjson1BaseProd = new List<Attrjson1AttributeJson1>();
            //                                              //To storage new product attributes
            List<Attrjson1AttributeJson1> darrattrjson1NewProd = new List<Attrjson1AttributeJson1>();

            bool boolIsTheSameProduct = wfentityBase_I.intnPkProduct == wfentityNew_I.intnPkProduct;
            bool boolIsBaseWfASystemWf = false;
            if (
                //                                          //It does not the same product
                !boolIsTheSameProduct
                )
            {
                if (
                    //                                      //It is a system workflow
                    wfentityBase_I.intnPkProduct == null
                    )
                {
                    boolIsBaseWfASystemWf = true;
                }
                else
                {
                    //                                      //Find base product type.
                    ProdtypProductType prodtypBase = (ProdtypProductType)EtElementTypeAbstract.etFromDB(context_M,
                        wfentityBase_I.intnPkProduct);
                    //                                      //Get base product attributes
                    darrattrjson1BaseProd = ProdtypProductType.darrattrjson1GetProductAttributes(prodtypBase, 
                        context_M);

                    //                                      //Find new product type.
                    ProdtypProductType prodtypNew = (ProdtypProductType)EtElementTypeAbstract.etFromDB(context_M,
                        wfentityNew_I.intnPkProduct);
                    //                                      //Get new product attributes
                    darrattrjson1NewProd = ProdtypProductType.darrattrjson1GetProductAttributes(prodtypNew, 
                        context_M);
                }
            }

            List<CalentityCalculationEntityDB> darrcalentity = new List<CalentityCalculationEntityDB>();
            List<PerentityPeriodEntityDB> darrperentity = new List<PerentityPeriodEntityDB>();
            if (
                //                                          //It is a full copy
                darrpiwentity_I == null ||
                darrpiwentity_I.Count == 0
                )
            {
                //                                          //Get all the calculations for workflow base that are not
                //                                          //      deleted.
                darrcalentity = context_M.Calculation.Where(cal =>
                cal.intnPkWorkflow == wfentityBase_I.intPk && cal.strEndDate == null).ToList();

                //                                          //Get all the periods for workflow base.
                darrperentity = context_M.Period.Where(per => per.intPkWorkflow == wfentityBase_I.intPk).ToList();
            }
            else
            //                                              //It is a partial copy
            {
                List<CalentityCalculationEntityDB> darrcalentityAll = context_M.Calculation.Where(cal =>
                    cal.intnPkWorkflow == wfentityBase_I.intPk && cal.strEndDate == null && cal.strEndTime == null)
                    .ToList();

                List<PerentityPeriodEntityDB> darrperentityAll = context_M.Period.Where(per =>
                        per.intPkWorkflow == wfentityBase_I.intPk).ToList();

                //                                          //Get only the calculations and periods from selected piws.
                foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity_I)
                {
                    List<CalentityCalculationEntityDB> darrcalentityToAdd = darrcalentityAll.Where(cal =>
                        cal.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                    darrcalentity.AddRange(darrcalentityToAdd);

                    List<PerentityPeriodEntityDB> darrperentityToAdd = darrperentityAll.Where(per =>
                        per.intProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                    darrperentity.AddRange(darrperentityToAdd);
                }

                darrcalentity = darrcalentity.OrderBy(cal => cal.intPk).ToList();
                darrperentity = darrperentity.OrderBy(per => per.intPk).ToList();
            }

            //                                              //Dictionary to store base and new calcualions.
            Dictionary<int, int> dicCalculation = new Dictionary<int, int>();

            foreach (CalentityCalculationEntityDB calentityBase in darrcalentity)
            {
                CalentityCalculationEntityDB calentityNew = new CalentityCalculationEntityDB
                {
                    strUnit = calentityBase.strUnit,
                    numnQuantity = calentityBase.numnQuantity,
                    numnNeeded = calentityBase.numnNeeded,
                    numnPerUnits = calentityBase.numnPerUnits,
                    numnCost = calentityBase.numnCost,
                    intnHours = calentityBase.intnHours,
                    intnMinutes = calentityBase.intnMinutes,
                    intnSeconds = calentityBase.intnSeconds,
                    numnMin = calentityBase.numnMin,
                    numnBlock = calentityBase.numnBlock,
                    boolIsEnable = calentityBase.boolIsEnable,
                    strValue = calentityBase.strValue,
                    strAscendants = calentityBase.strAscendants,
                    strDescription = calentityBase.strDescription,
                    numnProfit = calentityBase.numnProfit,
                    strCalculationType = calentityBase.strCalculationType,
                    strByX = calentityBase.strByX,
                    strStartDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                    strEndDate = calentityBase.strEndDate,
                    strStartTime = Time.Now(ZonedTimeTools.timezone).ToText(),
                    strEndTime = calentityBase.strEndTime,
                    numnQuantityWaste = calentityBase.numnQuantityWaste,
                    numnPercentWaste = calentityBase.numnPercentWaste,
                    intnPkProduct = wfentityNew_I.intnPkProduct,
                    intnPkProcess = calentityBase.intnPkProcess,
                    intnPkResource = calentityBase.intnPkResource,
                    intnPkElementElementType = calentityBase.intnPkElementElementType,
                    intnPkElementElement = calentityBase.intnPkElementElement,
                    intnPkWorkflow = wfentityNew_I.intPk,
                    intnProcessInWorkflowId = calentityBase.intnProcessInWorkflowId,
                    intnPkQFromElementElementType = calentityBase.intnPkQFromElementElementType,
                    intnPkQFromElementElement = calentityBase.intnPkQFromElementElement,
                    intnPkQFromResource = calentityBase.intnPkQFromResource,
                    intnPkAccount = calentityBase.intnPkAccount,
                    boolnFromThickness = calentityBase.boolnFromThickness,
                    boolnIsBlock = calentityBase.boolnIsBlock

                };
                context_M.Calculation.Add(calentityNew);

                if (
                    boolIsTheNewWfCreatingAStoryPoint_I
                    )
                {
                    //                                      //The calculation is expired.
                    calentityBase.strEndDate = Date.Now(ZonedTimeTools.timezone).ToText();
                    calentityBase.strEndTime = Time.Now(ZonedTimeTools.timezone).ToText();

                    context_M.Calculation.Update(calentityBase);
                }
                context_M.SaveChanges();

                if (
                    boolIsBaseWfASystemWf
                    )
                {
                    //                                      //Do nothing.
                    //                                      //A system workflow does not have conditions
                }
                else
                {
                    //                                      //If the base calculation has conditions, copy the 
                    //                                      //      conditions to the new calculation.
                    GpcondjsonGroupConditionJson gpcondjson = Tools.gpcondjsonGetCondition(calentityBase.intPk, null,
                        null, null);

                    if (
                        boolIsTheSameProduct
                        ) 
                    {
                        Tools.subAddCondition(calentityNew.intPk, null, null, null, gpcondjson, context_M);
                    }
                    else
                    {
                        ProdtypProductType.subCopyConditionsToADifferentProduct(calentityNew.intPk, null, null, null,
                            gpcondjson,darrattrjson1BaseProd, darrattrjson1NewProd, context_M);
                    }
                }

                //                                          //Add relationship between base and new calculation 
                //                                          //      to the dictionary
                dicCalculation.Add(calentityBase.intPk, calentityNew.intPk);
            }

            int intPkBaseCal;
            int intPkNewCal;
            int intPkProcessInWorkflowNew;
            int? intnPkNewPatransOwn = null;
            int? intnPkNewPatransLink = null;
            PiwentityProcessInWorkflowEntityDB piwentityBase;
            //                                              //Copy paper transformation to new workflow
            foreach (KeyValuePair<int, int> calculation in dicCalculation)
            {
                //                                          //Easy code
                intPkBaseCal = calculation.Key;
                intPkNewCal = calculation.Value;

                List<PatransPaperTransformationEntityDB> darrpatransentity = context_M.PaperTransformation.Where(
                    patrans => (patrans.intnPkCalculationOwn == intPkBaseCal ||
                    patrans.intnPkCalculationLink == intPkBaseCal)).ToList();

                //                                          //Copy paper transformation to new workflow
                foreach (PatransPaperTransformationEntityDB patransentityBase in darrpatransentity)
                {
                    if (
                        patransentityBase.intnPkCalculationOwn != null
                        )
                    {
                        intnPkNewPatransOwn = intPkNewCal;
                        intnPkNewPatransLink = null;
                    }
                    else if (
                        patransentityBase.intnPkCalculationLink != null
                        )
                    {
                        intnPkNewPatransOwn = null;
                        intnPkNewPatransLink = intPkNewCal;
                    }

                    piwentityBase = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPk == patransentityBase.intPkProcessInWorkflow);

                    //                                      //Get new piw
                    intPkProcessInWorkflowNew = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPkWorkflow == wfentityNew_I.intPk &&
                        piw.intPkProcess == piwentityBase.intPkProcess &&
                        piw.intnId == piwentityBase.intnId &&
                        piw.intProcessInWorkflowId == piwentityBase.intProcessInWorkflowId &&
                        piw.boolIsPostProcess == piwentityBase.boolIsPostProcess).intPk;

                    PatransPaperTransformationEntityDB patransNew = new PatransPaperTransformationEntityDB
                    {
                        numWidthI = patransentityBase.numWidthI,
                        numnHeightI = patransentityBase.numnHeightI,
                        numWidthO = patransentityBase.numWidthO,
                        numHeightO = patransentityBase.numHeightO,
                        numnMarginTop = patransentityBase.numnMarginTop,
                        numnMarginBottom = patransentityBase.numnMarginBottom,
                        numnMarginLeft = patransentityBase.numnMarginLeft,
                        numnMarginRight = patransentityBase.numnMarginRight,
                        numnVerticalGap = patransentityBase.numnVerticalGap,
                        numnHorizontalGap = patransentityBase.numnHorizontalGap,
                        strUnit = patransentityBase.strUnit,
                        boolTemporary = patransentityBase.boolTemporary,
                        intPkProcessInWorkflow = intPkProcessInWorkflowNew,
                        intPkResourceI = patransentityBase.intPkResourceI,
                        intnPkElementElementTypeI = patransentityBase.intnPkElementElementTypeI,
                        intnPkElementElementI = patransentityBase.intnPkElementElementI,
                        intnPkElementElementTypeO = patransentityBase.intnPkElementElementTypeO,
                        intnPkElementElementO = patransentityBase.intnPkElementElementO,
                        intnPkResourceO = patransentityBase.intnPkResourceO,
                        boolOptimized = patransentityBase.boolOptimized,
                        intnPkCalculationOwn = intnPkNewPatransOwn,
                        intnPkCalculationLink = intnPkNewPatransLink,
                        boolCut = patransentityBase.boolCut,
                        intFoldFactor = patransentityBase.intFoldFactor
                    };

                    context_M.Add(patransNew);
                }
            }
            context_M.SaveChanges();

            foreach (PerentityPeriodEntityDB perentity in darrperentity)
            {
                PerentityPeriodEntityDB perentityNew = new PerentityPeriodEntityDB
                {
                    strStartDate = perentity.strStartDate,
                    strStartTime = perentity.strStartTime,
                    strEndDate = perentity.strEndDate,
                    strEndTime = perentity.strEndTime,
                    intJobId = perentity.intJobId,
                    boolIsException = perentity.boolIsException,
                    intnContactId = perentity.intnContactId,
                    strFinalStartDate = perentity.strFinalStartDate,
                    strFinalStartTime = perentity.strFinalStartTime,
                    strFinalEndDate = perentity.strFinalEndDate,
                    strFinalEndTime = perentity.strFinalEndTime,
                    intnEstimateId = perentity.intnEstimateId,
                    intMinsBeforeDelete = perentity.intMinsBeforeDelete,
                    strDeleteDate = perentity.strDeleteDate,
                    strDeleteHour = perentity.strDeleteHour,
                    strDeleteMinute = perentity.strDeleteMinute,
                    //                                      //Update period with new wf.
                    intPkWorkflow = wfentityNew_I.intPk,
                    intProcessInWorkflowId = perentity.intProcessInWorkflowId,
                    intnPkElementElementType = perentity.intnPkElementElementType,
                    intnPkElementElement = perentity.intnPkElementElement,
                    intPkElement = perentity.intPkElement,
                    intnPkCalculation = perentity.intnPkCalculation

                };
                context_M.Period.Add(perentityNew);
            }

            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subCopyResourceGroupForAWorkflow(
            //                                              //Make a copy of each calculation from the base 
            //                                              //      workflow to the new wokflow.

            WfentityWorkflowEntityDB wfentityBase_I,
            WfentityWorkflowEntityDB wfentityNew_I,
            //                                              //Is different from null only if it is a partial copy
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            Odyssey2Context context_M
            )
        {
            if (
                //                                          //It is a full copy
                darrpiwentity_I == null ||
                darrpiwentity_I.Count == 0
                )
            {
                //                                          //Verify if exixts a group.
                List<GpresentityGroupResourceEntityDB> darrgpresentity = context_M.GroupResource.Where(gp =>
                    gp.intPkWorkflow == wfentityBase_I.intPk).ToList();

                //                                          //Copy group.
                foreach (GpresentityGroupResourceEntityDB gpresentity in darrgpresentity)
                {
                    GpresentityGroupResourceEntityDB gpresToAdd = new GpresentityGroupResourceEntityDB
                    {
                        intPkResource = gpresentity.intPkResource,
                        intPkWorkflow = wfentityNew_I.intPk,
                        intId = gpresentity.intId
                    };
                    context_M.GroupResource.Add(gpresToAdd);
                }

                context_M.SaveChanges();
            }
            else
            //                                              //It is a partial copy
            {
                foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity_I)
                {
                    //                                      //Find IO with resource group
                    List<IoentityInputsAndOutputsEntityDB> darrioentity = context_M.InputsAndOutputs.Where(io =>
                        io.intnGroupResourceId != null && io.intPkWorkflow == wfentityNew_I.intPk &&
                        io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                    foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                    {
                        if (
                            ioentity.strLink != null
                            )
                        {
                            //                              //Verify if exists a group.
                            List<GpresentityGroupResourceEntityDB> darrgpresentity = context_M.GroupResource.Where(
                                gp => gp.intPkWorkflow == wfentityNew_I.intPk &&
                                gp.intId == ioentity.intnGroupResourceId).ToList();

                            if (
                                //                          //The group has not been copied yet
                                darrgpresentity.Count == 0
                                )
                            {
                                List<GpresentityGroupResourceEntityDB> darrgpresentityToCopy =
                                    context_M.GroupResource.Where(gp => gp.intPkWorkflow == wfentityBase_I.intPk &&
                                   gp.intId == ioentity.intnGroupResourceId).ToList();

                                //                          //Copy group.
                                foreach (GpresentityGroupResourceEntityDB gpresentity in darrgpresentityToCopy)
                                {
                                    GpresentityGroupResourceEntityDB gpresToAdd = new GpresentityGroupResourceEntityDB
                                    {
                                        intPkResource = gpresentity.intPkResource,
                                        intPkWorkflow = wfentityNew_I.intPk,
                                        intId = gpresentity.intId
                                    };
                                    context_M.GroupResource.Add(gpresToAdd);
                                }
                            }
                        }
                        else
                        {
                            //                              //Verify if exists a group.
                            List<GpresentityGroupResourceEntityDB> darrgpresentity = context_M.GroupResource.Where(
                                gp => gp.intPkWorkflow == wfentityNew_I.intPk &&
                                gp.intId == ioentity.intnGroupResourceId).ToList();

                            if (
                                //                          //The group has not been copied yet
                                darrgpresentity.Count == 0
                                )
                            {
                                List<GpresentityGroupResourceEntityDB> darrgpresentityToCopy =
                                    context_M.GroupResource.Where(gp => gp.intPkWorkflow == wfentityBase_I.intPk &&
                                   gp.intId == ioentity.intnGroupResourceId).ToList();

                                //                          //Copy group.
                                foreach (GpresentityGroupResourceEntityDB gpresentity in darrgpresentityToCopy)
                                {
                                    GpresentityGroupResourceEntityDB gpresToAdd = new GpresentityGroupResourceEntityDB
                                    {
                                        intPkResource = gpresentity.intPkResource,
                                        intPkWorkflow = wfentityNew_I.intPk,
                                        intId = gpresentity.intId
                                    };
                                    context_M.GroupResource.Add(gpresToAdd);
                                }
                            }
                            else
                            {
                                //                          //Create a new Id for the new group.
                                int intMaxGroupId = 0;
                                if (
                                    context_M.GroupResource.Count() > 0
                                    )
                                {
                                    intMaxGroupId = context_M.GroupResource.Max(gpresentity => gpresentity.intId);
                                }
                                int intNewGroupId = intMaxGroupId + 1;

                                darrgpresentity = darrgpresentity.OrderBy(gp => gp.intPk).ToList();

                                //                          //Add new group.
                                foreach (GpresentityGroupResourceEntityDB gpresentity in darrgpresentity)
                                {
                                    GpresentityGroupResourceEntityDB gpresToAdd = new GpresentityGroupResourceEntityDB
                                    {
                                        intPkResource = gpresentity.intPkResource,
                                        intPkWorkflow = wfentityNew_I.intPk,
                                        intId = intNewGroupId
                                    };
                                    context_M.GroupResource.Add(gpresToAdd);
                                }

                                //                          //Update the group Id in IO table.
                                ioentity.intnGroupResourceId = intNewGroupId;

                                context_M.InputsAndOutputs.Update(ioentity);
                            }
                        }
                    }
                    context_M.SaveChanges();
                }
            }
        }


        //--------------------------------------------------------------------------------------------------------------
        public static int subAddProcess(
            //                                              //Add one process to the workflow. If the workflow was used
            //                                              //      or it is used for a job, then it is necessary to 
            //                                              //      copy the workflow, its piw and ios to create a new 
            //                                              //      point of history for this workflow.

            int intPkProcess_I,
            int intPkWorkflow_I,
            PsPrintShop ps_I,
            bool boolSuperAdmin_I,
            out int intPkWorkflowFinal_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            int intPkPiwAdded = 0;

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get wf.
            WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf => wf.intPk == intPkWorkflow_I &&
                wf.boolDeleted == false);

            intPkWorkflowFinal_O = intPkWorkflow_I;
            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "No workflow found.";
            if (
                wfentity != null
                )
            {
                intStatus_IO = 403;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "The WF generic only can be modified for the administrator.";
                if (
                    (
                    //                                      //The workflow is generic and
                    //                                      //Only can be modified for the 
                    //                                      //  admin(super user.)
                    wfentity.boolnGeneric == true &&
                    boolSuperAdmin_I
                    )
                    ||
                    (
                    (wfentity.boolnGeneric == null || wfentity.boolnGeneric == false)
                    )
                    )
                {
                    //                                      //Get the process.
                    ProProcess pro = ProProcess.proFromDB(intPkProcess_I);

                    intStatus_IO = 402;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "No process found.";
                    if (
                        pro != null
                        )
                    {
                        intStatus_IO = 403;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "The process and workflow are from different printshops.";
                        if (
                            wfentity.intPkPrintshop == pro.protypBelongsTo.intPkPrintshop
                            )
                        {
                            //                              //Get the process for that wf.
                            IQueryable<PiwentityProcessInWorkflowEntityDB> setpiwentityAll = context.ProcessInWorkflow.
                                Where(piw => piw.intPkWorkflow == intPkWorkflow_I);
                            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = setpiwentityAll.ToList();

                            if (
                                darrpiwentityAll.Count == 0
                                )
                            {
                                intPkPiwAdded = ProdtypProductType.intAddProcessInWorkflowToDB(wfentity.intPk, pro.intPk, 1, null);

                                intStatus_IO = 200;
                                strUserMessage_IO = "Success.";
                                strDevMessage_IO = "";
                            }
                            else
                            {
                                WfentityWorkflowEntityDB wfentityNew;
                                ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I, wfentity, context, out wfentityNew);

                                int intProcessInWorkflowId;
                                int? intnId;
                                ProdtypProductType.subGetProcessInWorkFlowIdAndId(wfentityNew, pro,
                                    out intProcessInWorkflowId, out intnId);

                                intPkPiwAdded = ProdtypProductType.intAddProcessInWorkflowToDB(wfentityNew.intPk, pro.intPk,
                                    intProcessInWorkflowId, intnId);

                                intPkWorkflowFinal_O = wfentityNew.intPk;
                                intStatus_IO = 200;
                                strUserMessage_IO = "Success.";
                                strDevMessage_IO = "";

                                //                          //Delete EstimationData entries.
                                JobJob.subDeleteEstimationDataEntriesForAWorkflow(context, darrpiwentityAll);
                            }
                        }
                    }
                }
            }
            return intPkPiwAdded;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static int intAddProcessInWorkflowToDB(
            int intPkWorkflow_I,
            int intPkProcess_I,
            int intProcessInWorkflowId_I,
            int? intnId_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Add the process to the ProcessInWorkflow table.
            PiwentityProcessInWorkflowEntityDB piwentity = new PiwentityProcessInWorkflowEntityDB
            {
                intPkProcess = intPkProcess_I,
                intPkWorkflow = intPkWorkflow_I,
                intProcessInWorkflowId = intProcessInWorkflowId_I,
                intnId = intnId_I
            };
            context.ProcessInWorkflow.Add(piwentity);
            context.SaveChanges();

            if (
                piwentity.intnId == 2
                )
            {
                PiwentityProcessInWorkflowEntityDB piwentityPrevious = context.ProcessInWorkflow.FirstOrDefault(piw =>
                    piw.intPk != piwentity.intPk && piw.intPkProcess == piwentity.intPkProcess &&
                    piw.intPkWorkflow == piwentity.intPkWorkflow);

                piwentityPrevious.intnId = 1;
                context.ProcessInWorkflow.Update(piwentityPrevious);
                context.SaveChanges();
            }

            return piwentity.intPk;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subAddWorkflowIfItIsNecessary(
            PsPrintShop ps_I,
            WfentityWorkflowEntityDB wfentityToCheck_I,
            Odyssey2Context context_I,
            out WfentityWorkflowEntityDB wfentity_O
            )
        {
            //                                              //Find workflow.
            WfentityWorkflowEntityDB wfentityToCheck = context_I.Workflow.FirstOrDefault(wf =>
                wf.intPk == wfentityToCheck_I.intPk);

            //                                              //Jobs for this wf.
            List<JobentityJobEntityDB> darrjobentity = context_I.Job.Where(job =>
                job.intPkWorkflow == wfentityToCheck.intPk).ToList();

            if (
                //                                          //There are not jobs for this workflow
                darrjobentity.Count == 0
                )
            {
                //                                          //Nothing to do.
                wfentity_O = wfentityToCheck_I;
            }
            else
            {
                //                                          //Get all the workflows to set as deleted.
                List<WfentityWorkflowEntityDB> darrwfentity = context_I.Workflow.Where(wf =>
                    wf.intnPkProduct == wfentityToCheck.intnPkProduct &&
                    wf.strName == wfentityToCheck.strName &&
                    wf.boolDeleted == false).ToList();

                if (
                    darrwfentity.Count() > 0
                    )
                {
                    foreach (WfentityWorkflowEntityDB wfentitySetDeleted in darrwfentity)
                    {
                        wfentitySetDeleted.boolDeleted = true;
                        context_I.Workflow.Update(wfentitySetDeleted);
                    }
                }

                //                                          //It is necessary to create a new wf.
                wfentity_O = new WfentityWorkflowEntityDB
                {
                    intnPkProduct = wfentityToCheck.intnPkProduct,
                    strName = wfentityToCheck.strName,
                    intWorkflowId = wfentityToCheck.intWorkflowId,
                    strStartDate = Date.Now(ZonedTimeTools.timezone).ToText(),
                    strStartTime = Time.Now(ZonedTimeTools.timezone).ToString(),
                    boolDeleted = false,
                    boolDefault = wfentityToCheck.boolDefault,
                    intPkPrintshop = ps_I.intPk
                };
                context_I.Workflow.Add(wfentity_O);
                //                                          //This is necessary to know the new pkWorkflow in order to
                //                                          //      add a register in defaultWorkflowHistory table.
                context_I.SaveChanges();

                //                                          //If the old workflow was default, the new one has to be
                //                                          //      default, wich means we have to create a register
                //                                          //      in defaultWorkflowHisotory table.
                if (
                    wfentityToCheck.boolDefault
                    )
                {
                    ProdtypProductType.subAddWorkflowDefaultHistory(wfentity_O.intPk, context_I);
                }

                //                                          //If the old workflow was not use to send a price to wisnet
                //                                          //      then delete defaultWorkflowHistory entries.
                if (
                    !wfentityToCheck.boolPricing
                    )
                {
                    //                                      //Get all register from defaultWorkflowHistory table.
                    IQueryable<DefwfhisentityDefaultWorkflowHistoryEntityDB> darrdefwfhistentity =
                        context_I.DefaultWorkflowHistory.Where(def => def.intPkWorkflow == wfentityToCheck.intPk);
                    context_I.RemoveRange(darrdefwfhistentity);
                }

                //                                          //Make old workflow deleted and not default.
                wfentityToCheck.boolDeleted = true;
                wfentityToCheck.boolDefault = false;

                context_I.Workflow.Update(wfentityToCheck);
                context_I.SaveChanges();

                ProdtypProductType.subCopyPiwIOJAndTransformCalToNewWorkflow(wfentityToCheck_I, wfentity_O, true, null,
                    context_I);
                ProdtypProductType.subCopyAllInputsAndOutputsForTheNewWorkflow(wfentityToCheck_I, wfentity_O, null,
                    context_I);
                ProdtypProductType.subCopyAllCalculationsAndPeriodsForTheNewWorkflow(wfentityToCheck_I, wfentity_O,
                    true, null, context_I);
                ProdtypProductType.subUpdateGroupsWithNewWorkflow(wfentityToCheck_I, wfentity_O, context_I);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subUpdateGroupsWithNewWorkflow(
            WfentityWorkflowEntityDB wfentityBase_I,
            WfentityWorkflowEntityDB wfentityNew_I,
            Odyssey2Context context_M
            )
        {
            List<GpresentityGroupResourceEntityDB> darrgpresentity = context_M.GroupResource.Where(gpres =>
                gpres.intPkWorkflow == wfentityBase_I.intPk).ToList();

            foreach (GpresentityGroupResourceEntityDB gpresentity in darrgpresentity)
            {
                gpresentity.intPkWorkflow = wfentityNew_I.intPk;
                context_M.GroupResource.Update(gpresentity);
            }
            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subGetProcessInWorkFlowIdAndId(
            WfentityWorkflowEntityDB wfentity_I,
            ProProcess pro_I,
            out int intProcessInWorkflowId_O,
            out int? intnId_O
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Refresh in case that was necessary create a copy of wf.
            IQueryable<PiwentityProcessInWorkflowEntityDB> setpiwentityAll = context.ProcessInWorkflow.Where(piw =>
                piw.intPkWorkflow == wfentity_I.intPk);
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = setpiwentityAll.ToList();

            intProcessInWorkflowId_O = 1;
            if (
                //                                          //Is the first process in the workflow.
                darrpiwentityAll.Count > 0
                )
            {
                intProcessInWorkflowId_O = darrpiwentityAll.Max(piw => piw.intProcessInWorkflowId) + 1;
            }

            //                                              //Get the last piw with the given process in the workflow.
            PiwentityProcessInWorkflowEntityDB piwentityPrevious = context.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPkProcess == pro_I.intPk && piw.intPkWorkflow == wfentity_I.intPk);

            intnId_O = null;
            /*CASE*/
            if (
                //                                          //There is only one record for this process in this 
                //                                          //      workflow.   
                (piwentityPrevious != null) &&
                (piwentityPrevious.intnId == null)
                )
            {
                piwentityPrevious.intnId = 1;
                context.ProcessInWorkflow.Update(piwentityPrevious);
                context.SaveChanges();

                intnId_O = 2;
            }
            else if (
                //                                          //There is more than one record for this process in this 
                //                                          //      workflow.   
                (piwentityPrevious != null) &&
                (piwentityPrevious.intnId != null)
                )
            {
                //                                          //Get all the piw with the given process in the workflow.
                IQueryable<PiwentityProcessInWorkflowEntityDB> setpiwentity = context.ProcessInWorkflow.Where(piw =>
                    piw.intPkProcess == pro_I.intPk && piw.intPkWorkflow == wfentity_I.intPk);
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = setpiwentity.ToList();

                intnId_O = darrpiwentity.Max(piw => piw.intnId) + 1;
            }
            /*END-CASE*/
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static IojsonInputOrOutputJson[] arrresortypjson1GetTypes(
            //                                              //Get the inputs and outputs for the given process according
            //                                              //      with the boolean from the types.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            bool boolAreInputs_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the inputs/outputs types.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = context.ElementElementType.Where(
                eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            List<IojsonInputOrOutputJson> darrresortypjson1 = new List<IojsonInputOrOutputJson>();
            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                //                                          //Find type.
                EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleetentity.intPkElementTypeSon);
                RestypResourceType restyp = (RestypResourceType)et;

                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == eleetentity.intPk);
                String strLink = null;
                String strResource = null;
                int? intnPkResource = null;
                bool boolThickness = false;
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set link.
                    strLink = ioentity.strLink;

                    //                                      //Set thickness.
                    boolThickness = ioentity.boolnThickness == null ? false : (bool)ioentity.boolnThickness;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);
                        //strResource = eleentity.strElementName;
                        strResource = ResResource.strGetMediaResourceName(eleentity.intPk);
                        intnPkResource = eleentity.intPk;
                    }
                    else if (
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        strResource = ResResource.strGroup;
                    }
                }
                bool boolIsPhysical = RestypResourceType.boolIsPhysical(restyp.strClassification);

                bool boolIsDeviceToolOrCustom = RestypResourceType.boolIsDeviceToolOrCustom(restyp);

                bool boolIsCustom = restyp.strXJDFTypeId == "None";
                String strName = (boolIsCustom) ? restyp.strCustomTypeId : restyp.strXJDFTypeId;

                //                                          //Verify if IO is media type.
                bool boolMedia = et.strXJDFTypeId == EtElementTypeAbstract.strResourceTypeMedia;

                bool? boolnIsFinalProduct;
                if (
                    piwentity_I.boolIsPostProcess == true
                    )
                {
                    //                                      //Only an input IO can be final product in a post process
                    boolnIsFinalProduct = boolAreInputs_I ? (ioentity?.boolnIsFinalProduct) : null;
                }
                else
                {
                    boolnIsFinalProduct = ioentity != null ? ioentity.boolnIsFinalProduct : null;
                }

                bool boolSize = (ioentity != null && ioentity.boolnSize != null) ? (bool)ioentity.boolnSize : false;
                bool boolIsComponent = restyp.strCustomTypeId == ResResource.strComponent ? true : false;

                bool boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
                                (et.strCustomTypeId == ResResource.strMedia);

                bool? boolnIsDeviceOrMiscConsumable =
                    (et.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                    et.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;


                IojsonInputOrOutputJson resortypjson1 = new IojsonInputOrOutputJson(restyp.intPk,
                    null, eleetentity.intPk, true, strName, intnPkResource, strResource, strLink,
                    boolIsPhysical, boolIsDeviceToolOrCustom, boolIsCustom, boolnIsFinalProduct, boolSize,
                    boolIsComponent, boolThickness, boolMedia, boolIsPaper, boolnIsDeviceOrMiscConsumable);

                darrresortypjson1.Add(resortypjson1);
            }

            return darrresortypjson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static IojsonInputOrOutputJson[] arrresortypjson1GetTemplates(
            //                                              //Get the inputs and outputs for the given process according
            //                                              //      with the boolean from the types.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            bool boolAreInputs_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the inputs/outputs types.
            IQueryable<EleeleentityElementElementEntityDB> seteleeleentity = context.ElementElement.Where(
                eleele => eleele.intPkElementDad == piwentity_I.intPkProcess && eleele.boolUsage == boolAreInputs_I);
            List<EleeleentityElementElementEntityDB> darreleeleentity = seteleeleentity.ToList();

            List<IojsonInputOrOutputJson> darrresortypjson1 = new List<IojsonInputOrOutputJson>();
            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                //                                          //Find resource.
                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);

                //                                          //Find type.
                EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleentity.intPkElementType);
                RestypResourceType restyp = (RestypResourceType)et;

                String strTypeAndTemplate = et.strXJDFTypeId + " : " + eleentity.strElementName;

                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == eleeleentity.intPk);

                String strLink = null;
                String strResource = null;
                int? intnPkResource = null;
                bool boolThickness = false;

                if (
                    ioentity != null
                    )
                {
                    //                                      //Set link.
                    strLink = ioentity.strLink;

                    //                                      //Set thickness.
                    boolThickness = ioentity.boolnThickness == null ? false : (bool)ioentity.boolnThickness;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        //strResource = eleentityResource.strElementName;
                        strResource = ResResource.strGetMediaResourceName(eleentityResource.intPk);
                        intnPkResource = eleentityResource.intPk;
                    }
                    else if (
                       ioentity.intnGroupResourceId != null
                       )
                    {
                        strResource = ResResource.strGroup;
                    }
                }

                bool boolIsPhysical = RestypResourceType.boolIsPhysical(restyp.strClassification);

                bool boolIsDeviceToolOrCustom = RestypResourceType.boolIsDeviceToolOrCustom(restyp);

                //                                          //Verify if IO is media type.
                bool boolMedia = et.strXJDFTypeId == EtElementTypeAbstract.strResourceTypeMedia;

                bool? boolnIsFinalProduct;
                if (
                    piwentity_I.boolIsPostProcess == true
                    )
                {
                    //                                      //Only an input IO can be final product in a post process
                    boolnIsFinalProduct = boolAreInputs_I ? (ioentity?.boolnIsFinalProduct) : null;
                }
                else
                {
                    boolnIsFinalProduct = ioentity != null ? ioentity.boolnIsFinalProduct : null;
                }

                bool boolSize = (ioentity != null && ioentity.boolnSize != null) ? (bool)ioentity.boolnSize : false;
                bool boolIsComponent = restyp.strCustomTypeId == ResResource.strComponent ? true : false;

                bool boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
                                (et.strCustomTypeId == ResResource.strMedia);

                bool? boolnIsDeviceOrMiscConsumable =
                    (et.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                    et.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                IojsonInputOrOutputJson resortypjson1 = new IojsonInputOrOutputJson(eleentity.intPkElementType,
                    eleentity.intPk, eleeleentity.intPk, false, strTypeAndTemplate, intnPkResource, strResource,
                    strLink, boolIsPhysical, boolIsDeviceToolOrCustom, false, boolnIsFinalProduct, boolSize,
                    boolIsComponent, boolThickness, boolMedia, boolIsPaper, boolnIsDeviceOrMiscConsumable);

                darrresortypjson1.Add(resortypjson1);
            }

            return darrresortypjson1.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subGetLinks(
            //                                              //Get all links for an specific workflow.

            int intPkWorkflow_I,
            out List<LkjsonLinkJson> lkjsonLink_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            lkjsonLink_O = new List<LkjsonLinkJson>();

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Validate if the workflow product exist.

            //                                              //Find workflow.
            WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf => wf.intPk == intPkWorkflow_I);
            //                                              //Workflow has a product.
            bool boolIsFromProduct = (wfentity.intnPkProduct != null) ? true : false;

            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Workflow not found.";
            if (
                wfentity != null
                )
            {
                //                                          //Find all InputsAndOutputs with link of this product 
                //                                          //      workflow.
                IQueryable<IoentityInputsAndOutputsEntityDB> setioentity = context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == wfentity.intPk && io.strLink != null);
                List<IoentityInputsAndOutputsEntityDB> darrioentity = setioentity.ToList();

                //                                          //Find links among nodes.
                List<LinknodLinkNodeEntityDB> darrlinknode = context.LinkNode.Where(lk =>
                    lk.intPkWorkflow == intPkWorkflow_I).ToList();

                int intI = 0;
                /*WHILE-DO*/
                while (
                    darrioentity.Count > 0
                    )
                {
                    IoentityInputsAndOutputsEntityDB ioentityIn = null;
                    IoentityInputsAndOutputsEntityDB ioentityOut = null;
                    List<IoentityInputsAndOutputsEntityDB> darrioentityNode =
                        new List<IoentityInputsAndOutputsEntityDB>();

                    if (
                        //                                  //It's not a node.
                        darrioentity[intI].intnPkElementElementType != null ||
                        darrioentity[intI].intnPkElementElement != null
                        )
                    {
                        List<IoentityInputsAndOutputsEntityDB> ioentityList = darrioentity.Where(io =>
                            io.strLink == darrioentity[intI].strLink).ToList();

                        if (
                            //                              //There is an inter node.
                            ioentityList.Count >= 3
                            )
                        {
                            IoentityInputsAndOutputsEntityDB ioentityPivotNode = ioentityList.FirstOrDefault(io =>
                                io.intnPkElementElementType == null && io.intnPkElementElement == null);

                            List<IoentityInputsAndOutputsEntityDB> darrioentityRestOfLinks = ioentityList.Where(io =>
                                io.strLink == darrioentity[intI].strLink &&
                                (io.intnPkElementElementType != null || io.intnPkElementElement != null)).ToList();

                            //                              //To delete later.
                            List<IoentityInputsAndOutputsEntityDB> darrioentityToDeleteLater =
                                new List<IoentityInputsAndOutputsEntityDB>();

                            int intK = 0;
                            /*WHILE-DO*/
                            while (
                                darrioentityRestOfLinks.Count > 0
                                )
                            {
                                //                          //Get first other side of node.
                                IoentityInputsAndOutputsEntityDB ioentityFirstLink = darrioentityRestOfLinks[intK];

                                //                          //Verify if first IO is input.
                                //                          //Can be Type or Template.
                                ProdtypProductType.subGetIOinAndIOOut(out ioentityIn, out ioentityOut,
                                    ioentityFirstLink, ioentityPivotNode);

                                //                          //Get json links.
                                lkjsonLink_O.Add(ProdtypProductType.lkjsonCreateJsonLinks(ioentityIn, ioentityOut,
                                    false, boolIsFromProduct));

                                //                          //Delete from pivot list the IO we already have the
                                //                          //      link.
                                darrioentityToDeleteLater.Add(ioentityFirstLink);
                                darrioentityRestOfLinks.Remove(ioentityFirstLink);
                            }
                            //                              //Delete IOs from this list.
                            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityToDeleteLater)
                            {
                                darrioentity.Remove(ioentity);
                            }
                        }
                        else
                        {
                            //                              //There is only two register, can be a direct link or
                            //                              //      node-IO link.

                            //                              //Try to get node.
                            IoentityInputsAndOutputsEntityDB ioentityPivotNode = ioentityList.FirstOrDefault(io =>
                                io.intnPkElementElementType == null && io.intnPkElementElement == null);

                            if (
                                //                          //There is Node-IO link.
                                ioentityPivotNode != null
                                )
                            {
                                //                          //Get the IO from the list.
                                IoentityInputsAndOutputsEntityDB ioentityLink = ioentityList.FirstOrDefault(io
                                    => io.intnPkElementElementType != null ||
                                    io.intnPkElementElement != null);

                                //                          //Verify if first IO is input.
                                //                          //Can be Type or Template.
                                ProdtypProductType.subGetIOinAndIOOut(out ioentityIn, out ioentityOut,
                                    ioentityLink, ioentityPivotNode);

                                //                          //Get json links.
                                lkjsonLink_O.Add(ProdtypProductType.lkjsonCreateJsonLinks(ioentityIn, ioentityOut,
                                    false, boolIsFromProduct));

                                //                          //Delete from pivot list the IO we already have the
                                //                          //      link.
                                darrioentity.Remove(ioentityLink);
                            }
                            else
                            {
                                //                          //It's a IO-IO link.
                                //                          //Try to get node.
                                IoentityInputsAndOutputsEntityDB ioentityLinkOne = ioentityList[0];
                                IoentityInputsAndOutputsEntityDB ioentityLinkTwo = ioentityList[1];

                                //                          //Verify if first IO is input.
                                //                          //Can be Type or Template.
                                ProdtypProductType.subGetIOinAndIOOut(out ioentityIn, out ioentityOut,
                                    ioentityLinkOne, ioentityLinkTwo);

                                //                          //Get json links.
                                lkjsonLink_O.Add(ProdtypProductType.lkjsonCreateJsonLinks(ioentityIn, ioentityOut,
                                    false, boolIsFromProduct));
                                darrioentity.Remove(ioentityLinkOne);
                                darrioentity.Remove(ioentityLinkTwo);
                            }
                        }
                    }
                    else
                    {
                        //                                  //It's a Node.
                        //                                  //Get all links with other nodes.
                        List<LinknodLinkNodeEntityDB> darrlinknodentity = darrlinknode.Where(li =>
                            li.intPkWorkflow == darrioentity[intI].intPkWorkflow &&
                            (li.intPkNodeI == darrioentity[intI].intPk ||
                            li.intPkNodeO == darrioentity[intI].intPk)).ToList();

                        for (int intK = 0; intK < darrlinknodentity.Count; intK++)
                        {
                            ioentityIn = context.InputsAndOutputs.FirstOrDefault(io =>
                                io.intPk == darrlinknodentity[intK].intPkNodeI);
                            ioentityOut = context.InputsAndOutputs.FirstOrDefault(io =>
                                io.intPk == darrlinknodentity[intK].intPkNodeO);

                            //                              //Get json links.
                            lkjsonLink_O.Add(ProdtypProductType.lkjsonCreateJsonLinks(ioentityIn, ioentityOut,
                                false, boolIsFromProduct));
                            darrlinknode.Remove(darrlinknodentity[intK]);
                        }

                        //                                  //Get all links with IOs.
                        darrioentityNode = darrioentity.Where(io => io.intPk != darrioentity[intI].intPk &&
                            io.strLink == darrioentity[intI].strLink).ToList();

                        int intJ = 0;
                        /*WHILE-DO*/
                        while (
                            darrioentityNode.Count > 0
                            )
                        {
                            //                              //Get first other side of node.
                            IoentityInputsAndOutputsEntityDB ioentityIONode = darrioentityNode[intJ];

                            //                              //Verify if first IO is input.
                            //                              //Can be Type or Template.
                            ProdtypProductType.subGetIOinAndIOOut(out ioentityIn, out ioentityOut,
                                    ioentityIONode, darrioentity[intI]);

                            //                              //Get json links.
                            lkjsonLink_O.Add(ProdtypProductType.lkjsonCreateJsonLinks(ioentityIn, ioentityOut,
                                false, boolIsFromProduct));

                            //                              //If is other node, do not remove from list.
                            if (
                                !(ioentityIONode.intnPkElementElementType == null &&
                                ioentityIONode.intnPkElementElement == null)
                                )
                            {
                                darrioentity.Remove(ioentityIONode);
                                darrioentityNode.Remove(ioentityIONode);
                            }
                        }
                        darrioentity.Remove(darrioentity[intI]);
                    }

                    intStatus_IO = 200;
                    strUserMessage_IO = "";
                    strDevMessage_IO = "";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subGetIOinAndIOOut(
            //                                              //Give us the correct order of an IO entity.

            out IoentityInputsAndOutputsEntityDB ioentityIn_O,
            out IoentityInputsAndOutputsEntityDB ioentityOut_O,
            IoentityInputsAndOutputsEntityDB ioentityOne_I,
            IoentityInputsAndOutputsEntityDB ioentityTwo_I
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Verify if first IO is input.
            //                                              //Can be Type or Template.
            if (
                //                                          //It's a type
                ioentityOne_I.intnPkElementElementType != null
                )
            {
                EleetentityElementElementTypeEntityDB eleetentity = context.ElementElementType.FirstOrDefault(eleet
                    => eleet.intPk == ioentityOne_I.intnPkElementElementType);

                if (
                    eleetentity.boolUsage == true
                    )
                {
                    ioentityIn_O = ioentityOne_I;
                    ioentityOut_O = ioentityTwo_I;
                }
                else
                {
                    ioentityIn_O = ioentityTwo_I;
                    ioentityOut_O = ioentityOne_I;
                }
            }
            else
            {
                //                                          //It's a template.
                EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(eleele
                    => eleele.intPk == ioentityOne_I.intnPkElementElement);
                if (
                    eleeleentity.boolUsage == true
                    )
                {
                    ioentityIn_O = ioentityOne_I;
                    ioentityOut_O = ioentityTwo_I;
                }
                else
                {
                    ioentityIn_O = ioentityTwo_I;
                    ioentityOut_O = ioentityOne_I;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static LkjsonLinkJson lkjsonCreateJsonLinks(
            //                                              //Get the information for each link.

            IoentityInputsAndOutputsEntityDB ioentityIn_I,
            IoentityInputsAndOutputsEntityDB ioentityOut_I,
            bool boolIsNode,
            bool boolIsFromProduct_I
            )
        {
            LkjsonLinkJson lkjson;
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            if (
                boolIsNode
                )
            {
                //                                          //It is from node, the validation is if it is from product.
                bool boolSetCondition = boolIsFromProduct_I;

                lkjson = new LkjsonLinkJson(ioentityOut_I.intPk, ioentityIn_I.intPk, "", ioentityOut_I.strLink, "",
                    ioentityIn_I.strLink, boolSetCondition);
            }
            else
            {
                int intPkIn = ioentityIn_I.intPk;
                String strIn;
                String strProcessTo = "";
                String strProcessFrom = "";
                if (
                    ioentityIn_I.intnPkElementElementType != null ||
                    ioentityIn_I.intnPkElementElement != null
                    )
                {
                    //                                      //Get Pk and str for the first ioentity.
                    String strTypeOrTemplateIn = "";
                    if (
                        //                                  //It's a type.
                        ioentityIn_I.intnPkElementElementType != null
                        )
                    {
                        //                                  //Get type or template name.
                        EleetentityElementElementTypeEntityDB eleetentity = context.ElementElementType.FirstOrDefault(
                            et => et.intPk == ioentityIn_I.intnPkElementElementType);
                        strTypeOrTemplateIn = context.ElementType.FirstOrDefault(et =>
                            et.intPk == eleetentity.intPkElementTypeSon).strXJDFTypeId;

                    }
                    else
                    {
                        //                                  //It's a template.
                        EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(
                            eleele => eleele.intPk == ioentityIn_I.intnPkElementElement);
                        strTypeOrTemplateIn = context.Element.FirstOrDefault(ele =>
                            ele.intPk == eleeleentity.intPkElementSon).strElementName;
                    }

                    //                                      //Get resource's name.
                    String strResourceNameIn = "To be defined.";
                    if (
                        ioentityIn_I.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentityIn_I.intnPkResource);
                        strResourceNameIn = eleentityRes.strElementName;
                    }

                    //                                      //Get process's name.
                    PiwentityProcessInWorkflowEntityDB piwentityForName =
                        context.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPkWorkflow == ioentityIn_I.intPkWorkflow &&
                        piw.intProcessInWorkflowId == ioentityIn_I.intnProcessInWorkflowId);
                    EleentityElementEntityDB eleentityPro = context.Element.FirstOrDefault(ele =>
                        ele.intPk == piwentityForName.intPkProcess);
                    strProcessTo = eleentityPro.strElementName;
                    strProcessTo = piwentityForName.intnId != null ? strProcessTo +
                        " (" + piwentityForName.intnId + ")" : strProcessTo;

                    //                                      //Create strIO. "(Type : Template) Resource"
                    strIn = "(" + strTypeOrTemplateIn + ")" + " " + strResourceNameIn;
                }
                else
                {
                    //                                      //Look info as a node.
                    strIn = ioentityIn_I.strLink;
                }

                int intPkOut = ioentityOut_I.intPk;
                String strOut;
                if (
                    ioentityOut_I.intnPkElementElementType != null ||
                    ioentityOut_I.intnPkElementElement != null
                    )
                {
                    //                                      //Get Pk and str for the second ioentity.
                    String strTypeOrTemplateOut = "";
                    if (
                        //                                  //It's a type.
                        ioentityOut_I.intnPkElementElementType != null
                        )
                    {
                        //                                  //Get type or template name.
                        EleetentityElementElementTypeEntityDB eleetentity = context.ElementElementType.FirstOrDefault(et
                            => et.intPk == ioentityOut_I.intnPkElementElementType);
                        strTypeOrTemplateOut = context.ElementType.FirstOrDefault(et
                            => et.intPk == eleetentity.intPkElementTypeSon).strXJDFTypeId;

                    }
                    else
                    {
                        //                                  //It's a template.
                        EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(eleele
                            => eleele.intPk == ioentityOut_I.intnPkElementElement);
                        strTypeOrTemplateOut = context.Element.FirstOrDefault(ele
                            => ele.intPk == eleeleentity.intPkElementSon).strElementName;
                    }

                    //                                      //Get resource's name.
                    String strResourceNameOut = "To be defined.";
                    if (
                        ioentityOut_I.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele
                            => ele.intPk == ioentityOut_I.intnPkResource);
                        strResourceNameOut = eleentity.strElementName;
                    }

                    //                                      //Get process's name.
                    PiwentityProcessInWorkflowEntityDB piwentityForName =
                        context.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPkWorkflow == ioentityOut_I.intPkWorkflow &&
                        piw.intProcessInWorkflowId == ioentityOut_I.intnProcessInWorkflowId);
                    EleentityElementEntityDB eleentityPro = context.Element.FirstOrDefault(ele =>
                        ele.intPk == piwentityForName.intPkProcess);
                    strProcessFrom = eleentityPro.strElementName;
                    strProcessFrom = piwentityForName.intnId != null ? strProcessFrom +
                        " (" + piwentityForName.intnId + ")" : strProcessFrom;

                    //                                      //Create strIO. "(Type : Template) Resource"
                    strOut = "(" + strTypeOrTemplateOut + ")" + " " + strResourceNameOut;
                }
                else
                {
                    //                                      //Look info as node.
                    strOut = ioentityOut_I.strLink;
                }

                bool boolSetCondition = false;
                if (
                    //                                      //It is from product.
                    boolIsFromProduct_I &&
                    //                                      //It is from node. ()
                    (strProcessFrom == "")
                    )
                {
                    boolSetCondition = true;
                }

                lkjson = new LkjsonLinkJson(intPkOut, intPkIn, strProcessFrom, strOut, strProcessTo, strIn, 
                    boolSetCondition);
            }
            return lkjson;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subUnlink(
            //                                              //Unlinks.

            int intPkOut_I,
            int intPkIn_I,
            PsPrintShop ps_I,
            out int intPkWorkflowFinal_O,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intPkWorkflowFinal_O = 0;
            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Both sides of the link must be valid.";
            if (
                intPkOut_I > 0 && intPkIn_I > 0
                )
            {
                IoentityInputsAndOutputsEntityDB ioentityOut = (
                    from ioentity in context_M.InputsAndOutputs
                    join wfentity in context_M.Workflow on
                    ioentity.intPkWorkflow equals wfentity.intPk
                    where ioentity.intPk == intPkOut_I &&
                    ioentity.strLink != null &&
                    wfentity.intPkPrintshop == ps_I.intPk
                    select ioentity).FirstOrDefault();

                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Link output not found.";
                if (
                    ioentityOut != null
                    )
                {
                    IoentityInputsAndOutputsEntityDB ioentityIn = context_M.InputsAndOutputs.FirstOrDefault(io =>
                        io.intPk == intPkIn_I && io.strLink != null);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Link input not found.";
                    if (
                        ioentityIn != null
                        )
                    {
                        intStatus_IO = 404;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "The IOs do not belong to the same workflow.";
                        if (
                            ioentityOut.intPkWorkflow == ioentityIn.intPkWorkflow
                            )
                        {
                            //                              //Link Output is a node
                            bool boolIsANodeOut = ProdtypProductType.boolIsTheIOANode(ioentityOut);
                            //                              //Link Input is a node
                            bool boolIsANodeIn = ProdtypProductType.boolIsTheIOANode(ioentityIn);

                            /*CASE*/
                            if (
                                //                          //Both sides of the link are nodes
                                boolIsANodeOut && boolIsANodeIn
                                )
                            {
                                ProdtypProductType.subBothIOsAreNodes(ps_I, ioentityOut, ioentityIn, context_M,
                                    ref intPkWorkflowFinal_O, ref intStatus_IO, ref strUserMessage_IO,
                                    ref strDevMessage_IO);
                            }
                            else if (
                                //                          //Neither side of the link is a node
                                !boolIsANodeOut && !boolIsANodeIn
                                )
                            {
                                ProdtypProductType.subNeitherIOIsANode(ps_I, ioentityOut, ioentityIn, context_M,
                                    ref intPkWorkflowFinal_O, ref intStatus_IO, ref strUserMessage_IO,
                                    ref strDevMessage_IO);
                            }
                            else
                            //                              //One side of the link is not a node
                            {
                                ProdtypProductType.subOneIOIsNotANode(boolIsANodeOut, boolIsANodeIn, ps_I, ioentityOut,
                                    ioentityIn, context_M, ref intPkWorkflowFinal_O, ref intStatus_IO,
                                    ref strUserMessage_IO, ref strDevMessage_IO);
                            }
                            /*END-CASE*/
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolIsTheIOANode(
            //                                              //Valid if the IO is a node

            IoentityInputsAndOutputsEntityDB ioentity_I
            )
        {
            bool boolIsANode = false;

            if (
                ioentity_I.intnPkElementElement == null && ioentity_I.intnPkElementElementType == null &&
                    ioentity_I.intnProcessInWorkflowId == null
                )
            {
                boolIsANode = true;
            }

            return boolIsANode;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subBothIOsAreNodes(
            //                                              //Remove the link of the nodes

            PsPrintShop ps_I,
            IoentityInputsAndOutputsEntityDB ioentityOut_M,
            IoentityInputsAndOutputsEntityDB ioentityIn_M,
            Odyssey2Context context_M,
            ref int intPkWorkflowFinal_IO,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Find link to remove
            LinknodLinkNodeEntityDB linknodentity = context_M.LinkNode.FirstOrDefault(node =>
                node.intPkNodeO == ioentityOut_M.intPk && node.intPkNodeI == ioentityIn_M.intPk);

            intStatus_IO = 405;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Link not found.";
            if (
                linknodentity != null
                )
            {
                //                                          //Get the workflow.
                WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == ioentityOut_M.intPkWorkflow);

                WfentityWorkflowEntityDB wfentityNew;
                //                                          //Overwrite data
                ProdtypProductType.subOverwriteIOsByNewWorkflowIOs(ps_I, wfentityBase, context_M, out wfentityNew,
                    ref ioentityOut_M, ref ioentityIn_M);

                //                                          //Overwrite link to remove
                linknodentity = context_M.LinkNode.FirstOrDefault(node => node.intPkNodeO == ioentityOut_M.intPk &&
                    node.intPkNodeI == ioentityIn_M.intPk);

                //                                          //Remove the condition of the link.
                Tools.subDeleteCondition(null, linknodentity.intPk, null, null, context_M);

                //                                          //Remove link
                context_M.LinkNode.Remove(linknodentity);

                ProdtypProductType.subVerifyInputUnlink(ioentityOut_M, ioentityIn_M, context_M);

                //                                          //Delete EstimatioData entries.
                //                                          //Get the process for that wf.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = context_M.ProcessInWorkflow.Where(piw =>
                    piw.intPkWorkflow == wfentityNew.intPk).ToList();

                JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentityAll);

                context_M.SaveChanges();

                intPkWorkflowFinal_IO = wfentityNew.intPk;
                intStatus_IO = 200;
                strUserMessage_IO = "Success.";
                strDevMessage_IO = "";
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subBothIOsAreNodesExtendUnlink(
            //                                              //Remove the link of the nodes

            IoentityInputsAndOutputsEntityDB ioentityOut_M,
            IoentityInputsAndOutputsEntityDB ioentityIn_M,
            Odyssey2Context context_M
            )
        {
            //                                              //Find link to remove
            LinknodLinkNodeEntityDB linknodentity = context_M.LinkNode.FirstOrDefault(node =>
                node.intPkNodeO == ioentityOut_M.intPk && node.intPkNodeI == ioentityIn_M.intPk);

            //                                              //Remove link
            context_M.LinkNode.Remove(linknodentity);

            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subNeitherIOIsANode(
            //                                              //Remove the link of the IOs

            PsPrintShop ps_I,
            IoentityInputsAndOutputsEntityDB ioentityOut_M,
            IoentityInputsAndOutputsEntityDB ioentityIn_M,
            Odyssey2Context context_M,
            ref int intPkWorkflowFinal_IO,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 405;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "The link is not the same.";
            if (
                //                                          //It is the same link
                ioentityOut_M.strLink == ioentityIn_M.strLink
                )
            {
                //                                          //Find a node with the same link
                IoentityInputsAndOutputsEntityDB ioentityNode =
                    context_M.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == ioentityOut_M.intPkWorkflow &&
                    io.strLink == ioentityOut_M.strLink && io.intnPkElementElement == null &&
                    io.intnPkElementElementType == null && io.intnProcessInWorkflowId == null);

                intStatus_IO = 406;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "There is a node with the same link.";
                if (
                    //                                      //There is a node with the same link
                    ioentityNode == null
                    )
                {
                    //                                      //Get the workflow.
                    WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                        wf.intPk == ioentityOut_M.intPkWorkflow);

                    WfentityWorkflowEntityDB wfentityNew;
                    //                                      //Overwrite data
                    ProdtypProductType.subOverwriteIOsByNewWorkflowIOs(ps_I, wfentityBase, context_M, out wfentityNew,
                        ref ioentityOut_M, ref ioentityIn_M);

                    //                                      //Remove link Output.
                    ProdtypProductType.subRemoveLink(ioentityOut_M, context_M);
                    //                                      //Remove link Input.
                    ProdtypProductType.subRemoveLink(ioentityIn_M, context_M);

                    ProdtypProductType.subVerifyInputUnlink(ioentityOut_M, ioentityIn_M, context_M);

                    //                                      //Delete EstimatioData entries.
                    //                                      //Get the process for that wf.
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = context_M.ProcessInWorkflow.Where(piw =>
                        piw.intPkWorkflow == wfentityNew.intPk).ToList();

                    JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentityAll);

                    context_M.SaveChanges();

                    intPkWorkflowFinal_IO = wfentityNew.intPk;

                    intStatus_IO = 200;
                    strUserMessage_IO = "Success.";
                    strDevMessage_IO = "";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subNeitherIOIsANodeExtendUnlink(
            //                                              //Remove the link of the IOs

            IoentityInputsAndOutputsEntityDB ioentityOut_M,
            IoentityInputsAndOutputsEntityDB ioentityIn_M,
            Odyssey2Context context_M
            )
        {
            //                                      //Remove link Output.
            ProdtypProductType.subRemoveLink(ioentityOut_M, context_M);
            //                                      //Remove link Input.
            ProdtypProductType.subRemoveLink(ioentityIn_M, context_M);

            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subVerifyInputUnlink(
            //                                              //Inti of the link.
            IoentityInputsAndOutputsEntityDB ioentityInit_M,
            //                                              //End of the link.
            IoentityInputsAndOutputsEntityDB ioentityEnd_M,
            Odyssey2Context context_M
            )
        {
            //                                              //Get All IO from workflow.
            List<IoentityInputsAndOutputsEntityDB> darrioentityFromWFProduct = context_M.InputsAndOutputs.Where(
                io => io.intPkWorkflow == ioentityEnd_M.intPkWorkflow).ToList();

            //                                              //Get all PIW from a workflow.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityFromProduct = context_M.ProcessInWorkflow.Where(
               piw => piw.intPkWorkflow == ioentityEnd_M.intPkWorkflow).ToList();

            if (
                //                                          //IO is a POST.
                ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(ioentityEnd_M, context_M,
                    ref darrioentityFromWFProduct)
                )
            {
                //                                          //Init var.
                bool boolHasIOBeforePostOrFinalProduct = false;

                if (
                    //                                      //LInk end(ioentityInput) is a process.
                    ioentityEnd_M.intnPkElementElementType != null ||
                    ioentityEnd_M.intnPkElementElement != null
                    )
                {
                    //                                      //IOsProcess Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeProcessesResult;

                    //                                      //IOsNodes Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeNodesResult;

                    //                                      //Get IOs before from ioentityIN.
                    ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(ioentityEnd_M,
                        false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                        out darriobefornextjsonIOsBeforeNodesResult, context_M);

                    if (
                        //                                  //There are link before that arrive POST or final product.
                        darriobefornextjsonIOsBeforeProcessesResult.Count > 0
                        )
                    {
                        boolHasIOBeforePostOrFinalProduct = true;
                    }
                    else
                    {
                        //                                  //Do not something.
                    }

                    int intI = 0;
                    /*DO-WHILE*/
                    while (
                        //                                  //Each take node.
                        intI < darriobefornextjsonIOsBeforeNodesResult.Count &&
                        //                                  //Follow iterate while node before is not POST.
                        !boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        if (
                            //                              //IOentity Init(ioentityOutput) is a node.
                            ioentityInit_M.intnPkElementElement == null &&
                            ioentityInit_M.intnPkElementElementType == null
                            )
                        {
                            if (
                                //                          //IoNode before is the same that IOentityInit.
                                darriobefornextjsonIOsBeforeNodesResult[intI].ioentityBeforeOrNext.intPk ==
                                ioentityInit_M.intPk
                                )
                            {
                                //                          //Do not something.
                            }
                            else
                            {
                                boolHasIOBeforePostOrFinalProduct =
                                    ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(
                                    darriobefornextjsonIOsBeforeNodesResult[intI].ioentityBeforeOrNext, context_M,
                                    ref darrioentityFromWFProduct);
                            }
                        }
                        else
                        {
                            //                              //IOentity Init(ioentityOutput) is a process.
                            boolHasIOBeforePostOrFinalProduct =
                                    ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(
                                    darriobefornextjsonIOsBeforeNodesResult[intI].ioentityBeforeOrNext, context_M,
                                    ref darrioentityFromWFProduct);
                        }

                        intI = intI + 1;
                    }
                }
                else
                {
                    //                                      //LInk end(ioentityInput) is a node.

                    //                                      //IOsProcess Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeProcessesResult;

                    //                                      //IOsNodes Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeNodesResult;

                    //                                      //Get IOs before from ioentityIN.
                    ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(ioentityEnd_M,
                        false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                        out darriobefornextjsonIOsBeforeNodesResult, context_M);

                    int intI = 0;
                    /*WHILE-DO*/
                    while (
                        intI < darriobefornextjsonIOsBeforeProcessesResult.Count &&
                        //                                  //follow iterate if not found Post or FinalProduct.
                        !boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        if (
                            //                              //Befores is same the currentProcessIO.piwID.
                            darriobefornextjsonIOsBeforeProcessesResult[intI].ioentityBeforeOrNext.intnProcessInWorkflowId
                            == ioentityInit_M.intnProcessInWorkflowId
                            )
                        {
                            //                              //Do not something.
                        }
                        else
                        {
                            //                              //There are more PostProcess or Final Product.
                            boolHasIOBeforePostOrFinalProduct = true;
                        }

                        intI = intI + 1;
                    }

                    int intJ = 0;
                    /*DO-WHILE*/
                    while (
                        //                                  //Each take node.
                        intJ < darriobefornextjsonIOsBeforeNodesResult.Count &&
                        //                                  //Follow iterate while node before is not POST.
                        !boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        if (
                                //                          //IOentity Init(ioentityOutput) is a node.
                                ioentityInit_M.intnPkElementElement == null &&
                                ioentityInit_M.intnPkElementElementType == null
                                )
                        {
                            if (
                                //                          //IoNode before is the same that IOentityInit.
                                darriobefornextjsonIOsBeforeNodesResult[intJ].ioentityBeforeOrNext.intPk ==
                                ioentityInit_M.intPk
                                )
                            {
                                //                          //Do not something.
                            }
                            else
                            {
                                boolHasIOBeforePostOrFinalProduct =
                                    ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(
                                    darriobefornextjsonIOsBeforeNodesResult[intJ].ioentityBeforeOrNext, context_M,
                                    ref darrioentityFromWFProduct);
                            }
                        }
                        else
                        {
                            //                              //IOentity Init(ioentityOutput) is a process.
                            boolHasIOBeforePostOrFinalProduct =
                                    ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(
                                    darriobefornextjsonIOsBeforeNodesResult[intJ].ioentityBeforeOrNext, context_M,
                                    ref darrioentityFromWFProduct);
                        }

                        intJ = intJ + 1;
                    }
                }

                if (
                    //                                      //IOIN has more inputs that are Post or
                    //                                      //    finalproduct.
                    boolHasIOBeforePostOrFinalProduct
                    )
                {
                    //                                      //Do not something.
                }
                else
                {
                    //                                      //It Can follow unlinked.
                    ProdtypProductType.subExtendUnlinkRecursive(ref darrioentityFromWFProduct,
                        ref darrpiwentityFromProduct, ioentityEnd_M, context_M);
                }
            }
            else
            {
                //                                          //IO is a normal Process.
                //                                          //Do not something.
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subExtendUnlinkRecursive(
            //                                              //IO from a workflow.
            ref List<IoentityInputsAndOutputsEntityDB> darrioentityFromWFProduct_M,
            //                                              //PIwW from a workflow.
            ref List<PiwentityProcessInWorkflowEntityDB> darrpiwentityFromProduct_M,
            //                                              //IOCurrent.
            IoentityInputsAndOutputsEntityDB ioentityCurrent_M,
            Odyssey2Context context_M
            )
        {
            bool boolIsIOCurrentANode = false;
            if (
                ioentityCurrent_M.intnPkElementElement == null &&
                ioentityCurrent_M.intnPkElementElementType == null
                )
            {
                //                                          //IO Current is a Node.
                boolIsIOCurrentANode = true;
            }
            else
            {
                //                                          //IO current is from Process.
                //                                          //Get PIW entity.
                PiwentityProcessInWorkflowEntityDB piwentityCurrent = darrpiwentityFromProduct_M.FirstOrDefault(
                    piw => piw.intProcessInWorkflowId == ioentityCurrent_M.intnProcessInWorkflowId);

                //                                          //Convert from posprocess to Process.
                piwentityCurrent.boolIsPostProcess = false;

                context_M.ProcessInWorkflow.Update(piwentityCurrent);
            }

            //                                              //Init var.

            //                                              //IOsProcess Before.
            List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                darriobefornextjsonIOsNextProcessesResult;

            //                                              //IOsNodes Before.
            List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                darriobefornextjsonIOsNextNodesResult;

            //                                              //Get IOs before from ioentityIN.
            ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(ioentityCurrent_M,
                true, false, out darriobefornextjsonIOsNextProcessesResult,
                out darriobefornextjsonIOsNextNodesResult, context_M);

            if (
                //                                          //It is IOCurrentProcess.
                !boolIsIOCurrentANode
                )
            {
                //                                          //LInk end(ioentityInput) is a process.

                //                                          //IOsProcess Next.
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsNextProcessesNew = new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();


                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson IobefornextNext in
                    darriobefornextjsonIOsNextProcessesResult)
                {
                    if (
                        !darriobefornextjsonIOsNextProcessesNew.Exists(io =>
                            io.ioentityBeforeOrNext.intnProcessInWorkflowId ==
                            IobefornextNext.ioentityBeforeOrNext.intnProcessInWorkflowId)
                        )
                    {
                        //                                  //Only take a IO by next PIW.
                        darriobefornextjsonIOsNextProcessesNew.Add(IobefornextNext);
                    }
                }

                //                                          //Take each IOProcessNext.
                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexIOProcessNextNew in
                    darriobefornextjsonIOsNextProcessesNew)
                {
                    //                                      //Init var.
                    bool boolHasIOBeforePostOrFinalProduct = false;

                    //                                      //Get before process Or Node.

                    //                                      //IOsProcess Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeProcessesResult;

                    //                                      //IOsNodes Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeNodesResult;

                    //                                      //Get IOs before from ioentityIN.
                    ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
                        iobefornexIOProcessNextNew.ioentityBeforeOrNext,
                        false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                        out darriobefornextjsonIOsBeforeNodesResult, context_M);

                    //                                      //Take each IOProcessBefore.
                    int intI = 0;
                    /*WHILE-DO*/
                    while (
                        intI < darriobefornextjsonIOsBeforeProcessesResult.Count &&
                        //                                  //follow iterate if not found Post or FinalProduct.
                        !boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        if (
                            //                              //Befores is same the currentProcessIO.piwID.
                            darriobefornextjsonIOsBeforeProcessesResult[intI].ioentityBeforeOrNext.intnProcessInWorkflowId
                            == ioentityCurrent_M.intnProcessInWorkflowId
                            )
                        {
                            //                              //Do not something.
                        }
                        else
                        {
                            //                              //There are more PostProcess or Final Product.
                            boolHasIOBeforePostOrFinalProduct = true;
                        }

                        intI = intI + 1;
                    }

                    //                                      //Take each IONodeBefore.
                    int intJ = 0;
                    /*WHILE-DO*/
                    while (
                        intJ < darriobefornextjsonIOsBeforeNodesResult.Count &&
                        //                                  //follow iterate if not found Post or FinalProduct.
                        !boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        boolHasIOBeforePostOrFinalProduct =
                             ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(
                             darriobefornextjsonIOsBeforeNodesResult[intJ].ioentityBeforeOrNext, context_M,
                             ref darrioentityFromWFProduct_M);

                        intJ = intJ + 1;
                    }

                    if (
                        boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        //                                  //Del darriobefornextjsonIOsNextProcessesResult tomo los
                        //                                  //    IOProcess que vallan del currentIOProcess.PIWID al 
                        //                                  //    al IOProcessNext.PIWID y los Unlinkeo.  
                        List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexToUnlink =
                            new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();

                        foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexProcessNextToFilter in
                            darriobefornextjsonIOsNextProcessesResult)
                        {
                            if (
                                iobefornexProcessNextToFilter.ioentityBeforeOrNext.intnProcessInWorkflowId ==
                                iobefornexIOProcessNextNew.ioentityBeforeOrNext.intnProcessInWorkflowId
                                )
                            {
                                darriobefornexToUnlink.Add(iobefornexProcessNextToFilter);
                            }
                        }

                        ProdtypProductType.subIOsExtendToUnlink(darriobefornexToUnlink, context_M);

                    }
                    else
                    {
                        ProdtypProductType.subExtendUnlinkRecursive(ref darrioentityFromWFProduct_M, ref
                            darrpiwentityFromProduct_M, iobefornexIOProcessNextNew.ioentityBeforeOrNext, context_M);
                    }
                }

                //                                          //Take each IONode next.
                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexIONodeNext in
                    darriobefornextjsonIOsNextNodesResult)
                {
                    //                                      //Init var.
                    bool boolHasIOBeforePostOrFinalProduct = false;

                    //                                      //Get before process Or Node.

                    //                                      //IOsProcess Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeProcessesResult;

                    //                                      //IOsNodes Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeNodesResult;

                    //                                      //Get IOs before from ioentityIN.
                    ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
                        iobefornexIONodeNext.ioentityBeforeOrNext,
                        false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                        out darriobefornextjsonIOsBeforeNodesResult, context_M);

                    //                                      //Take each IONodeBefore.
                    int intI = 0;
                    /*WHILE-DO*/
                    while (
                        intI < darriobefornextjsonIOsBeforeProcessesResult.Count &&
                        //                                  //follow iterate if not found Post or FinalProduct.
                        !boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        if (
                            //                              //Befores is same the currentProcessIO.piwID.
                            darriobefornextjsonIOsBeforeProcessesResult[intI].ioentityBeforeOrNext.intnProcessInWorkflowId
                            == ioentityCurrent_M.intnProcessInWorkflowId
                            )
                        {
                            //                              //Do not something.
                        }
                        else
                        {
                            //                              //There are more PostProcess or Final Product.
                            boolHasIOBeforePostOrFinalProduct = true;
                        }

                        intI = intI + 1;
                    }

                    //                                      //Take each IONodeBefore.
                    int intJ = 0;
                    /*WHILE-DO*/
                    while (
                        intJ < darriobefornextjsonIOsBeforeNodesResult.Count &&
                        //                                  //follow iterate if not found Post or FinalProduct.
                        !boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        boolHasIOBeforePostOrFinalProduct =
                             ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(
                             darriobefornextjsonIOsBeforeNodesResult[intJ].ioentityBeforeOrNext, context_M,
                             ref darrioentityFromWFProduct_M);

                        intJ = intJ + 1;
                    }

                    if (
                        boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        //                                  //Del darriobefornextjsonIOsNextProcessesResult tomo los
                        //                                  //    IOProcess que vallan del currentIOProcess.PIWID al 
                        //                                  //    al IOProcessNext.PIWID y los Unlinkeo.  
                        List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexToUnlink =
                            new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();
                        darriobefornexToUnlink.Add(iobefornexIONodeNext);

                        ProdtypProductType.subIOsExtendToUnlink(darriobefornexToUnlink, context_M);
                    }
                    else
                    {
                        ProdtypProductType.subExtendUnlinkRecursive(ref darrioentityFromWFProduct_M, ref
                            darrpiwentityFromProduct_M, iobefornexIONodeNext.ioentityBeforeOrNext, context_M);
                    }
                }
            }
            else
            {
                //                                          //It is IOCurrentNode.

                //                                          //Take each IOProcessNext.
                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexIOProcessNext in
                    darriobefornextjsonIOsNextProcessesResult)
                {
                    //                                      //Init var.
                    bool boolHasIOBeforePostOrFinalProduct = false;

                    //                                      //Get before process Or Node.

                    //                                      //IOsProcess Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeProcessesResult;

                    //                                      //IOsNodes Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeNodesResult;

                    //                                      //Get IOs before from ioentityIN.
                    ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
                        iobefornexIOProcessNext.ioentityBeforeOrNext,
                        false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                        out darriobefornextjsonIOsBeforeNodesResult, context_M);

                    if (
                        //                                  //There are more processes before.
                        darriobefornextjsonIOsBeforeProcessesResult.Count > 0
                        )
                    {
                        //                                  //iobefornexIOProcessNext is a Post, 
                        //                                  //    therefore, if there are more Link en the 
                        //                                  //    input by each iobefornexIOProcessNext, 
                        //                                  //    mean that each iobefornexIOProcessNext is
                        //                                  //    postProcess.
                        boolHasIOBeforePostOrFinalProduct = true;
                    }

                    //                                      //Take each IONodeBefore.
                    int intJ = 0;
                    /*WHILE-DO*/
                    while (
                        intJ < darriobefornextjsonIOsBeforeNodesResult.Count &&
                        //                                  //follow iterate if not found Post or FinalProduct.
                        !boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        if (
                            //                              //If it is the same Node.
                            ioentityCurrent_M.intPk ==
                            darriobefornextjsonIOsBeforeNodesResult[intJ].ioentityBeforeOrNext.intPk
                            )
                        {
                            //                              //Do not something.
                        }
                        else
                        {
                            boolHasIOBeforePostOrFinalProduct =
                                ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(
                                darriobefornextjsonIOsBeforeNodesResult[intJ].ioentityBeforeOrNext, context_M,
                                ref darrioentityFromWFProduct_M);
                        }

                        intJ = intJ + 1;
                    }

                    if (
                        boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        //                                  //Elimino la liga del currentIONode al 
                        //                                  //    iobefornexIOProcessNext.

                        List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexToUnlink =
                            new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();
                        darriobefornexToUnlink.Add(iobefornexIOProcessNext);

                        ProdtypProductType.subIOsExtendToUnlink(darriobefornexToUnlink, context_M);

                    }
                    else
                    {
                        ProdtypProductType.subExtendUnlinkRecursive(ref darrioentityFromWFProduct_M, ref
                            darrpiwentityFromProduct_M, iobefornexIOProcessNext.ioentityBeforeOrNext, context_M);
                    }
                }

                //                                          //Take each IONode next.
                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexIONodeNext in
                    darriobefornextjsonIOsNextNodesResult)
                {
                    //                                      //Init var.
                    bool boolHasIOBeforePostOrFinalProduct = false;

                    //                                      //Get before process Or Node.

                    //                                      //IOsProcess Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeProcessesResult;

                    //                                      //IOsNodes Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeNodesResult;

                    //                                      //Get IOs before from ioentityIN.
                    ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
                        iobefornexIONodeNext.ioentityBeforeOrNext,
                        false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                        out darriobefornextjsonIOsBeforeNodesResult, context_M);

                    if (
                        //                                  //There are more processes before.
                        darriobefornextjsonIOsBeforeProcessesResult.Count > 0
                        )
                    {
                        //                                  //iobefornexIOProcessNext is a Post, 
                        //                                  //    therefore, if there are more Link en the 
                        //                                  //    input by each iobefornexIOProcessNext, 
                        //                                  //    mean that each iobefornexIOProcessNext is
                        //                                  //    postProcess.
                        boolHasIOBeforePostOrFinalProduct = true;
                    }

                    //                                      //Take each IONodeBefore.
                    int intJ = 0;
                    /*WHILE-DO*/
                    while (
                        intJ < darriobefornextjsonIOsBeforeNodesResult.Count &&
                        //                                  //follow iterate if not found Post or FinalProduct.
                        !boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        if (
                            //                              //If it is the same Node.
                            ioentityCurrent_M.intPk ==
                            darriobefornextjsonIOsBeforeNodesResult[intJ].ioentityBeforeOrNext.intPk
                            )
                        {
                            //                              //Do not something.
                        }
                        else
                        {
                            boolHasIOBeforePostOrFinalProduct =
                                ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(
                                darriobefornextjsonIOsBeforeNodesResult[intJ].ioentityBeforeOrNext, context_M,
                                ref darrioentityFromWFProduct_M);
                        }

                        intJ = intJ + 1;
                    }

                    if (
                        boolHasIOBeforePostOrFinalProduct
                        )
                    {
                        //                                  //Del darriobefornextjsonIOsNextNodesResult
                        //                                  //    unlinkeo del currentIONode al
                        //                                  //    darriobefornextjsonIOsBeforeNodesResult[intJ]
                        //                                  //    (IONodeNext).
                        List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexToUnlink =
                            new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();
                        darriobefornexToUnlink.Add(iobefornexIONodeNext);

                        ProdtypProductType.subIOsExtendToUnlink(darriobefornexToUnlink, context_M);
                    }
                    else
                    {
                        ProdtypProductType.subExtendUnlinkRecursive(ref darrioentityFromWFProduct_M, ref
                            darrpiwentityFromProduct_M, iobefornexIONodeNext.ioentityBeforeOrNext, context_M);
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subIOsExtendToUnlink(
            List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornexToUnlink_M,
            Odyssey2Context context_M
            )
        {
            foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexUnlink in darriobefornexToUnlink_M)
            {
                IoentityInputsAndOutputsEntityDB ioentityOut = context_M.InputsAndOutputs.FirstOrDefault(
                    io => io.intPk == iobefornexUnlink.ioentityBelongAProcessOrNode.intPk);

                IoentityInputsAndOutputsEntityDB ioentityIn = context_M.InputsAndOutputs.FirstOrDefault(
                    io => io.intPk == iobefornexUnlink.ioentityBeforeOrNext.intPk);

                //                              //Link Output is a node
                bool boolIsANodeOut = ProdtypProductType.boolIsTheIOANode(ioentityOut);
                //                              //Link Input is a node
                bool boolIsANodeIn = ProdtypProductType.boolIsTheIOANode(ioentityIn);

                /*CASE*/
                if (
                    //                          //Both sides of the link are nodes
                    boolIsANodeOut && boolIsANodeIn
                    )
                {
                    ProdtypProductType.subBothIOsAreNodesExtendUnlink(ioentityOut, ioentityIn, context_M);
                }
                else if (
                    //                          //Neither side of the link is a node
                    !boolIsANodeOut && !boolIsANodeIn
                    )
                {
                    ProdtypProductType.subNeitherIOIsANodeExtendUnlink(ioentityOut, ioentityIn, context_M);
                }
                else
                //                              //One side of the link is not a node
                {
                    ProdtypProductType.subOneIOIsNotANodeExtendUnlink(boolIsANodeOut, boolIsANodeIn, ioentityOut,
                        ioentityIn, context_M);
                }
                /*END-CASE*/
            }


        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subOneIOIsNotANode(
            //                                              //Remove the link of one IO

            bool boolIsANodeOut_I,
            bool boolIsANodeIn_I,
            PsPrintShop ps_I,
            IoentityInputsAndOutputsEntityDB ioentityOut_M,
            IoentityInputsAndOutputsEntityDB ioentityIn_M,
            Odyssey2Context context_M,
            ref int intPkWorkflowFinal_IO,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 405;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "The link is not the same.";
            if (
                //                                          //It is the same link
                ioentityOut_M.strLink == ioentityIn_M.strLink
                )
            {
                //                                          //Get the workflow.
                WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == ioentityOut_M.intPkWorkflow);

                WfentityWorkflowEntityDB wfentityNew;
                //                                          //Overwrite data
                ProdtypProductType.subOverwriteIOsByNewWorkflowIOs(ps_I, wfentityBase, context_M, out wfentityNew,
                    ref ioentityOut_M, ref ioentityIn_M);

                if (
                    //                                      //link Input is not a node
                    boolIsANodeOut_I && !boolIsANodeIn_I
                    )
                {
                    //                                      //Remove link Input.
                    ProdtypProductType.subRemoveLink(ioentityIn_M, context_M);
                }
                else if (
                    //                                      //Link Output is not a node
                    !boolIsANodeOut_I && boolIsANodeIn_I
                    )
                {
                    //                                      //Remove link Output.
                    ProdtypProductType.subRemoveLink(ioentityOut_M, context_M);
                }

                ProdtypProductType.subVerifyInputUnlink(ioentityOut_M, ioentityIn_M, context_M);
                //                                          //Delete EstimatioData entries.
                //                                          //Get the process for that wf.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = context_M.ProcessInWorkflow.Where(piw =>
                    piw.intPkWorkflow == wfentityNew.intPk).ToList();

                JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentityAll);

                context_M.SaveChanges();

                intPkWorkflowFinal_IO = wfentityNew.intPk;

                intStatus_IO = 200;
                strUserMessage_IO = "Success.";
                strDevMessage_IO = "";
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subOneIOIsNotANodeExtendUnlink(
            //                                              //Remove the link of one IO

            bool boolIsANodeOut_I,
            bool boolIsANodeIn_I,
            IoentityInputsAndOutputsEntityDB ioentityOut_M,
            IoentityInputsAndOutputsEntityDB ioentityIn_M,
            Odyssey2Context context_M
            )
        {
            if (
                //                                      //link Input is not a node
                boolIsANodeOut_I && !boolIsANodeIn_I
                )
            {
                //                                      //Remove link Input.
                subRemoveLink(ioentityIn_M, context_M);
            }
            else if (
                //                                      //Link Output is not a node
                !boolIsANodeOut_I && boolIsANodeIn_I
                )
            {
                //                                      //Remove link Output.
                subRemoveLink(ioentityOut_M, context_M);
            }

            context_M.SaveChanges();

        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subOverwriteIOsByNewWorkflowIOs(
            //                                              //Overwrite entities

            PsPrintShop ps_I,
            WfentityWorkflowEntityDB wfentityBase_I,
            Odyssey2Context context_M,
            out WfentityWorkflowEntityDB wfentityNew_O,
            ref IoentityInputsAndOutputsEntityDB ioentityOut_M,
            ref IoentityInputsAndOutputsEntityDB ioentityIn_M
            )
        {
            IoentityInputsAndOutputsEntityDB ioentityOut = ioentityOut_M;
            IoentityInputsAndOutputsEntityDB ioentityIn = ioentityIn_M;

            WfentityWorkflowEntityDB wfentityNew;
            ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I, wfentityBase_I, context_M, out wfentityNew);

            //                                              //Overwrite link Output if workflow was cloned.
            ioentityOut_M = context_M.InputsAndOutputs.FirstOrDefault(io =>
                io.intPkWorkflow == wfentityNew.intPk &&
                io.intnPkElementElement == ioentityOut.intnPkElementElement &&
                io.intnPkElementElementType == ioentityOut.intnPkElementElementType &&
                io.intnProcessInWorkflowId == ioentityOut.intnProcessInWorkflowId &&
                io.strLink == ioentityOut.strLink);

            //                                              //Overwrite link Input if workflow was cloned.
            ioentityIn_M = context_M.InputsAndOutputs.FirstOrDefault(io =>
                 io.intPkWorkflow == wfentityNew.intPk &&
                 io.intnPkElementElement == ioentityIn.intnPkElementElement &&
                 io.intnPkElementElementType == ioentityIn.intnPkElementElementType &&
                 io.intnProcessInWorkflowId == ioentityIn.intnProcessInWorkflowId &&
                 io.strLink == ioentityIn.strLink);

            wfentityNew_O = wfentityNew;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subRemoveLink(
            //                                              //Remove the link existing

            IoentityInputsAndOutputsEntityDB ioentity_I,
            Odyssey2Context context_M
            )
        {
            /*CASE*/
            if (
                //                                          //Not res, not gp, no finalproduct
                (ioentity_I.intnPkResource == null) &&
                (ioentity_I.intnGroupResourceId == null) &&
                (ioentity_I.boolnIsFinalProduct != true)
                )
            {
                //                                          //Remove the record.

                Tools.subDeleteCondition(null, null, ioentity_I.intPk, null, context_M);
                context_M.InputsAndOutputs.Remove(ioentity_I);
            }
            else if (
                //                                          //There is a res
                (ioentity_I.intnPkResource != null) ||
                ((ioentity_I.intnPkResource == null) &&
                (ioentity_I.intnGroupResourceId == null) &&
                (ioentity_I.boolnIsFinalProduct != null))
                )
            {
                //                                          //Update table.
                ioentity_I.strLink = null;

                Tools.subDeleteCondition(null, null, ioentity_I.intPk, null, context_M);

                context_M.InputsAndOutputs.Update(ioentity_I);
            }
            else
            //                                              //There is a group.
            {
                //                                          //Update table.
                ioentity_I.strLink = null;

                Tools.subDeleteCondition(null, null, ioentity_I.intPk, null, context_M);

                //                                          //Get group with the same link.
                int intIOsWithTheSameLink = context_M.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == ioentity_I.intPkWorkflow &&
                    io.intnGroupResourceId == ioentity_I.intnGroupResourceId &&
                    io.intPk != ioentity_I.intPk).ToList().Count();

                if (
                    //                                      //Create a new group if there are groups with the same link
                    intIOsWithTheSameLink > 0
                    )
                {
                    //                                      //Create new group.
                    int intNewGroupIdOut = ProdtypProductType.intNewGroupId(ioentity_I, context_M);

                    //                                      //Update the group Id in IO table.
                    ioentity_I.intnGroupResourceId = intNewGroupIdOut;
                }

                context_M.InputsAndOutputs.Update(ioentity_I);

                context_M.SaveChanges();
            }
            /*END-CASE*/
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static int intNewGroupId(
            //                                              //ioentity with group id.
            IoentityInputsAndOutputsEntityDB ioentity_I,
            Odyssey2Context context_M
            )
        {
            //                                              //Create a new Id for the new group.
            int intMaxGroupId = 0;
            if (
                context_M.GroupResource.Count() > 0
                )
            {
                intMaxGroupId = context_M.GroupResource.Max(gpresentity => gpresentity.intId);
            }
            int intNewGroupId = intMaxGroupId + 1;

            //                                              //Find the data of the group in GroupResource table.
            List<GpresentityGroupResourceEntityDB> darrgpres = context_M.GroupResource.Where(gpres => gpres.intId ==
                ioentity_I.intnGroupResourceId).ToList();

            foreach (GpresentityGroupResourceEntityDB gpres in darrgpres)
            {
                //                                          //Create the new group with same resources different gp id.
                GpresentityGroupResourceEntityDB gpresentity = new GpresentityGroupResourceEntityDB
                {
                    intId = intNewGroupId,
                    intPkResource = gpres.intPkResource,
                    intPkWorkflow = ioentity_I.intPkWorkflow
                };
                context_M.GroupResource.Add(gpresentity);
            }

            return intNewGroupId;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
            //                                              //Get Next IOs(processese or nodes) from IO(process/node) 
            //                                              //    Or Get before IOs(processese or nodes) from 
            //                                              //    IO(process/node) with/without consider 
            //                                              //    IOentotyFrom_I(IOProcess) that it is passes.

            IoentityInputsAndOutputsEntityDB ioentityFrom_I,
            //                                              //Get Next or before.
            bool boolGetNext_I,
            bool boolGetIOsConsiderIOFrom_I,
            //                                              //List Before/Next IOs are Processes.
            out List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                darriobefornextjsonIOsBeforeOrNextProcessesResult_O,
            //                                              //List Before/Next IOs are Nodes.
            out List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                darriobefornextjsonIOsBeforeOrNextNodesResult_O,
            Odyssey2Context context_M
            )
        {
            //                                              //List Before/Next IOs are Processes.
            darriobefornextjsonIOsBeforeOrNextProcessesResult_O = new
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();

            //                                              //List Before/Next IOs are Nodes.
            darriobefornextjsonIOsBeforeOrNextNodesResult_O = new
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();

            //                                              //Get All IOs from workflow.
            List<IoentityInputsAndOutputsEntityDB> darrioentityFromWFProduct =
                context_M.InputsAndOutputs.Where(ioentity =>
                    ioentity.intPkWorkflow == ioentityFrom_I.intPkWorkflow).ToList();

            if (
                //                                              //IOFrom es un nodo.
                ioentityFrom_I.intnPkElementElementType == null &&
                ioentityFrom_I.intnPkElementElement == null
                )
            {
                IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornexjson;

                //                                              //WORKING WHENEVER IOFROM_I is NODE THE NEXT OR BEFORE 
                //                                              //    IS A PROCESS.

                //                                              //Get IOsFrom node.
                List<IoentityInputsAndOutputsEntityDB> darrioentityFromNode =
                    darrioentityFromWFProduct.Where(
                        //                                      //Same LInk.
                        io => io.strLink == ioentityFrom_I.strLink &&
                        //                                      //Inputs or outputs.
                        (io.intnPkElementElementType != null || io.intnPkElementElement != null)).ToList();

                List<IoentityInputsAndOutputsEntityDB> darrioentityBeforeOrNextProcess =
                    new List<IoentityInputsAndOutputsEntityDB>();

                foreach (IoentityInputsAndOutputsEntityDB ioentityProcessFromNode in darrioentityFromNode)
                {
                    if (
                        //                                  //Get The next processes from node.
                        boolGetNext_I
                        )
                    {
                        if (
                            ProdtypProductType.BoolIOIsInput(ioentityProcessFromNode)
                            )
                        {
                            iobefornexjson = new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentityFrom_I,
                                ioentityProcessFromNode);

                            darriobefornextjsonIOsBeforeOrNextProcessesResult_O.Add(
                                iobefornexjson);
                        }
                    }
                    else
                    {
                        //                                  //Get before processes from Node.
                        if (
                            !ProdtypProductType.BoolIOIsInput(ioentityProcessFromNode)
                            )
                        {
                            iobefornexjson = new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentityFrom_I,
                                ioentityProcessFromNode);

                            darriobefornextjsonIOsBeforeOrNextProcessesResult_O.Add(
                                iobefornexjson);
                        }
                    }
                }

                //                                              //WORKING WHENEVER IOFROM_I IS NODE THE NEXT OR 
                //                                              //    BEFORE IS A NODES.
                List<LinknodLinkNodeEntityDB> darrlinknod;

                if (
                    boolGetNext_I
                    )
                {
                    //                                          //Get the next nodes.
                    darrlinknod = context_M.LinkNode.Where(linkNod =>
                        linkNod.intPkNodeO == ioentityFrom_I.intPk).ToList();
                }
                else
                {
                    //                                          //Get the before nodes.
                    darrlinknod = context_M.LinkNode.Where(linkNod =>
                        linkNod.intPkNodeI == ioentityFrom_I.intPk).ToList();
                }

                foreach (LinknodLinkNodeEntityDB linknod in darrlinknod)
                {
                    IoentityInputsAndOutputsEntityDB ioentityNode = darrioentityFromWFProduct.FirstOrDefault(
                        io => io.intPk == (boolGetNext_I ? linknod.intPkNodeI : linknod.intPkNodeO));

                    iobefornexjson =
                        new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentityFrom_I,
                               ioentityNode);

                    darriobefornextjsonIOsBeforeOrNextNodesResult_O.Add(iobefornexjson);
                }
            }
            else
            {
                //                                              //IOFrom es un Proceso.

                //                                              //WORKING WHENEVER IOFROM_I IS PROCESE THE NEXT OR 
                //                                              //    BEFORE IS A PROCESS
                //                                              //    OR
                //                                              //    WHENEVER IOFROM_I IS PROCESE THE NEXT OR 
                //                                              //    BEFORE IS A NODES.

                //                                              //Get All IOs from by processs.
                List<IoentityInputsAndOutputsEntityDB> darrioentityByPIW;

                if (
                    boolGetIOsConsiderIOFrom_I
                    )
                {
                    darrioentityByPIW =
                    darrioentityFromWFProduct.Where(ioentity =>
                        (ioentity.intnProcessInWorkflowId == ioentityFrom_I.intnProcessInWorkflowId) &&
                        (ioentity.strLink != null)).ToList();
                }
                else
                {
                    darrioentityByPIW =
                    darrioentityFromWFProduct.Where(ioentity =>
                        (ioentity.intnProcessInWorkflowId == ioentityFrom_I.intnProcessInWorkflowId) &&
                        (ioentity.strLink != null) &&
                        //                                      //Not get IOFrom_I. 
                        (ioentity.intPk != ioentityFrom_I.intPk)
                        ).ToList();
                }

                foreach (IoentityInputsAndOutputsEntityDB ioentityByPIW in darrioentityByPIW)
                {
                    bool boolIsContinue = false;

                    if (
                        boolGetNext_I
                        )
                    {
                        if (
                            //                              //IO By PIW is a output.
                            !ProdtypProductType.BoolIOIsInput(ioentityByPIW)
                            )
                        {
                            boolIsContinue = true;
                        }
                    }
                    else
                    {
                        if (
                            //                              //IO By PIW is input.
                            ProdtypProductType.BoolIOIsInput(ioentityByPIW)
                            )
                        {
                            boolIsContinue = true;
                        }
                    }

                    if (
                        boolIsContinue
                        )
                    {
                        //                                  //Can be link IOProcess -> IONode or
                        //                                  //    link IONode -> IOProcess or
                        //                                  //    link IOProcess -> IOProcess.

                        if (
                            //                              //IOByProcess is linked with a node.
                            darrioentityFromWFProduct.Exists(io => io.intnPkElementElementType == null &&
                            io.intnPkElementElement == null && io.strLink == ioentityByPIW.strLink)
                            )
                        {
                            //                                  //Can be link IOProcess -> IONode or
                            //                                  //    link IONode -> IOProcess.

                            IoentityInputsAndOutputsEntityDB ioentityNode = darrioentityFromWFProduct.FirstOrDefault(
                                io => io.intnPkElementElementType == null && io.intnPkElementElement == null &&
                                io.strLink == ioentityByPIW.strLink);

                            darriobefornextjsonIOsBeforeOrNextNodesResult_O.Add(
                                new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentityByPIW,
                                ioentityNode));
                        }
                        else
                        {
                            //                                  //    It is link IOProcess -> IOProcess.

                            //                              //Get the next process.
                            IoentityInputsAndOutputsEntityDB ioOtherPartLink = darrioentityFromWFProduct.FirstOrDefault(
                            ioentity => ioentity.intnProcessInWorkflowId != ioentityByPIW.intnProcessInWorkflowId &&
                            ioentity.strLink == ioentityByPIW.strLink);

                            darriobefornextjsonIOsBeforeOrNextProcessesResult_O.Add(
                                new IobefornexjsonInputsAndOutputsBeforeOrNextJson(ioentityByPIW, ioOtherPartLink));
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolIsProcessOrNodeAPOSTRecursive(
            //                                          //Return true if the IOProcess or IONode is Postproceso or 
            //                                          //    postnode, in other words, if the IOProcess or IONode
            //                                          //    is after of a Postproceso or finalProduct.

            //                                          //Note. ioentityFrom_I and darrioentityFromWFProduct_IO
            //                                          //    should belong the same Workflow.

            //                                          //Can be IOProcess or IONode.
            IoentityInputsAndOutputsEntityDB ioentityFrom_I,
            Odyssey2Context context_M,
            //                                          //Get Next or before.
            ref List<IoentityInputsAndOutputsEntityDB> darrioentityFromWFProduct_M
            )
        {
            bool boolIsPost = false;

            if (
                //                                          //IOFrom is Node.
                ioentityFrom_I.intnPkElementElementType == null &&
                ioentityFrom_I.intnPkElementElement == null
                )
            {
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsBeforeProcessesResult;

                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsBeforeNodesResult;

                ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(ioentityFrom_I,
                    false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                    out darriobefornextjsonIOsBeforeNodesResult, context_M);

                if (
                    //                                      //There are PIW before.
                    darriobefornextjsonIOsBeforeProcessesResult.Count > 0
                    )
                {
                    IoentityInputsAndOutputsEntityDB ioentityProcessBefore =
                        darriobefornextjsonIOsBeforeProcessesResult[0].ioentityBeforeOrNext;

                    //                                          //GET PIW before.
                    PiwentityProcessInWorkflowEntityDB piwentityBefore =
                        context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPkWorkflow == ioentityProcessBefore.intPkWorkflow &&
                        piw.intProcessInWorkflowId == ioentityProcessBefore.intnProcessInWorkflowId);

                    boolIsPost = piwentityBefore.boolIsPostProcess;

                    if (
                        //                                      //If the piwentityBefore it is processNormal.
                        !boolIsPost
                        )
                    {
                        if (
                            //                                      //Veryfy if already there is a resouce setted 
                            //                                      //    how the productFinal in this PIW.
                            ProdtypProductType.boolIsResourceProductFinalSetted(piwentityBefore,
                                darrioentityFromWFProduct_M)
                            )
                        {
                            boolIsPost = true;
                        }
                    }
                }
                else
                {
                    int intI = 0;
                    /*WHILE-DO*/
                    while (
                        //                                  //take each Node before.
                        intI < darriobefornextjsonIOsBeforeNodesResult.Count &&
                        //                                  //continue while node is Normal.
                        !boolIsPost
                        )
                    {
                        //                                  //Continue Find before.
                        boolIsPost =
                            ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(
                            darriobefornextjsonIOsBeforeNodesResult[intI].ioentityBeforeOrNext,
                            context_M, ref darrioentityFromWFProduct_M);

                        intI = intI + 1;
                    }
                }
            }
            else
            {
                //                                          //IOFrom is of the a process.
                PiwentityProcessInWorkflowEntityDB piwentity = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                    piw.intPkWorkflow == ioentityFrom_I.intPkWorkflow &&
                    piw.intProcessInWorkflowId == ioentityFrom_I.intnProcessInWorkflowId);

                boolIsPost = piwentity.boolIsPostProcess;
            }

            return boolIsPost;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subSetConditionToLink(
            //                                              //Add or update condition to apply, condition quantity
            //                                              //      and conditionAnd.

            int intPkOut_I,
            int intPkIn_I,
            PsPrintShop ps_I,
            GpcondjsonGroupConditionJson gpcondition_I,
            Odyssey2Context context_M,
            out int intPkWorkflowFinal_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intPkWorkflowFinal_O = 0;

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Both sides of the link must be valid or condition is wrong.";
            if (
                intPkOut_I > 0 &&
                intPkIn_I > 0 &&
                Tools.boolValidConditionList(gpcondition_I)
                )
            {
                //                                          //Find IO out.
                IoentityInputsAndOutputsEntityDB ioentityOut = (from ioentity in context_M.InputsAndOutputs
                                                                join wfentity in context_M.Workflow on
                                                                ioentity.intPkWorkflow equals wfentity.intPk
                                                                where ioentity.intPk == intPkOut_I &&
                                                                ioentity.strLink != null &&
                                                                wfentity.intPkPrintshop == ps_I.intPk
                                                                select ioentity).FirstOrDefault();

                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Link output not found or it is not a node.";
                if (
                    ioentityOut != null &&
                    ProdtypProductType.boolIsTheIOANode(ioentityOut)
                    )
                {
                    //                                      //Find IO in.
                    IoentityInputsAndOutputsEntityDB ioentityIn = context_M.InputsAndOutputs.FirstOrDefault(io =>
                        io.intPk == intPkIn_I && io.strLink != null);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Link input not found.";
                    if (
                        ioentityIn != null
                        )
                    {
                        intStatus_IO = 404;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "The IOs do not belong to the same workflow.";
                        if (
                            ioentityOut.intPkWorkflow == ioentityIn.intPkWorkflow
                            )
                        {
                            //                              //Output is a node
                            bool boolIsANodeOut = ProdtypProductType.boolIsTheIOANode(ioentityOut);
                            //                              //Input is a node
                            bool boolIsANodeIn = ProdtypProductType.boolIsTheIOANode(ioentityIn);

                            if (
                                //                          //Both sides of the link are nodes
                                boolIsANodeOut && boolIsANodeIn
                                )
                            {
                                ProdtypProductType.subSetConditionBothIOsAreNodes(ioentityOut, ioentityIn, ps_I,
                                    gpcondition_I, context_M, ref intPkWorkflowFinal_O, ref intStatus_IO,
                                    ref strUserMessage_IO, ref strDevMessage_IO);
                            }
                            else
                            {
                                ProdtypProductType.subSetConditionToIOs(ioentityOut, ioentityIn, ps_I, gpcondition_I,
                                    context_M, ref intPkWorkflowFinal_O, ref intStatus_IO, ref strUserMessage_IO,
                                    ref strDevMessage_IO);
                            }
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subSetConditionBothIOsAreNodes(
            //                                              //Remove the link of the nodes

            IoentityInputsAndOutputsEntityDB ioentityOut_I,
            IoentityInputsAndOutputsEntityDB ioentityIn_I,
            PsPrintShop ps_I,
            GpcondjsonGroupConditionJson gpcondition_I,
            Odyssey2Context context_M,
            ref int intPkWorkflowFinal_IO,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Find link.
            LinknodLinkNodeEntityDB linknodentity = context_M.LinkNode.FirstOrDefault(node =>
                node.intPkNodeO == ioentityOut_I.intPk && node.intPkNodeI == ioentityIn_I.intPk);

            intStatus_IO = 405;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Link not found.";
            if (
                linknodentity != null
                )
            {
                //                                          //Get the workflow.
                WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == ioentityOut_I.intPkWorkflow);

                WfentityWorkflowEntityDB wfentityNew;
                //                                          //Overwrite data.
                ProdtypProductType.subOverwriteIOsByNewWorkflowIOs(ps_I, wfentityBase, context_M, out wfentityNew,
                    ref ioentityOut_I, ref ioentityIn_I);

                //                                          //Overwrite link.
                linknodentity = context_M.LinkNode.FirstOrDefault(node => node.intPkNodeO == ioentityOut_I.intPk &&
                    node.intPkNodeI == ioentityIn_I.intPk);

                if (
                    gpcondition_I != null
                    )
                {
                    //                                      //Delete possible condition associated to link.
                    Tools.subDeleteCondition(null, linknodentity.intPk, null, null, context_M);

                    //                                      //Add condition(s) to necessary tables.
                    Tools.subAddCondition(null, linknodentity.intPk, null, null, gpcondition_I, context_M);
                }                

                //                                          //Delete EstimatioData entries.

                //                                          //Get the process for that wf.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = context_M.ProcessInWorkflow.Where(piw =>
                    piw.intPkWorkflow == wfentityNew.intPk).ToList();

                JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentityAll);

                context_M.SaveChanges();

                intPkWorkflowFinal_IO = wfentityNew.intPk;
                intStatus_IO = 200;
                strUserMessage_IO = "Success.";
                strDevMessage_IO = "";
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subSetConditionToIOs(
            //                                              //Remove the link of one IO

            IoentityInputsAndOutputsEntityDB ioentityOut_M,
            IoentityInputsAndOutputsEntityDB ioentityIn_M,
            PsPrintShop ps_I,
            GpcondjsonGroupConditionJson gpcondition_I,
            Odyssey2Context context_M,
            ref int intPkWorkflowFinal_IO,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 405;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "The link is not the same.";
            if (
                //                                          //It is the same link
                ioentityOut_M.strLink == ioentityIn_M.strLink
                )
            {
                //                                          //Get the workflow.
                WfentityWorkflowEntityDB wfentityBase = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == ioentityOut_M.intPkWorkflow);

                WfentityWorkflowEntityDB wfentityNew;
                //                                          //Overwrite data
                ProdtypProductType.subOverwriteIOsByNewWorkflowIOs(ps_I, wfentityBase, context_M, out wfentityNew,
                    ref ioentityOut_M, ref ioentityIn_M);

                if (
                    gpcondition_I != null
                    )
                {
                    //                                          //Delete possible condition associated to link.
                    Tools.subDeleteCondition(null, null, ioentityIn_M.intPk, null, context_M);

                    //                                          //Add condition(s) to necessary tables.
                    Tools.subAddCondition(null, null, ioentityIn_M.intPk, null, gpcondition_I, context_M);
                }                

                //                                          //Delete EstimatioData entries.
                //                                          //Get the process for that wf.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = context_M.ProcessInWorkflow.Where(piw =>
                    piw.intPkWorkflow == wfentityNew.intPk).ToList();

                JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentityAll);

                context_M.SaveChanges();

                intPkWorkflowFinal_IO = wfentityNew.intPk;

                intStatus_IO = 200;
                strUserMessage_IO = "Success.";
                strDevMessage_IO = "";
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subSetAsThickness(
            //                                              //Set media input IO as thickness.

            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            int intPkProcessInWorkflow_I,
            bool boolThickness_I,
            PsPrintShop ps_I,
            Odyssey2Context context_M,
            out int intPkWorkflowFinal_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intPkWorkflowFinal_O = 0;

            //                                              //To easy code.

            int? intnPkEleet = null;
            int? intnPkEleele = null;

            if (
                boolIsEleet_I
                )
            {
                intnPkEleet = intPkEleetOrEleele_I;
            }
            else
            {
                intnPkEleele = intPkEleetOrEleele_I;
            }

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Only input IO is allowed.";
            if (
                //                                          //Only input IO is allowed.
                ProdtypProductType.boolIsInputIO(intnPkEleet, intnPkEleele, context_M)
                )
            {
                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Only media IO is allowed.";
                if (
                    ProdtypProductType.boolIsIOMedia(intnPkEleet, intnPkEleele, context_M)
                    )
                {
                    //                                      //Find process in workflow.
                    PiwentityProcessInWorkflowEntityDB piwentity = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPk == intPkProcessInWorkflow_I);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Process in workflow not found.";
                    if (
                        piwentity != null
                        )
                    {
                        //                                  //Find workflow.
                        WfentityWorkflowEntityDB wfentity = context_M.Workflow.FirstOrDefault(wf =>
                            wf.intPk == piwentity.intPkWorkflow);

                        intStatus_IO = 404;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "Workflow not found or deleted.";
                        if (
                            wfentity != null &&
                            wfentity.boolDeleted == false
                            )
                        {
                            //                              //Verify if workflow is being used in a in progress or 
                            //                              //      completed job.
                            WfentityWorkflowEntityDB wfentityNew;
                            ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I, wfentity, context_M,
                                out wfentityNew);
                            intPkWorkflowFinal_O = wfentityNew.intPk;

                            //                              //Find new process in workflow.
                            PiwentityProcessInWorkflowEntityDB piwentityNew =
                                context_M.ProcessInWorkflow.FirstOrDefault(
                                piw => piw.intProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                                piw.intPkWorkflow == wfentityNew.intPk);

                            //                              //Find IO.
                            IoentityInputsAndOutputsEntityDB ioentity = context_M.InputsAndOutputs.FirstOrDefault(io =>
                                io.intnPkElementElementType == intnPkEleet &&
                                io.intnPkElementElement == intnPkEleele &&
                                io.intnProcessInWorkflowId == piwentityNew.intProcessInWorkflowId &&
                                io.intPkWorkflow == wfentityNew.intPk);

                            if (
                                //                          //IO exists.
                                ioentity != null
                                )
                            {
                                if (
                                    //                      //User wants to add thickness IO.
                                    boolThickness_I
                                    )
                                {
                                    ProdtypProductType.subMakeOtherIONotThickness(wfentityNew.intPk, ioentity,
                                        context_M);
                                }
                                else
                                {
                                    if (
                                        ioentity.intnPkResource == null &&
                                        ioentity.strLink == null &&
                                        ioentity.intnGroupResourceId == null &&
                                        (ioentity.boolnIsFinalProduct == null ||
                                        ioentity.boolnIsFinalProduct == false) &&
                                        (ioentity.boolnSize == null ||
                                        ioentity.boolnSize == false)
                                        )
                                    {
                                        //                  //Remove IOEntity.
                                        context_M.InputsAndOutputs.Remove(ioentity);
                                    }
                                    else
                                    {
                                        //                  //Make new IO as not thickness.
                                        ioentity.boolnThickness = false;
                                    }
                                }

                                context_M.SaveChanges();

                                intStatus_IO = 200;
                                strUserMessage_IO = "Success.";
                                strDevMessage_IO = "";
                            }
                            else
                            {
                                //                          //IO does not exist.

                                intStatus_IO = 405;
                                strUserMessage_IO = "Something is wrong.";
                                strDevMessage_IO = "IO does not exist.";
                                if (
                                    //                      //User wants to add thickness IO.
                                    boolThickness_I
                                    )
                                {
                                    //                      //Create IO.
                                    IoentityInputsAndOutputsEntityDB ioentityNew = new IoentityInputsAndOutputsEntityDB
                                    {
                                        intPkWorkflow = wfentityNew.intPk,
                                        intnPkElementElementType = intnPkEleet,
                                        intnPkElementElement = intnPkEleele,
                                        intnProcessInWorkflowId = piwentityNew.intProcessInWorkflowId
                                    };

                                    context_M.InputsAndOutputs.Add(ioentityNew);
                                    context_M.SaveChanges();

                                    ProdtypProductType.subMakeOtherIONotThickness(wfentityNew.intPk, ioentityNew,
                                        context_M);

                                    intStatus_IO = 200;
                                    strUserMessage_IO = "Success.";
                                    strDevMessage_IO = "";
                                }
                            }
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subMakeOtherIONotThickness(
            //                                              //Find if there is another IO being used as thickness and 
            //                                              //      make it not thickness. Also convert incoming IO 
            //                                              //      to thickness.

            int intPkWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            Odyssey2Context context_M
            )
        {
            //                                              //Find thickness IO.
            IoentityInputsAndOutputsEntityDB ioentityCurrentIOThickness =
                context_M.InputsAndOutputs.FirstOrDefault(io =>
                io.intPkWorkflow == intPkWorkflow_I &&
                io.boolnThickness == true &&
                io.intPk != ioentity_I.intPk);

            if (
                //                                          //There is an IO being used as thickness.
                ioentityCurrentIOThickness != null
                )
            {
                //                                          //Make IO as not thickness.
                ioentityCurrentIOThickness.boolnThickness = false;
                //                                          //Make new IO thickness.
                ioentity_I.boolnThickness = true;
            }
            else
            {
                //                                          //There is not any IO being used as thickness.

                //                                          //Make new IO thickness.
                ioentity_I.boolnThickness = true;
            }

            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool boolIsIOMedia(
            //                                              //Verify if IO is media type.

            int? intnPkEleet_I,
            int? intnPkEleele_I,
            Odyssey2Context context_M
            )
        {
            bool boolIsIOMedia = false;

            if (
                //                                          //It is element element type.
                intnPkEleet_I != null
                )
            {
                //                                          //Find Eleet.
                EleetentityElementElementTypeEntityDB eleetentity = context_M.ElementElementType.FirstOrDefault(
                    eleet => eleet.intPk == (int)intnPkEleet_I);

                if (
                    eleetentity != null
                    )
                {
                    //                                      //Find type.
                    EtElementTypeAbstract etElementType =
                        EtElementTypeAbstract.etFromDB(eleetentity.intPkElementTypeSon);

                    boolIsIOMedia =
                        etElementType.strXJDFTypeId == EtElementTypeAbstract.strResourceTypeMedia;
                }
            }
            else
            {
                //                                          //It is element element.

                //                                          //Find Eleele.
                EleeleentityElementElementEntityDB eleeleentity = context_M.ElementElement.FirstOrDefault(eleele =>
                    eleele.intPk == (int)intnPkEleele_I);

                if (
                    eleeleentity != null
                    )
                {
                    //                                      //Find element.
                    EleentityElementEntityDB eleentity = context_M.Element.FirstOrDefault(element =>
                        element.intPk == eleeleentity.intPkElementSon);

                    //                                      //Find type.
                    EtElementTypeAbstract etElementType =
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType);

                    boolIsIOMedia =
                        etElementType.strXJDFTypeId == EtElementTypeAbstract.strResourceTypeMedia;
                }
            }

            return boolIsIOMedia;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subSetSize(
            //                                              //Set component output IO as size.

            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            int intPkProcessInWorkflow_I,
            bool boolSize_I,
            PsPrintShop ps_I,
            bool boolSuperAdmin_I,
            Odyssey2Context context_M,
            out int intPkWorkflowFinal_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intPkWorkflowFinal_O = 0;

            //                                              //To easy code.

            int? intnPkEleet = null;
            int? intnPkEleele = null;

            if (
                boolIsEleet_I
                )
            {
                intnPkEleet = intPkEleetOrEleele_I;
            }
            else
            {
                intnPkEleele = intPkEleetOrEleele_I;
            }

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Only output IO is allowed.";
            if (
                //                                          //Only output IO is allowed.
                ProdtypProductType.boolIsOutput(intnPkEleet, intnPkEleele)
                )
            {
                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Only component IO allowed.";
                if (
                    ProdtypProductType.boolIsIOComponent(intnPkEleet, intnPkEleele, context_M)
                    )
                {
                    //                                      //Find process in workflow.
                    PiwentityProcessInWorkflowEntityDB piwentity = (from piwentityValid in context_M.ProcessInWorkflow
                                                                    join wfentity in context_M.Workflow on
                                                                    piwentityValid.intPkWorkflow equals wfentity.intPk
                                                                    where piwentityValid.intPk ==
                                                                    intPkProcessInWorkflow_I &&
                                                                    wfentity.intPkPrintshop == ps_I.intPk
                                                                    select piwentityValid).FirstOrDefault();

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Process in workflow not found.";
                    if (
                        piwentity != null
                        )
                    {
                        //                                  //Find workflow.
                        WfentityWorkflowEntityDB wfentity = context_M.Workflow.FirstOrDefault(wf =>
                            wf.intPk == piwentity.intPkWorkflow);

                        intStatus_IO = 404;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "Workflow not found or deleted.";
                        if (
                            wfentity != null &&
                            wfentity.boolDeleted == false
                            )
                        {

                            intStatus_IO = 403;
                            strUserMessage_IO = "Something is wrong.";
                            strDevMessage_IO = "The WF generic only can be modified for the administrator.";
                            if (
                                (
                                //                          //The workflow is generic and
                                //                          //  Only can be modified for the 
                                //                          //  admin(super user.)
                                wfentity.boolnGeneric == true &&
                                boolSuperAdmin_I
                                )
                                ||
                                (
                                (wfentity.boolnGeneric == null || wfentity.boolnGeneric == false)
                                )
                                )
                            {
                                //                          //Verify if workflow is being used in a in progress or 
                                //                          //      completed job.
                                WfentityWorkflowEntityDB wfentityNew;
                                ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I, wfentity, context_M,
                                    out wfentityNew);
                                intPkWorkflowFinal_O = wfentityNew.intPk;

                                //                          //Find new process in workflow.
                                PiwentityProcessInWorkflowEntityDB piwentityNew =
                                    context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                                    piw.intProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                                    piw.intPkWorkflow == wfentityNew.intPk);

                                //                          //Find IO.
                                IoentityInputsAndOutputsEntityDB ioentity = context_M.InputsAndOutputs.FirstOrDefault(io =>
                                    io.intnPkElementElementType == intnPkEleet &&
                                    io.intnPkElementElement == intnPkEleele &&
                                    io.intnProcessInWorkflowId == piwentityNew.intProcessInWorkflowId &&
                                    io.intPkWorkflow == wfentityNew.intPk);

                                if (
                                    //                      //IO exists.
                                    ioentity != null
                                    )
                                {
                                    if (
                                        //                  //User wants to add size IO.
                                        boolSize_I
                                        )
                                    {
                                        ProdtypProductType.subMakeOtherIONotSize(wfentityNew.intPk, ioentity, context_M);
                                    }
                                    else
                                    {
                                        if (
                                            ioentity.intnPkResource == null &&
                                            ioentity.strLink == null &&
                                            ioentity.intnGroupResourceId == null &&
                                            (ioentity.boolnIsFinalProduct == null ||
                                            ioentity.boolnIsFinalProduct == false) &&
                                            (ioentity.boolnThickness == null ||
                                            ioentity.boolnThickness == false)
                                            )
                                        {
                                            //              //Remove IOEntity.
                                            context_M.InputsAndOutputs.Remove(ioentity);
                                        }
                                        else
                                        {
                                            ProdtypProductType.subDeleteCalculationsOfIOAsSize(ioentity, context_M);
                                            ioentity.boolnSize = false;
                                        }
                                    }

                                    context_M.SaveChanges();

                                    intStatus_IO = 200;
                                    strUserMessage_IO = "Success.";
                                    strDevMessage_IO = "";
                                }
                                else
                                {
                                    //                      //IO does not exist.

                                    intStatus_IO = 405;
                                    strUserMessage_IO = "Something is wrong.";
                                    strDevMessage_IO = "IO does not exist.";
                                    if (
                                        //                  //User wants to add size IO.
                                        boolSize_I
                                        )
                                    {
                                        //                  //Create IO.
                                        IoentityInputsAndOutputsEntityDB ioentityNew = new IoentityInputsAndOutputsEntityDB
                                        {
                                            intPkWorkflow = wfentityNew.intPk,
                                            intnPkElementElementType = intnPkEleet,
                                            intnPkElementElement = intnPkEleele,
                                            boolnIsFinalProduct = null,
                                            intnProcessInWorkflowId = piwentityNew.intProcessInWorkflowId
                                        };

                                        context_M.InputsAndOutputs.Add(ioentityNew);
                                        context_M.SaveChanges();

                                        ProdtypProductType.subMakeOtherIONotSize(wfentityNew.intPk, ioentityNew,
                                            context_M);

                                        intStatus_IO = 200;
                                        strUserMessage_IO = "Success.";
                                        strDevMessage_IO = "";
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subMakeOtherIONotSize(
            //                                              //Find if there is another IO being used as size and 
            //                                              //      make it not size. Also convert incoming IO to size.

            int intPkWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            Odyssey2Context context_M
            )
        {
            List<IoentityInputsAndOutputsEntityDB> darrioentityWithIOSizeSetted =
                new List<IoentityInputsAndOutputsEntityDB>();

            List<int> darrintProcessInWorkflowIDAnalyzed = new List<int>();

            ProdtypProductType.subGetIOWithSizeAtSameWayBackward(intPkWorkflow_I,
                ioentity_I, ref darrintProcessInWorkflowIDAnalyzed, ref darrioentityWithIOSizeSetted, context_M);

            ProdtypProductType.subGetIOWithSizeAtSameWayForward(intPkWorkflow_I,
                ioentity_I, ref darrintProcessInWorkflowIDAnalyzed,
                ref darrioentityWithIOSizeSetted, context_M);

            ProdtypProductType.subGetIOWithSizeAtCurrentPIW(intPkWorkflow_I,
                ioentity_I, ref darrioentityWithIOSizeSetted, context_M);

            foreach (IoentityInputsAndOutputsEntityDB ioentityMakeIONotSize in darrioentityWithIOSizeSetted)
            {
                IoentityInputsAndOutputsEntityDB ioentityIONotSize = ioentityMakeIONotSize;

                //                                          //Make IO as not size.
                ioentityIONotSize.boolnSize = false;

                //                                          //Delete calculations from other IOs
                ProdtypProductType.subDeleteCalculationsOfIOAsSize(ioentityIONotSize, context_M);
            }

            ioentity_I.boolnSize = true;
            //                                              //Delete calculations from current IO
            ProdtypProductType.subDeleteCalculationsOfIOAsSize(ioentity_I, context_M);

            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subGetIOWithSizeAtSameWayBackward(
            //                                              //Get IOS backward that has a size setted.

            int intPkWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentityIOProcessOrNodeFrom_I,
            ref List<int> darrintProcessInWorkflowIDAnalyzed_M,
            ref List<IoentityInputsAndOutputsEntityDB> darrioentityWithIOSizeSetted_M,
            Odyssey2Context context_M
            )
        {
            if (
                (
                //                                          //It is a Node.
                ioentityIOProcessOrNodeFrom_I.intnPkElementElement == null &&
                ioentityIOProcessOrNodeFrom_I.intnPkElementElementType == null
                )
                ||
                (
                    (//                                     //It is a process.
                    ioentityIOProcessOrNodeFrom_I.intnPkElementElement != null ||
                    ioentityIOProcessOrNodeFrom_I.intnPkElementElementType != null) &&
                    //                                      //PIW has not been analyzed
                    !darrintProcessInWorkflowIDAnalyzed_M.Exists(intPIWID => intPIWID ==
                    ioentityIOProcessOrNodeFrom_I.intnProcessInWorkflowId)
                )
            )
            {
                //                                          //List of IOs with piw not repeat.
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornextjsonIOsBeforeProcessesDistinc =
                    new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();

                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeProcessesResult;

                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsBeforeNodesResult;

                ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
                    ioentityIOProcessOrNodeFrom_I, false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                    out darriobefornextjsonIOsBeforeNodesResult, context_M);

                //                                          //Take each IOPIW before.
                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornextIOProcessBefore in
                    darriobefornextjsonIOsBeforeProcessesResult)
                {
                    IoentityInputsAndOutputsEntityDB ioentityProcessBefore =
                            iobefornextIOProcessBefore.ioentityBeforeOrNext;

                    if (
                        //                                  //IO has setted size.
                        ioentityProcessBefore.boolnSize == true
                        )
                    {
                        darrioentityWithIOSizeSetted_M.Add(ioentityProcessBefore);
                    }

                    if (
                        //                                  //Disticn IOProcess before.
                        !darriobefornextjsonIOsBeforeProcessesDistinc.Exists(iobefornext =>
                            iobefornext.ioentityBeforeOrNext.intnProcessInWorkflowId ==
                            ioentityProcessBefore.intnProcessInWorkflowId)
                        )
                    {
                        darriobefornextjsonIOsBeforeProcessesDistinc.Add(iobefornextIOProcessBefore);
                    }
                }

                //                                          //Take each IONode before.
                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornextIONodeBefore in
                    darriobefornextjsonIOsBeforeNodesResult)
                {
                    IoentityInputsAndOutputsEntityDB ioentityNodeBefore =
                            iobefornextIONodeBefore.ioentityBeforeOrNext;

                    ProdtypProductType.subGetIOWithSizeAtSameWayBackward(intPkWorkflow_I,
                        ioentityNodeBefore, ref darrintProcessInWorkflowIDAnalyzed_M,
                        ref darrioentityWithIOSizeSetted_M, context_M);
                }

                //                                          //Take each IOPIW before.
                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornextIOProcessDisctincBefore in
                    darriobefornextjsonIOsBeforeProcessesDistinc)
                {
                    IoentityInputsAndOutputsEntityDB ioentityProcessDistincBefore =
                           iobefornextIOProcessDisctincBefore.ioentityBeforeOrNext;

                    //                                      //Analize each piw before.
                    ProdtypProductType.subGetIOWithSizeAtSameWayBackward(intPkWorkflow_I,
                        ioentityProcessDistincBefore, ref darrintProcessInWorkflowIDAnalyzed_M,
                        ref darrioentityWithIOSizeSetted_M, context_M);

                    if (
                        //                              //if PIWID has not been analized.
                        !darrintProcessInWorkflowIDAnalyzed_M.Exists(intPIWID =>
                        intPIWID == ioentityProcessDistincBefore.intnProcessInWorkflowId)
                        )
                    {
                        //                              //Add to the list the PIWID analized.
                        darrintProcessInWorkflowIDAnalyzed_M.Add(
                        (int)ioentityProcessDistincBefore.intnProcessInWorkflowId);
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subGetIOWithSizeAtSameWayForward(
            //                                              //Get IOS forward that has a size setted.

            int intPkWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentityIOProcessOrNodeFrom_I,
            ref List<int> darrintProcessInWorkflowIDAnalyzed_M,
            ref List<IoentityInputsAndOutputsEntityDB> darrioentityWithIOSizeSetted_M,
            Odyssey2Context context_M
            )
        {
            if (
                    (
                    //                                          //It is a Node.
                    ioentityIOProcessOrNodeFrom_I.intnPkElementElement == null &&
                    ioentityIOProcessOrNodeFrom_I.intnPkElementElementType == null
                    )
                    ||
                    (
                        (//                                     //It is a process.
                        ioentityIOProcessOrNodeFrom_I.intnPkElementElement != null ||
                        ioentityIOProcessOrNodeFrom_I.intnPkElementElementType != null) &&
                        //                                      //PIW has not been analyzed
                        !darrintProcessInWorkflowIDAnalyzed_M.Exists(intPIWID => intPIWID ==
                        ioentityIOProcessOrNodeFrom_I.intnProcessInWorkflowId)
                    )
                )
            {
                //                                          //List of IOs with piw not repeat.
                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson> darriobefornextjsonIOsNextProcessesDistinc =
                    new List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>();

                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsNextProcessesResult;

                List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                    darriobefornextjsonIOsNextNodesResult;

                ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(
                    ioentityIOProcessOrNodeFrom_I, true, true, out darriobefornextjsonIOsNextProcessesResult,
                    out darriobefornextjsonIOsNextNodesResult, context_M);

                //                                              //Take each IOPIW next.
                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornextIOProcessNext in
                    darriobefornextjsonIOsNextProcessesResult)
                {
                    IoentityInputsAndOutputsEntityDB ioentityProcessNext =
                            iobefornextIOProcessNext.ioentityBeforeOrNext;

                    if (
                        //                                      //Disticn IOProcess before.
                        !darriobefornextjsonIOsNextProcessesDistinc.Exists(iobefornext =>
                            iobefornext.ioentityBeforeOrNext.intnProcessInWorkflowId ==
                            ioentityProcessNext.intnProcessInWorkflowId)
                        )
                    {
                        darriobefornextjsonIOsNextProcessesDistinc.Add(iobefornextIOProcessNext);
                    }
                }

                //                                              //Get All IO from workflow.
                List<IoentityInputsAndOutputsEntityDB> darrioentityFromWFProduct =
                    context_M.InputsAndOutputs.Where(
                    io => io.intPkWorkflow == intPkWorkflow_I).ToList();

                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornextIOProcessDistinc in
                    darriobefornextjsonIOsNextProcessesDistinc)
                {
                    IoentityInputsAndOutputsEntityDB ioentityProcessNext =
                            iobefornextIOProcessDistinc.ioentityBeforeOrNext;

                    if (
                        //                                      //It is not a post.                                          
                        !ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(ioentityProcessNext, context_M,
                            ref darrioentityFromWFProduct))
                    {
                        List<IoentityInputsAndOutputsEntityDB> darrioentityByPIW =
                        darrioentityFromWFProduct.Where(ioentity =>
                            (ioentity.intnProcessInWorkflowId ==
                            ioentityProcessNext.intnProcessInWorkflowId)).ToList();

                        foreach (IoentityInputsAndOutputsEntityDB ioentityByPIW in darrioentityByPIW)
                        {
                            if (
                                //                                      //IO has setted size.
                                ioentityByPIW.boolnSize == true
                            )
                            {
                                darrioentityWithIOSizeSetted_M.Add(ioentityByPIW);
                            }
                        }

                        ProdtypProductType.subGetIOWithSizeAtSameWayForward(intPkWorkflow_I,
                            ioentityProcessNext, ref darrintProcessInWorkflowIDAnalyzed_M,
                            ref darrioentityWithIOSizeSetted_M, context_M);

                        if (
                            //                              //if PIWID has not been analized.
                            !darrintProcessInWorkflowIDAnalyzed_M.Exists(intPIWID =>
                            intPIWID == ioentityProcessNext.intnProcessInWorkflowId)
                            )
                        {
                            //                              //Add to the list the PIWID analized.
                            darrintProcessInWorkflowIDAnalyzed_M.Add(
                            (int)ioentityProcessNext.intnProcessInWorkflowId);
                        }
                    }
                }

                //                                          //Take each Node result.
                foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornextNodeNext in
                    darriobefornextjsonIOsNextNodesResult)
                {
                    IoentityInputsAndOutputsEntityDB ioentityNodeNext =
                            iobefornextNodeNext.ioentityBeforeOrNext;

                    if (
                        //                                      //It is not a post.                                          
                        !ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(ioentityNodeNext, context_M,
                            ref darrioentityFromWFProduct)
                        )
                    {
                        //                                      //Analyzed prcess next for this node.
                        ProdtypProductType.subGetIOWithSizeAtSameWayForward(intPkWorkflow_I,
                            ioentityNodeNext, ref darrintProcessInWorkflowIDAnalyzed_M,
                            ref darrioentityWithIOSizeSetted_M, context_M);
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subGetIOWithSizeAtCurrentPIW(
            //                                              //Get IOS current PIW that has a size setted.

            int intPkWorkflow_I,
            IoentityInputsAndOutputsEntityDB ioentityIOProcess_I,
            ref List<IoentityInputsAndOutputsEntityDB> darrioentityWithIOSizeSetted_M,
            Odyssey2Context context_M
            )
        {
            //                                              //Get All IO from workflow.
            List<IoentityInputsAndOutputsEntityDB> darrioentityFromWFProduct =
                context_M.InputsAndOutputs.Where(
                io => io.intPkWorkflow == intPkWorkflow_I).ToList();

            if (
                //                                      //It is not a post.                                          
                !ProdtypProductType.boolIsProcessOrNodeAPOSTRecursive(ioentityIOProcess_I, context_M,
                    ref darrioentityFromWFProduct))
            {
                List<IoentityInputsAndOutputsEntityDB> darrioentityByPIW =
                darrioentityFromWFProduct.Where(ioentity =>
                    (ioentity.intnProcessInWorkflowId ==
                    ioentityIOProcess_I.intnProcessInWorkflowId)).ToList();

                foreach (IoentityInputsAndOutputsEntityDB ioentityByPIW in darrioentityByPIW)
                {
                    if (
                        //                                      //IO has setted size.
                        ioentityByPIW.boolnSize == true
                    )
                    {
                        darrioentityWithIOSizeSetted_M.Add(ioentityByPIW);
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool boolIsIOComponent(
            //                                              //Verify if IO is component type.

            int? intnPkEleet_I,
            int? intnPkEleele_I,
            Odyssey2Context context_M
            )
        {
            bool boolIsIOComponent = false;

            if (
                //                                          //It is element element type.
                intnPkEleet_I != null
                )
            {
                //                                          //Find Eleet.
                EleetentityElementElementTypeEntityDB eleetentity = context_M.ElementElementType.FirstOrDefault(
                    eleet => eleet.intPk == (int)intnPkEleet_I);

                if (
                    eleetentity != null
                    )
                {
                    //                                      //Find type.
                    EtElementTypeAbstract etElementType =
                        EtElementTypeAbstract.etFromDB(context_M, eleetentity.intPkElementTypeSon);

                    boolIsIOComponent =
                        etElementType.strXJDFTypeId == EtElementTypeAbstract.strResourceTypeComponent;
                }
            }
            else
            {
                //                                          //It is element element.

                //                                          //Find Eleele.
                EleeleentityElementElementEntityDB eleeleentity = context_M.ElementElement.FirstOrDefault(eleele =>
                    eleele.intPk == (int)intnPkEleele_I);

                if (
                    eleeleentity != null
                    )
                {
                    //                                      //Find element.
                    EleentityElementEntityDB eleentity = context_M.Element.FirstOrDefault(element =>
                        element.intPk == eleeleentity.intPkElementSon);

                    //                                      //Find type.
                    EtElementTypeAbstract etElementType =
                        EtElementTypeAbstract.etFromDB(context_M, eleentity.intPkElementType);

                    boolIsIOComponent =
                        etElementType.strXJDFTypeId == EtElementTypeAbstract.strResourceTypeComponent;
                }
            }

            return boolIsIOComponent;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subDeleteCalculationsOfIOAsSize(
            //                                              //Delete paper transformations related to the calculations
            //                                              //      that use this IO as QF.

            IoentityInputsAndOutputsEntityDB ioentity_I,
            Odyssey2Context context_M
            )
        {
            //                                              //Find calculations that use IO as QF.
            List<CalentityCalculationEntityDB> darrcalentity = context_M.Calculation.Where(cal =>
                cal.intnPkWorkflow == ioentity_I.intPkWorkflow &&
                cal.intnProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId &&
                cal.intnPkQFromElementElement == ioentity_I.intnPkElementElement &&
                cal.intnPkQFromElementElementType == ioentity_I.intnPkElementElementType).ToList();

            foreach (CalentityCalculationEntityDB calentity in darrcalentity)
            {
                //                                          //Find paper transformations related to the calculations.
                List<PatransPaperTransformationEntityDB> darrpatransentity = context_M.PaperTransformation.Where(
                    patrans => patrans.intnPkCalculationOwn == calentity.intPk ||
                    patrans.intnPkCalculationLink == calentity.intPk).ToList();

                foreach (PatransPaperTransformationEntityDB patransentity in darrpatransentity)
                {
                    context_M.PaperTransformation.Remove(patransentity);
                }

                Tools.subDeleteCondition(calentity.intPk, null, null, null, context_M);

                context_M.Calculation.Remove(calentity);
            }

            context_M.SaveChanges();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subProcessOrNodeIsDispensable(
            //                                              //True if piw or node has links.

            //                                              //Pk Process in workflow. 
            int? intnPkProcessInWorkflow_I,
            //                                              //Pk Node.
            int? intnPkNode_I,
            out bool? boolnProcessOrNodeIsDispensable_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            boolnProcessOrNodeIsDispensable_O = null;

            Odyssey2Context context = new Odyssey2Context();

            if (
                (intnPkProcessInWorkflow_I != null) &&
                (intnPkNode_I == null)
                )
            {
                int intPkProcessInWorkflow = (int)intnPkProcessInWorkflow_I;

                PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                    piw.intPk == intPkProcessInWorkflow);

                intStatus_IO = 401;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Process in workflow not found.";
                if (
                    piwentity != null
                    )
                {
                    IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(ioentity =>
                        ioentity.intPkWorkflow == piwentity.intPkWorkflow &&
                        ioentity.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                        ioentity.strLink != null);

                    CalentityCalculationEntityDB calentity = context.Calculation.FirstOrDefault(cal =>
                        cal.intnPkWorkflow == piwentity.intPkWorkflow &&
                        cal.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId);

                    bool boolWorkflowModifiable;
                    String strModifiableMessage = "";
                    intStatus_IO = 200;
                    strUserMessage_IO = "";
                    strDevMessage_IO = "";
                    ProdtypProductType.subWorkflowHasEstimates(piwentity.intPkWorkflow, null, out boolWorkflowModifiable,
                        ref intStatus_IO, ref strModifiableMessage, ref strDevMessage_IO);

                    boolnProcessOrNodeIsDispensable_O = (ioentity == null) && (calentity == null) && boolWorkflowModifiable;

                    ProdtypProductType.subGetProcessIsDispensableMessage(ioentity, calentity, boolWorkflowModifiable,
                        strModifiableMessage, ref strUserMessage_IO);
                }
            }
            else
            {
                //                                          //Pk node != null.

                if (
                    (intnPkProcessInWorkflow_I == null) &&
                    (intnPkNode_I != null)
                    )
                {
                    int intPkNode = (int)intnPkNode_I;

                    IoentityInputsAndOutputsEntityDB ioentityNode = context.InputsAndOutputs.FirstOrDefault(ioentity =>
                        ioentity.intPk == intPkNode);

                    IoentityInputsAndOutputsEntityDB ioentityLink = context.InputsAndOutputs.FirstOrDefault(ioentity =>
                        ioentity.strLink == ioentityNode.strLink &&
                        ioentity.intPkWorkflow == ioentityNode.intPkWorkflow &&
                        ioentity.intPk != ioentityNode.intPk);

                    LinknodLinkNodeEntityDB linknodentity = context.LinkNode.FirstOrDefault(linknode =>
                        linknode.intPkNodeI == ioentityNode.intPk ||
                        linknode.intPkNodeO == ioentityNode.intPk);

                    boolnProcessOrNodeIsDispensable_O = (ioentityLink == null) && (linknodentity == null);

                    intStatus_IO = 200;
                    strDevMessage_IO = "";
                    strUserMessage_IO = (bool)boolnProcessOrNodeIsDispensable_O ? "" : "Links will be deleted.";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subGetProcessIsDispensableMessage(
            IoentityInputsAndOutputsEntityDB ioentity_I,
            CalentityCalculationEntityDB calentity_I,
            bool boolWorkflowModifiable_I,
            String strModifiableMessage_I,
            ref String strUserMessage_IO
            )
        {
            /*CASE*/
            if (
                ioentity_I != null && calentity_I == null && boolWorkflowModifiable_I
                )
            {
                strUserMessage_IO = "Links will be deleted.";
            }
            else if (
                ioentity_I == null && calentity_I != null && boolWorkflowModifiable_I
                )
            {
                strUserMessage_IO = "Calculations will be deleted.";
            }
            else if (
                ioentity_I == null && calentity_I == null && !boolWorkflowModifiable_I
                )
            {
                strUserMessage_IO = strModifiableMessage_I;
            }
            else if (
                ioentity_I != null && calentity_I != null && boolWorkflowModifiable_I
                )
            {
                strUserMessage_IO = "Links and calculations will be deleted.";
            }
            else if (
                ioentity_I != null && calentity_I == null && !boolWorkflowModifiable_I
                )
            {
                strUserMessage_IO = "Links and s" + strModifiableMessage_I.Substring(1);
            }
            else if (
                ioentity_I == null && calentity_I != null && !boolWorkflowModifiable_I
                )
            {
                strUserMessage_IO = "Calculations and s" + strModifiableMessage_I.Substring(1);
            }
            else if (
                ioentity_I != null && calentity_I != null && !boolWorkflowModifiable_I
                )
            {
                strUserMessage_IO = "Links, calculations and s" + strModifiableMessage_I.Substring(1);
            }
            /*END-CASE*/
        }

        //--------------------------------------------------------------------------------------------------------------
        public static WfjjsonWorkflowJobJson wfjjsonGet(
            //                                              //Get all the processes with their inputs and outputs for a 
            //                                              //      job.

            int intJobId_I,
            int intPkWorkflow_I,
            PsPrintShop ps_I,
            IConfiguration configuration_I,
            IHubContext<ConnectionHub> iHubContext_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO,
            //                                              //Jobjson recieved from getPrice functionality.
            JobjsonJobJson jobjsonJob_I
            )
        {
            WfjjsonWorkflowJobJson wfjjson = null;

            //                                              //Validate job.
            JobjsonJobJson jobjson = new JobjsonJobJson();
            intStatus_IO = 401;
            if (
                (intJobId_I > 0 && JobJob.boolIsValidJobId(intJobId_I, ps_I.strPrintshopId, configuration_I, out jobjson,
                    ref strUserMessage_IO, ref strDevMessage_IO)) ||
                    intJobId_I == -999
                )
            {
                jobjson = intJobId_I == -999 ? jobjsonJob_I : jobjson;
                //                                          //Establish connection.
                Odyssey2Context context = new Odyssey2Context();

                //                                          //Get job's stage.
                String strStage = "Pending.";
                ProdtypProductType.subGetJobStage(intJobId_I, ref strStage);

                JobentityJobEntityDB jobentity = null;
                if (
                    //                                      //Job in progress or completed.
                    strStage != JobJob.strPendingStage
                    )
                {
                    //                                      //Find job.
                    jobentity = context.Job.FirstOrDefault(job => job.intJobID == intJobId_I &&
                    //                                      //PkWorkflows must match.                    
                        job.intPkWorkflow == intPkWorkflow_I);
                }

                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Workflow does not belong to job.";
                if (
                    strStage == JobJob.strPendingStage ||
                    jobentity != null
                    )
                {
                    //                                      //To get the product updated with Wisnet new info.
                    ProdtypProductType prodtyp = ProdtypProductType.GetProductTypeUpdated(ps_I,
                        jobjson.strProductName, (int)jobjson.intnProductKey, true);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "No product found.";
                    if (
                        prodtyp != null
                        )
                    {
                        List<PiwentityProcessInWorkflowEntityDB> darrpiwentityWithFinalProduct;
                        bool boolWorkflowIsReady;
                        bool? boolnNotUsed;
                        List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesNotReady;
                        ProdtypProductType.subfunWorkflowIsReady(intPkWorkflow_I, out darrpiwentityWithFinalProduct,
                            out boolWorkflowIsReady, out boolnNotUsed, out darrpiwentityProcessesNotReady);

                        intStatus_IO = 404;
                        strUserMessage_IO = "The product workflow is incomplete. Complete the product workflow" +
                            " to see the job workflow.";
                        strDevMessage_IO = "";
                        if (
                            boolWorkflowIsReady
                            )
                        {
                            //                              //Get all the correct processes.
                            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAllProcesses;
                            List<DynLkjsonDynamicLinkJson> darrdynlkjson;
                            ProdtypProductType.subGetWorkflowValidWay(intPkWorkflow_I, jobjson,
                                out darrpiwentityAllProcesses, out darrdynlkjson);

                            if (
                                darrpiwentityAllProcesses.Count > 0
                                )
                            {
                                ProdtypProductType.subUpdateResourceForAJob(prodtyp, null, darrpiwentityAllProcesses,
                                    jobjson);

                                //                          //List of normal piw.
                                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNormalProcess =
                                    darrpiwentityAllProcesses.Where(piw => piw.boolIsPostProcess == false).ToList();

                                //                          //List of post piw.
                                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityPostProcess =
                                    darrpiwentityAllProcesses.Where(piw => piw.boolIsPostProcess == true).ToList();

                                //                          //List to add piws.
                                List<Piwjson1ProcessInWorkflowJson1> darrpiwjson1 =
                                    new List<Piwjson1ProcessInWorkflowJson1>();

                                bool boolWFJobReady = true;
                                //                          //To acumulate job final cost.
                                double numJobFinalCost = 0;
                                double numJobExtraCost = 0;

                                //                          //Dictionary to store inputs and outputs of a process.
                                prodtyp.dicProcessIOs = new Dictionary<int, List<Iofrmpiwjson2IOFromPIWJson2>>();

                                //                          //List to store resource thickness.
                                prodtyp.darrresthkjsonResThickness = new List<ResthkjsonResourceThicknessJson>();
                                //                          //Add normal processes to List of piw json.
                                ProdtypProductType.AddNormalProcess(jobentity, jobjson, prodtyp, ps_I, darrdynlkjson,
                                    darrpiwentityAllProcesses, darrpiwentityNormalProcess, configuration_I,
                                    darrpiwjson1, ref numJobExtraCost, ref numJobFinalCost, ref boolWFJobReady);

                                //                          //Add post processes to List of piw json.
                                ProdtypProductType.AddPostProcess(jobentity, jobjson, prodtyp, ps_I, darrdynlkjson,
                                    darrpiwentityAllProcesses, darrpiwentityPostProcess, configuration_I, darrpiwjson1,
                                    ref numJobExtraCost, ref numJobFinalCost, ref boolWFJobReady);

                                //                          //By product/workflow info.
                                List<CostbycaljsonCostByCalculationJson> darrcostbycaljson;
                                double numCostByProduct = prodtyp.numGetCostByProduct(jobjson, ps_I,
                                    out darrcostbycaljson, ref boolWFJobReady);
                                numJobFinalCost = numJobFinalCost + numCostByProduct;

                                bool boolAllResourcesAreSet;
                                bool boolAllResourcesAreAvailable;
                                bool boolAllResourcesHaveAnAccount;
                                bool boolAllCalculationsByProcessHaveAnAccount;
                                bool boolAllCalculationsByProductHaveAnAccount;
                                bool boolIsNotEstimate;
                                bool boolJobWFHasSizeSet;
                                String strDeliveryDate;
                                List<String> darrstrResourcesNamesWithoutAccount;
                                List<String> darrstrProcessCalculationsWithoutAccount;

                                ProdtypProductType.subThisWorkflowJobIsReady(darrpiwjson1, jobjson, jobentity,
                                    ps_I.intPk, prodtyp.intPk, strStage, jobjson.intnOrderId, iHubContext_I,
                                    out boolAllResourcesAreSet, out boolAllResourcesAreAvailable,
                                    out boolAllCalculationsByProcessHaveAnAccount,
                                    out boolAllCalculationsByProductHaveAnAccount, out boolAllResourcesHaveAnAccount,
                                    out boolIsNotEstimate, out boolJobWFHasSizeSet, out strDeliveryDate,
                                    out darrstrResourcesNamesWithoutAccount,
                                    out darrstrProcessCalculationsWithoutAccount);

                                if (
                                    //                      //Delivery date exists.
                                    strDeliveryDate.Length > 0 &&
                                    strDeliveryDate.Contains(",")
                                    )
                                {
                                    //                      //Find the index of the comma that separates date and time.
                                    int intCommaIndex = strDeliveryDate.IndexOf(",");
                                    //                      //Get date.
                                    Date dateDelivaryDate = strDeliveryDate.Substring(0, intCommaIndex).ParseToDate();
                                    //                      //Get time.
                                    Time timeDeliveryTime = strDeliveryDate.Substring(intCommaIndex + 1).ParseToTime();
                                    //                      //Build ztime object for delivery date.
                                    ZonedTime ztimeDeliveryDate = ZonedTimeTools.ztimeCSTToASpecificTimeZone(
                                        dateDelivaryDate, timeDeliveryTime, ps_I.strTimeZone);

                                    //                      //Assign delivery date converted
                                    strDeliveryDate = ztimeDeliveryDate.Date.ToString() + ", " +
                                        ztimeDeliveryDate.Time.ToString().Substring(0, 5);
                                }

                                if (
                                    boolWFJobReady
                                    )
                                {
                                    bool boolJobHasSizeAttributte = true;
                                    if (
                                        //                  //The size is set
                                        boolJobWFHasSizeSet
                                        )
                                    {
                                        //                  //Verify if the job has size attribute.
                                        double numWidth = 0.0;
                                        double? numnHeigth = 0.0;
                                        String strDimensionJobOriginal = "";
                                        CalCalculation.subGetWidthAndLengthOutput(jobjson, "in", ref numWidth,
                                            ref numnHeigth, ref strDimensionJobOriginal, ref intStatus_IO,
                                            ref strUserMessage_IO, ref strDevMessage_IO);
                                        boolJobHasSizeAttributte = intStatus_IO == 200 ? true : false;
                                    }

                                    boolWFJobReady = boolAllResourcesAreAvailable &&
                                        boolAllResourcesHaveAnAccount && boolAllCalculationsByProcessHaveAnAccount &&
                                        boolAllCalculationsByProductHaveAnAccount && boolIsNotEstimate &&
                                        boolJobHasSizeAttributte;
                                }

                                //                          //Set price, cost and profit for a job.
                                //                          //Get the job's stage.
                                double numJobPrice = 0;
                                double numJobCost = 0;
                                double numJobProfit = 0;
                                double numJobFinalProfit = 0;
                                ProdtypProductType.subGetJobPriceCostAndProfit(prodtyp, jobjson, numCostByProduct,
                                    darrpiwjson1, intPkWorkflow_I, ref numJobPrice, ref numJobCost, numJobExtraCost,
                                    ref numJobProfit, ref numJobFinalCost, ref numJobFinalProfit);

                                //                          //Job quantity.
                                int intJobQuantity = 0;
                                if (
                                    jobjson.intnQuantity != null
                                    )
                                {
                                    intJobQuantity = (int)jobjson.intnQuantity;
                                }

                                //                          //Getting due dates.
                                String strDueDate;
                                String strDueTime;
                                bool boolIsDueDateReachable;
                                ProdtypProductType.subGetWorkflowDueDateAndCompareItToDeliveryDate(intJobId_I,
                                    strDeliveryDate, ps_I.strTimeZone, out strDueDate, out strDueTime,
                                    out boolIsDueDateReachable);

                                //                          //Verify is job has been invoiced.
                                bool boolInvoiced = false;
                                if (
                                    //                      //Job completed.
                                    jobentity != null &&
                                    jobentity.intStage == JobJob.intCompletedStage &&
                                    jobentity.boolInvoiced
                                    )
                                {
                                    boolInvoiced = true;
                                }

                                //                          //Get strJobNumber
                                String strJobNumber = JobJob.strGetJobNumber(jobjson.intnOrderId,
                                    jobjson.intJobId, ps_I.strPrintshopId, context);

                                //                          //Get wisnet price.
                                //double? numnWisnetPrice = jobjson.numnWisnetPrice != null ? 
                                //    (double)jobjson.numnWisnetPrice : (double?)null;
                                double? numnWisnetPrice =
                                    ProdtypProductType.numnGetJobPriceFromWisnet(jobjson.intJobId, ps_I);

                                //                          //Get price message.
                                String strWisnetMessage = ProdtypProductType.strGetPriceMessage(jobjson.intJobId,
                                    jobjson.numnWisnetPrice, ps_I);

                                wfjjson = new WfjjsonWorkflowJobJson(jobjson.intJobId + "", strJobNumber,
                                    jobjson.strJobTicket, prodtyp.strCustomTypeId, intJobQuantity, prodtyp.intPk,
                                    numCostByProduct.Round(2), darrpiwjson1.ToArray(), numJobPrice.Round(2),
                                    numJobCost.Round(2), numJobFinalCost.Round(2), numJobProfit.Round(2),
                                    numJobFinalProfit.Round(2), boolWFJobReady, boolAllResourcesAreAvailable,
                                    strDeliveryDate, strStage, strDueDate, strDueTime, boolIsDueDateReachable,
                                    boolInvoiced, numnWisnetPrice, strWisnetMessage);

                                intStatus_IO = 200;
                                strUserMessage_IO = "Success.";
                                strDevMessage_IO = "";
                            }
                        }
                    }
                }
            }
            return wfjjson;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static double? numnGetJobPriceFromWisnet(
            //                                              //Get the price from wisnet for a given jobId

            int intJobId_I,
            PsPrintShop ps_I
            )
        {
            double? numnGetJobPriceFromWisnet = null;

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get price from wisnet.
            String strUrlWisnet = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build().GetSection(
                "Odyssey2Settings")["urlWisnetApi"];
            Task<double?> Task_numnResult = HttpTools<TjsonTJson>.GetJobWisnetPrice(strUrlWisnet + "/Job/getPrice/" +
                ps_I.strPrintshopId + "/" + intJobId_I);
            Task_numnResult.Wait();

            if (
                Task_numnResult.Result != -1
                )
            {
                numnGetJobPriceFromWisnet = Task_numnResult.Result;
            }

            return numnGetJobPriceFromWisnet;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static String strGetPriceMessage(
            //                                              //Obtain the message to be shown in the workflow about 
            //                                              //      job's price.

            int intJobId_I,
            double? numnWisnetPrice_I,
            PsPrintShop ps_I
            )
        {
            String strPriceMessage = "";

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get job's jobjsob register in order to know the price.
            JobjsonentityJobJsonEntityDB jobjsonentity = context.JobJson.FirstOrDefault(job =>
                job.intJobID == intJobId_I && job.strPrintshopId == ps_I.strPrintshopId);

            /*CASE*/
            if (
                //                                          //There is a price given at wisnet.
                numnWisnetPrice_I != null &&
                (jobjsonentity != null && jobjsonentity.strPrice == null)
                )
            {
                strPriceMessage = "Price from website.";
            }
            else if (
                //                                          //There is a price given at oddyseey. Approbed in odyssey2
                numnWisnetPrice_I == null &&
                (jobjsonentity != null && jobjsonentity.strPrice != null)
                )
            {
                strPriceMessage = "Price from odyssey2.0.";
            }
            else if (
                //                                          //There are both wisnet and odyssey2 price.
                numnWisnetPrice_I != null &&
                (jobjsonentity != null && jobjsonentity.strPrice != null)
                )
            {
                strPriceMessage = ProdtypProductType.boolWisnetAndOdysseyPriceAreEqual(numnWisnetPrice_I,
                    jobjsonentity.strPrice) ? "Price from odyssey2.0." : "Price from odyssey2.0. but was" +
                    " updated at website";
            }
            else if (
                //                                          //There neither odyssey or wisnet price.
                numnWisnetPrice_I == null &&
                (jobjsonentity != null && jobjsonentity.strPrice == null)
                )
            {
                strPriceMessage = "";
            }
            /*END-CASE*/

            return strPriceMessage;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolWisnetAndOdysseyPriceAreEqual(
            //                                              //Verify if the prices from wisnet and odyssey2.0 are the
            //                                              //      same.

            double? numnWisnetPrice_I,
            String strPriceFromJobJson_I
            )
        {
            bool boolWisnetAndOdysseyPriceAreEqual = false;
            //                                              //Get position of the pipe.(to know if there are more than
            //                                              //      1 price)
            int intPipePos = strPriceFromJobJson_I.IndexOf('|');

            //                                              //There are more than 1 price.
            if (
                intPipePos >= 0
                )
            {
                //                                          //Get each price.
                String[] strPrices = strPriceFromJobJson_I.Split('|');

                //                                          //If one of the three stored prices is equal to wisnet's
                //                                          //      price, set true.
                boolWisnetAndOdysseyPriceAreEqual = (strPrices[0].ParseToNum() == numnWisnetPrice_I ||
                    strPrices[1].ParseToNum() == numnWisnetPrice_I || strPrices[2].ParseToNum() == numnWisnetPrice_I) ?
                    true : false;
            }
            else
            {
                boolWisnetAndOdysseyPriceAreEqual = numnWisnetPrice_I == strPriceFromJobJson_I.ParseToNum();
            }

            return boolWisnetAndOdysseyPriceAreEqual;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static ProdtypProductType GetProductTypeUpdated(
            PsPrintShop ps_I,
            String strProductName_I,
            int intProductKey_I,
            bool boolIsLocal_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get data local in case there is no Wisnet Conection.
            //                                              //Find product from local database.
            //                                              //ProductKey has an index, it is for eficency.
            List<EtentityElementTypeEntityDB> darretentityProduct = context.ElementType.Where(et =>
                et.intWebsiteProductKey == intProductKey_I).ToList();
            EtentityElementTypeEntityDB etentityProduct = darretentityProduct.FirstOrDefault(et =>
            et.intPrintshopPk == ps_I.intPk && et.strCustomTypeId == strProductName_I);

            //                                              //Local data product.
            ProdtypProductType prodtypUpdated = etentityProduct != null ? (ProdtypProductType)EtElementTypeAbstract.
                    etFromDB(etentityProduct.intPk) : null;

            if (
                //                                          //Explicit look for updated data from Wisnet.
                !boolIsLocal_I ||
                //                                          //Local is OK, but there is no local data.
                (boolIsLocal_I && (prodtypUpdated == null))
                )
            {
                //                                          //Get data from Wisnet.
                String strUrlWisnet = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build().
                    GetSection("Odyssey2Settings")["urlWisnetApi"];

                Task<List<ProdjsonProductJson>> Task_darrprodjsonFromWisnet = HttpTools<ProdjsonProductJson>.
                        GetListAsyncToEndPoint(strUrlWisnet + "/PrintShopData/printshopCategories/" +
                        ps_I.strPrintshopId + "/" + (intProductKey_I + ""));

                Task_darrprodjsonFromWisnet.Wait();

                if (
                    Task_darrprodjsonFromWisnet.Result != null
                    )
                {
                    //                                      //Final array of products from Wisnet.
                    List<ProdjsonProductJson> darrprodjsonFromWisnet = Task_darrprodjsonFromWisnet.Result;

                    if (
                        darrprodjsonFromWisnet.Count == 1
                        )
                    {
                        ProdjsonProductJson prodjsonFromWisnet = darrprodjsonFromWisnet[0];

                        String strProductName = string.IsNullOrEmpty(prodjsonFromWisnet.strProductName) ? "Unassigned" :
                            prodjsonFromWisnet.strProductName;

                        if (
                            //                              //No product in databse.
                            etentityProduct == null
                            )
                        {
                            //                              //Add the info to the database.
                            EtentityElementTypeEntityDB etentity = new EtentityElementTypeEntityDB
                            {
                                strXJDFTypeId = EtElementTypeAbstract.strNotXJDF,
                                strAddedBy = ps_I.strPrintshopId,
                                intPrintshopPk = ps_I.intPk,
                                strCustomTypeId = strProductName,
                                strCategory = prodjsonFromWisnet.strCategory,
                                strResOrPro = EtElementTypeAbstract.strProduct,
                                intWebsiteProductKey = prodjsonFromWisnet.intProductKey,
                                boolnIsPublic = prodjsonFromWisnet.boolIsPublic
                            };
                            context.ElementType.Add(etentity);
                            context.SaveChanges();
                        }
                        else
                        {
                            //                              //Update the info to the database.
                            etentityProduct.boolnIsPublic = prodjsonFromWisnet.boolIsPublic;
                            etentityProduct.strCategory = prodjsonFromWisnet.strCategory;
                            etentityProduct.boolDeleted = false;
                            context.ElementType.Update(etentityProduct);
                            context.SaveChanges();
                        }

                        //                                  //Find product from the updated database.
                        darretentityProduct = context.ElementType.Where(et =>
                            et.intWebsiteProductKey == intProductKey_I).ToList();
                        etentityProduct = darretentityProduct.FirstOrDefault(et =>
                        et.intPrintshopPk == ps_I.intPk && et.strCustomTypeId == strProductName_I);

                        //                                  //Update the product.
                        prodtypUpdated = (ProdtypProductType)EtElementTypeAbstract.
                            etFromDB(etentityProduct.intPk);
                    }
                }
            }
            return prodtypUpdated;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetWorkflowValidWay(
            //                                              //Look for the only one possible way for a workflow
            //                                              //      considering job's conditions.

            int intPkWorkflow_I,
            JobjsonJobJson jobjson_I,
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_O,
            out List<DynLkjsonDynamicLinkJson> darrdynlkjson_O
            )
        {
            darrpiwentity_O = new List<PiwentityProcessInWorkflowEntityDB>();
            darrdynlkjson_O = new List<DynLkjsonDynamicLinkJson>();
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = context.ProcessInWorkflow.Where(piw =>
                piw.intPkWorkflow == intPkWorkflow_I).ToList();

            //                                              //There is at least one piw.
            if (
                darrpiwentity.Count > 0
                )
            {
                //                                          //To add each piw in the way.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityToReturn =
                    new List<PiwentityProcessInWorkflowEntityDB>();

                //                                          //To add others starts process.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityOtherStartProcesses =
                    new List<PiwentityProcessInWorkflowEntityDB>();

                //                                          //To add dynamicLinks.
                List<DynLkjsonDynamicLinkJson> darrdynlkjson = new List<DynLkjsonDynamicLinkJson>();

                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityCanStart;
                List<IoentityInputsAndOutputsEntityDB> ioentityNodeCanStart;

                //                                          //Get all the those processes and nodes where we can start 
                //                                          //      our workflow.
                ProdtypProductType.subProcessesAndNodeWhereWFCanStart(intPkWorkflow_I, darrpiwentity,
                    out darrpiwentityCanStart, out ioentityNodeCanStart);

                //                                          //List of nodes.
                List<LinknodLinkNodeEntityDB> darrlinknodeentity = context.LinkNode.Where(lk =>
                    lk.intPkWorkflow == intPkWorkflow_I).ToList();

                //                                          //To be use when dynamicLink needs to be create.
                int? intnPiwO = null;
                int? intnPkEleetOrEleeleO = null;
                bool boolIsEleetO = false;
                String strLinkO = "";
                bool boolShowPIW = false;
                int intCurrentWay = 0;
                int intValidWayNumber = 0;

                foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentityCanStart)
                {
                    int intNumberOfFinalProduct = 0;
                    intCurrentWay = intCurrentWay + 1;
                    //                                      //Get the first piw.
                    PiwentityProcessInWorkflowEntityDB piwentityFirst = piwentity;

                    if (
                        !darrpiwentityToReturn.Exists(piw => piw.intPk == piwentityFirst.intPk)
                        )
                    {
                        //                                  //Verify if that piw has a final product.
                        IoentityInputsAndOutputsEntityDB ioentityFinalProduct =
                           context.InputsAndOutputs.FirstOrDefault(io =>
                           io.intPkWorkflow == piwentityFirst.intPkWorkflow &&
                           io.intnProcessInWorkflowId == piwentityFirst.intProcessInWorkflowId &&
                           io.boolnIsFinalProduct == true);

                        //                                  //Final product exists.
                        intNumberOfFinalProduct = (ioentityFinalProduct != null) ? (1 + intNumberOfFinalProduct)
                            : intNumberOfFinalProduct;
                        if (
                            intCurrentWay == 1
                            )
                        {
                            darrpiwentityToReturn.Add(piwentityFirst);
                        }
                        else
                        {
                            darrpiwentityOtherStartProcesses.Add(piwentityFirst);
                        }
                    }

                    //                                      //Get IOs for the piw.
                    List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                        io.intPkWorkflow == piwentityFirst.intPkWorkflow &&
                        io.intnProcessInWorkflowId == piwentityFirst.intProcessInWorkflowId &&
                        io.strLink != null).ToList();

                    List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO =
                                    new List<IoentityInputsAndOutputsEntityDB>();

                    //                                  //Keep only links for outputs.
                    foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                    {
                        if (
                            ioentity.intnPkElementElementType != null
                            )
                        {
                            EleetentityElementElementTypeEntityDB eleetentity =
                                context.ElementElementType.FirstOrDefault(eleet =>
                                eleet.intPk == ioentity.intnPkElementElementType);
                            if (
                                !eleetentity.boolUsage
                                )
                            {
                                darrioentityNodeIO.Add(ioentity);
                            }
                        }
                        else
                        {
                            EleeleentityElementElementEntityDB eleeleentity =
                                context.ElementElement.FirstOrDefault(ele =>
                                ele.intPk == ioentity.intnPkElementElement);
                            if (
                                !eleeleentity.boolUsage
                                )
                            {
                                darrioentityNodeIO.Add(ioentity);
                            }
                        }
                    }

                    int intK = 0;
                    while (
                        (intNumberOfFinalProduct <= 1 &&
                        intK < darrioentityNodeIO.Count)
                        )
                    {
                        ProdtypProductType.subEvaluateWaysRecursive(intCurrentWay, ref intnPiwO, ref intnPkEleetOrEleeleO,
                            ref boolIsEleetO, ref strLinkO, ref darrpiwentityToReturn, ref intNumberOfFinalProduct,
                            ref darrdynlkjson, ref darrlinknodeentity, darrioentityNodeIO[intK], jobjson_I, true,
                            ref boolShowPIW, ref intValidWayNumber);
                        intK++;
                    }

                    if (
                        intNumberOfFinalProduct == 1
                        )
                    {
                        intValidWayNumber = intValidWayNumber + 1;
                    }
                    else if (
                        intNumberOfFinalProduct > 1
                        )
                    {
                        intValidWayNumber = intValidWayNumber + intNumberOfFinalProduct;
                        darrpiwentityToReturn.Remove(piwentityFirst);
                        darrpiwentityOtherStartProcesses.Remove(piwentityFirst);
                    }

                }

                if (
                    darrpiwentityCanStart.Count == 0 ||
                    (darrpiwentityCanStart.Count > 0 && intValidWayNumber == 1)
                    )
                {
                    foreach (IoentityInputsAndOutputsEntityDB ioentityNode in ioentityNodeCanStart)
                    {
                        intnPiwO = -1;
                        ProdtypProductType.subEvaluateWaysRecursive(intCurrentWay, ref intnPiwO, ref intnPkEleetOrEleeleO,
                            ref boolIsEleetO, ref strLinkO, ref darrpiwentityToReturn, ref intValidWayNumber,
                            ref darrdynlkjson, ref darrlinknodeentity, ioentityNode, jobjson_I, false, ref boolShowPIW,
                            ref intValidWayNumber);
                    }
                }

                if (
                    //                                      //There is only one final product or only one way.
                    intValidWayNumber == 1
                    )
                {
                    //                                          //Join processes.
                    darrpiwentityOtherStartProcesses.AddRange(darrpiwentityToReturn);

                    darrpiwentity_O = darrpiwentityOtherStartProcesses;
                    darrdynlkjson_O = darrdynlkjson;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subProcessesAndNodeWhereWFCanStart(
            //                                              //Evaluate the complete workflow and return those processes
            //                                              //      that does not have link at IOs (input). and those
            //                                              //      nodes that does not have link with IOs (input).

            int intPkWorkflow_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityCanStart_O,
            out List<IoentityInputsAndOutputsEntityDB> ioentityNodeCanStart_O
            )
        {
            darrpiwentityCanStart_O = new List<PiwentityProcessInWorkflowEntityDB>();
            ioentityNodeCanStart_O = new List<IoentityInputsAndOutputsEntityDB>();

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get process without links and IOs inputs.
            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity_I)
            {
                //                                          //Get all IOs with link.
                List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == piwentity.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                    (io.intnPkElementElementType != null || io.intnPkElementElement != null) &&
                    io.strLink != null).ToList();

                bool boolPiwHasLinksAtInputs = ProdtypProductType.boolVerifyIfLinkIsInputOrOutputSide(darrioentity, true);

                if (
                    //                                      //Piw has not links at input side.
                    !boolPiwHasLinksAtInputs
                    )
                {
                    darrpiwentityCanStart_O.Add(piwentity);
                }
            }

            //                                              //Get nodes without links at IOs output side for this WF.
            List<IoentityInputsAndOutputsEntityDB> darrioentityNodes = context.InputsAndOutputs.Where(io =>
                io.intPkWorkflow == intPkWorkflow_I && io.intnProcessInWorkflowId == null &&
                io.intnPkElementElementType == null && io.intnPkElementElement == null).ToList();

            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodes)
            {
                //                                          //Verify if the node has links Input side.
                List<LinknodLinkNodeEntityDB> darrlinknode = context.LinkNode.Where(lk =>
                lk.intPkWorkflow == intPkWorkflow_I && lk.intPkNodeI == ioentity.intPk).ToList();

                bool boolNodeHasLinksAtOutputs = true;
                if (
                    !(darrlinknode.Count > 0)
                    )
                {
                    //                                          //Get all links of the node with IOs.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIOToCheckInputs =
                        context.InputsAndOutputs.Where(io => io.intPkWorkflow == ioentity.intPkWorkflow &&
                        io.intnProcessInWorkflowId != null && io.strLink == ioentity.strLink &&
                        io.intPk != ioentity.intPk).ToList();

                    boolNodeHasLinksAtOutputs = ProdtypProductType.boolVerifyIfLinkIsInputOrOutputSide(
                            darrioentityNodeIOToCheckInputs, false);
                }

                if (
                    //                                      //Piw has not links at input side.
                    !boolNodeHasLinksAtOutputs
                    )
                {
                    ioentityNodeCanStart_O.Add(ioentity);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolVerifyIfLinkIsInputOrOutputSide(
            //                                              //Verify if the links of a given piw are at input side.
            //                                              //True, if the piw has links at input side.

            List<IoentityInputsAndOutputsEntityDB> darrioentity_I,
            bool boolVerifyInput_I
            )
        {
            bool boolVerifyIfLinkIsInputOrOutputSide = false;

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            int intI = 0;
            /*WHILE*/
            while (
                !boolVerifyIfLinkIsInputOrOutputSide &&
                intI < darrioentity_I.Count
                )
            {
                //                                          //Get the io.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentity_I[intI];

                //                                          //Verify if the io is input or output.

                if (
                    ioentity.intnPkElementElementType != null
                    )
                {
                    EleetentityElementElementTypeEntityDB eleetentity =
                        context.ElementElementType.FirstOrDefault(eleet =>
                        eleet.intPk == ioentity.intnPkElementElementType);
                    if (
                        boolVerifyInput_I
                        )
                    {
                        if (
                            eleetentity.boolUsage
                        )
                        {
                            boolVerifyIfLinkIsInputOrOutputSide = true;
                        }
                    }
                    else
                    {
                        if (
                            !eleetentity.boolUsage
                        )
                        {
                            boolVerifyIfLinkIsInputOrOutputSide = true;
                        }
                    }

                }
                else
                {
                    EleeleentityElementElementEntityDB eleeleentity =
                        context.ElementElement.FirstOrDefault(eleele =>
                        eleele.intPk == ioentity.intnPkElementElement);

                    if (
                        boolVerifyInput_I
                        )
                    {
                        if (
                        eleeleentity.boolDeleted
                        )
                        {
                            boolVerifyIfLinkIsInputOrOutputSide = true;
                        }
                    }
                    else
                    {
                        if (
                        !eleeleentity.boolDeleted
                        )
                        {
                            boolVerifyIfLinkIsInputOrOutputSide = true;
                        }
                    }

                }
                intI++;
            }

            return boolVerifyIfLinkIsInputOrOutputSide;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subEvaluateWaysRecursive(
            //                                              //Verify the complete workflow and return a workflow than 
            //                                              //      match with the conditions.

            int intCurrentWay_I,
            ref int? intnPiwO_IO,
            ref int? intnPkEleetOrEleeleO_IO,
            ref bool boolIsEleetO_IO,
            ref String strLinkO_IO,
            ref List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_IO,
            ref int intWaysWithFinalProduct_IO,
            ref List<DynLkjsonDynamicLinkJson> darrdynlkjson_IO,
            ref List<LinknodLinkNodeEntityDB> darrlinknodeentity_IO,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            JobjsonJobJson jobjson_I,
            bool boolIsIO_I,
            ref bool boolShowPIW_IO,
            ref int intValidWayNumber_IO
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            if (
                //                                          //We receive an ioentity as an IO.
                boolIsIO_I
                )
            {
                //                                          //Get other side of link.
                List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSideLink = context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == ioentity_I.intPkWorkflow &&
                    io.intPk != ioentity_I.intPk && io.strLink == ioentity_I.strLink).ToList();

                IoentityInputsAndOutputsEntityDB ioentityOtherSideLink = null;
                if (
                    darrioentityOtherSideLink.Count >= 2
                    )
                {
                    ioentityOtherSideLink = darrioentityOtherSideLink.FirstOrDefault(io =>
                    io.intnPkElementElementType == null &&
                    io.intnPkElementElement == null);
                }
                else
                {
                    ioentityOtherSideLink = darrioentityOtherSideLink[0];
                }


                if (
                    //                                      //There is only one final product.
                    intWaysWithFinalProduct_IO > 1 ||
                    //                                      //Thera are links.
                    ioentityOtherSideLink != null
                    )
                {
                    //                                      //Can be either node or io.
                    if (
                        //                                  //It's a link with an io.
                        ioentityOtherSideLink.intnPkElementElementType != null ||
                        ioentityOtherSideLink.intnPkElementElement != null
                        )
                    {
                        //                                  //Get piw to add to list of piw to return.
                        PiwentityProcessInWorkflowEntityDB piwentityToAdd =
                            context.ProcessInWorkflow.FirstOrDefault(piw =>
                            piw.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                            piw.intProcessInWorkflowId == ioentityOtherSideLink.intnProcessInWorkflowId);

                        if (
                            !darrpiwentity_IO.Exists(piw => piw.intPk == piwentityToAdd.intPk)
                            )
                        {
                            //                                  //Verify if that piw has a final product.
                            IoentityInputsAndOutputsEntityDB ioentityFinalProduct =
                               context.InputsAndOutputs.FirstOrDefault(io =>
                               io.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                               io.intnProcessInWorkflowId == ioentityOtherSideLink.intnProcessInWorkflowId &&
                               io.boolnIsFinalProduct == true);

                            //                                  //Final product exists.
                            intWaysWithFinalProduct_IO = (ioentityFinalProduct != null) ? (1 + intWaysWithFinalProduct_IO)
                                : intWaysWithFinalProduct_IO;

                            darrpiwentity_IO.Add(piwentityToAdd);
                        }

                        //                                  //Get IOs for the piw.
                        List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                            io.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                            io.intnProcessInWorkflowId == ioentityOtherSideLink.intnProcessInWorkflowId &&
                            io.strLink != null && io.strLink != ioentity_I.strLink).ToList();

                        List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO =
                                        new List<IoentityInputsAndOutputsEntityDB>();

                        //                                  //Keep only links for outputs.
                        foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                        {
                            if (
                                ioentity.intnPkElementElementType != null
                                )
                            {
                                EleetentityElementElementTypeEntityDB eleetentity =
                                    context.ElementElementType.FirstOrDefault(eleet =>
                                    eleet.intPk == ioentity.intnPkElementElementType);
                                if (
                                    !eleetentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO.Add(ioentity);
                                }
                            }
                            else
                            {
                                EleeleentityElementElementEntityDB eleeleentity =
                                    context.ElementElement.FirstOrDefault(ele =>
                                    ele.intPk == ioentity.intnPkElementElement);
                                if (
                                    !eleeleentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO.Add(ioentity);
                                }
                            }
                        }

                        foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodeIO)
                        {
                            ProdtypProductType.subEvaluateWaysRecursive(intCurrentWay_I, ref intnPiwO_IO, ref intnPkEleetOrEleeleO_IO,
                                ref boolIsEleetO_IO, ref strLinkO_IO, ref darrpiwentity_IO,
                                ref intWaysWithFinalProduct_IO, ref darrdynlkjson_IO, ref darrlinknodeentity_IO,
                                ioentity, jobjson_I, true, ref boolShowPIW_IO, ref intValidWayNumber_IO);
                        }
                    }
                    else
                    {
                        //                                  //It's a link with a node.

                        //                                  //Verify each posibility and after evaluate them we have to
                        //                                  //      have just one.
                        //                                  //If we have to or more posibilities, we are indetermined 
                        //                                  //      and we wont continue evaluating.

                        //                                  //To be add to dynamicLinks list.

                        //                                  //Get the piw that will be use as In in the dynamicLinks
                        //                                  //      list.
                        PiwentityProcessInWorkflowEntityDB piwentityAsIn =
                            context.ProcessInWorkflow.FirstOrDefault(piw =>
                            piw.intPkWorkflow == ioentity_I.intPkWorkflow &&
                            piw.intProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId);

                        intnPiwO_IO = piwentityAsIn.intPk;
                        intnPkEleetOrEleeleO_IO = (ioentity_I.intnPkElementElementType != null) ?
                            (int)ioentity_I.intnPkElementElementType : (int)ioentity_I.intnPkElementElement;
                        boolIsEleetO_IO = (ioentity_I.intnPkElementElementType != null) ? true : false;
                        strLinkO_IO = ioentity_I.strLink;

                        //                                  //Get all links of the node with IOs.
                        List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIOToCheckInputs =
                            context.InputsAndOutputs.Where(io =>
                            io.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                            io.intnProcessInWorkflowId != null &&
                            io.strLink == ioentityOtherSideLink.strLink &&
                            io.intPk != ioentity_I.intPk && io.intPk != ioentityOtherSideLink.intPk).ToList();

                        List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO =
                            new List<IoentityInputsAndOutputsEntityDB>();

                        //                                  //Keep only forward links.
                        foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodeIOToCheckInputs)
                        {
                            if (
                                ioentity.intnPkElementElementType != null
                                )
                            {
                                EleetentityElementElementTypeEntityDB eleetentity =
                                    context.ElementElementType.FirstOrDefault(eleet =>
                                    eleet.intPk == ioentity.intnPkElementElementType);
                                if (
                                    eleetentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO.Add(ioentity);
                                }
                            }
                            else
                            {
                                EleeleentityElementElementEntityDB eleeleentity =
                                    context.ElementElement.FirstOrDefault(ele =>
                                    ele.intPk == ioentity.intnPkElementElement);
                                if (
                                    eleeleentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO.Add(ioentity);
                                }
                            }
                        }

                        int intNumberOfWaysThatApply = 0;
                        IoentityInputsAndOutputsEntityDB ioentityToPass = null;

                        int intK = 0;
                        while (
                            (intNumberOfWaysThatApply <= 1 &
                            intK < darrioentityNodeIO.Count)
                            )
                        {
                            if (
                                //                          //Link applies.
                                Tools.boolCalculationOrLinkApplies(null, null, darrioentityNodeIO[intK].intPk, null,
                                jobjson_I)
                                )
                            {
                                intNumberOfWaysThatApply++;
                                ioentityToPass = darrioentityNodeIO[intK];

                                //                              //Get process to evaluate as second start process.
                                PiwentityProcessInWorkflowEntityDB piwentityToCheck =
                                        context.ProcessInWorkflow.FirstOrDefault(piw => piw.intPkWorkflow == darrioentityNodeIO[intK].intPkWorkflow &&
                                        piw.intProcessInWorkflowId == darrioentityNodeIO[intK].intnProcessInWorkflowId);
                                if (
                                    intCurrentWay_I > 1
                                    )
                                {
                                    if (
                                        !darrpiwentity_IO.Exists(piw => piw.intPk == piwentityToCheck.intPk)
                                        )
                                    {
                                        //                  //Eliminado por DTC 20210514.
                                        //                  //Validar con Back team el borrado definitivo.  Se comentó
                                        //                  //      por error al obtener el path válido. Ya que
                                        //                  //      consideraba un path válido previamente recorrido,
                                        //                  //      como un nuevo path válido.
                                        //intWaysWithFinalProduct_IO = 1;
                                    }
                                }
                            }
                            intK++;
                        }

                        if (
                            //                              //There is only one way. Evaualte node with node
                            intNumberOfWaysThatApply <= 1
                            )
                        {
                            //                              //Get all links of the node with node.
                            List<LinknodLinkNodeEntityDB> darrlinknode = darrlinknodeentity_IO.Where(lk =>
                                lk.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                                lk.intPkNodeO == ioentityOtherSideLink.intPk).ToList();

                            int intJ = 0;
                            while (
                                (intNumberOfWaysThatApply <= 1 &&
                                intJ < darrlinknode.Count)
                                )
                            {
                                //                          //Get Pk io to use.
                                int intPkIO = (darrlinknode[intJ].intPkNodeI == ioentityOtherSideLink.intPk) ?
                                    darrlinknode[intJ].intPkNodeO : darrlinknode[intJ].intPkNodeI;
                                IoentityInputsAndOutputsEntityDB ioentityNodeOut =
                                    context.InputsAndOutputs.FirstOrDefault(io => io.intPk == intPkIO);

                                if (
                                    //                      //Condition applies.
                                    Tools.boolCalculationOrLinkApplies(null, darrlinknode[intJ].intPk, null, null,
                                    jobjson_I)
                                    )
                                {
                                    intNumberOfWaysThatApply++;
                                    ioentityToPass = ioentityNodeOut;
                                }

                                darrlinknodeentity_IO.Remove(darrlinknode[intJ]);

                                intJ++;
                            }
                        }

                        if (
                            //                              //There is more than one way.
                            intNumberOfWaysThatApply >= 2 ||
                            //                              //None of posibilities apply.
                            ioentityToPass == null
                            )
                        {
                            if (
                                intWaysWithFinalProduct_IO == 1
                                )
                            {
                                boolShowPIW_IO = true;
                            }
                            intWaysWithFinalProduct_IO = intWaysWithFinalProduct_IO + 2;

                        }
                        else
                        {
                            //                              //To easy code.
                            PiwentityProcessInWorkflowEntityDB piwentitySameWay =

                                new PiwentityProcessInWorkflowEntityDB();

                            if (
                                ioentityToPass.intnProcessInWorkflowId != null
                                )
                            {
                                piwentitySameWay =
                                context.ProcessInWorkflow.FirstOrDefault(piw =>
                                piw.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                                piw.intProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId);
                            }

                            //                              //Llegamos aqui si solo tenemos 1 camino.
                            //                              //Ahora evaluareos si es un camino diferente.
                            if (
                                !darrpiwentity_IO.Exists(piw => piw.intPk == piwentitySameWay.intPk)
                                )
                            {
                                //                          //No es el mismo camino.
                                if (
                                    //                      //It´s an IO tha represent a Node.
                                    ioentityToPass.intnPkElementElementType == null &&
                                    ioentityToPass.intnPkElementElement == null
                                    )
                                {
                                    //                      //Call recursive method. 
                                    ProdtypProductType.subEvaluateWaysRecursive(intCurrentWay_I, ref intnPiwO_IO,
                                        ref intnPkEleetOrEleeleO_IO, ref boolIsEleetO_IO, ref strLinkO_IO,
                                        ref darrpiwentity_IO, ref intWaysWithFinalProduct_IO, ref darrdynlkjson_IO,
                                        ref darrlinknodeentity_IO, ioentityToPass, jobjson_I, false,
                                        ref boolShowPIW_IO, ref intValidWayNumber_IO);
                                }
                                else
                                {
                                    //                      //It´s an io.
                                    //                      //Get piw to add to list of piw to return.
                                    PiwentityProcessInWorkflowEntityDB piwentityToAdd =
                                        context.ProcessInWorkflow.FirstOrDefault(piw =>
                                        piw.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                                        piw.intProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId);

                                    //                      //Verify if that piw has a final product.
                                    IoentityInputsAndOutputsEntityDB ioentityFinalProduct =
                                       context.InputsAndOutputs.FirstOrDefault(io =>
                                       io.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                                       io.intnProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId &&
                                       io.boolnIsFinalProduct == true);

                                    //                      //Final product exists.
                                    intWaysWithFinalProduct_IO = (ioentityFinalProduct != null) ?
                                        (1 + intWaysWithFinalProduct_IO) : intWaysWithFinalProduct_IO;

                                    darrpiwentity_IO.Add(piwentityToAdd);

                                    //                      //Get IOs for the piw.
                                    List<IoentityInputsAndOutputsEntityDB> darrioentity =
                                        context.InputsAndOutputs.Where(io =>
                                        io.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                                        io.intnProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId &&
                                        io.strLink != null && io.strLink != ioentityToPass.strLink).ToList();

                                    List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO1 =
                                                    new List<IoentityInputsAndOutputsEntityDB>();

                                    //                      //Keep only links for outputs.
                                    foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                                    {
                                        if (
                                            ioentity.intnPkElementElementType != null
                                            )
                                        {
                                            EleetentityElementElementTypeEntityDB eleetentity =
                                                context.ElementElementType.FirstOrDefault(eleet =>
                                                eleet.intPk == ioentity.intnPkElementElementType);
                                            if (
                                                !eleetentity.boolUsage
                                                )
                                            {
                                                darrioentityNodeIO1.Add(ioentity);
                                            }
                                        }
                                        else
                                        {
                                            EleeleentityElementElementEntityDB eleeleentity =
                                                context.ElementElement.FirstOrDefault(ele =>
                                                ele.intPk == ioentity.intnPkElementElement);
                                            if (
                                                !eleeleentity.boolUsage
                                                )
                                            {
                                                darrioentityNodeIO1.Add(ioentity);
                                            }
                                        }
                                    }

                                    foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodeIO1)
                                    {
                                        ProdtypProductType.subEvaluateWaysRecursive(intCurrentWay_I, ref intnPiwO_IO,
                                            ref intnPkEleetOrEleeleO_IO, ref boolIsEleetO_IO, ref strLinkO_IO,
                                            ref darrpiwentity_IO, ref intWaysWithFinalProduct_IO, ref darrdynlkjson_IO,
                                            ref darrlinknodeentity_IO, ioentity, jobjson_I, true, ref boolShowPIW_IO,
                                            ref intValidWayNumber_IO);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                //                                          //We receive an ioentity as node.

                //                                          //Verify each posibility and after evaluate them we have to
                //                                          //      have just one.
                //                                          //If we have two or more posibilities, we are indetermined 
                //                                          //      and we wont continue evaluating.

                //                                          //Get all links of the node with IOs.
                List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIOToCheckInputs =
                    context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == ioentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId != null &&
                    io.strLink == ioentity_I.strLink &&
                    io.intPk != ioentity_I.intPk).ToList();

                List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO =
                            new List<IoentityInputsAndOutputsEntityDB>();

                //                                  //Keep only forward links.
                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodeIOToCheckInputs)
                {
                    if (
                        ioentity.intnPkElementElementType != null
                        )
                    {
                        EleetentityElementElementTypeEntityDB eleetentity =
                            context.ElementElementType.FirstOrDefault(eleet =>
                            eleet.intPk == ioentity.intnPkElementElementType);
                        if (
                            eleetentity.boolUsage
                            )
                        {
                            darrioentityNodeIO.Add(ioentity);
                        }
                    }
                    else
                    {
                        EleeleentityElementElementEntityDB eleeleentity =
                            context.ElementElement.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkElementElement);
                        if (
                            eleeleentity.boolUsage
                            )
                        {
                            darrioentityNodeIO.Add(ioentity);
                        }
                    }
                }

                int intNumberOfWaysThatApply = 0;
                IoentityInputsAndOutputsEntityDB ioentityToPass = null;

                int intK = 0;
                while (
                    (intNumberOfWaysThatApply <= 1 &&
                    intK < darrioentityNodeIO.Count)
                    )
                {
                    if (
                        //                                  //Condition applies.
                        Tools.boolCalculationOrLinkApplies(null, null, darrioentityNodeIO[intK].intPk, null, jobjson_I)
                        )
                    {
                        intNumberOfWaysThatApply++;
                        ioentityToPass = darrioentityNodeIO[intK];
                    }

                    intK++;
                }

                if (
                    //                                      //There is only one way.
                    intNumberOfWaysThatApply <= 1
                    )
                {
                    //                                      //Get all links of the node with node.
                    List<LinknodLinkNodeEntityDB> darrlinknode = darrlinknodeentity_IO.Where(lk =>
                        lk.intPkWorkflow == ioentity_I.intPkWorkflow &&
                        lk.intPkNodeO == ioentity_I.intPk).ToList();

                    int intJ = 0;
                    while (
                        (intNumberOfWaysThatApply <= 1 &&
                        intJ < darrlinknode.Count)
                        )
                    {
                        //                                  //Get Pk io to use.
                        int intPkIO = (darrlinknode[intJ].intPkNodeI == ioentity_I.intPk) ?
                            darrlinknode[intJ].intPkNodeO : darrlinknode[intJ].intPkNodeI;
                        IoentityInputsAndOutputsEntityDB ioentityNodeOut =
                            context.InputsAndOutputs.FirstOrDefault(io => io.intPk == intPkIO);

                        if (
                            //                              //Condition applies.
                            Tools.boolCalculationOrLinkApplies(null, darrlinknode[intJ].intPk, null, null,
                            jobjson_I)
                            )
                        {
                            intNumberOfWaysThatApply++;
                            ioentityToPass = ioentityNodeOut;
                        }

                        darrlinknodeentity_IO.Remove(darrlinknode[intJ]);

                        intJ++;
                    }
                }

                if (
                    //                                      //There is more than one way.
                    intNumberOfWaysThatApply >= 2 ||
                    //                                      //None of posibilities apply.
                    ioentityToPass == null
                    )
                {
                    if (
                        intWaysWithFinalProduct_IO == 1
                        )
                    {
                        boolShowPIW_IO = true;
                    }
                    intWaysWithFinalProduct_IO = intWaysWithFinalProduct_IO + 2;
                }
                else
                {
                    if (
                        //                                  //It´s an IO tha represent a Node.
                        ioentityToPass.intnPkElementElementType == null &&
                        ioentityToPass.intnPkElementElement == null
                        )
                    {
                        //                                  //Call recursive method.
                        ProdtypProductType.subEvaluateWaysRecursive(intCurrentWay_I, ref intnPiwO_IO,
                            ref intnPkEleetOrEleeleO_IO, ref boolIsEleetO_IO, ref strLinkO_IO, ref darrpiwentity_IO,
                            ref intWaysWithFinalProduct_IO, ref darrdynlkjson_IO, ref darrlinknodeentity_IO,
                            ioentityToPass, jobjson_I, false, ref boolShowPIW_IO, ref intValidWayNumber_IO);
                    }
                    else
                    {
                        //                                  //It´s an io.
                        //                                  //Get piw to add to list of piw to return.
                        PiwentityProcessInWorkflowEntityDB piwentityToAdd =
                            context.ProcessInWorkflow.FirstOrDefault(piw =>
                            piw.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                            piw.intProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId);

                        //                                  //Only if the process has not been added yet, we added to
                        //                                  //      process list to send back.
                        if (
                            !darrpiwentity_IO.Exists(piw => piw.intPk == piwentityToAdd.intPk)
                            )
                        {
                            darrpiwentity_IO.Add(piwentityToAdd);

                            //                                  //Verify if that piw has a final product.
                            IoentityInputsAndOutputsEntityDB ioentityFinalProduct =
                               context.InputsAndOutputs.FirstOrDefault(io =>
                               io.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                               io.intnProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId &&
                               io.boolnIsFinalProduct == true);

                            //                                  //Final product exists.
                            intWaysWithFinalProduct_IO = (ioentityFinalProduct != null) ? (1 + intWaysWithFinalProduct_IO)
                                : intWaysWithFinalProduct_IO;

                            if (
                                intnPiwO_IO != -1
                                )
                            {
                                //                              //To use to fill the dynamicLink.
                                int? intnPiwI = piwentityToAdd.intPk;
                                int? intnPkEleetOrEleeleI = (ioentityToPass.intnPkElementElementType != null) ?
                                    (int)ioentityToPass.intnPkElementElementType :
                                    (int)ioentityToPass.intnPkElementElement;
                                bool boolIsEleetI = (ioentityToPass.intnPkElementElementType != null) ? true : false;
                                String strLinkI = ioentityToPass.strLink;

                                //                              //Create dynamicLink.
                                DynLkjsonDynamicLinkJson dynlkjson = new DynLkjsonDynamicLinkJson(intnPiwI,
                                    intnPkEleetOrEleeleI, boolIsEleetI, strLinkI, intnPiwO_IO, intnPkEleetOrEleeleO_IO,
                                    boolIsEleetO_IO, strLinkO_IO);
                                darrdynlkjson_IO.Add(dynlkjson);
                            }

                            //                                  //Re-set variables.
                            intnPiwO_IO = null;
                            intnPkEleetOrEleeleO_IO = null;
                            boolIsEleetO_IO = false;
                            strLinkO_IO = "";

                            //                                  //Get IOs for the piw.
                            List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                                io.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                                io.intnProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId &&
                                io.strLink != null && io.strLink != ioentityToPass.strLink).ToList();

                            //                                  //MANTENER SOLO LOS QUE VAN HACIA DELANTE
                            //                                  //Keep only forward links.
                            List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIOFordward =
                                new List<IoentityInputsAndOutputsEntityDB>();
                            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                            {
                                if (
                                    ioentity.intnPkElementElementType != null
                                    )
                                {
                                    EleetentityElementElementTypeEntityDB eleetentity =
                                        context.ElementElementType.FirstOrDefault(eleet =>
                                        eleet.intPk == ioentity.intnPkElementElementType);
                                    if (
                                        !eleetentity.boolUsage
                                        )
                                    {
                                        darrioentityNodeIOFordward.Add(ioentity);
                                    }
                                }
                                else
                                {
                                    EleeleentityElementElementEntityDB eleeleentity =
                                        context.ElementElement.FirstOrDefault(ele =>
                                        ele.intPk == ioentity.intnPkElementElement);
                                    if (
                                        !eleeleentity.boolUsage
                                        )
                                    {
                                        darrioentityNodeIOFordward.Add(ioentity);
                                    }
                                }
                            }

                            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodeIOFordward)
                            {
                                ProdtypProductType.subEvaluateWaysRecursive(intCurrentWay_I, ref intnPiwO_IO, ref intnPkEleetOrEleeleO_IO,
                                    ref boolIsEleetO_IO, ref strLinkO_IO, ref darrpiwentity_IO,
                                    ref intWaysWithFinalProduct_IO, ref darrdynlkjson_IO, ref darrlinknodeentity_IO,
                                    ioentity, jobjson_I, true, ref boolShowPIW_IO, ref intValidWayNumber_IO);
                            }
                        }                        
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void AddNormalProcess(

            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            ProdtypProductType prodtyp_I,
            PsPrintShop ps_I,
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAllProcess_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNormalProcess_I,
            IConfiguration configuration_I,
            List<Piwjson1ProcessInWorkflowJson1> darrpiwjson1_M,
            //                                              //Cost due to Hourly rate.
            ref double numJobExtraCost_IO,
            ref double numJobFinalCost_IO,
            ref bool boolWorkflowJobIsReady_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            prodtyp_I.subAddCalculationsBasedOnJobStatus(jobentity_I, darrpiwentityAllProcess_I, context);

            //                                              //List of quantityInputs and quantityOutputs.
            //                                              //    for optimization.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity = new List<IoqytjsonIOQuantityJson>();

            //                                              //List of waste to propagate.                          
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson = new List<WstpropjsonWasteToPropagateJson>();

            //                                              //Get the inputs and outputs for every process.
            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentityNormalProcess_I)
            {
                //                                          //The lists are for optimization

                //                                          //Get eleet-s.
                List<EleetentityElementElementTypeEntityDB> darreleetentityAllEleEt =
                    context.ElementElementType.Where(eleet => eleet.intPkElementDad == piwentity.intPkProcess).ToList();

                //                                          //Get eleele-s.
                List<EleeleentityElementElementEntityDB> darreleeleentityAllEleEle = context.ElementElement.Where(
                    eleele => eleele.intPkElementDad == piwentity.intPkProcess).ToList();

                //                                          //Get io-s.
                List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO = context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == piwentity.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                //                                          //Get ioj-s.
                List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ =
                    context.InputsAndOutputsForAJob.Where(ioj => ioj.intPkProcessInWorkflow == piwentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId).ToList();

                if (
                    !prodtyp_I.dicProcessIOs.ContainsKey(piwentity.intPk)
                    )
                {
                    List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2IosFromPIW;
                    ProdtypProductType.subGetProcessInputsAndOutputs(jobjson_I, piwentity, prodtyp_I,
                        darreleeleentityAllEleEle, darreleetentityAllEleEt, out darrioinfrmpiwjson2IosFromPIW);

                    prodtyp_I.dicProcessIOs.Add(piwentity.intPk, darrioinfrmpiwjson2IosFromPIW);
                }

                //                                          //Get the process.
                EleentityElementEntityDB eleentityProcess = context.Element.
                    FirstOrDefault(ele => ele.intPk == piwentity.intPkProcess);

                //                                          //List to Add IO Inputs.
                List<Iojson1InputOrOutputJson1> darriojson1Input = new List<Iojson1InputOrOutputJson1>();

                //                                          //Get the input types.
                bool boolAreInputs = true;

                darriojson1Input.AddRange(prodtyp_I.arriojson1GetTypes(boolAreInputs, jobentity_I, jobjson_I, piwentity,
                    darrdynlkjson_I, darreleetentityAllEleEt, darrioentityAllIO, darriojentityAllIOJ,
                    darrpiwentityAllProcess_I, darrioqytjsonIOQuantity, darrwstpropjson, ref numJobFinalCost_IO,
                    ref boolWorkflowJobIsReady_IO));

                //                                          //Get the input templates.
                darriojson1Input.AddRange(prodtyp_I.arriojson1GetTemplates(boolAreInputs, jobentity_I, jobjson_I,
                    piwentity, darrdynlkjson_I, darreleeleentityAllEleEle, darrioentityAllIO, darriojentityAllIOJ,
                    darrpiwentityAllProcess_I, darrioqytjsonIOQuantity, darrwstpropjson, ref numJobFinalCost_IO,
                    ref boolWorkflowJobIsReady_IO));

                IoqytjsonIOQuantityJson ioqytjsonWasPropagate = darrioqytjsonIOQuantity.FirstOrDefault(
                    ioqyt => ioqyt.intPkProcessInWorkflow == piwentity.intPk);

                //                                          //Get index of the current PIW
                int index = Array.IndexOf(darrpiwentityNormalProcess_I.ToArray(), piwentity);

                if (
                    //                                      //This PIW was not analized or is the first PIW.
                    ioqytjsonWasPropagate == null || index == 0
                    )
                {
                    ProdtypProductType.subPropagateWaste(jobjson_I, piwentity, prodtyp_I, darrwstpropjson,
                        configuration_I, ps_I.strPrintshopId, null, ref darriojson1Input);
                }

                ProdtypProductType.CalculateTime(jobjson_I, piwentity, configuration_I, ps_I.strPrintshopId,
                    ref darriojson1Input, null);

                //                                          //Total extra cost per process.
                //                                          //This variable must be use for inputs and outputs.
                double numProcessExtraCost = 0.0;

                //                                          //Increase cost to input resources that contain an hourly 
                //                                          //      rate.
                ProdtypProductType.subCalculateResourcesHourlyRates(context, ref darriojson1Input,
                    ref numProcessExtraCost);

                //                                          //List to Add IO Outputs.
                List<Iojson1InputOrOutputJson1> darriojson1Output = new List<Iojson1InputOrOutputJson1>();
                boolAreInputs = false;

                //                                          //Get the output types.
                darriojson1Output.AddRange(prodtyp_I.arriojson1GetTypes(boolAreInputs, jobentity_I, jobjson_I,
                    piwentity, darrdynlkjson_I, darreleetentityAllEleEt, darrioentityAllIO, darriojentityAllIOJ,
                    darrpiwentityAllProcess_I, darrioqytjsonIOQuantity, darrwstpropjson, ref numJobFinalCost_IO,
                    ref boolWorkflowJobIsReady_IO));

                //                                          //Get the output templates.
                darriojson1Output.AddRange(prodtyp_I.arriojson1GetTemplates(boolAreInputs, jobentity_I, jobjson_I,
                    piwentity, darrdynlkjson_I, darreleeleentityAllEleEle, darrioentityAllIO, darriojentityAllIOJ,
                    darrpiwentityAllProcess_I, darrioqytjsonIOQuantity, darrwstpropjson, ref numJobFinalCost_IO,
                    ref boolWorkflowJobIsReady_IO));

                //                                          //Each extra cost generated by process will be added to 
                //                                          //      this variable.
                numJobExtraCost_IO = numJobExtraCost_IO + numProcessExtraCost;

                //                                          //By Process data.    

                //                                          //Get the cost By Process.
                List<CostbycaljsonCostByCalculationJson> darrcostbycaljsonPerProcess;
                double numCostByProcess = prodtyp_I.numGetCostByProcess(jobjson_I,
                    piwentity.intPkProcess, piwentity.intPk, ps_I, out darrcostbycaljsonPerProcess,
                    ref numJobFinalCost_IO, ref boolWorkflowJobIsReady_IO);

                //                                          //Get Process Name and Id.
                String strProcessNameAndId = piwentity.intnId != null ? strProcessNameAndId =
                    eleentityProcess.strElementName + " (" + piwentity.intnId + ")" :
                    eleentityProcess.strElementName;

                //                                          //Get Stage, boolCanStart and bool CanBeCompleted.
                int intStage;
                bool boolCanStartProcess;
                bool? boolnCanBeCompleted;
                ProdtypProductType.subCanStartAndCanBeCompleted(ps_I, jobjson_I.intJobId, piwentity, darriojson1Input,
                    //                                      //To review if other side of the link is in this list.
                    darrpiwentityNormalProcess_I,
                    darrdynlkjson_I, out boolCanStartProcess, out boolnCanBeCompleted,
                    out intStage);

                //                                          //Json with all of the information about the process.
                Piwjson1ProcessInWorkflowJson1 piwjson1 = new Piwjson1ProcessInWorkflowJson1(
                    piwentity.intPk, eleentityProcess.intPk, strProcessNameAndId, numCostByProcess,
                    darriojson1Input.ToArray(), darriojson1Output.ToArray(), intStage, boolCanStartProcess,
                    boolnCanBeCompleted, piwentity.boolIsPostProcess);

                int intHours;
                int intMinutes;
                int intSeconds;
                ProdtypProductType.subfunGetProcessInWorkflowTime(piwentity, jobjson_I, out intHours,
                    out intMinutes, out intSeconds);

                piwjson1.intHours = intHours;
                piwjson1.intMinutes = intMinutes;
                piwjson1.intSeconds = intSeconds;

                //                                          //Array with information of all the processes in a 
                //                                          //      workflow.
                darrpiwjson1_M.Add(piwjson1);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subAddCalculationsBasedOnJobStatus(
            //                                              //Add calculations to the calDependingJob list for later use

            JobentityJobEntityDB jobentity_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAllProcesses_I,
            Odyssey2Context context_I
            )
        {
            this.darrcalDependingJob = new List<CalCalculation>();
            if (
                jobentity_I != null &&
                //                                          //Job is InProgress or Completed.
                (jobentity_I.intStage == JobJob.intInProgressStage ||
                jobentity_I.intStage == JobJob.intCompletedStage)
                )
            {
                ZonedTime ztimeJobDate;
                ProdtypProductType.GetJobDate(jobentity_I, out ztimeJobDate);
                this.darrcalDependingJob = this.GetCalculationsDependingDate(ztimeJobDate);
            }
            else
            {
                //                                          //Job is Pending.
                this.darrcalDependingJob = this.darrcalCurrent;
            }

            //                      //List of normal piw.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNormalProcess = darrpiwentityAllProcesses_I.Where(
                piw => piw.boolIsPostProcess == false).ToList();

            this.darrpatransDependingJob = new List<PatransPaperTransformationEntityDB>();
            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentityNormalProcess)
            {
                List<PatransPaperTransformationEntityDB> patransentity = context_I.PaperTransformation.Where(pt =>
                    pt.intPkProcessInWorkflow == piwentity.intPk && pt.intnPkCalculationOwn != null).ToList();

                this.darrpatransDependingJob.AddRange(patransentity);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetProcessInputsAndOutputs(
            //                                              //Get all Ios Input/Output from PIW.

            //                                              //if it get JobId,  this mean that it 
            //                                              //    is in wfJob and return only 
            //                                              //    resources setted in each Ios.
            //                                              //if it dont get,  this mean that it 
            //                                              //    is in wfProduct and return
            //                                              //    all resources, include grpResources.


            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            ProdtypProductType prodtyp_I,
            List<EleeleentityElementElementEntityDB> darreleeleentityAll_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I,
            out List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2IosFromPIW_O
            )
        {
            darrioinfrmpiwjson2IosFromPIW_O = new List<Iofrmpiwjson2IOFromPIWJson2>();

            if (
                //                                      //It is a normal workflow.
                prodtyp_I != null
                )
            {
                //                                      //Get Resources by each eleet-Input.
                darrioinfrmpiwjson2IosFromPIW_O.AddRange(prodtyp_I.arrioinfrmjsonFromType(true, jobjson_I, piwentity_I,
                    darreleetentityAll_I));

                //                                      //Get Resources by each eleele-Input.
                darrioinfrmpiwjson2IosFromPIW_O.AddRange(prodtyp_I.arrioinfrmjsonFromTemplate(true, jobjson_I,
                    piwentity_I, darreleeleentityAll_I));

                //                                      //Get Resources by each eleet-Output.
                darrioinfrmpiwjson2IosFromPIW_O.AddRange(prodtyp_I.arrioinfrmjsonFromType(false, jobjson_I, piwentity_I,
                    darreleetentityAll_I));

                //                                      //Get Resources by each eleele-Output.
                darrioinfrmpiwjson2IosFromPIW_O.AddRange(prodtyp_I.arrioinfrmjsonFromTemplate(false, jobjson_I,
                    piwentity_I, darreleeleentityAll_I));
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public Iofrmpiwjson2IOFromPIWJson2[] arrioinfrmjsonFromType(
            //                                              //Get IosInput resources.
            //                                              //Returns an array of IOs (types).

            bool boolAreInputs_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I
            )
        {
            List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2 = new List<Iofrmpiwjson2IOFromPIWJson2>();

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s input.
            List<EleetentityElementElementTypeEntityDB> darreleetentityWithoutFilter =
                darreleetentityAll_I.Where(eleet =>
                eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentityWithoutFilter)
            {
                //                                          //Filter by not physical resource.

                //                                          //Find element type.
                EtElementTypeAbstract et = EletemElementType.etFromDB(eleetentity.intPkElementTypeSon);
                if (
                    !RestypResourceType.boolIsPhysical(et.strClassification)
                    )
                {
                    //                                      //Do nothing
                }
                else
                {
                    //                                      //Link.
                    String strLink = null;

                    //                                      //List of IOs(+resource) for this IO.
                    List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2PerEleet =
                        new List<Iofrmpiwjson2IOFromPIWJson2>();
                    bool boolHasIOAGrpResources = false;
                    bool? boolnIsFinalProduct = null;

                    //                                      //Get the IO.
                    IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                        io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                        io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                        io.intnPkElementElementType == eleetentity.intPk);

                    if (
                        ioentity != null
                        )
                    {
                        //                                  //Set the link.
                        strLink = ioentity.strLink;
                        boolnIsFinalProduct = ioentity.boolnIsFinalProduct;

                        /*CASE*/
                        if (
                            //                              //Io has a resource.
                            ioentity.intnPkResource != null
                            )
                        {
                            if (
                                (
                                //                          //IO Output and has a resource ProductFinal.
                                !boolAreInputs_I &&
                                boolnIsFinalProduct == true
                                ) ||
                                (
                                //                          //IO Output and IO has Links.
                                !boolAreInputs_I &&
                                strLink != null
                                )
                                ||
                                //                          //IO Input
                                boolAreInputs_I
                            )
                            {
                                //                          //Add item to the list.
                                Iofrmpiwjson2IOFromPIWJson2 iofrmpiwjson2 = new Iofrmpiwjson2IOFromPIWJson2(
                                    (int)ioentity.intnPkElementElementType, (int)ioentity.intnPkResource, true);

                                darrioinfrmpiwjson2PerEleet.Add(iofrmpiwjson2);
                            }
                        }
                        else if (
                            //                              //Io has a group resource set.
                            ioentity.intnPkResource == null &&
                            ioentity.intnGroupResourceId != null
                            )
                        {

                            boolHasIOAGrpResources = true;
                        }
                        /*END-CASE*/
                    }

                    if (
                        jobjson_I != null
                        )
                    {
                        int intJobId = jobjson_I.intJobId;

                        //                                  //Get the resource if it exists in the job workflow.
                        IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
                            FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                            ioj.intnPkElementElementType == eleetentity.intPk &&
                            ioj.intJobId == intJobId);
                        if (
                            iojentity != null
                            )
                        {
                            //                              //Clean the list.
                            darrioinfrmpiwjson2PerEleet = new List<Iofrmpiwjson2IOFromPIWJson2>();

                            if (
                                (
                                //                          //IO Output and has a resource ProductFinal.
                                !boolAreInputs_I &&
                                boolnIsFinalProduct == true
                                ) ||
                                (
                                //                          //IO Output and IO has Links.
                                !boolAreInputs_I &&
                                strLink != null
                                )
                                ||
                                //                          //IO Input
                                boolAreInputs_I
                            )
                            {
                                //                          //Add item to the list.
                                Iofrmpiwjson2IOFromPIWJson2 iofrmpiwjson2 = new Iofrmpiwjson2IOFromPIWJson2(
                                    (int)iojentity.intnPkElementElementType, (int)iojentity.intPkResource, true);

                                darrioinfrmpiwjson2PerEleet.Add(iofrmpiwjson2);
                            }
                        }
                        else
                        {
                            if (
                                //                          //In the IO Product has GrpResource set.
                                boolHasIOAGrpResources
                                )
                            {
                                //                          //Clean the list.
                                darrioinfrmpiwjson2PerEleet = new List<Iofrmpiwjson2IOFromPIWJson2>();
                            }
                        }
                    }

                    //                                      //Add IO Input  per eleet.
                    darrioinfrmpiwjson2.AddRange(darrioinfrmpiwjson2PerEleet);
                }
            }

            return darrioinfrmpiwjson2.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public Iofrmpiwjson2IOFromPIWJson2[] arrioinfrmjsonFromTemplate(
            //                                              //Get IosInput resources.


            bool boolAreInputs_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<EleeleentityElementElementEntityDB> darreleeleentityAll_I
            )
        {
            List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2 = new List<Iofrmpiwjson2IOFromPIWJson2>();

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleele-s input.
            List<EleeleentityElementElementEntityDB> darreleeleentityWithoutFilter = darreleeleentityAll_I.Where(
                eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I).ToList();

            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentityWithoutFilter)
            {
                //                                          //Filter resources by not physical.

                //                                          //Get template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);
                //                                          //Find element type.
                EtElementTypeAbstract et = EletemElementType.etFromDB(eleentityTemplate.intPkElementType);
                if (
                    !RestypResourceType.boolIsPhysical(et.strClassification)
                    )
                {
                    //                                      //Do nothing
                }
                else
                {
                    //                                      //Link.
                    String strLink = null;

                    EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                        et.intPk == eleentityTemplate.intPkElementType);

                    //                                      //Init the list.
                    List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2PerEleele =
                        new List<Iofrmpiwjson2IOFromPIWJson2>();
                    bool boolHasIOAGrpResources = false;
                    bool? boolnIsFinalProduct = null;

                    //                                      //Get the IO.
                    IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                        io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                        io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                        io.intnPkElementElement == eleeleentity.intPk);

                    if (
                        ioentity != null
                        )
                    {
                        //                                  //Set the link.
                        strLink = ioentity.strLink;
                        boolnIsFinalProduct = ioentity.boolnIsFinalProduct;

                        /*CASE*/
                        if (
                            //                              //Io has a resource set.
                            ioentity.intnPkResource != null
                            )
                        {
                            if (
                                (
                                //                          //IO Output and has a resource ProductFinal.
                                !boolAreInputs_I &&
                                boolnIsFinalProduct == true
                                ) ||
                                (
                                //                          //IO Output and IO has Links.
                                !boolAreInputs_I &&
                                strLink != null
                                )
                                ||
                                //                          //IO Input
                                boolAreInputs_I
                            )
                            {
                                //                          //Add item to the list.
                                Iofrmpiwjson2IOFromPIWJson2 iofrmpiwjson2 = new Iofrmpiwjson2IOFromPIWJson2(
                                   (int)ioentity.intnPkElementElement, (int)ioentity.intnPkResource, false);

                                darrioinfrmpiwjson2PerEleele.Add(iofrmpiwjson2);
                            }
                        }
                        else if (
                            //                              //Io has a group resource set.
                            ioentity.intnPkResource == null &&
                            ioentity.intnGroupResourceId != null
                            )
                        {
                            boolHasIOAGrpResources = true;
                        }
                        /*END-CASE*/
                    }

                    if (
                        jobjson_I != null
                        )
                    {
                        int intJobId = jobjson_I.intJobId;

                        //                                  //Get the resource if it exists in the job workflow.
                        IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
                            FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                            ioj.intnPkElementElement == eleeleentity.intPk &&
                            ioj.intJobId == intJobId);
                        if (
                            iojentity != null
                            )
                        {
                            //                              //Clean the list.
                            darrioinfrmpiwjson2PerEleele = new List<Iofrmpiwjson2IOFromPIWJson2>();

                            if (
                                (
                                //                          //IO Output and has a resource ProductFinal.
                                !boolAreInputs_I &&
                                boolnIsFinalProduct == true
                                ) ||
                                (
                                //                          //IO Output and IO has Links.
                                !boolAreInputs_I &&
                                strLink != null
                                )
                                ||
                                //                          //IO Input
                                boolAreInputs_I
                            )
                            {
                                //                          //Add item to the list.
                                Iofrmpiwjson2IOFromPIWJson2 iofrmpiwjson2 = new Iofrmpiwjson2IOFromPIWJson2(
                                   (int)iojentity.intnPkElementElement, (int)iojentity.intPkResource, false);

                                darrioinfrmpiwjson2PerEleele.Add(iofrmpiwjson2);
                            }
                        }
                        else
                        {
                            if (
                                //                          //In the IO Product has GrpResource set.
                                boolHasIOAGrpResources
                                )
                            {
                                //                          //Clean the list.
                                darrioinfrmpiwjson2PerEleele = new List<Iofrmpiwjson2IOFromPIWJson2>();
                            }
                        }
                    }

                    //                                      //Add IO Input  per eleet..
                    darrioinfrmpiwjson2.AddRange(darrioinfrmpiwjson2PerEleele);
                }
            }

            return darrioinfrmpiwjson2.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void CalculateTime(
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            IConfiguration configuration_I,
            String strPrintshopId_I,
            ref List<Iojson1InputOrOutputJson1> darriojson1Input_M,
            List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsGenerateWithOptions_I
            )
        {

            foreach (Iojson1InputOrOutputJson1 iojson1 in darriojson1Input_M)
            {
                //                                          //Recalculate cost with new quantity.
                if (
                    iojson1.intnPkResource != null
                    )
                {
                    ResResource resTarget = ResResource.resFromDB(iojson1.intnPkResource, false);
                    iojson1.numCostByResource = ProdtypProductType.numGetCostAdditional(jobjson_I, iojson1.numQuantity,
                        resTarget);

                    //                                      //Calculate new Time with new Quantity.
                    int intHours = 0;
                    int intMinutes = 0;
                    int intSeconds = 0;
                    ProdtypProductType.subCalculateResTimeFromQuantity((int)iojson1.intnPkResource, jobjson_I,
                        piwentity_I, iojson1.intPkEleetOrEleele, iojson1.boolIsEleet, iojson1.numQuantity,
                        configuration_I, strPrintshopId_I, null, darriojsoninInputsGenerateWithOptions_I,
                        ref intHours, ref intMinutes, ref intSeconds);

                    iojson1.intHours = intHours;
                    iojson1.intMinutes = intMinutes;
                    iojson1.intSeconds = intSeconds;

                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subCalculateTimeEstimate(

            String strPrintshopId_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsGenerateWithOptions_I,
            IConfiguration configuration_I,
            List<RecbdgjsonResourceBudgetJson> darrbdgjsonInput_M
            )
        {
            foreach (RecbdgjsonResourceBudgetJson bdgjson in darrbdgjsonInput_M)
            {
                //                                          //Recalculate cost with new quantity.
                if (
                    bdgjson.intnPkResource != null
                    )
                {
                    ResResource resTarget = ResResource.resFromDB(bdgjson.intnPkResource, false);
                    bdgjson.numCost = ProdtypProductType.numGetCostAdditional(jobjson_I, bdgjson.numQuantity,
                        resTarget);

                    //                                      //Calculate new Time with new Quantity.
                    int intHours = 0;
                    int intMinutes = 0;
                    int intSeconds = 0;
                    ProdtypProductType.subCalculateResTimeFromQuantity((int)bdgjson.intnPkResource, jobjson_I,
                        piwentity_I, bdgjson.intPkEleetOrEleele, bdgjson.boolIsEleet, bdgjson.numQuantity,
                        configuration_I, strPrintshopId_I, null, darriojsoninInputsGenerateWithOptions_I,
                        ref intHours, ref intMinutes, ref intSeconds);

                    bdgjson.intHours = intHours;
                    bdgjson.intMinutes = intMinutes;
                    bdgjson.intSeconds = intSeconds;

                }
            }
        }
        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subfunGetProcessInWorkflowTime(

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            out int intHours_O,
            out int intMinutes_O,
            out int intSeconds_O
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            List<CalentityCalculationEntityDB> darrcalentity;
            JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID == jobjson_I.intJobId);
            if (
                //                                          //Job in progress o completed.
                jobentity != null
                )
            {
                List<CalentityCalculationEntityDB> darrcalentityAll = context.Calculation.Where(cal =>
                    cal.intnPkWorkflow == piwentity_I.intPkWorkflow && cal.boolIsEnable == true &&
                    cal.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId && cal.intnHours != null &&
                    cal.intnPkElementElement == null && cal.intnPkElementElementType == null).ToList().Where(cal => Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I)).ToList();

                //                                          //To easy code.
                ZonedTime ztimeStartJob = ZonedTimeTools.NewZonedTime(jobentity.strStartDate.ParseToDate(),
                    jobentity.strStartTime.ParseToTime());

                darrcalentity = new List<CalentityCalculationEntityDB>();
                foreach (CalentityCalculationEntityDB calentity in darrcalentityAll)
                {
                    //                                      //To easy code.
                    ZonedTime ztimeStartCal = ZonedTimeTools.NewZonedTime(calentity.strStartDate.ParseToDate(),
                        calentity.strStartTime.ParseToTime());

                    ZonedTime ztimeEndCal = ZonedTimeTools.NewZonedTime(Date.MaxValue, Time.MinValue);
                    if (
                        calentity.strEndDate != null
                        )
                    {
                        ztimeEndCal = ZonedTimeTools.NewZonedTime(calentity.strEndDate.ParseToDate(),
                            calentity.strEndTime.ParseToTime());
                    }

                    if (
                        ztimeStartJob >= ztimeStartCal &&
                        ztimeStartJob < ztimeEndCal
                        )
                    {
                        darrcalentity.Add(calentity);
                    }
                }
            }
            else
            {
                //                                          //Job pending.
                darrcalentity = context.Calculation.Where(cal => cal.intnPkWorkflow == piwentity_I.intPkWorkflow &&
                    cal.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId && cal.boolIsEnable == true &&
                    cal.intnPkElementElement == null && cal.intnPkElementElementType == null &&
                    cal.intnHours != null && cal.strEndDate == null).ToList().Where(cal => Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I)).ToList();
            }

            int intAllSeconds = 0;
            int intSecondsTempByCal = 0;
            foreach (CalentityCalculationEntityDB calentity in darrcalentity)
            {
                intSecondsTempByCal = ((int)calentity.intnHours * 3600) + ((int)calentity.intnMinutes * 60) +
                    (int)calentity.intnSeconds;
                if (
                    calentity.strCalculationType == CalCalculation.strPerQuantity
                    )
                {
                    intSecondsTempByCal = (int)((((calentity.numnNeeded / calentity.numnPerUnits) *
                        (double)jobjson_I.intnQuantity)) * ((double)(((int)calentity.intnHours * 3600) +
                        ((int)calentity.intnMinutes * 60) + ((int)calentity.intnSeconds)) /
                        (calentity.numnQuantity)));
                }

                intAllSeconds = intAllSeconds + intSecondsTempByCal;
            }

            intHours_O = (int)(intAllSeconds / 3600);
            intMinutes_O = (int)((intAllSeconds % 3600) / 60);
            intSeconds_O = (intAllSeconds % 3600) % 60;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void AddPostProcess(

            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            ProdtypProductType prodtyp_I,
            PsPrintShop ps_I,
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAllProcess_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityPostProcess_I,
            IConfiguration configuration_I,
            List<Piwjson1ProcessInWorkflowJson1> darrpiwjson1_M,
            //                                              //Cost due to Hourly rate.
            ref double numJobExtraCost_IO,
            ref double numJobFinalCost_IO,
            ref bool boolworkflowJobIsReady_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //List of quantityInputs and quantityOutputs
            //                                              //    for optimization.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity = new List<IoqytjsonIOQuantityJson>();

            //                                              //Get the inputs and outputs for every process.
            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentityPostProcess_I)
            {
                //                                          //Get eleet-s.
                List<EleetentityElementElementTypeEntityDB> darreleetentityAll = context.ElementElementType.Where(
                    eleet => eleet.intPkElementDad == piwentity.intPkProcess).ToList();

                //                                          //Get eleele-s.
                List<EleeleentityElementElementEntityDB> darreleeleentityAll = context.ElementElement.Where(
                    eleele => eleele.intPkElementDad == piwentity.intPkProcess).ToList();

                //                                          //Get io-s.
                List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO = context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == piwentity.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                //                                          //Get ioj-s.
                List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ =
                    context.InputsAndOutputsForAJob.Where(ioj => ioj.intPkProcessInWorkflow == piwentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId).ToList();

                if (
                    !prodtyp_I.dicProcessIOs.ContainsKey(piwentity.intPk)
                    )
                {
                    List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2IosFromPIW;
                    ProdtypProductType.subGetProcessInputsAndOutputs(jobjson_I, piwentity, prodtyp_I,
                        darreleeleentityAll, darreleetentityAll, out darrioinfrmpiwjson2IosFromPIW);

                    prodtyp_I.dicProcessIOs.Add(piwentity.intPk, darrioinfrmpiwjson2IosFromPIW);
                }

                //                                          //Get the process.
                EleentityElementEntityDB eleentityProcess = context.Element.
                    FirstOrDefault(ele => ele.intPk == piwentity.intPkProcess);

                //                                          //List to Add IO Inputs.
                List<Iojson1InputOrOutputJson1> darriojson1Input = new List<Iojson1InputOrOutputJson1>();

                //                                          //Get the input types.
                darriojson1Input.AddRange(prodtyp_I.arriojson1GetTypesPostProcess(true, ps_I.strPrintshopId,
                    jobentity_I, jobjson_I, piwentity, darrdynlkjson_I, darreleetentityAll, darrioentityAllIO,
                    darriojentityAllIOJ, darrpiwentityAllProcess_I, configuration_I, darrioqytjsonIOQuantity,
                    ref numJobFinalCost_IO));

                //                                          //Get the input templates.
                darriojson1Input.AddRange(prodtyp_I.arriojson1GetTemplatesPostProcess(true, ps_I.strPrintshopId,
                    jobentity_I, jobjson_I, piwentity, darrdynlkjson_I, darreleeleentityAll, darrioentityAllIO,
                    darriojentityAllIOJ, darrpiwentityAllProcess_I, configuration_I, darrioqytjsonIOQuantity,
                    ref numJobFinalCost_IO));

                ProdtypProductType.CalculateTime(jobjson_I, piwentity, configuration_I, ps_I.strPrintshopId,
                     ref darriojson1Input, prodtyp_I.darriojsoninInputsCombinationsAndInputsSelected);

                //                                          //Total extra cost per process.
                //                                          //This variable must be use for inputs and outputs.
                double numProcessExtraCost = 0.0;

                //                                          //Increase cost to input resources that contain an hourly 
                //                                          //      rate.
                ProdtypProductType.subCalculateResourcesHourlyRates(context, ref darriojson1Input,
                    ref numProcessExtraCost);

                //                                          //List to Add IO Outputs.
                List<Iojson1InputOrOutputJson1> darriojson1Output = new List<Iojson1InputOrOutputJson1>();

                //                                          //Get the output types.
                darriojson1Output.AddRange(prodtyp_I.arriojson1GetTypesPostProcess(false, ps_I.strPrintshopId,
                    jobentity_I, jobjson_I, piwentity, darrdynlkjson_I, darreleetentityAll, darrioentityAllIO,
                    darriojentityAllIOJ, darrpiwentityAllProcess_I, configuration_I, darrioqytjsonIOQuantity,
                    ref numJobFinalCost_IO));

                //                                          //Get the input templates.
                darriojson1Output.AddRange(prodtyp_I.arriojson1GetTemplatesPostProcess(false, ps_I.strPrintshopId,
                    jobentity_I, jobjson_I, piwentity, darrdynlkjson_I, darreleeleentityAll, darrioentityAllIO,
                    darriojentityAllIOJ, darrpiwentityAllProcess_I, configuration_I, darrioqytjsonIOQuantity,
                    ref numJobFinalCost_IO));

                //                                          //Each extra cost generated by process will be added to 
                //                                          //      this variable.
                numJobExtraCost_IO = numJobExtraCost_IO + numProcessExtraCost;

                //                                          //By Process data.    

                //                                          //Get the cost By Process.
                List<CostbycaljsonCostByCalculationJson> darrcostbycaljsonPerProcess;
                double numCostByProcess = prodtyp_I.numGetCostByProcess(jobjson_I,
                    piwentity.intPkProcess, piwentity.intPk, ps_I, out darrcostbycaljsonPerProcess,
                    ref numJobFinalCost_IO, ref boolworkflowJobIsReady_IO);

                //                                          //Get Process Name and Id.
                String strProcessNameAndId = piwentity.intnId != null ? strProcessNameAndId =
                    eleentityProcess.strElementName + " (" + piwentity.intnId + ")" :
                    eleentityProcess.strElementName;

                //                                          //Get Stage, boolCanStart and bool CanBeCompleted.
                int intStage;
                bool boolCanStartProcess;
                bool? boolnCanBeCompleted;
                ProdtypProductType.subCanStartAndCanBeCompleted(ps_I, jobjson_I.intJobId, piwentity, darriojson1Input,
                    //                                      //To review if other side of the link is in this list.
                    darrpiwentityAllProcess_I,
                    darrdynlkjson_I, out boolCanStartProcess, out boolnCanBeCompleted,
                    out intStage);

                //                                          //Json with all of the information about the process.
                Piwjson1ProcessInWorkflowJson1 piwjson1 = new Piwjson1ProcessInWorkflowJson1(
                    piwentity.intPk, eleentityProcess.intPk, strProcessNameAndId, numCostByProcess,
                    darriojson1Input.ToArray(), darriojson1Output.ToArray(), intStage, boolCanStartProcess,
                    boolnCanBeCompleted, piwentity.boolIsPostProcess);

                int intHours;
                int intMinutes;
                int intSeconds;
                ProdtypProductType.subfunGetProcessInWorkflowTime(piwentity, jobjson_I, out intHours,
                    out intMinutes, out intSeconds);

                piwjson1.intHours = intHours;
                piwjson1.intMinutes = intMinutes;
                piwjson1.intSeconds = intSeconds;

                //                                          //Array with information of all the processes in a 
                //                                          //      workflow.
                darrpiwjson1_M.Add(piwjson1);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subCanStartAndCanBeCompleted(
            PsPrintShop ps_I,
            int intJobId_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<Iojson1InputOrOutputJson1> darriojson1Input_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            out bool boolCanStartProcess_O,
            out bool? boolnCanBeCompleted_O,
            out int intStage_O
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Verify if process is completed.
            PiwjentityProcessInWorkflowForAJobEntityDB piwjentity =
                    context.ProcessInWorkflowForAJob.FirstOrDefault(piwj =>
                    piwj.intJobId == intJobId_I &&
                    piwj.intPkPrintshop == ps_I.intPk &&
                    piwj.intPkProcessInWorkflow == piwentity_I.intPk);

            intStage_O = piwjentity != null ? piwjentity.intStage : 0;

            //                                              //Verify dependencies in order to start another process.                                    
            boolCanStartProcess_O = true;
            if (
                //                                          //Process already completed.
                intStage_O == 2
                )
            {
                boolCanStartProcess_O = false;
            }
            else
            {
                //                                          //Verify if the process on the other side of the link is
                //                                          //      already completed.
                boolCanStartProcess_O =
                    ProdtypProductType.boolOtherSideLinkProcessIsCompleted(intJobId_I, ps_I,
                    darriojson1Input_I, piwentity_I, darrpiwentityProcessInJob_I, darrdynlkjson_I);
            }

            boolnCanBeCompleted_O = null;
            if (
                intStage_O == JobJob.intProcessInWorkflowStarted
                )
            {
                List<PerentityPeriodEntityDB> darrperentity = context.Period.Where(per =>
                    per.intJobId == intJobId_I &&
                    per.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    per.intProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    per.intnContactId != null && per.strFinalStartDate != null &&
                    per.strFinalEndDate == null &&
                    per.intnEstimateId == null).ToList();

                boolnCanBeCompleted_O = darrperentity.Count == 0 ? true : false;
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subPropagateWaste(
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            ProdtypProductType prodtyp_I,
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_I,
            IConfiguration configuration_I,
            String strPrintshopId_I,
            List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsGenerateWithOptions_I,
            ref List<Iojson1InputOrOutputJson1> darriojson1Input_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            foreach (Iojson1InputOrOutputJson1 iojson1 in darriojson1Input_M)
            {
                int? intnPkEleet = iojson1.boolIsEleet ? (int?)iojson1.intPkEleetOrEleele : null;
                int? intnPkEleeele = !iojson1.boolIsEleet ? (int?)iojson1.intPkEleetOrEleele : null;

                //                                          //Find waste for this IO
                List<WstpropjsonWasteToPropagateJson> darrwstpropjson = darrwstpropjson_I.Where(wsttoprop =>
                    wsttoprop.intnPkEleetTarget == intnPkEleet &&
                    wsttoprop.intnPkEleeleTarget == intnPkEleeele &&
                    wsttoprop.intPkProcessInWorkflow == piwentity_I.intPk).ToList();

                //                                          //List additional waste.
                List<WstaddjsonWasteAdditionalJson> darrwstjsonWasteAdditional =
                    new List<WstaddjsonWasteAdditionalJson>();

                double numWaste = 0;
                foreach (WstpropjsonWasteToPropagateJson wastetoprop in darrwstpropjson)
                {
                    if (
                        wastetoprop.numWaste > 0
                        )
                    {
                        numWaste = (wastetoprop.numWaste / wastetoprop.numFactor).Round(2);
                    }

                    if (
                        //                                  //Unit allow Decimal.
                        iojson1.boolUnitAllowDecimal
                        )
                    {
                        numWaste = numWaste.Round(2);
                        iojson1.numQuantity = (iojson1.numQuantity + numWaste).Round(2);
                    }
                    else
                    //                                      //Unit not allow Decimal
                    {
                        numWaste = Math.Ceiling(numWaste);
                        iojson1.numQuantity = Math.Ceiling(iojson1.numQuantity + numWaste);
                    }

                    int? intnPkSourceRes = null;
                    //                                      //Find Source Resource.
                    IoentityInputsAndOutputsEntityDB ioentitySourceRes = context.InputsAndOutputs.FirstOrDefault(
                        io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                        io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                        io.intnPkElementElementType == wastetoprop.intnPkEleetSource &&
                        io.intnPkElementElement == wastetoprop.intnPkEleeleSource);

                    if (
                        //                                  //If QFrom resource is not in a GroupResource
                        ioentitySourceRes != null
                        )
                    {
                        intnPkSourceRes = ioentitySourceRes.intnPkResource;

                        if (
                            //                              //IO has grpResources.
                            intnPkSourceRes == null
                            )
                        {
                            if (
                                prodtyp_I.darriojsoninInputsCombinationsAndInputsSelected != null
                                )
                            {
                                //                              //Find the resource in the combinations for Current IO.
                                IojsoninInputOrOutputJsonInternal iojsonInternalCombination =
                                    prodtyp_I.darriojsoninInputsCombinationsAndInputsSelected.FirstOrDefault(
                                    iocomb => iocomb.intPkPIW == piwentity_I.intPk &&
                                    iocomb.intnPkElementElementType == ioentitySourceRes.intnPkElementElementType
                                    && iocomb.intnPkElementElement == ioentitySourceRes.intnPkElementElement);

                                intnPkSourceRes = iojsonInternalCombination.intPkResource;
                            }

                        }
                    }

                    if (
                        intnPkSourceRes != null
                        )
                    {
                        //                                  //Do nothing
                    }
                    //                                      //If QFrom resource is in a GroupResource
                    else
                    {
                        IojentityInputsAndOutputsForAJobEntityDB ioentityQfromResForAJob =
                            context.InputsAndOutputsForAJob.FirstOrDefault(iofaj =>
                            iofaj.intPkProcessInWorkflow == piwentity_I.intPk &&
                            iofaj.intnPkElementElementType == wastetoprop.intnPkEleetSource &&
                            iofaj.intnPkElementElement == wastetoprop.intnPkEleeleSource);

                        if (
                            //                              //If QFrom resource is set in the job
                            ioentityQfromResForAJob != null
                            )
                        {
                            intnPkSourceRes = ioentityQfromResForAJob.intPkResource;
                        }
                    }

                    //                                      //Find Source resource.
                    EleentityElementEntityDB eleentitySource = context.Element.FirstOrDefault(ele =>
                        ele.intPk == intnPkSourceRes);

                    String strSourceResName = eleentitySource.strElementName;

                    //                                      //Find Source resource type.
                    EtElementTypeAbstract eletSource = EletemElementType.etFromDB(eleentitySource.intPkElementType);

                    String strSource;
                    //                                      //QFrom Resource is ElementElementType
                    if (
                        wastetoprop.intnPkEleetSource != null
                        )
                    {
                        //                                  //Type and resource concatenation.
                        strSource = "(" + eletSource.strXJDFTypeId + ") " + strSourceResName;
                    }
                    //                                      //QFrom Resource is ElementElement
                    else
                    {
                        //                                  //Find ElementElement resource.
                        EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(
                            eleele => eleele.intPk == ioentitySourceRes.intnPkElementElement);

                        //                                  //Find template of QFrom resource.
                        EleentityElementEntityDB eleentitytemplate = context.Element.FirstOrDefault(ele =>
                            ele.intPk == eleeleentity.intPkElementSon);

                        //                                  //Type, template and resource concatenation.
                        strSource = "(" + eletSource.strXJDFTypeId + " : " +
                            eleentitytemplate.strElementName + ") " + strSourceResName;
                    }

                    WstaddjsonWasteAdditionalJson wstaddjson = new WstaddjsonWasteAdditionalJson(
                        numWaste, strSource);

                    darrwstjsonWasteAdditional.Add(wstaddjson);
                }

                iojson1.arrwstaddWasteAdditional = darrwstjsonWasteAdditional.ToArray();
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static double numGetCostAdditional(

           JobjsonJobJson jobjson_I,
           double numQuantity_I,
           ResResource resCurrent_I
           )
        {
            Odyssey2Context context = new Odyssey2Context();

            double numCost = 0.0;
            double numResourceCost = 0.0;
            double numCalculationQuantity = 0.0;

            //                                  //Verify job's status.
            JobentityJobEntityDB jobjob = context.Job.FirstOrDefault(job => job.intJobID ==
                jobjson_I.intJobId);

            CostentityCostEntityDB costentity = null;
            if (
                //                              //Job's still pending.
                jobjob == null
                )
            {
                //                              //Get the current cost.
                costentity = resCurrent_I.costentityCurrent;
            }
            else
            {
                //                              //Job is inprogress or completed.
                //                              //Get the cost checking date.
                ZonedTime ztimeJobDate;
                ProdtypProductType.GetJobDate(jobjob, out ztimeJobDate);
                costentity = resCurrent_I.GetCostDependingDate(ztimeJobDate);
            }

            if (
                costentity != null && costentity.numnCost != null
                )
            {
                double? numnCalculationMin = 0.0;
                double? numnCalculationBlock = 0.0;
                double? numnResourceCost = 0.0;
                double? numnCalculationQuantity = 0.0;
                ProdtypProductType.subGetCostEntityData(costentity, ref numnResourceCost,
                    ref numnCalculationQuantity, ref numnCalculationMin,
                    ref numnCalculationBlock);
                numResourceCost = (double)numnResourceCost;
                numCalculationQuantity = (double)numnCalculationQuantity;
            }

            double numCostPerUnit = 0.0;
            if (
                (numResourceCost > 0) && (numCalculationQuantity > 0)
                )
            {
                numCostPerUnit = (double)numResourceCost / (double)numCalculationQuantity;
            }

            //                                      //Obtaining the final cost.
            numCost = (numQuantity_I * numCostPerUnit).Round(2);

            return numCost;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetWorkflowDueDateAndCompareItToDeliveryDate(
            //                                              //Gets due date and due time from DB and compares them to
            //                                              //      delivery date.
            //                                              //If due date is the same than delivery date or it happens
            //                                              //      after it, return a true bool.

            int intJobId_I,
            String strDeliveryDate_I,
            String strTimeZoneId_I,
            out String strDueDate_O,
            out String strDueTime_O,
            out bool boolIsDueDateReachable_O
            )
        {
            strDueDate_O = "";
            strDueTime_O = "";
            boolIsDueDateReachable_O = false;

            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();
            //                                              //Get last DueDate storaged.
            IQueryable<DuedateentityDueDateEntityDB> setduedate = context.DueDate.Where(due => due.intJobId ==
                intJobId_I);
            List<DuedateentityDueDateEntityDB> darrduedate = setduedate.ToList();
            //                                              //Sort DueDate list.
            darrduedate.Sort();

            if (
                //                                          //DueDate exists.
                darrduedate.Count() > 0
                )
            {
                Date dateDueDate = darrduedate[0].strDate.ParseToDate();
                Time timeDueTime = (darrduedate[0].strHour + ":" + darrduedate[0].strMinute + ":" +
                    darrduedate[0].strSecond).ParseToTime();

                //                                          //Build ztime object for due date.
                ZonedTime ztimeDueDate = ZonedTimeTools.ztimeCSTToASpecificTimeZone(
                    dateDueDate, timeDueTime, strTimeZoneId_I);

                strDueDate_O = ztimeDueDate.Date.ToString();
                strDueTime_O = ztimeDueDate.Time.ToString();

                if (
                    //                                      //Delivery date exists.
                    strDeliveryDate_I.Length > 0 &&
                    strDeliveryDate_I.Contains(",")
                    )
                {
                    //                                      //Find the index of the comma that separates date and time.
                    int intCommaIndex = strDeliveryDate_I.IndexOf(",");
                    //                                      //Get date.
                    String strDelivaryDate = strDeliveryDate_I.Substring(0, intCommaIndex);
                    //                                      //Get time.
                    String strDeliveryTime = strDeliveryDate_I.Substring(intCommaIndex + 1);
                    //                                      //Build ztime object for delivery date.
                    ZonedTime ztimeDeliveryDate = ZonedTimeTools.NewZonedTime(strDelivaryDate.ParseToDate(),
                            strDeliveryTime.ParseToTime());

                    if (
                        //                                  //Due date is after delivery date or on the same date.
                        ztimeDueDate >= ztimeDeliveryDate
                        )
                    {
                        boolIsDueDateReachable_O = true;
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public double numGetCostByProduct(
            //                                              //Return the sum of the calculations associated only with 
            //                                              //      the product:
            //                                              //  - PerUnit ByProduct.
            //                                              //  - PerUnit ByIntent.
            //                                              //  - PerQuantity ByProduct.
            //                                              //  - PerQuantity ByIntent.
            //                                              //  - Base ByProduct.
            //                                              //It is necessary validate if the calculation applies, as it
            //                                              //      is validated where the job is calculated.

            //                                              //Job, it is necessary to verify the condition to apply.
            JobjsonJobJson jobjson_I,
            PsPrintShop ps_I,
            out List<CostbycaljsonCostByCalculationJson> darrcostbycaljsonProduct_O,
            ref bool boolWorkflowJobIsReady_IO
            )
        {
            darrcostbycaljsonProduct_O = new List<CostbycaljsonCostByCalculationJson>();

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();
            double numCostByProduct = 0.0;
            //                                              //Get the product.
            ProdtypProductType prodtyp = ProdtypProductType.prodtypGetFromDB((int)jobjson_I.intnProductKey,
                ps_I.strPrintshopId);

            //                                              //Get calculations.
            List<CalCalculation> darrcal = ProdtypProductType.subGetProductCalculations(jobjson_I, prodtyp);
            CalCalculation[] arrcal = darrcal.ToArray();

            //                                              //For each calcultion.
            int intI = 0;
            /*WHILE-DO*/
            while (
                intI < arrcal.Length
            )
            {
                //                                          //To easy code.
                CalCalculation cal = arrcal[intI];

                if (
                    //                                      //Calculation is enable.
                    cal.boolIsEnable &&
                    //                                      //Calcultaion applies.
                    Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I)
                    )
                {
                    /*CASE*/
                    if (
                        //                                  //Base calculation.
                        (cal.strCalculationType == CalCalculation.strBase) &&
                        (cal.strByX == CalCalculation.strByProduct)
                        )
                    {
                        numCostByProduct = numCostByProduct + (double)cal.numnCost;
                        CostbycaljsonCostByCalculationJson costbycaljson = new CostbycaljsonCostByCalculationJson(
                            cal.strDescription, (double)cal.numnCost);
                        darrcostbycaljsonProduct_O.Add(costbycaljson);
                        intI = intI + 1;
                    }
                    else if (
                        //                                  //Per Unit calculation.
                        (cal.strCalculationType == CalCalculation.strPerUnit) &&
                        ((cal.strByX == CalCalculation.strByProduct) || (cal.strByX == CalCalculation.strByIntent))
                        )
                    {
                        double numCostPerUnit = ProdtypProductType.numGetPerUnitCost(cal, jobjson_I);
                        numCostByProduct = numCostByProduct + numCostPerUnit;
                        CostbycaljsonCostByCalculationJson costbycaljson = new CostbycaljsonCostByCalculationJson(
                            cal.strDescription, numCostPerUnit);
                        darrcostbycaljsonProduct_O.Add(costbycaljson);
                        intI = intI + 1;
                    }
                    else if (
                        //                                  //Per Quantity calculation.
                        (cal.strCalculationType == CalCalculation.strPerQuantity) &&
                        ((cal.strByX == CalCalculation.strByProduct) || (cal.strByX == CalCalculation.strByIntent))
                        )
                    {
                        double numQuantityWithoutWasteNotUsed;
                        double numWasteCalculatedNotUsed;
                        double numFactorNotUsed;
                        double numJobQuantity;

                        int intStatus = 200; String strUserMessage = ""; String strDevMessage = "";
                        double? numnCostPq = ProdtypProductType.numGetPerQuantityCost(
                            cal, jobjson_I, jobjson_I.intnQuantity, true, null, 0, null,
                            out numQuantityWithoutWasteNotUsed,
                            out numJobQuantity, out numWasteCalculatedNotUsed, out numFactorNotUsed,
                            ref boolWorkflowJobIsReady_IO, ref intStatus, ref strUserMessage, ref strDevMessage);
                        numCostByProduct = (double)(numCostByProduct + numnCostPq);

                        CostbycaljsonCostByCalculationJson costbycaljson = new CostbycaljsonCostByCalculationJson(
                            cal.strDescription, (double)numnCostPq);
                        darrcostbycaljsonProduct_O.Add(costbycaljson);
                        intI = intI + 1;
                    }
                    else
                    {
                        intI = intI + 1;
                    }
                    /*END-CASE*/
                }
                else
                {
                    intI = intI + 1;
                }
            }
            return numCostByProduct;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static List<CalCalculation> subGetProductCalculations(
            JobjsonJobJson jobjson_I,
            ProdtypProductType prodtyp_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID == jobjson_I.intJobId);

            List<CalCalculation> darrcal = new List<CalCalculation>();
            if (
                jobentity == null
                )
            {
                //                                              //Get calculations.
                List<CalentityCalculationEntityDB> darrcalentity = context.Calculation.Where(cal =>
                    (cal.intnPkProduct == prodtyp_I.intPk) &&
                    (cal.strEndDate == null) &&
                    (cal.strByX == CalCalculation.strByProduct || cal.strByX == CalCalculation.strByIntent)).ToList();

                foreach (CalentityCalculationEntityDB calentity in darrcalentity)
                {
                    //                                      //Create object calCalculation. 
                    CalCalculation cal = new CalCalculation(
                        calentity.intPk, calentity.strUnit,
                        calentity.numnQuantity, calentity.numnCost, calentity.intnHours, calentity.intnMinutes,
                        calentity.intnSeconds, calentity.numnBlock, calentity.boolIsEnable, calentity.strValue,
                        calentity.strAscendants, calentity.strDescription, calentity.numnProfit,
                        calentity.intnPkProduct,
                        calentity.intnPkProcess, calentity.intnPkResource, calentity.strCalculationType,
                        calentity.strByX, calentity.strStartDate, calentity.strStartTime, calentity.strEndDate,
                        calentity.strEndTime, calentity.numnNeeded, calentity.numnPerUnits, calentity.numnMin,
                        calentity.numnQuantityWaste, calentity.numnPercentWaste, calentity.intnPkWorkflow,
                        calentity.intnProcessInWorkflowId, calentity.intnPkElementElementType,
                        calentity.intnPkElementElement, null, null, null, calentity.intnPkAccount,
                        calentity.boolnFromThickness, calentity.boolnIsBlock, calentity.boolnByArea);
                    //                                      //Add calculation.
                    darrcal.Add(cal);
                }
            }
            else
            {
                //                                              //Get calculations.
                List<CalentityCalculationEntityDB> darrcalentity = context.Calculation.Where(cal =>
                    (cal.intnPkProduct == prodtyp_I.intPk) &&
                    (cal.strByX == CalCalculation.strByProduct || cal.strByX == CalCalculation.strByIntent)).ToList();

                //                                          //Get ztime object of job.
                ZonedTime ztimeJobDate = ZonedTimeTools.NewZonedTime(jobentity.strStartDate.ParseToDate(),
                        jobentity.strStartTime.ParseToTime());

                foreach (CalentityCalculationEntityDB calentity in darrcalentity)
                {
                    //                                  //Get startDate and endDate of calculation.
                    ZonedTime ztimeStartCal = ZonedTimeTools.NewZonedTime(calentity.strStartDate.ParseToDate(),
                            calentity.strStartTime.ParseToTime());
                    ZonedTime ztimeEndCal = ZonedTimeTools.NewZonedTime(Date.MaxValue, Time.MinValue);
                    if (
                        calentity.strEndDate != null
                        )
                    {
                        ztimeEndCal = ZonedTimeTools.NewZonedTime(calentity.strEndDate.ParseToDate(),
                            calentity.strEndTime.ParseToTime());
                    }

                    if (
                        (ztimeJobDate >= ztimeStartCal) && (ztimeJobDate < ztimeEndCal)
                        )
                    {
                        //                                  //Create object calCalculation.
                        CalCalculation cal = new CalCalculation(
                            calentity.intPk, calentity.strUnit,
                            calentity.numnQuantity, calentity.numnCost, calentity.intnHours, calentity.intnMinutes,
                            calentity.intnSeconds, calentity.numnBlock, calentity.boolIsEnable, calentity.strValue,
                            calentity.strAscendants, calentity.strDescription, calentity.numnProfit,
                            calentity.intnPkProduct,
                            calentity.intnPkProcess, calentity.intnPkResource, calentity.strCalculationType,
                            calentity.strByX, calentity.strStartDate, calentity.strStartTime, calentity.strEndDate,
                            calentity.strEndTime, calentity.numnNeeded, calentity.numnPerUnits, calentity.numnMin,
                            calentity.numnQuantityWaste, calentity.numnPercentWaste, calentity.intnPkWorkflow,
                            calentity.intnProcessInWorkflowId, calentity.intnPkElementElementType,
                            calentity.intnPkElementElement, null, null, null, calentity.intnPkAccount,
                            calentity.boolnFromThickness, calentity.boolnIsBlock, calentity.boolnByArea);

                        //                                  //Add calculation.
                        darrcal.Add(cal);
                    }
                }
            }
            return darrcal;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public double numGetCostByProcess(
            //                                              //Return the sum of the calculations associated only with 
            //                                              //      the process:
            //                                              //  - PerQuantity ByProcess.
            //                                              //  - Base ByProcess.
            //                                              //It is necessary validate if the calculation applies as it
            //                                              //      is validated where the job is calculated.

            //                                              //Job, it is necessary to verify the condition to apply.
            JobjsonJobJson jobjson_I,
            int intPkProcess_I,
            int intPkProcessInWorkflow_I,
            PsPrintShop ps_I,
            out List<CostbycaljsonCostByCalculationJson> darrcostbycaljsonProcess_O,
            ref double numJobFinalCost_IO,
            ref bool boolWorkflowJobIsReady_IO
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();
            double numCostByProcessEstimate = 0.0;

            darrcostbycaljsonProcess_O = new List<CostbycaljsonCostByCalculationJson>();
            //                                              //Get the product.

            ProdtypProductType prodtyp = ProdtypProductType.prodtypGetFromDB((int)jobjson_I.intnProductKey,

                ps_I.strPrintshopId);
            //                                              //Get calculations.
            List<CalCalculation> darrcal = prodtyp.darrcalGetCalculationsCurrentByJobsStageAndWFFromDB(
                    jobjson_I.intJobId, null);

            JobJob job = JobJob.jobFromDB(jobjson_I.intJobId);

            //                                              //Get cost calculations.
            darrcal = darrcal.Where(cal => cal.numnCost != null).ToList();
            CalCalculation[] arrcal = darrcal.ToArray();

            //                                              //For each calcultion.
            int intI = 0;
            /*WHILE-DO*/
            while (
                intI < arrcal.Length
                )
            {
                //                                          //To easy code.
                CalCalculation cal = arrcal[intI];

                if (
                    //                                      //Calculation is enable.
                    cal.boolIsEnable &&
                    //                                      //Calculation applies.
                    Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I)
                    )
                {
                    double numCostByProcessOne = 0.0;

                    PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPk == intPkProcessInWorkflow_I);
                    /*CASE*/
                    if (
                        //                                  //Base calculation.
                        (cal.strCalculationType == CalCalculation.strBase) &&
                        (cal.strByX == CalCalculation.strByProcess) &&
                        (cal.intnPkProcessElementBelongsTo == intPkProcess_I) &&
                        (cal.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId) &&
                        (cal.intnPkWorkflowBelongsTo == piwentity.intPkWorkflow)
                        )
                    {
                        numCostByProcessOne = (double)cal.numnCost;
                        CostbycaljsonCostByCalculationJson costbycaljson = new CostbycaljsonCostByCalculationJson(
                            cal.strDescription, numCostByProcessOne.Round(2));

                        intI = intI + 1;

                        if (
                            (job != null) &&
                            (job.intStage == JobJob.intCompletedStage)
                            )
                        {
                            //                                  //Verify if there is a final cost for this calculation.
                            List<FnlcostentityFinalCostEntityDB> darrfnlcostentity = context.FinalCost.Where(fnl =>
                                fnl.intPkJob == job.intPk && fnl.intPkProcessInWorkflow == piwentity.intPk &&
                                fnl.intnPkCalculation == cal.intPk).ToList();
                            darrfnlcostentity.Sort();

                            if (
                                darrfnlcostentity.Count > 0
                                )
                            {
                                FnlcostentityFinalCostEntityDB fnlcostentity = darrfnlcostentity.Last();
                                numJobFinalCost_IO = numJobFinalCost_IO + (double)fnlcostentity.numnCost;

                                costbycaljson.numFinalCost = (double)fnlcostentity.numnCost;
                            }
                            else
                            {
                                numJobFinalCost_IO = numJobFinalCost_IO + numCostByProcessOne;

                                costbycaljson.numFinalCost = numCostByProcessOne;
                            }
                        }

                        darrcostbycaljsonProcess_O.Add(costbycaljson);
                    }
                    else if (
                        //                                  //Per Quantity calculation.
                        (cal.strCalculationType == CalCalculation.strPerQuantity) &&
                        (cal.strByX == CalCalculation.strByProcess) &&
                        (cal.intnPkProcessElementBelongsTo == intPkProcess_I) &&
                        (cal.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId) &&
                        (cal.intnPkWorkflowBelongsTo == piwentity.intPkWorkflow)
                        )
                    {
                        double numQuantityWithoutWasteNotUsed;
                        double numWasteCalculatedNotUsed;
                        double numFactorNotUsed;
                        double numJobQuantityOne;
                        int intStatus = 200; String strUserMessage = ""; String strDevMessage = "";
                        numCostByProcessOne = ProdtypProductType.numGetPerQuantityCost(cal, jobjson_I,
                            jobjson_I.intnQuantity, true, null, 0, null, out numQuantityWithoutWasteNotUsed,
                            out numJobQuantityOne, out numWasteCalculatedNotUsed, out numFactorNotUsed,
                            ref boolWorkflowJobIsReady_IO, ref intStatus, ref strUserMessage, ref strDevMessage);
                        CostbycaljsonCostByCalculationJson costbycaljson = new CostbycaljsonCostByCalculationJson(
                            cal.strDescription, numCostByProcessOne.Round(2));

                        intI = intI + 1;

                        if (
                            (job != null) &&
                            (job.intStage == JobJob.intCompletedStage)
                            )
                        {
                            //                                  //Verify if there is a final cost for this calculation.
                            List<FnlcostentityFinalCostEntityDB> darrfnlcostentity = context.FinalCost.Where(fnl =>
                                fnl.intPkJob == job.intPk && fnl.intPkProcessInWorkflow == piwentity.intPk &&
                                fnl.intnPkCalculation == cal.intPk).ToList();
                            darrfnlcostentity.Sort();

                            if (
                                darrfnlcostentity.Count > 0
                                )
                            {
                                FnlcostentityFinalCostEntityDB fnlcostentity = darrfnlcostentity.Last();
                                if (
                                    fnlcostentity.numnCost != null
                                    )
                                {
                                    numJobFinalCost_IO = numJobFinalCost_IO + (double)fnlcostentity.numnCost;

                                    costbycaljson.numFinalCost = (double)fnlcostentity.numnCost;
                                }
                                else
                                {
                                    numJobFinalCost_IO = numJobFinalCost_IO + ((numCostByProcessOne / numJobQuantityOne)
                                        * (double)fnlcostentity.numnQuantity);

                                    costbycaljson.numFinalCost = ((numCostByProcessOne / numJobQuantityOne)
                                        * (double)fnlcostentity.numnQuantity);
                                }
                            }
                            else
                            {
                                numJobFinalCost_IO = numJobFinalCost_IO + numCostByProcessOne;

                                costbycaljson.numFinalCost = numCostByProcessOne;
                            }
                        }

                        darrcostbycaljsonProcess_O.Add(costbycaljson);
                    }
                    else
                    {
                        intI = intI + 1;
                    }
                    /*END-CASE*/

                    numCostByProcessEstimate = numCostByProcessEstimate + numCostByProcessOne;
                }
                else
                {
                    intI = intI + 1;
                }
            }
            return numCostByProcessEstimate;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subCalculateResourcesHourlyRates(
            //                                              //Calculates hourly rates per resource.

            Odyssey2Context context_I,

            //                                              //List containing inputs or outputs.
            ref List<Iojson1InputOrOutputJson1> darriojson1InputOrOuput_M,
            //                                              //This variable must be the same when calculating inputs
            //                                              //      and outputs.
            //                                              //Do not create a new one when calculating output costs or 
            //                                              //      will be lost.
            ref double numProcessExtraCost_IO
            )
        {
            foreach (Iojson1InputOrOutputJson1 iojson1 in darriojson1InputOrOuput_M)
            {
                //                                          //Find resource.
                ResResource res = ResResource.resFromDB(iojson1.intnPkResource, !iojson1.boolIsEleet);

                if (
                    res != null
                    )
                {
                    //                                      //Get current cost.
                    CostentityCostEntityDB costentity = ResResource.costentityCurrentResourceCost(context_I, res);

                    if (
                        //                                  //Cost and hourly rate exists.
                        costentity != null &&
                        costentity.numnHourlyRate != null
                        )
                    {
                        //                                  //Get total hours.

                        //                                  //Transform mins and secs to hours.
                        double numHours = (double)iojson1.intHours;
                        double numMinsToHours = (double)iojson1.intMinutes / 60d;
                        double numSecsToHours = (double)iojson1.intSeconds / 3600d;
                        //                                  //Sum up hours.
                        double numTotalHours = numHours + numMinsToHours + numSecsToHours;

                        //                                  //Calculate hourly rate.
                        double numResourceExtraCost = numTotalHours * (double)costentity.numnHourlyRate;

                        //                                   //Sum up hourly rate to resource's cost.
                        iojson1.numCostByResource = (iojson1.numCostByResource + numResourceExtraCost).Round(2);

                        //                                   //Add extra cost to process extra cost counter.
                        numProcessExtraCost_IO = numProcessExtraCost_IO + numResourceExtraCost;
                    }
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public RecbdgjsonResourceBudgetJson[] arrbdgresjsonFromType(
            //                                              //Get the inputs Resources' budged Type.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            String strPrintshopId_I,
            int? intnEstimationId_I,
            //                                              //PIWs found after verifying each condition to apply.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            IConfiguration configuration_I,
            ref bool boolHasAllResourceSetted_IO,
            ref bool boolCanBeEstimate_IO,
            ref bool boolHasResourceIncomplete_IO,
            //                                              //List waste to propagate.             
            ref List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            //                                              //Arr to quantitys for each IO.
            ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s input.
            List<EleetentityElementElementTypeEntityDB> darreleetentityWithoutFilter =
                context.ElementElementType.Where(eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == true).ToList();

            //                                              //List of element element types without not physical
            //                                              //      resources.

            //                                              //Clone previous list.
            List<EleetentityElementElementTypeEntityDB> darreleetentity =
                new List<EleetentityElementElementTypeEntityDB>(darreleetentityWithoutFilter);

            foreach (EleetentityElementElementTypeEntityDB eleet in darreleetentityWithoutFilter)
            {
                //                                          //Apply a filter in order to avoid not physical resources.

                //                                          //Find element type.
                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleet.intPkElementTypeSon);
                if (
                    !RestypResourceType.boolIsPhysical(etentity.strClassification)
                    )
                {
                    darreleetentity.Remove(eleet);
                }
            }

            //                                              //To fill an return.
            List<RecbdgjsonResourceBudgetJson> darrbdgres = new List<RecbdgjsonResourceBudgetJson>();

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Get the inputs every process.
                intI < darreleetentity.Count
                //                                         //Se comento porque ahora si se le va a permitir
                //                                          //  abrir la estimacion sin que tenga todos
                //                                          //  recursos setteados.
                //&& boolHasAllResourceSetted_IO
                )
            {
                //                                          //Inital data .
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                int? intnGroupResourceId = null;
                bool boolHasOption = false;
                String strUnit = null;
                bool boolAllowDecimal = true;

                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                double numQuantity = 0.0;
                double numCostByResource = 0.0;

                int? intnJobQuantity = jobjson_I.intnQuantity;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == darreleetentity[intI].intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;
                    intnGroupResourceId = ioentity.intnGroupResourceId;
                    boolHasOption = intnGroupResourceId != null ? true : false;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            //                          //Get the current unit of measurement.
                            ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                                eleentity.intPk);

                            strUnit = valentity != null ? valentity.strValue : null;
                            boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                     (bool)valentity.boolnIsDecimal;
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }
                }

                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == darreleetentity[intI].intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    //                                      //It has not option because in the WFJ was select a 
                    //                                      //    resource for this eleet.
                    boolHasOption = false;

                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);
                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                      )
                    {
                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                }

                bool boolHasIOResourceOrGRPResourceSet = true;
                if (
                    //                                      //There is not resource setted.
                    intnPkResource == null &&
                    intnGroupResourceId == null
                    )
                {
                    boolHasAllResourceSetted_IO = false;
                    boolHasIOResourceOrGRPResourceSet = false;
                }
                else if (
                    //                                      //The estimation can be saved in dataEstimation.
                    intnPkResource == null &&
                    intnGroupResourceId != null
                    )
                {
                    boolHasOption = true;

                    //                                      //Get Estimation Data.
                    EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                        estdata => estdata.intId == intnEstimationId_I &&
                        estdata.intJobId == jobjson_I.intJobId &&
                        estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
                        estdata.intnPkElementElementType == darreleetentity[intI].intPk);

                    if (
                        //                                  //Find Estimate.
                        estdataentity != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == estdataentity.intPkResource);

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;

                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                    }
                    else
                    {
                        //                                      //The estimation can be not estimate.
                        boolCanBeEstimate_IO = false;
                    }
                }

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                bool boolIsPaper = false;
                String[] arrstrInfo = new String[0];
                bool boolCompleted = false;
                bool? boolnIsDeviceOrMiscConsumable = null;
                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                //if (
                //    intnPkResource != null
                //    )
                //{
                //    //                                      //The estimation could be estimate.

                //    //                                      //Perform calculation own for get the Quantity
                //    //                                      //    for this IO and save in the 
                //    //                                      //    arr quantitys.
                //    //                                      //Find calculation and find the quantity
                //    //                                      //    From. 

                //    //                                      //Qfrom Output.
                //    //                                      //Find the quantity associate with this qfrom in the 
                //    //                                      //    arr quantitys, if it is not found in the arr quantity, 
                //    //                                      //    it is need to find the quantity with link of the next 
                //    //                                      //    process (method recursively).

                //    //                                      //Qfrom Input.
                //    //                                      //Perform calculation for get quantity correct for this IO
                //    //                                      //    consider the waste'propagation
                //    //                                      //Note. save waste in the arr waste.

                //    //                                      //Work with calculation From Quantity.
                //    //                                      //Get cost and quantity

                //    IoqytjsonIOQuantityJson ioqytjsonQuantityExists = darrioqytjsonIOQuantity_M.FirstOrDefault(
                //        ioqyt => ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                //        ioqyt.intnPkEleet == darreleetentity[intI].intPk && ioqyt.intnPkEleele == null &&
                //        ioqyt.boolAreInput == true && ioqyt.strLink == strLink);

                //    if (
                //        //                                  //The IO already was analized.
                //        ioqytjsonQuantityExists != null
                //    )
                //    {
                //        //                                  //Get data in the Quantity List
                //        numQuantity = ioqytjsonQuantityExists.numQuantityIO;
                //        numCostByResource = ioqytjsonQuantityExists.numCostResource;
                //        darrwstjsonWaste = ioqytjsonQuantityExists.arrwstjsonWaste != null ? 
                //            ioqytjsonQuantityExists.arrwstjsonWaste.ToList() : darrwstjsonWaste;
                //    }
                //    else
                //    {
                //        bool boolWorkflowJobIsReadyNotUsed = true;
                //        this.subGetCostAndQuantityByResourceRecursive(jobjson_I, strPrintshopId_I, (int)intnPkResource,
                //            piwentity_I, darreleetentity[intI].intPk, null, strLink, boolAllowDecimal, darrpiwentity_I,
                //            darrdynlkjson_I, intnEstimationId_I, configuration_I, ref numQuantity, ref numCostByResource,
                //            ref darrwstjsonWaste, ref darrwstpropjson_M, ref darrioqytjsonIOQuantity_M, 
                //            ref boolWorkflowJobIsReadyNotUsed);
                //    }

                //    if (
                //        //                                  //A resource with link does not generate cost, therefore
                //        //                                  //      it does not matter if it is incomplete
                //        strLink == null
                //        )
                //    {
                //        ResResource.subVerifyResourceInfo((int)intnPkResource, jobjson_I, piwentity_I.intPkWorkflow,
                //        piwentity_I, darreleetentity[intI].intPk, true, configuration_I, strPrintshopId_I,
                //        intnEstimationId_I, ref arrstrInfo, ref boolCompleted);

                //        if (
                //            !boolCompleted
                //            )
                //        {
                //            boolHasResourceIncomplete_IO = true;
                //        }
                //    }

                //    //                                      //Find bool is paper.

                //    //                                      //Get resource.
                //    EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                //        ele.intPk == intnPkResource);

                //    if (
                //        eleentityRes != null
                //        )
                //    {
                //        //                                  //Get type.
                //        EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleentityRes.intPkElementType);

                //        if (
                //            et != null
                //            )
                //        {
                //            boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
                //                (et.strCustomTypeId == ResResource.strMedia);
                //        }
                //    }

                //    //                                      //Find boolIsDeviceOrMiscConsumable.
                //    EtentityElementTypeEntityDB etentityRes =
                //        (from eleentity in context.Element
                //         join
                //            etentity in context.ElementType on
                //            eleentity.intPkElementType equals etentity.intPk
                //         where
                //            eleentity.intPk == intnPkResource &&
                //            etentity.intPk == eleentity.intPkElementType
                //         select etentity).FirstOrDefault();

                //    //                                      //To know if is a Device or MiscConsumable.
                //    boolnIsDeviceOrMiscConsumable =
                //        (etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                //        etentityRes.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;
                //}

                //                                          //Se movio de lugar la validacion
                //                                          //    ya que ahora podra ser estimada
                //                                          //    si se escogio un recurso del GRPResources.
                //else
                //{
                //    //                                      //The estimation can be not estimate.
                //    boolCanBeEstimate_IO = false;
                //}

                if (
                //                                          //while the IO has Resource o GRP Resource,
                //                                          //    Will continue to add to the list
                    boolHasIOResourceOrGRPResourceSet
                    )
                {
                    //                                          //Verify if Unit allow or not Decimal.
                    numQuantity = (boolAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                    RecbdgjsonResourceBudgetJson resbdgjsonResource = new RecbdgjsonResourceBudgetJson(intnPkResource,
                        strResource, darreleetentity[intI].intPk, true, intnGroupResourceId, boolHasOption,
                        numQuantity, strUnit, numCostByResource.Round(2), boolnIsAvailable, boolnIsCalendar,
                        arrstrInfo, boolCompleted, boolAllowDecimal, boolIsPaper, strLink, boolnIsDeviceOrMiscConsumable);

                    darrbdgres.Add(resbdgjsonResource);
                }

                intI = intI + 1;
            }

            return darrbdgres.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public RecbdgjsonResourceBudgetJson[] arrbdgresjsonFromType(
            //                                              //Get the inputs Resources' budged Type.

            int? intnEstimationId_I,
            String strPrintshopId_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs found after verifying each condition to apply.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            IConfiguration configuration_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            //                                              //List waste to propagate.             
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            ref bool boolCanBeEstimate_IO,
            ref bool boolHasAllResourceSetted_IO,
            ref bool boolHasResourceIncomplete_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s input.
            List<EleetentityElementElementTypeEntityDB> darreleetentityWithoutFilter =
                darreleetentityAll_I.Where(eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == true).ToList();

            //                                              //List of element element types without not physical
            //                                              //      resources.

            //                                              //Clone previous list.
            List<EleetentityElementElementTypeEntityDB> darreleetentity =
                new List<EleetentityElementElementTypeEntityDB>(darreleetentityWithoutFilter);

            foreach (EleetentityElementElementTypeEntityDB eleet in darreleetentityWithoutFilter)
            {
                //                                          //Apply a filter in order to avoid not physical resources.

                //                                          //Find element type.
                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleet.intPkElementTypeSon);
                if (
                    !RestypResourceType.boolIsPhysical(etentity.strClassification)
                    )
                {
                    darreleetentity.Remove(eleet);
                }
            }

            //                                              //To fill an return.
            List<RecbdgjsonResourceBudgetJson> darrbdgres = new List<RecbdgjsonResourceBudgetJson>();

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Get the inputs every process.
                intI < darreleetentity.Count
                //                                         //Se comento porque ahora si se le va a permitir
                //                                          //  abrir la estimacion sin que tenga todos
                //                                          //  recursos setteados.
                //&& boolHasAllResourceSetted_IO
                )
            {
                //                                          //Inital data .
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                int? intnGroupResourceId = null;
                bool boolHasOption = false;
                String strUnit = null;
                bool boolAllowDecimal = true;

                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                double numQuantity = 0.0;
                double numCostByResource = 0.0;

                int? intnJobQuantity = jobjson_I.intnQuantity;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == darreleetentity[intI].intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;
                    intnGroupResourceId = ioentity.intnGroupResourceId;
                    boolHasOption = intnGroupResourceId != null ? true : false;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            //                          //Get the current unit of measurement.
                            ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                                eleentity.intPk);

                            strUnit = valentity != null ? valentity.strValue : null;
                            boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                     (bool)valentity.boolnIsDecimal;
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }
                }

                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == darreleetentity[intI].intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    //                                      //It has not option because in the WFJ was select a 
                    //                                      //    resource for this eleet.
                    boolHasOption = false;

                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);
                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                      )
                    {
                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                }

                bool boolHasIOResourceOrGRPResourceSet = true;
                if (
                    //                                      //There is not resource setted.
                    intnPkResource == null &&
                    intnGroupResourceId == null
                    )
                {
                    boolHasAllResourceSetted_IO = false;
                    boolHasIOResourceOrGRPResourceSet = false;
                }
                else if (
                    //                                      //The estimation can be saved in dataEstimation.
                    intnPkResource == null &&
                    intnGroupResourceId != null
                    )
                {
                    boolHasOption = true;

                    //                                      //Get Estimation Data.
                    EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                        estdata => estdata.intId == intnEstimationId_I &&
                        estdata.intJobId == jobjson_I.intJobId &&
                        estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
                        estdata.intnPkElementElementType == darreleetentity[intI].intPk);

                    if (
                        //                                  //Find Estimate.
                        estdataentity != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == estdataentity.intPkResource);

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;

                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                    }
                    else
                    {
                        //                                      //The estimation can be not estimate.
                        boolCanBeEstimate_IO = false;
                    }
                }

                //                                          //Get the restype.
                EtentityElementTypeEntityDB etentityResType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == darreleetentity[intI].intPkElementTypeSon);

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                bool boolIsPaper = false;
                String[] arrstrInfo = new String[0];
                bool boolCompleted = false;
                bool? boolnIsDeviceOrMiscConsumable = null;
                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        (etentityResType.strCustomTypeId == ResResource.strMedia)
                        )
                    {
                        this.subAddMediaDimensionsAndThickness(darreleetentity[intI].intPk, null, piwentity_I.intPk,
                            (int)intnPkResource, etentityResType.intPk, null, null, null, null);
                    }

                    if (
                        (etentityResType.strCustomTypeId == ResResource.strComponent)
                        )
                    {
                        //this.subAddComponentThicknessInput(darreleetentity[intI].intPk, null, (int)intnPkResource,
                        //    strLink, jobjson_I, piwentity_I, darrdynlkjson_I, darrpiwentity_I);

                        this.subAddInputComponentDimensionsAndThickness(intnEstimationId_I, darreleetentity[intI].intPk,
                            null, (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                            darrpiwentity_I);
                    }

                    //                                      //The estimation could be estimate.

                    //                                      //Perform calculation own for get the Quantity
                    //                                      //    for this IO and save in the 
                    //                                      //    arr quantitys.
                    //                                      //Find calculation and find the quantity
                    //                                      //    From. 

                    //                                      //Qfrom Output.
                    //                                      //Find the quantity associate with this qfrom in the 
                    //                                      //    arr quantitys, if it is not found in the arr quantity, 
                    //                                      //    it is need to find the quantity with link of the next 
                    //                                      //    process (method recursively).

                    //                                      //Qfrom Input.
                    //                                      //Perform calculation for get quantity correct for this IO
                    //                                      //    consider the waste'propagation
                    //                                      //Note. save waste in the arr waste.

                    //                                      //Work with calculation From Quantity.
                    //                                      //Get cost and quantity

                    IoqytjsonIOQuantityJson ioqytjsonQuantityExists = darrioqytjsonIOQuantity_M.FirstOrDefault(
                        ioqyt => ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                        ioqyt.intnPkEleet == darreleetentity[intI].intPk && ioqyt.intnPkEleele == null &&
                        ioqyt.boolAreInput == true && ioqyt.strLink == strLink);

                    if (
                        //                                  //The IO already was analized.
                        ioqytjsonQuantityExists != null
                    )
                    {
                        //                                  //Get data in the Quantity List
                        numQuantity = ioqytjsonQuantityExists.numQuantityIO;
                        numCostByResource = ioqytjsonQuantityExists.numCostResource;
                        darrwstjsonWaste = ioqytjsonQuantityExists.arrwstjsonWaste != null ?
                            ioqytjsonQuantityExists.arrwstjsonWaste.ToList() : darrwstjsonWaste;
                    }
                    else
                    {
                        bool boolWorkflowJobIsReadyNotUsed = true;

                        this.subGetCostAndQuantityByResourceRecursive(intnEstimationId_I, darreleetentity[intI].intPk,
                            null, (int)intnPkResource, boolAllowDecimal, strLink, jobentity_I, jobjson_I, piwentity_I,
                            darrdynlkjson_I, darrioentityAllIO_I, darriojentityAllIOJ_I, darrpiwentity_I,
                            darrioqytjsonIOQuantity_M, darrwstjsonWaste, darrwstpropjson_M, ref numCostByResource,
                            ref numQuantity, ref boolWorkflowJobIsReadyNotUsed);
                    }

                    if (
                        //                                  //A resource with link does not generate cost, therefore
                        //                                  //      it does not matter if it is incomplete
                        strLink == null
                        )
                    {
                        ResResource.subVerifyResourceInfo((int)intnPkResource, jobjson_I, piwentity_I.intPkWorkflow,
                        piwentity_I, darreleetentity[intI].intPk, true, configuration_I, strPrintshopId_I,
                        intnEstimationId_I, ref arrstrInfo, ref boolCompleted);

                        if (
                            !boolCompleted
                            )
                        {
                            boolHasResourceIncomplete_IO = true;
                        }
                    }

                    //                                      //Find bool is paper.

                    //                                      //Get resource.
                    EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                        ele.intPk == intnPkResource);

                    if (
                        eleentityRes != null
                        )
                    {
                        //                                  //Get type.
                        EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleentityRes.intPkElementType);

                        if (
                            et != null
                            )
                        {
                            boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
                                (et.strCustomTypeId == ResResource.strMedia);
                        }
                    }

                    //                                      //Find boolIsDeviceOrMiscConsumable.
                    EtentityElementTypeEntityDB etentityRes =
                        (from eleentity in context.Element
                         join
                            etentity in context.ElementType on
                            eleentity.intPkElementType equals etentity.intPk
                         where
                            eleentity.intPk == intnPkResource &&
                            etentity.intPk == eleentity.intPkElementType
                         select etentity).FirstOrDefault();

                    //                                      //To know if is a Device or MiscConsumable.
                    boolnIsDeviceOrMiscConsumable =
                        (etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                        etentityRes.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;
                }
                //                                          //Se movio de lugar la validacion
                //                                          //    ya que ahora podra ser estimada
                //                                          //    si se escogio un recurso del GRPResources.
                //else
                //{
                //    //                                      //The estimation can be not estimate.
                //    boolCanBeEstimate_IO = false;
                //}

                if (
                //                                          //while the IO has Resource o GRP Resource,
                //                                          //    Will continue to add to the list
                    boolHasIOResourceOrGRPResourceSet
                    )
                {
                    //                                          //Verify if Unit allow or not Decimal.
                    numQuantity = (boolAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                    RecbdgjsonResourceBudgetJson resbdgjsonResource = new RecbdgjsonResourceBudgetJson(intnPkResource,
                        strResource, darreleetentity[intI].intPk, true, intnGroupResourceId, boolHasOption,
                        numQuantity, strUnit, numCostByResource.Round(2), boolnIsAvailable, boolnIsCalendar,
                        arrstrInfo, boolCompleted, boolAllowDecimal, boolIsPaper, strLink, boolnIsDeviceOrMiscConsumable);

                    darrbdgres.Add(resbdgjsonResource);
                }

                intI = intI + 1;
            }

            return darrbdgres.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public RecbdgjsonResourceBudgetJson[] arrbdgresjsonFromTemplate(
            //                                              //Get the inputs Resources'budged Temp.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            String strPrintshopId_I,
            int? intnEstimationId_I,
            //                                              //PIWs found after verifying each condition to apply.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            IConfiguration configuration_I,
            ref bool boolHasAllResourceSetted_IO,
            ref bool boolCanBeEstimate_IO,
            ref bool boolHasResourceIncomplete_IO,
            //                                              //List waste to propagate.             
            ref List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            //                                              //Arr to quantitys for each IO.
            ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the inputs/outputs types.
            List<EleeleentityElementElementEntityDB> darreleeleentityWithoutFilter =
                context.ElementElement.Where(eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == true).ToList();

            //                                              //List of element element without not physical
            //                                              //      resources.

            //                                              //Clone previous list.
            List<EleeleentityElementElementEntityDB> darreleeleentity =
                new List<EleeleentityElementElementEntityDB>(darreleeleentityWithoutFilter);

            foreach (EleeleentityElementElementEntityDB eleele in darreleeleentityWithoutFilter)
            {
                //                                          //Find resource.
                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleele.intPkElementSon);

                //                                          //Apply a filter in order to avoid not physical resources.

                //                                          //Find element type.
                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentity.intPkElementType);
                if (
                    !RestypResourceType.boolIsPhysical(etentity.strClassification)
                    )
                {
                    darreleeleentity.Remove(eleele);
                }
            }

            List<RecbdgjsonResourceBudgetJson> darrbdgres = new List<RecbdgjsonResourceBudgetJson>();

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Get the inputs every process.
                intI < darreleeleentity.Count
                //                                          //Se comento porque ahora si se le va a permitir
                //                                          //    abrir la estimacion sin que todos los recursos
                //                                          //    esten setteados.
                //&&  boolHasAllResourceSetted_IO
                )
            {
                //                                          //Template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == darreleeleentity[intI].intPkElementSon);

                EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                int? intnGroupResourceId = null;
                bool boolHasOption = false;
                String strUnit = null;
                bool boolAllowDecimal = true;

                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                //                                          //Calculated data for final resource.
                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                String strTypeAndTemplate = etentityType.strCustomTypeId + " : " + eleentityTemplate.strElementName;

                int? intnJobQuantity = jobjson_I.intnQuantity;


                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == darreleeleentity[intI].intPk);
                if (
                    ioentity != null
                    )
                {
                    strLink = ioentity.strLink;
                    intnGroupResourceId = ioentity.intnGroupResourceId;
                    boolHasOption = intnGroupResourceId != null ? true : false;

                    if (
                        ioentity.intnPkResource != null
                        &&
                        //                                  //Only IOs that has link, it has not calculation.
                        strLink == null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            //                              //Get the current unit of measurement.
                            ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                                eleentity.intPk);

                            strUnit = valentity != null ? valentity.strValue : null;
                            boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }
                }

                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
                FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                ioj.intnPkElementElement == darreleeleentity[intI].intPk &&
                ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    //                                      //It has not option because in the WFJ was select a 
                    //                                      //    resource for this eleet.
                    boolHasOption = false;

                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                    {
                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                }

                bool boolHasIOResourceOrGRPResourceSet = true;
                if (
                    //                                      //There is not resource setted.
                    intnPkResource == null &&
                    intnGroupResourceId == null
                    )
                {
                    boolHasAllResourceSetted_IO = false;
                    boolHasIOResourceOrGRPResourceSet = false;
                }
                else if (
                    //                                      //The estimation can be saved in dataEstimation.
                    intnPkResource == null &&
                    intnGroupResourceId != null
                    )
                {
                    boolHasOption = true;

                    //                                      //Get Estimation Data.
                    EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                        estdata => estdata.intId == intnEstimationId_I &&
                        estdata.intJobId == jobjson_I.intJobId &&
                        estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
                        estdata.intnPkElementElement == darreleeleentity[intI].intPk);

                    if (
                        //                                  //Find Estimate.
                        estdataentity != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == estdataentity.intPkResource);

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;

                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                    }
                    else
                    {
                        //                                  //The estimation can be not estimate for this Job..
                        boolCanBeEstimate_IO = false;
                    }
                }

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                bool boolIsPaper = false;
                String[] arrstrInfo = new String[0];
                bool boolCompleted = false;
                bool? boolnIsDeviceOrMiscConsumable = null;
                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                //if (
                //    intnPkResource != null
                //    )
                //{
                //    //                                      //The estimation could be estimate.

                //    //                                      //Perform calculation own for get the Quantity
                //    //                                      //    for this IO and save in the 
                //    //                                      //    arr quantitys.
                //    //                                      //Find calculation and find the quantity
                //    //                                      //    From. 

                //    //                                      //Qfrom Output.
                //    //                                      //Find the quantity associate with this qfrom in the 
                //    //                                      //    arr quantitys, if it is not found in the arr quantity, 
                //    //                                      //    it is need to find the quantity with link of the next 
                //    //                                      //    process (method recursively).

                //    //                                      //Qfrom Input.
                //    //                                      //Perform calculation for get quantity correct for this IO
                //    //                                      //    consider the waste'propagation
                //    //                                      //Note. save waste in the arr waste.

                //    //                                      //Work with calculation From Quantity.
                //    //                                      //Get cost and quantity

                //    IoqytjsonIOQuantityJson ioqytjsonQuantityExists = darrioqytjsonIOQuantity_M.FirstOrDefault(
                //        ioqyt => ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                //        ioqyt.intnPkEleele == darreleeleentity[intI].intPk && ioqyt.intnPkEleet == null &&
                //        ioqyt.boolAreInput == true && ioqyt.strLink == strLink);

                //    if (
                //        //                                  //The IO already was analized.
                //        ioqytjsonQuantityExists != null
                //    )
                //    {
                //        //                                  //Get data in the Quantity List
                //        numQuantity = ioqytjsonQuantityExists.numQuantityIO;
                //        numCostByResource = ioqytjsonQuantityExists.numCostResource;
                //        darrwstjsonWaste = ioqytjsonQuantityExists.arrwstjsonWaste.ToList();
                //    }
                //    else
                //    {
                //        bool boolWorkflowJobIsReadyNotUsed = true;
                //        this.subGetCostAndQuantityByResourceRecursive(jobjson_I, strPrintshopId_I, (int)intnPkResource,
                //            piwentity_I, null, darreleeleentity[intI].intPk, strLink, boolAllowDecimal, darrpiwentity_I,
                //            darrdynlkjson_I, intnEstimationId_I, configuration_I, ref numQuantity, ref numCostByResource,
                //            ref darrwstjsonWaste, ref darrwstpropjson_M, ref darrioqytjsonIOQuantity_M, 
                //            ref boolWorkflowJobIsReadyNotUsed);
                //    }

                //    if (
                //        //                                  //A resource with link does not generate cost, therefore
                //        //                                  //      it does not matter if it is incomplete
                //        strLink == null
                //        )
                //    {
                //        ResResource.subVerifyResourceInfo((int)intnPkResource, jobjson_I, piwentity_I.intPkWorkflow,
                //            piwentity_I, darreleeleentity[intI].intPk, false, configuration_I, strPrintshopId_I,
                //            intnEstimationId_I, ref arrstrInfo, ref boolCompleted);

                //        if (
                //            !boolCompleted
                //            )
                //        {
                //            boolHasResourceIncomplete_IO = true;
                //        }
                //    }

                //    //                                      //Find bool is paper.

                //    //                                      //Get resource.
                //    EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                //        ele.intPk == ioentity.intnPkResource);

                //    if (
                //        eleentityRes != null
                //        )
                //    {
                //        //                                  //Get type.
                //        EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleentityRes.intPkElementType);

                //        if (
                //            et != null
                //            )
                //        {
                //            boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
                //                (et.strCustomTypeId == ResResource.strMedia);
                //        }
                //    }

                //    //                                      //Find boolIsDeviceOrMiscConsumable.
                //    EtentityElementTypeEntityDB etentityRes =
                //        (from eleentity in context.Element
                //         join
                //            etentity in context.ElementType on
                //            eleentity.intPkElementType equals etentity.intPk
                //         where
                //            eleentity.intPk == intnPkResource &&
                //            etentity.intPk == eleentity.intPkElementType
                //         select etentity).FirstOrDefault();

                //    //                                      //To know if is a Device or MiscConsumable.
                //    boolnIsDeviceOrMiscConsumable =
                //        (etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                //        etentityRes.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;
                //}
                //                                          //Se movio de lugar la validacion
                //                                          //    ya que ahora podra ser estimada
                //                                          //    si se escogio un recurso del GRPResources.
                //else
                //{
                //    //                                    //The estimation can be not estimate for this Job..
                //    boolCanBeEstimate_IO = false;
                //}

                if (
                    //                                      //while the IO has Resource o GRP Resource,
                    //                                      //    Will continue to add to the list.
                    boolHasIOResourceOrGRPResourceSet
                    )
                {
                    //                                          //Verify if Unit allow or not Decimal.
                    numQuantity = (boolAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                    RecbdgjsonResourceBudgetJson resbdgjsonResource = new RecbdgjsonResourceBudgetJson(intnPkResource,
                        strResource, darreleeleentity[intI].intPk, false, intnGroupResourceId, boolHasOption,
                        numQuantity, strUnit, numCostByResource.Round(2), boolnIsAvailable, boolnIsCalendar,
                        arrstrInfo, boolCompleted, boolAllowDecimal, boolIsPaper, strLink, boolnIsDeviceOrMiscConsumable);

                    darrbdgres.Add(resbdgjsonResource);
                }

                intI = intI + 1;
            }

            return darrbdgres.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public RecbdgjsonResourceBudgetJson[] arrbdgresjsonFromTemplate(
            //                                              //Get the inputs Resources'budged Temp.

            int? intnEstimationId_I,
            String strPrintshopId_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleeleentityElementElementEntityDB> darreleeleentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs found after verifying each condition to apply.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            IConfiguration configuration_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            //                                              //List waste to propagate.             
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            ref bool boolCanBeEstimate_IO,
            ref bool boolHasAllResourceSetted_IO,
            ref bool boolHasResourceIncomplete_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the inputs/outputs types.
            List<EleeleentityElementElementEntityDB> darreleeleentityWithoutFilter =
                darreleeleentityAll_I.Where(eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == true).ToList();

            //                                              //List of element element without not physical
            //                                              //      resources.

            //                                              //Clone previous list.
            List<EleeleentityElementElementEntityDB> darreleeleentity =
                new List<EleeleentityElementElementEntityDB>(darreleeleentityWithoutFilter);

            foreach (EleeleentityElementElementEntityDB eleele in darreleeleentityWithoutFilter)
            {
                //                                          //Find resource.
                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleele.intPkElementSon);

                //                                          //Apply a filter in order to avoid not physical resources.

                //                                          //Find element type.
                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentity.intPkElementType);
                if (
                    !RestypResourceType.boolIsPhysical(etentity.strClassification)
                    )
                {
                    darreleeleentity.Remove(eleele);
                }
            }

            List<RecbdgjsonResourceBudgetJson> darrbdgres = new List<RecbdgjsonResourceBudgetJson>();

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Get the inputs every process.
                intI < darreleeleentity.Count
                //                                          //Se comento porque ahora si se le va a permitir
                //                                          //    abrir la estimacion sin que todos los recursos
                //                                          //    esten setteados.
                //&&  boolHasAllResourceSetted_IO
                )
            {
                //                                          //Template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == darreleeleentity[intI].intPkElementSon);

                EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                int? intnGroupResourceId = null;
                bool boolHasOption = false;
                String strUnit = null;
                bool boolAllowDecimal = true;

                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                //                                          //Calculated data for final resource.
                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                String strTypeAndTemplate = etentityType.strCustomTypeId + " : " + eleentityTemplate.strElementName;

                int? intnJobQuantity = jobjson_I.intnQuantity;


                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == darreleeleentity[intI].intPk);
                if (
                    ioentity != null
                    )
                {
                    strLink = ioentity.strLink;
                    intnGroupResourceId = ioentity.intnGroupResourceId;
                    boolHasOption = intnGroupResourceId != null ? true : false;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            //                              //Get the current unit of measurement.
                            ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                                eleentity.intPk);

                            strUnit = valentity != null ? valentity.strValue : null;
                            boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }
                }

                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                ioj.intnPkElementElement == darreleeleentity[intI].intPk &&
                ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    //                                      //It has not option because in the WFJ was select a 
                    //                                      //    resource for this eleet.
                    boolHasOption = false;

                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                    {
                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                }

                bool boolHasIOResourceOrGRPResourceSet = true;
                if (
                    //                                      //There is not resource setted.
                    intnPkResource == null &&
                    intnGroupResourceId == null
                    )
                {
                    boolHasAllResourceSetted_IO = false;
                    boolHasIOResourceOrGRPResourceSet = false;
                }
                else if (
                    //                                      //The estimation can be saved in dataEstimation.
                    intnPkResource == null &&
                    intnGroupResourceId != null
                    )
                {
                    boolHasOption = true;

                    //                                      //Get Estimation Data.
                    EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                        estdata => estdata.intId == intnEstimationId_I &&
                        estdata.intJobId == jobjson_I.intJobId &&
                        estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
                        estdata.intnPkElementElement == darreleeleentity[intI].intPk);

                    if (
                        //                                  //Find Estimate.
                        estdataentity != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == estdataentity.intPkResource);

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;

                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                    }
                    else
                    {
                        //                                  //The estimation can be not estimate for this Job..
                        boolCanBeEstimate_IO = false;
                    }
                }

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                bool boolIsPaper = false;
                String[] arrstrInfo = new String[0];
                bool boolCompleted = false;
                bool? boolnIsDeviceOrMiscConsumable = null;
                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        (etentityType.strCustomTypeId == ResResource.strMedia)
                        )
                    {
                        this.subAddMediaDimensionsAndThickness(null, darreleeleentity[intI].intPk, piwentity_I.intPk,
                            (int)intnPkResource, etentityType.intPk, null, null, null, null);
                    }

                    if (
                        (etentityType.strCustomTypeId == ResResource.strComponent)
                        )
                    {
                        this.subAddInputComponentDimensionsAndThickness(intnEstimationId_I, null,
                            darreleeleentity[intI].intPk, (int)intnPkResource, strLink, jobjson_I, piwentity_I,
                            darrdynlkjson_I, darrpiwentity_I);
                    }

                    //                                      //The estimation could be estimate.

                    //                                      //Perform calculation own for get the Quantity
                    //                                      //    for this IO and save in the 
                    //                                      //    arr quantitys.
                    //                                      //Find calculation and find the quantity
                    //                                      //    From. 

                    //                                      //Qfrom Output.
                    //                                      //Find the quantity associate with this qfrom in the 
                    //                                      //    arr quantitys, if it is not found in the arr quantity, 
                    //                                      //    it is need to find the quantity with link of the next 
                    //                                      //    process (method recursively).

                    //                                      //Qfrom Input.
                    //                                      //Perform calculation for get quantity correct for this IO
                    //                                      //    consider the waste'propagation
                    //                                      //Note. save waste in the arr waste.

                    //                                      //Work with calculation From Quantity.
                    //                                      //Get cost and quantity

                    IoqytjsonIOQuantityJson ioqytjsonQuantityExists = darrioqytjsonIOQuantity_M.FirstOrDefault(
                        ioqyt => ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                        ioqyt.intnPkEleele == darreleeleentity[intI].intPk && ioqyt.intnPkEleet == null &&
                        ioqyt.boolAreInput == true && ioqyt.strLink == strLink);

                    if (
                        //                                  //The IO already was analized.
                        ioqytjsonQuantityExists != null
                        )
                    {
                        //                                  //Get data in the Quantity List
                        numQuantity = ioqytjsonQuantityExists.numQuantityIO;
                        numCostByResource = ioqytjsonQuantityExists.numCostResource;
                        darrwstjsonWaste = ioqytjsonQuantityExists.arrwstjsonWaste.ToList();
                    }
                    else
                    {
                        bool boolWorkflowJobIsReadyNotUsed = true;

                        this.subGetCostAndQuantityByResourceRecursive(intnEstimationId_I, null,
                            darreleeleentity[intI].intPk, (int)intnPkResource, boolAllowDecimal, strLink, jobentity_I,
                            jobjson_I, piwentity_I, darrdynlkjson_I, darrioentityAllIO_I, darriojentityAllIOJ_I,
                            darrpiwentity_I, darrioqytjsonIOQuantity_M, darrwstjsonWaste, darrwstpropjson_M,
                            ref numCostByResource, ref numQuantity, ref boolWorkflowJobIsReadyNotUsed);
                    }

                    if (
                        //                                  //A resource with link does not generate cost, therefore
                        //                                  //      it does not matter if it is incomplete
                        strLink == null
                        )
                    {
                        ResResource.subVerifyResourceInfo((int)intnPkResource, jobjson_I, piwentity_I.intPkWorkflow,
                            piwentity_I, darreleeleentity[intI].intPk, false, configuration_I, strPrintshopId_I,
                            intnEstimationId_I, ref arrstrInfo, ref boolCompleted);

                        if (
                            !boolCompleted
                            )
                        {
                            boolHasResourceIncomplete_IO = true;
                        }
                    }

                    //                                      //Find bool is paper.

                    //                                      //Get resource.
                    EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                        ele.intPk == ioentity.intnPkResource);

                    if (
                        eleentityRes != null
                        )
                    {
                        //                                  //Get type.
                        EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleentityRes.intPkElementType);

                        if (
                            et != null
                            )
                        {
                            boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
                                (et.strCustomTypeId == ResResource.strMedia);
                        }
                    }

                    //                                      //Find boolIsDeviceOrMiscConsumable.
                    EtentityElementTypeEntityDB etentityRes =
                        (from eleentity in context.Element
                         join
                            etentity in context.ElementType on
                            eleentity.intPkElementType equals etentity.intPk
                         where
                            eleentity.intPk == intnPkResource &&
                            etentity.intPk == eleentity.intPkElementType
                         select etentity).FirstOrDefault();

                    //                                      //To know if is a Device or MiscConsumable.
                    boolnIsDeviceOrMiscConsumable =
                        (etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                        etentityRes.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;
                }
                //                                          //Se movio de lugar la validacion
                //                                          //    ya que ahora podra ser estimada
                //                                          //    si se escogio un recurso del GRPResources.
                //else
                //{
                //    //                                    //The estimation can be not estimate for this Job..
                //    boolCanBeEstimate_IO = false;
                //}

                if (
                    //                                      //while the IO has Resource o GRP Resource,
                    //                                      //    Will continue to add to the list.
                    boolHasIOResourceOrGRPResourceSet
                    )
                {
                    //                                          //Verify if Unit allow or not Decimal.
                    numQuantity = (boolAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                    RecbdgjsonResourceBudgetJson resbdgjsonResource = new RecbdgjsonResourceBudgetJson(intnPkResource,
                        strResource, darreleeleentity[intI].intPk, false, intnGroupResourceId, boolHasOption,
                        numQuantity, strUnit, numCostByResource.Round(2), boolnIsAvailable, boolnIsCalendar,
                        arrstrInfo, boolCompleted, boolAllowDecimal, boolIsPaper, strLink, boolnIsDeviceOrMiscConsumable);

                    darrbdgres.Add(resbdgjsonResource);
                }

                intI = intI + 1;
            }

            return darrbdgres.ToArray();
        }
        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static String strUnitFromEleentityResource(
            EleentityElementEntityDB eleentity_I
            )
        {
            String strUnit = null;

            if (
                EtElementTypeAbstract.etFromDB(eleentity_I.intPkElementType).strClassification !=
                RestypResourceType.strResourceTypeParameter
                )
            {
                //                          //Get the current unit of measurement.
                ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                    eleentity_I.intPk);

                strUnit = valentity != null ? valentity.strValue : null;
            }

            return strUnit;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        //public RecbdgjsonResourceBudgetJson[] arrbdgresjsonFromTypePostProcess(
        //    //                                              //Get the inputs Resources' budged Type.

        //    PiwentityProcessInWorkflowEntityDB piwentity_I,
        //    JobjsonJobJson jobjson_I,
        //    String strPrintshopId_I,
        //    bool boolAreInputs_I,
        //    int? intnEstimationId_I,
        //    //                                              //PIWs found after verifying each condition to apply.
        //    List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
        //    List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
        //    IConfiguration configuration_I,
        //    ref bool boolHasAllResourceSetted_IO,
        //    ref bool boolCanBeEstimate_IO,
        //    ref bool boolHasResourceIncomplete_IO,
        //    //                                              //Arr to quantitys for each IO.
        //    ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
        //    )
        //{
        //    Odyssey2Context context = new Odyssey2Context();

        //    //                                              //Get eleet-s input.
        //    List<EleetentityElementElementTypeEntityDB> darreleetentityWithoutFilter =
        //        context.ElementElementType.Where(eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
        //        eleet.boolUsage == boolAreInputs_I).ToList();

        //    //                                              //List of element element types without not physical
        //    //                                              //      resources.

        //    //                                              //Clone previous list.
        //    List<EleetentityElementElementTypeEntityDB> darreleetentity =
        //        new List<EleetentityElementElementTypeEntityDB>(darreleetentityWithoutFilter);

        //    foreach (EleetentityElementElementTypeEntityDB eleet in darreleetentityWithoutFilter)
        //    {
        //        //                                          //Apply a filter in order to avoid not physical resources.

        //        //                                          //Find element type.
        //        EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
        //            et.intPk == eleet.intPkElementTypeSon);
        //        if (
        //            !RestypResourceType.boolIsPhysical(etentity.strClassification)
        //            )
        //        {
        //            darreleetentity.Remove(eleet);
        //        }
        //    }

        //    //                                              //To fill an return.
        //    List<RecbdgjsonResourceBudgetJson> darrbdgres = new List<RecbdgjsonResourceBudgetJson>();

        //    int intI = 0;
        //    /*REPEAT-WHILE*/
        //    while (
        //        //                                          //Get the inputs every process.
        //        intI < darreleetentity.Count
        //        //                                          //Se comento porque ahora si se le va a permitir
        //        //                                          //    abrir la estimacion sin que todos los recursos
        //        //                                          //    esten setteados.
        //        //&& boolHasAllResourceSetted_IO
        //        )
        //    {
        //        //                                          //Inital data .
        //        //                                          //Link.
        //        String strLink = null;
        //        //                                          //Resource data from IO or IOj.
        //        String strResource = null;
        //        int? intnPkResource = null;
        //        int? intnGroupResourceId = null;
        //        bool boolHasOption = false;
        //        String strUnit = null;
        //        bool boolAllowDecimal = true;

        //        bool? boolnIsAvailable = null;
        //        bool? boolnIsCalendar = null;

        //        double numQuantity = 0.0;
        //        double numCostByResource = 0.0;
        //        double numJobFinalCost = 0.0;

        //        int? intnJobQuantity = jobjson_I.intnQuantity;

        //        //                                          //Get the resource if it exists in the product workflow and
        //        //                                          //      the link if it exists.
        //        IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
        //            io.intPkWorkflow == piwentity_I.intPkWorkflow &&
        //            io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
        //            io.intnPkElementElementType == darreleetentity[intI].intPk);
        //        if (
        //            ioentity != null
        //            )
        //        {
        //            //                                      //Set the link.
        //            strLink = ioentity.strLink;
        //            intnGroupResourceId = ioentity.intnGroupResourceId;
        //            boolHasOption = intnGroupResourceId != null ? true : false;

        //            if (
        //                ioentity.intnPkResource != null
        //                )
        //            {
        //                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                    ele.intPk == ioentity.intnPkResource);

        //                if (
        //                    EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
        //                    RestypResourceType.strResourceTypeParameter
        //                    )
        //                {
        //                    //                          //Get the current unit of measurement.
        //                    ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
        //                        eleentity.intPk);

        //                    strUnit = valentity != null ? valentity.strValue : null;
        //                    boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                             (bool)valentity.boolnIsDecimal;
        //                }

        //                strResource = eleentity.strElementName;
        //                intnPkResource = eleentity.intPk;
        //                boolnIsAvailable = eleentity.boolnIsAvailable;
        //                boolnIsCalendar = eleentity.boolnIsCalendar;
        //            }
        //        }

        //        //                                          //Get the resource if it exists in the job workflow.
        //        IojentityInputsAndOutputsForAJobEntityDB iojentity =
        //            context.InputsAndOutputsForAJob.FirstOrDefault(ioj =>
        //            ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
        //            ioj.intnPkElementElementType == darreleetentity[intI].intPk &&
        //            ioj.intJobId == jobjson_I.intJobId);
        //        if (
        //            iojentity != null
        //            )
        //        {
        //            //                                      //It has not option because in the WFJ was select a 
        //            //                                      //    resource for this eleet.
        //            boolHasOption = false;

        //            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                ele.intPk == iojentity.intPkResource);
        //            if (
        //                EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
        //                RestypResourceType.strResourceTypeParameter
        //                )
        //            {
        //                //                                  //Get the current unit of measurement.
        //                ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
        //                    eleentity.intPk);

        //                strUnit = valentity != null ? valentity.strValue : null;
        //                boolAllowDecimal = (valentity.boolnIsDecimal == null) ?
        //                    true : (bool)valentity.boolnIsDecimal;
        //            }

        //            strResource = eleentity.strElementName;
        //            intnPkResource = eleentity.intPk;
        //            boolnIsAvailable = eleentity.boolnIsAvailable;
        //            boolnIsCalendar = eleentity.boolnIsCalendar;
        //        }

        //        bool boolHasIOResourceOrGRPResourceSet = true;
        //        if (
        //            //                                      //There is not resource setted.
        //            intnPkResource == null &&
        //            intnGroupResourceId == null
        //            )
        //        {
        //            boolHasAllResourceSetted_IO = false;
        //            boolHasIOResourceOrGRPResourceSet = false;
        //        }
        //        else if (
        //            //                                      //The estimation can be saved in dataEstimation.
        //            intnPkResource == null &&
        //            intnGroupResourceId != null
        //            )
        //        {
        //            boolHasOption = true;

        //            //                                      //Get Estimation Data.
        //            EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
        //                estdata => estdata.intId == intnEstimationId_I &&
        //                estdata.intJobId == jobjson_I.intJobId &&
        //                estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
        //                estdata.intnPkElementElementType == darreleetentity[intI].intPk);

        //            if (
        //                //                                  //Find Estimate.
        //                estdataentity != null
        //                )
        //            {
        //                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                ele.intPk == estdataentity.intPkResource);

        //                ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

        //                if (
        //                    valentity != null
        //                    )
        //                {
        //                    boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                        (bool)valentity.boolnIsDecimal;
        //                    strUnit = valentity.strValue;
        //                }

        //                strResource = eleentity.strElementName;
        //                intnPkResource = eleentity.intPk;
        //                boolnIsAvailable = eleentity.boolnIsAvailable;
        //                boolnIsCalendar = eleentity.boolnIsCalendar;
        //            }
        //            else
        //            {
        //                //                                      //The estimation can be not estimate.
        //                boolCanBeEstimate_IO = false;
        //            }
        //        }

        //        List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
        //        bool boolIsPaper = false;
        //        String[] arrstrInfo = new String[0];
        //        bool boolCompleted = false;
        //        bool? boolnIsDeviceOrMiscConsumable = null;

        //        //                                          //Get calculations associated to the resource and the 
        //        //                                          //      product if the input/output has a resource set.
        //        if (
        //            intnPkResource != null
        //            )
        //        {

        //            if (
        //                //                                  //Io Input.
        //                boolAreInputs_I
        //                )
        //            {
        //                if (
        //                    //                              //IO has not Links.
        //                    strLink == null
        //                    )
        //                {
        //                    //                              //Work with calculation From Quantity.
        //                    //                              //Get cost and quantity.
        //                    this.subGetCostAndQuantityByResourceRecursivePostProcess(jobjson_I, strPrintshopId_I,
        //                        (int)intnPkResource, piwentity_I, darreleetentity[intI].intPk, null, boolAllowDecimal,
        //                        darrpiwentity_I, darrdynlkjson_I, intnEstimationId_I, configuration_I, ref numQuantity,
        //                        ref numCostByResource, ref numJobFinalCost, ref darrioqytjsonIOQuantity_M);

        //                    //                              //A resource with link does not generate cost, therefore
        //                    //                              //      it does not matter if it is incomplete

        //                    ResResource.subVerifyResourceInfo((int)intnPkResource, jobjson_I, piwentity_I.intPkWorkflow,
        //                    piwentity_I, darreleetentity[intI].intPk, true, configuration_I, strPrintshopId_I,
        //                    intnEstimationId_I, ref arrstrInfo, ref boolCompleted);

        //                    if (
        //                        !boolCompleted
        //                        )
        //                    {
        //                        boolHasResourceIncomplete_IO = true;
        //                    }
        //                }
        //                else
        //                {
        //                    if (
        //                        //                          //This io is set as a final product.
        //                        ioentity != null && ioentity.boolnIsFinalProduct == true
        //                        )
        //                    {
        //                        //                      //Find name of the other side of the link.
        //                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, darreleetentity[intI].intPk,
        //                            null, strLink, darrpiwentity_I, darrdynlkjson_I, context);

        //                        //                          //Take the quantity from job and and save in the arr 
        //                        //                          //      quantity for this IO.
        //                        ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
        //                            strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity,
        //                            ref strUnit);
        //                    }
        //                    else
        //                    {
        //                        //                              //IO has Links.
        //                        //                              //Get Quantity info of the previously PIW for each IO
        //                        //                              //    for the PIW previously.

        //                        String strLinkNew;
        //                        this.subGetQuantityFromIOWithLinkInTheInput(piwentity_I, jobjson_I, strPrintshopId_I,
        //                            ioentity.intnPkElementElementType, ioentity.intnPkElementElement,
        //                            (int)intnPkResource, strLink, darrpiwentity_I, darrdynlkjson_I, configuration_I,
        //                            out strLinkNew, ref numQuantity, ref darrioqytjsonIOQuantity_M);

        //                        strLink = strLinkNew;
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                if (
        //                    //                              //IO has Links.
        //                    strLink != null
        //                    )
        //                {
        //                    //                              //Find name of the other side of the link.
        //                    strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, darreleetentity[intI].intPk, null,
        //                        strLink, darrpiwentity_I, darrdynlkjson_I, context);
        //                }

        //                //                                  //boolAreInputs_I is false, means:
        //                //                                  //IO Output.
        //                //                                  //Work with Transform calculation.
        //                this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
        //                    darreleetentity[intI].intPk, null, (int)intnPkResource, strLink, ref numQuantity,
        //                    ref darrioqytjsonIOQuantity_M);
        //            }

        //            //                                      //Find bool is paper.

        //            //                                      //Get resource.
        //            EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
        //                ele.intPk == ioentity.intnPkResource);

        //            if (
        //                eleentityRes != null
        //                )
        //            {
        //                //                                  //Get type.
        //                EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleentityRes.intPkElementType);

        //                if (
        //                    et != null
        //                    )
        //                {
        //                    boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
        //                        (et.strCustomTypeId == ResResource.strMedia);
        //                }
        //            }

        //            //                                      //Find boolIsDeviceOrMiscConsumable.
        //            EtentityElementTypeEntityDB etentityRes =
        //                (from eleentity in context.Element
        //                 join
        //                    etentity in context.ElementType on
        //                    eleentity.intPkElementType equals etentity.intPk
        //                 where
        //                    eleentity.intPk == intnPkResource &&
        //                    etentity.intPk == eleentity.intPkElementType
        //                 select etentity).FirstOrDefault();

        //            //                                      //To know if is a Device or MiscConsumable.
        //            boolnIsDeviceOrMiscConsumable =
        //                (etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
        //                etentityRes.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;
        //        }
        //        //                                          //Se comento porque ahora si se le va a permitir
        //        //                                          //    abrir la estimacion sin que todos los recursos
        //        //                                          //    esten setteados.
        //        //else
        //        //{
        //        //    //                                      //The estimation can be not estimate.
        //        //    boolCanBeEstimate_IO = false;
        //        //}

        //        if (
        //            //                                      //while the IO has Resource o GRP Resource,
        //            //                                      //    Will continue to add to the list.
        //            boolHasIOResourceOrGRPResourceSet
        //            )
        //        {
        //            //                                          //Verify if Unit allow or not Decimal.
        //            numQuantity = (boolAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

        //            RecbdgjsonResourceBudgetJson resbdgjsonResource = new RecbdgjsonResourceBudgetJson(intnPkResource,
        //                strResource, darreleetentity[intI].intPk, true, intnGroupResourceId, boolHasOption,
        //                numQuantity, strUnit, numCostByResource.Round(2), boolnIsAvailable, boolnIsCalendar,
        //                arrstrInfo, boolCompleted, boolAllowDecimal, boolIsPaper, strLink, boolnIsDeviceOrMiscConsumable);

        //            darrbdgres.Add(resbdgjsonResource);
        //        }

        //        intI = intI + 1;
        //    }

        //    return darrbdgres.ToArray();
        //}

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public RecbdgjsonResourceBudgetJson[] arrbdgresjsonFromTypePostProcess(
            //                                              //Get the inputs Resources' budged Type.

            int? intnEstimationId_I,
            bool boolAreInputs_I,
            String strPrintshopId_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs found after verifying each condition to apply.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            IConfiguration configuration_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            ref bool boolCanBeEstimate_IO,
            ref bool boolHasAllResourceSetted_IO,
            ref bool boolHasResourceIncomplete_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s input.
            List<EleetentityElementElementTypeEntityDB> darreleetentityWithoutFilter =
                darreleetentityAll_I.Where(eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            //                                              //List of element element types without not physical
            //                                              //      resources.

            //                                              //Clone previous list.
            List<EleetentityElementElementTypeEntityDB> darreleetentity =
                new List<EleetentityElementElementTypeEntityDB>(darreleetentityWithoutFilter);

            foreach (EleetentityElementElementTypeEntityDB eleet in darreleetentityWithoutFilter)
            {
                //                                          //Apply a filter in order to avoid not physical resources.

                //                                          //Find element type.
                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleet.intPkElementTypeSon);
                if (
                    !RestypResourceType.boolIsPhysical(etentity.strClassification)
                    )
                {
                    darreleetentity.Remove(eleet);
                }
            }

            //                                              //To fill an return.
            List<RecbdgjsonResourceBudgetJson> darrbdgres = new List<RecbdgjsonResourceBudgetJson>();

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Get the inputs every process.
                intI < darreleetentity.Count
                //                                          //Se comento porque ahora si se le va a permitir
                //                                          //    abrir la estimacion sin que todos los recursos
                //                                          //    esten setteados.
                //&& boolHasAllResourceSetted_IO
                )
            {
                //                                          //Inital data .
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                int? intnGroupResourceId = null;
                bool boolHasOption = false;
                String strUnit = null;
                bool boolAllowDecimal = true;

                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                double numQuantity = 0.0;
                double numCostByResource = 0.0;

                int? intnJobQuantity = jobjson_I.intnQuantity;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == darreleetentity[intI].intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;
                    intnGroupResourceId = ioentity.intnGroupResourceId;
                    boolHasOption = intnGroupResourceId != null ? true : false;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            //                          //Get the current unit of measurement.
                            ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                                eleentity.intPk);

                            strUnit = valentity != null ? valentity.strValue : null;
                            boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                     (bool)valentity.boolnIsDecimal;
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }
                }

                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity =
                    darriojentityAllIOJ_I.FirstOrDefault(ioj =>
                    ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == darreleetentity[intI].intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    //                                      //It has not option because in the WFJ was select a 
                    //                                      //    resource for this eleet.
                    boolHasOption = false;

                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);
                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ?
                            true : (bool)valentity.boolnIsDecimal;
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                }

                bool boolHasIOResourceOrGRPResourceSet = true;
                if (
                    //                                      //There is not resource setted.
                    intnPkResource == null &&
                    intnGroupResourceId == null
                    )
                {
                    boolHasAllResourceSetted_IO = false;
                    boolHasIOResourceOrGRPResourceSet = false;
                }
                else if (
                    //                                      //The estimation can be saved in dataEstimation.
                    intnPkResource == null &&
                    intnGroupResourceId != null
                    )
                {
                    boolHasOption = true;

                    //                                      //Get Estimation Data.
                    EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                        estdata => estdata.intId == intnEstimationId_I &&
                        estdata.intJobId == jobjson_I.intJobId &&
                        estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
                        estdata.intnPkElementElementType == darreleetentity[intI].intPk);

                    if (
                        //                                  //Find Estimate.
                        estdataentity != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == estdataentity.intPkResource);

                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                        if (
                            valentity != null
                            )
                        {
                            boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                            strUnit = valentity.strValue;
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }
                    else
                    {
                        //                                      //The estimation can be not estimate.
                        boolCanBeEstimate_IO = false;
                    }
                }

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                bool boolIsPaper = false;
                String[] arrstrInfo = new String[0];
                bool boolCompleted = false;
                bool? boolnIsDeviceOrMiscConsumable = null;

                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {

                    if (
                        //                                  //Io Input.
                        boolAreInputs_I
                        )
                    {
                        if (
                            //                              //IO has not Links.
                            strLink == null
                            )
                        {
                            //                              //Work with calculation From Quantity.
                            //                              //Get cost and quantity.
                            this.subGetCostAndQuantityByResourceRecursivePostProcess(intnEstimationId_I,
                                darreleetentity[intI].intPk, null, (int)intnPkResource, boolAllowDecimal, jobentity_I,
                                jobjson_I, piwentity_I, darrdynlkjson_I, darrioentityAllIO_I, darrpiwentity_I,
                                darrioqytjsonIOQuantity_M, ref numCostByResource, ref numQuantity);

                            //                              //A resource with link does not generate cost, therefore
                            //                              //      it does not matter if it is incomplete

                            ResResource.subVerifyResourceInfo((int)intnPkResource, jobjson_I, piwentity_I.intPkWorkflow,
                            piwentity_I, darreleetentity[intI].intPk, true, configuration_I, strPrintshopId_I,
                            intnEstimationId_I, ref arrstrInfo, ref boolCompleted);

                            if (
                                !boolCompleted
                                )
                            {
                                boolHasResourceIncomplete_IO = true;
                            }
                        }
                        else
                        {
                            if (
                                //                          //This io is set as a final product.
                                ioentity != null && ioentity.boolnIsFinalProduct == true
                                )
                            {
                                this.subAddInputComponentDimensionsAndThickness(intnEstimationId_I,
                                    darreleetentity[intI].intPk, null, (int)intnPkResource, strLink, jobjson_I,
                                    piwentity_I, darrdynlkjson_I, darrpiwentity_I);

                                //                      //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, darreleetentity[intI].intPk,
                                    null, strLink, darrpiwentity_I, darrdynlkjson_I, context);

                                //                          //Take the quantity from job and and save in the arr 
                                //                          //      quantity for this IO.
                                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                    strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity,
                                    ref strUnit);
                            }
                            else
                            {
                                //                              //IO has Links.
                                //                              //Get Quantity info of the previously PIW for each IO
                                //                              //    for the PIW previously.

                                String strLinkNew;
                                this.subGetQuantityFromIOWithLinkInTheInput(ioentity.intnPkElementElementType,
                                    ioentity.intnPkElementElement, (int)intnPkResource, strLink, jobentity_I, jobjson_I,
                                    piwentity_I, darrdynlkjson_I, darrpiwentity_I, out strLinkNew,
                                    darrioqytjsonIOQuantity_M, ref numQuantity);
                                strLink = strLinkNew;
                            }
                        }
                    }
                    else
                    {
                        if (
                            //                              //IO has Links.
                            strLink != null
                            )
                        {
                            //                              //Find name of the other side of the link.
                            strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, darreleetentity[intI].intPk, null,
                                strLink, darrpiwentity_I, darrdynlkjson_I, context);
                        }

                        //                                  //boolAreInputs_I is false, means:
                        //                                  //IO Output.
                        //                                  //Work with Transform calculation.
                        this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
                            darreleetentity[intI].intPk, null, (int)intnPkResource, strLink, ref numQuantity,
                            ref darrioqytjsonIOQuantity_M);
                    }

                    //                                      //Find bool is paper.

                    //                                      //Get resource.
                    EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                        ele.intPk == ioentity.intnPkResource);

                    if (
                        eleentityRes != null
                        )
                    {
                        //                                  //Get type.
                        EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleentityRes.intPkElementType);

                        if (
                            et != null
                            )
                        {
                            boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
                                (et.strCustomTypeId == ResResource.strMedia);
                        }
                    }

                    //                                      //Find boolIsDeviceOrMiscConsumable.
                    EtentityElementTypeEntityDB etentityRes =
                        (from eleentity in context.Element
                         join
                            etentity in context.ElementType on
                            eleentity.intPkElementType equals etentity.intPk
                         where
                            eleentity.intPk == intnPkResource &&
                            etentity.intPk == eleentity.intPkElementType
                         select etentity).FirstOrDefault();

                    //                                      //To know if is a Device or MiscConsumable.
                    boolnIsDeviceOrMiscConsumable =
                        (etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                        etentityRes.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;
                }
                //                                          //Se comento porque ahora si se le va a permitir
                //                                          //    abrir la estimacion sin que todos los recursos
                //                                          //    esten setteados.
                //else
                //{
                //    //                                      //The estimation can be not estimate.
                //    boolCanBeEstimate_IO = false;
                //}

                if (
                    //                                      //while the IO has Resource o GRP Resource,
                    //                                      //    Will continue to add to the list.
                    boolHasIOResourceOrGRPResourceSet
                    )
                {
                    //                                          //Verify if Unit allow or not Decimal.
                    numQuantity = (boolAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                    RecbdgjsonResourceBudgetJson resbdgjsonResource = new RecbdgjsonResourceBudgetJson(intnPkResource,
                        strResource, darreleetentity[intI].intPk, true, intnGroupResourceId, boolHasOption,
                        numQuantity, strUnit, numCostByResource.Round(2), boolnIsAvailable, boolnIsCalendar,
                        arrstrInfo, boolCompleted, boolAllowDecimal, boolIsPaper, strLink,
                        boolnIsDeviceOrMiscConsumable);

                    darrbdgres.Add(resbdgjsonResource);
                }

                intI = intI + 1;
            }

            return darrbdgres.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        //public RecbdgjsonResourceBudgetJson[] arrbdgresjsonFromTemplatePostProcess(
        //    //                                              //Get the inputs Resources'budged Temp.

        //    PiwentityProcessInWorkflowEntityDB piwentity_I,
        //    JobjsonJobJson jobjson_I,
        //    String strPrintshopId_I,
        //    bool boolAreInputs_I,
        //    int? intnEstimationId_I,

        //    //                                              //PIWs found after verifying each condition to apply.
        //    List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
        //    List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
        //    IConfiguration configuration_I,
        //    ref bool boolHasAllResourceSetted_IO,
        //    ref bool boolCanBeEstimate_IO,
        //    ref bool boolHasResourceIncomplete_IO,
        //    //                                              //Arr to quantitys for each IO.
        //    ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
        //    )
        //{
        //    Odyssey2Context context = new Odyssey2Context();

        //    //                                              //Get the inputs/outputs types.
        //    List<EleeleentityElementElementEntityDB> darreleeleentityWithoutFilter =
        //        context.ElementElement.Where(eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
        //        eleele.boolUsage == boolAreInputs_I).ToList();

        //    //                                              //List of element element without not physical
        //    //                                              //      resources.

        //    //                                              //Clone previous list.
        //    List<EleeleentityElementElementEntityDB> darreleeleentity =
        //        new List<EleeleentityElementElementEntityDB>(darreleeleentityWithoutFilter);

        //    foreach (EleeleentityElementElementEntityDB eleele in darreleeleentityWithoutFilter)
        //    {
        //        //                                          //Find resource.
        //        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //            ele.intPk == eleele.intPkElementSon);

        //        //                                          //Apply a filter in order to avoid not physical resources.

        //        //                                          //Find element type.
        //        EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
        //            et.intPk == eleentity.intPkElementType);
        //        if (
        //            !RestypResourceType.boolIsPhysical(etentity.strClassification)
        //            )
        //        {
        //            darreleeleentity.Remove(eleele);
        //        }
        //    }

        //    List<RecbdgjsonResourceBudgetJson> darrbdgres = new List<RecbdgjsonResourceBudgetJson>();

        //    int intI = 0;
        //    /*REPEAT-WHILE*/
        //    while (
        //        //                                          //Get the inputs every process.
        //        intI < darreleeleentity.Count
        //        //                                          //Se comento porque ahora si se le va a permitir
        //        //                                          //    abrir la estimacion sin que todos los recursos
        //        //                                          //    esten setteados.
        //        //&&  boolHasAllResourceSetted_IO
        //        )
        //    {
        //        //                                          //Template.
        //        EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
        //            ele.intPk == darreleeleentity[intI].intPkElementSon);

        //        EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
        //            et.intPk == eleentityTemplate.intPkElementType);

        //        //                                          //Inital data for iojson1.
        //        //                                          //Link.
        //        String strLink = null;
        //        //                                          //Resource data from IO or IOj.
        //        String strResource = null;
        //        int? intnPkResource = null;
        //        int? intnGroupResourceId = null;
        //        bool boolHasOption = false;
        //        String strUnit = null;
        //        bool boolAllowDecimal = true;

        //        bool? boolnIsAvailable = null;
        //        bool? boolnIsCalendar = null;

        //        //                                          //Calculated data for final resource.
        //        double numQuantity = 0.0;
        //        double numCostByResource = 0.0;
        //        double numJobFinalCost = 0.0;
        //        String strTypeAndTemplate = etentityType.strCustomTypeId + " : " + eleentityTemplate.strElementName;

        //        int? intnJobQuantity = jobjson_I.intnQuantity;


        //        //                                          //Get the resource if it exists in the product workflow and
        //        //                                          //      the link if it exists.
        //        IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
        //            io.intPkWorkflow == piwentity_I.intPkWorkflow &&
        //            io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
        //            io.intnPkElementElement == darreleeleentity[intI].intPk);
        //        if (
        //            ioentity != null
        //            )
        //        {
        //            strLink = ioentity.strLink;
        //            intnGroupResourceId = ioentity.intnGroupResourceId;
        //            boolHasOption = intnGroupResourceId != null ? true : false;

        //            if (
        //                ioentity.intnPkResource != null
        //                &&
        //                //                                  //Only IOs that has link, it has not calculation.
        //                strLink == null
        //                )
        //            {
        //                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                    ele.intPk == ioentity.intnPkResource);

        //                if (
        //                    EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
        //                    RestypResourceType.strResourceTypeParameter
        //                    )
        //                {
        //                    //                              //Get the current unit of measurement.
        //                    ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
        //                        eleentity.intPk);

        //                    strUnit = valentity != null ? valentity.strValue : null;
        //                    boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                            (bool)valentity.boolnIsDecimal;
        //                }

        //                strResource = eleentity.strElementName;
        //                intnPkResource = eleentity.intPk;
        //                boolnIsAvailable = eleentity.boolnIsAvailable;
        //                boolnIsCalendar = eleentity.boolnIsCalendar;
        //            }
        //        }

        //        //                                          //Get the resource if it exists in the job workflow.
        //        IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
        //        FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
        //        ioj.intnPkElementElement == darreleeleentity[intI].intPk &&
        //        ioj.intJobId == jobjson_I.intJobId);
        //        if (
        //            iojentity != null
        //            )
        //        {
        //            //                                      //It has not option because in the WFJ was select a 
        //            //                                      //    resource for this eleet.
        //            boolHasOption = false;

        //            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                ele.intPk == iojentity.intPkResource);

        //            if (
        //                    EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
        //                    RestypResourceType.strResourceTypeParameter
        //                    )
        //            {
        //                //                                  //Get the current unit of measurement.
        //                ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
        //                    eleentity.intPk);

        //                strUnit = valentity != null ? valentity.strValue : null;
        //                boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                            (bool)valentity.boolnIsDecimal;
        //            }

        //            strResource = eleentity.strElementName;
        //            intnPkResource = eleentity.intPk;
        //            boolnIsAvailable = eleentity.boolnIsAvailable;
        //            boolnIsCalendar = eleentity.boolnIsCalendar;
        //        }

        //        bool boolHasIOResourceOrGRPResourceSet = true;
        //        if (
        //            //                                      //There is not resource setted.
        //            intnPkResource == null &&
        //            intnGroupResourceId == null
        //            )
        //        {
        //            boolHasAllResourceSetted_IO = false;
        //            boolHasIOResourceOrGRPResourceSet = false;
        //        }
        //        else if (
        //            //                                      //The estimation can be saved in dataEstimation.
        //            intnPkResource == null &&
        //            intnGroupResourceId != null
        //            )
        //        {
        //            boolHasOption = true;

        //            //                                      //Get Estimation Data.
        //            EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
        //                estdata => estdata.intId == intnEstimationId_I &&
        //                estdata.intJobId == jobjson_I.intJobId &&
        //                estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
        //                estdata.intnPkElementElement == darreleeleentity[intI].intPk);

        //            if (
        //                //                                  //Find Estimate.
        //                estdataentity != null
        //                )
        //            {
        //                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                ele.intPk == estdataentity.intPkResource);

        //                ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

        //                if (
        //                    valentity != null
        //                    )
        //                {
        //                    boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                        (bool)valentity.boolnIsDecimal;
        //                    strUnit = valentity.strValue;
        //                }

        //                strResource = eleentity.strElementName;
        //                intnPkResource = eleentity.intPk;
        //                boolnIsAvailable = eleentity.boolnIsAvailable;
        //                boolnIsCalendar = eleentity.boolnIsCalendar;
        //            }
        //            else
        //            {
        //                //                                  //The estimation can be not estimate for this Job..
        //                boolCanBeEstimate_IO = false;
        //            }
        //        }

        //        List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
        //        bool boolIsPaper = false;
        //        String[] arrstrInfo = new String[0];
        //        bool boolCompleted = false;
        //        bool? boolnIsDeviceOrMiscConsumable = null;
        //        //                                          //Get calculations associated to the resource and the 
        //        //                                          //      product if the input/output has a resource set.
        //        if (
        //            intnPkResource != null
        //            )
        //        {
        //            if (
        //                //                                  //Io Input.
        //                boolAreInputs_I
        //                )
        //            {
        //                if (
        //                    //                              //IO has not Links.
        //                    strLink == null
        //                    )
        //                {
        //                    //                              //Work with calculation From Quantity.
        //                    //                              //Get cost and quantity.
        //                    this.subGetCostAndQuantityByResourceRecursivePostProcess(jobjson_I, strPrintshopId_I,
        //                        (int)intnPkResource, piwentity_I, null, darreleeleentity[intI].intPk, boolAllowDecimal,
        //                        darrpiwentity_I, darrdynlkjson_I, intnEstimationId_I, configuration_I, ref numQuantity,
        //                        ref numCostByResource, ref numJobFinalCost, ref darrioqytjsonIOQuantity_M);

        //                    //                              //A resource with link does not generate cost, therefore
        //                    //                              //      it does not matter if it is incomplete
        //                    ResResource.subVerifyResourceInfo((int)intnPkResource, jobjson_I, piwentity_I.intPkWorkflow,
        //                        piwentity_I, darreleeleentity[intI].intPk, false, configuration_I, strPrintshopId_I,
        //                        intnEstimationId_I, ref arrstrInfo, ref boolCompleted);

        //                    if (
        //                        !boolCompleted
        //                        )
        //                    {
        //                        boolHasResourceIncomplete_IO = true;
        //                    }
        //                }
        //                else
        //                {
        //                    //                          //IO has Links.
        //                    //                          //Get Quantity info of the previously PIW for each IO
        //                    //                          //    for the PIW previously.

        //                    String strLinkNew;
        //                    this.subGetQuantityFromIOWithLinkInTheInput(piwentity_I, jobjson_I, strPrintshopId_I,
        //                        ioentity.intnPkElementElementType, ioentity.intnPkElementElement,
        //                        (int)intnPkResource, strLink, darrpiwentity_I, darrdynlkjson_I, configuration_I,
        //                        out strLinkNew, ref numQuantity, ref darrioqytjsonIOQuantity_M);

        //                    strLink = strLinkNew;
        //                }
        //            }
        //            else
        //            {
        //                if (
        //                    //                              //IO has Links.
        //                    strLink != null
        //                    )
        //                {
        //                    //                              //Find name of the other side of the link.
        //                    strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, darreleeleentity[intI].intPk,
        //                        strLink, darrpiwentity_I, darrdynlkjson_I, context);
        //                }

        //                //                                  //boolAreInputs_I is false, means:
        //                //                                  //IO Output.
        //                //                                  //Work with Transform calculation.
        //                this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
        //                    null, darreleeleentity[intI].intPk, (int)intnPkResource, strLink, ref numQuantity,
        //                    ref darrioqytjsonIOQuantity_M);
        //            }

        //            //                                      //Find bool is paper.

        //            //                                      //Get resource.
        //            EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
        //                ele.intPk == intnPkResource);

        //            if (
        //                eleentityRes != null
        //                )
        //            {
        //                //                                  //Get type.
        //                EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleentityRes.intPkElementType);

        //                if (
        //                    et != null
        //                    )
        //                {
        //                    boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
        //                        (et.strCustomTypeId == ResResource.strMedia);
        //                }
        //            }

        //            //                                      //Find boolIsDeviceOrMiscConsumable.
        //            EtentityElementTypeEntityDB etentityRes =
        //                (from eleentity in context.Element
        //                 join
        //                    etentity in context.ElementType on
        //                    eleentity.intPkElementType equals etentity.intPk
        //                 where
        //                    eleentity.intPk == intnPkResource &&
        //                    etentity.intPk == eleentity.intPkElementType
        //                 select etentity).FirstOrDefault();

        //            //                                      //To know if is a Device or MiscConsumable.
        //            boolnIsDeviceOrMiscConsumable =
        //                (etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
        //                etentityRes.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;
        //        }
        //        //                                          //Se movio de lugar la validacion
        //        //                                          //    ya que ahora podra ser estimada
        //        //                                          //    si se escogio un recurso del GRPResources.
        //        //else
        //        //{
        //        //    //                                    //The estimation can be not estimate for this Job..
        //        //    boolCanBeEstimate_IO = false;
        //        //}

        //        if (
        //            //                                      //while the IO has Resource o GRP Resource,
        //            //                                      //    Will continue to add to the list.
        //            boolHasIOResourceOrGRPResourceSet
        //            )
        //        {
        //            //                                      //Verify if Unit allow or not Decimal.
        //            numQuantity = (boolAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

        //            RecbdgjsonResourceBudgetJson resbdgjsonResource = new RecbdgjsonResourceBudgetJson(intnPkResource,
        //                strResource, darreleeleentity[intI].intPk, false, intnGroupResourceId, boolHasOption,
        //                numQuantity, strUnit, numCostByResource.Round(2), boolnIsAvailable, boolnIsCalendar,
        //                arrstrInfo, boolCompleted, boolAllowDecimal, boolIsPaper, strLink, boolnIsDeviceOrMiscConsumable);

        //            darrbdgres.Add(resbdgjsonResource);
        //        }

        //        intI = intI + 1;
        //    }

        //    return darrbdgres.ToArray();
        //}

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public RecbdgjsonResourceBudgetJson[] arrbdgresjsonFromTemplatePostProcess(
            //                                              //Get the inputs Resources'budged Temp.

            int? intnEstimationId_I,
            bool boolAreInputs_I,
            String strPrintshopId_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleeleentityElementElementEntityDB> darreleeleentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs found after verifying each condition to apply.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            IConfiguration configuration_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            ref bool boolCanBeEstimate_IO,
            ref bool boolHasAllResourceSetted_IO,
            ref bool boolHasResourceIncomplete_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the inputs/outputs types.
            List<EleeleentityElementElementEntityDB> darreleeleentityWithoutFilter =
                darreleeleentityAll_I.Where(eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I).ToList();

            //                                              //List of element element without not physical
            //                                              //      resources.

            //                                              //Clone previous list.
            List<EleeleentityElementElementEntityDB> darreleeleentity =
                new List<EleeleentityElementElementEntityDB>(darreleeleentityWithoutFilter);

            foreach (EleeleentityElementElementEntityDB eleele in darreleeleentityWithoutFilter)
            {
                //                                          //Find resource.
                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleele.intPkElementSon);

                //                                          //Apply a filter in order to avoid not physical resources.

                //                                          //Find element type.
                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentity.intPkElementType);
                if (
                    !RestypResourceType.boolIsPhysical(etentity.strClassification)
                    )
                {
                    darreleeleentity.Remove(eleele);
                }
            }

            List<RecbdgjsonResourceBudgetJson> darrbdgres = new List<RecbdgjsonResourceBudgetJson>();

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Get the inputs every process.
                intI < darreleeleentity.Count
                //                                          //Se comento porque ahora si se le va a permitir
                //                                          //    abrir la estimacion sin que todos los recursos
                //                                          //    esten setteados.
                //&&  boolHasAllResourceSetted_IO
                )
            {
                //                                          //Template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == darreleeleentity[intI].intPkElementSon);

                EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                int? intnGroupResourceId = null;
                bool boolHasOption = false;
                String strUnit = null;
                bool boolAllowDecimal = true;

                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                //                                          //Calculated data for final resource.
                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                String strTypeAndTemplate = etentityType.strCustomTypeId + " : " + eleentityTemplate.strElementName;

                int? intnJobQuantity = jobjson_I.intnQuantity;


                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == darreleeleentity[intI].intPk);
                if (
                    ioentity != null
                    )
                {
                    strLink = ioentity.strLink;
                    intnGroupResourceId = ioentity.intnGroupResourceId;
                    boolHasOption = intnGroupResourceId != null ? true : false;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            //                              //Get the current unit of measurement.
                            ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                                eleentity.intPk);

                            strUnit = valentity != null ? valentity.strValue : null;
                            boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }
                }

                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                ioj.intnPkElementElement == darreleeleentity[intI].intPk &&
                ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    //                                      //It has not option because in the WFJ was select a 
                    //                                      //    resource for this eleet.
                    boolHasOption = false;

                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                    {
                        //                                  //Get the current unit of measurement.
                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                            eleentity.intPk);

                        strUnit = valentity != null ? valentity.strValue : null;
                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                }

                bool boolHasIOResourceOrGRPResourceSet = true;
                if (
                    //                                      //There is not resource setted.
                    intnPkResource == null &&
                    intnGroupResourceId == null
                    )
                {
                    boolHasAllResourceSetted_IO = false;
                    boolHasIOResourceOrGRPResourceSet = false;
                }
                else if (
                    //                                      //The estimation can be saved in dataEstimation.
                    intnPkResource == null &&
                    intnGroupResourceId != null
                    )
                {
                    boolHasOption = true;

                    //                                      //Get Estimation Data.
                    EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                        estdata => estdata.intId == intnEstimationId_I &&
                        estdata.intJobId == jobjson_I.intJobId &&
                        estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
                        estdata.intnPkElementElement == darreleeleentity[intI].intPk);

                    if (
                        //                                  //Find Estimate.
                        estdataentity != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == estdataentity.intPkResource);

                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                        if (
                            valentity != null
                            )
                        {
                            boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                            strUnit = valentity.strValue;
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }
                    else
                    {
                        //                                  //The estimation can be not estimate for this Job..
                        boolCanBeEstimate_IO = false;
                    }
                }

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                bool boolIsPaper = false;
                String[] arrstrInfo = new String[0];
                bool boolCompleted = false;
                bool? boolnIsDeviceOrMiscConsumable = null;
                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        //                                  //Io Input.
                        boolAreInputs_I
                        )
                    {
                        if (
                            //                              //IO has not Links.
                            strLink == null
                            )
                        {
                            //                              //Work with calculation From Quantity.
                            //                              //Get cost and quantity.
                            this.subGetCostAndQuantityByResourceRecursivePostProcess(intnEstimationId_I,
                                null, darreleeleentity[intI].intPk, (int)intnPkResource, boolAllowDecimal, jobentity_I,
                                jobjson_I, piwentity_I, darrdynlkjson_I, darrioentityAllIO_I, darrpiwentity_I,
                                darrioqytjsonIOQuantity_M, ref numCostByResource, ref numQuantity);

                            //                              //A resource with link does not generate cost, therefore
                            //                              //      it does not matter if it is incomplete
                            ResResource.subVerifyResourceInfo((int)intnPkResource, jobjson_I, piwentity_I.intPkWorkflow,
                                piwentity_I, darreleeleentity[intI].intPk, false, configuration_I, strPrintshopId_I,
                                intnEstimationId_I, ref arrstrInfo, ref boolCompleted);

                            if (
                                !boolCompleted
                                )
                            {
                                boolHasResourceIncomplete_IO = true;
                            }
                        }
                        else
                        {
                            if (
                               //                           //This io is set as a final product.
                               ioentity != null && ioentity.boolnIsFinalProduct == true
                               )
                            {
                                this.subAddInputComponentDimensionsAndThickness(intnEstimationId_I, null,
                                    darreleeleentity[intI].intPk, (int)intnPkResource, strLink, jobjson_I, piwentity_I,
                                    darrdynlkjson_I, darrpiwentity_I);

                                //                          //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null,
                                    darreleeleentity[intI].intPk, strLink, darrpiwentity_I, darrdynlkjson_I, context);

                                //                          //Take the quantity from job and and save in the arr 
                                //                          //      quantity for this IO.
                                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                    strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity,
                                    ref strUnit);
                            }
                            else
                            {
                                //                          //IO has Links.
                                //                          //Get Quantity info of the previously PIW for each IO
                                //                          //    for the PIW previously.

                                String strLinkNew;
                                this.subGetQuantityFromIOWithLinkInTheInput(ioentity.intnPkElementElementType,
                                    ioentity.intnPkElementElement, (int)intnPkResource, strLink, jobentity_I, jobjson_I,
                                    piwentity_I, darrdynlkjson_I, darrpiwentity_I, out strLinkNew,
                                    darrioqytjsonIOQuantity_M, ref numQuantity);
                                strLink = strLinkNew;
                            }
                        }
                    }
                    else
                    {
                        if (
                            //                              //IO has Links.
                            strLink != null
                            )
                        {
                            //                              //Find name of the other side of the link.
                            strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, darreleeleentity[intI].intPk,
                                strLink, darrpiwentity_I, darrdynlkjson_I, context);
                        }

                        //                                  //boolAreInputs_I is false, means:
                        //                                  //IO Output.
                        //                                  //Work with Transform calculation.
                        this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
                            null, darreleeleentity[intI].intPk, (int)intnPkResource, strLink, ref numQuantity,
                            ref darrioqytjsonIOQuantity_M);
                    }

                    //                                      //Find bool is paper.

                    //                                      //Get resource.
                    EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                        ele.intPk == intnPkResource);

                    if (
                        eleentityRes != null
                        )
                    {
                        //                                  //Get type.
                        EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(eleentityRes.intPkElementType);

                        if (
                            et != null
                            )
                        {
                            boolIsPaper = (et.strCustomTypeId == ResResource.strComponent) ||
                                (et.strCustomTypeId == ResResource.strMedia);
                        }
                    }

                    //                                      //Find boolIsDeviceOrMiscConsumable.
                    EtentityElementTypeEntityDB etentityRes =
                        (from eleentity in context.Element
                         join
                            etentity in context.ElementType on
                            eleentity.intPkElementType equals etentity.intPk
                         where
                            eleentity.intPk == intnPkResource &&
                            etentity.intPk == eleentity.intPkElementType
                         select etentity).FirstOrDefault();

                    //                                      //To know if is a Device or MiscConsumable.
                    boolnIsDeviceOrMiscConsumable =
                        (etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                        etentityRes.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;
                }
                //                                          //Se movio de lugar la validacion
                //                                          //    ya que ahora podra ser estimada
                //                                          //    si se escogio un recurso del GRPResources.
                //else
                //{
                //    //                                    //The estimation can be not estimate for this Job..
                //    boolCanBeEstimate_IO = false;
                //}

                if (
                    //                                      //while the IO has Resource o GRP Resource,
                    //                                      //    Will continue to add to the list.
                    boolHasIOResourceOrGRPResourceSet
                    )
                {
                    //                                      //Verify if Unit allow or not Decimal.
                    numQuantity = (boolAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                    RecbdgjsonResourceBudgetJson resbdgjsonResource = new RecbdgjsonResourceBudgetJson(intnPkResource,
                        strResource, darreleeleentity[intI].intPk, false, intnGroupResourceId, boolHasOption,
                        numQuantity, strUnit, numCostByResource.Round(2), boolnIsAvailable, boolnIsCalendar,
                        arrstrInfo, boolCompleted, boolAllowDecimal, boolIsPaper, strLink, boolnIsDeviceOrMiscConsumable);

                    darrbdgres.Add(resbdgjsonResource);
                }

                intI = intI + 1;
            }

            return darrbdgres.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] arriojson1GetTypes(
            //                                              //Get the inputs and output for the given process according
            //                                              //      with the boolean from the types and the cost and 
            //                                              //      quantity if the resource has associated 
            //                                              //      calculations.

            bool boolAreInputs_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            //                                              //List waste to propagate.             
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            ref double numJobFinalCost_IO,
            ref bool boolWorkflowJobIsReady_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = darreleetentityAll_I.Where(
                eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            //                                              //To fill an return.
            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                String strUnit = null;
                bool boolUnitAllowDecimal = true;
                bool? boolnIsCalendar = null;
                bool boolOneResource = false;
                bool boolHasNotResource = true;
                //                                          //Calculated data for final resource.
                bool? boolnIsAvailable = null;
                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                //                                          //Needed data to resource time.
                int intHours = 0;
                int intMinutes = 0;
                int intSeconds = 0;
                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size.
                bool? boolnSize = null;
                //                                          //strDimensions.
                String strDimensionsAndThickness = "";

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == eleetentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;

                    //                                      //Set the size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        //                                  //Get the unit of the resource.
                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = jobentity_I != null ?
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                            if (
                                valentity != null
                                )
                            {
                                strUnit = valentity.strValue;
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }
                        String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);
                        strResource = strResourceName;
                        intnPkResource = eleentity.intPk;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolOneResource = true;
                        boolHasNotResource = false;
                    }

                    if (
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        boolOneResource = false;
                        boolHasNotResource = false;
                    }
                }

                bool boolAutomaticallySet = false;

                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == eleetentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);

                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = jobentity_I != null ?
                        //                                  //Get unit depends job's date.
                        valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                        //                                  //Get the current unit of measurement.
                        valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                        if (
                            valentity != null
                            )
                        {
                            strUnit = valentity.strValue;
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                        }
                    }

                    String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);
                    strResource = strResourceName;
                    intnPkResource = eleentity.intPk;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                }

                //                                          //Get the restype.
                EtentityElementTypeEntityDB etentityResType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleetentity.intPkElementTypeSon);

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                WstaddjsonWasteAdditionalJson[] arrwstaddjson = null;

                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        //                                  //IO Input.
                        boolAreInputs_I
                        )
                    {
                        if (
                            etentityResType.strCustomTypeId == ResResource.strMedia
                            )
                        {
                            ResthkjsonResourceThicknessJson resthkjson = this.darrresthkjsonResThickness.FirstOrDefault(
                                resthk => resthk.intnPkEleet == eleetentity.intPk && resthk.intnPkEleele == null &&
                                resthk.intPkResource == (int)intnPkResource &&
                                resthk.intPkProcessInWorkflow == piwentity_I.intPk);

                            if (
                                //                          //The data is not in the list yet
                                resthkjson == null
                                )
                            {
                                double? numnWidth;
                                double? numnLength;
                                String strWidthUnit;
                                String strLengthUnit;
                                ProdtypProductType.subfunGetDimensions(eleetentity.intPk, null, (int)intnPkResource,
                                    boolAreInputs_I, jobjson_I, piwentity_I, this, out numnWidth, out numnLength,
                                    out strWidthUnit, out strLengthUnit);

                                this.subAddMediaDimensionsAndThickness(eleetentity.intPk, null, piwentity_I.intPk,
                                    (int)intnPkResource, etentityResType.intPk, numnWidth, numnLength, strWidthUnit,
                                    strLengthUnit);
                            }
                        }

                        if (
                            (etentityResType.strCustomTypeId == ResResource.strComponent)
                            )
                        {
                            this.subAddInputComponentDimensionsAndThickness(null, eleetentity.intPk, null,
                                (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                                darrpiwentityProcessInJob_I);
                        }

                        //                                  //Perform calculation own for get the Quantity
                        //                                  //    for this IO and save in the 
                        //                                  //    arr quantitys.
                        //                                  //Find calculation and find the quantity
                        //                                  //    From. 

                        //                                  //Qfrom Output.
                        //                                  //Find the quantity associate with this qfrom in the 
                        //                                  //    arr quantitys, if it is not found in the arr quantity, 
                        //                                  //    it is need to find the quantity with link of the next 
                        //                                  //    process (method recursively).

                        //                                  //Qfrom Input.
                        //                                  //Perform calculation for get quantity correct for this IO
                        //                                  //    consider the waste'propagation
                        //                                  //Note. save waste in the arr waste.

                        //                                  //Work with calculation From Quantity.
                        //                                  //Get cost and quantity

                        //                                  //Find the other part of the link.

                        if (
                            //                              //IO has Links.
                            strLink != null && darrpiwentityProcessInJob_I != null
                            )
                        {
                            //                              //Find name of the other side of the link.
                            strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                                strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                        }

                        IoqytjsonIOQuantityJson ioqytjsonQuantityExists = darrioqytjsonIOQuantity_M.FirstOrDefault(
                            ioqyt => ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                            ioqyt.intnPkEleet == eleetentity.intPk && ioqyt.intnPkEleele == null &&
                            ioqyt.boolAreInput == true && ioqyt.strLink == strLink);

                        if (
                            //                              //The IO already was analized.
                            ioqytjsonQuantityExists != null
                            )
                        {
                            //                              //Get data from the Quantity List
                            numQuantity = ioqytjsonQuantityExists.numQuantityIO;
                            numCostByResource = ioqytjsonQuantityExists.numCostResource;
                            darrwstjsonWaste = ioqytjsonQuantityExists.arrwstjsonWaste.ToList();
                            arrwstaddjson = ioqytjsonQuantityExists.arrwstaddWasteAdditional;
                            strLink = ioqytjsonQuantityExists.strLink;
                            intHours = ioqytjsonQuantityExists.intHours;
                            intMinutes = ioqytjsonQuantityExists.intMinutes;
                            intSeconds = ioqytjsonQuantityExists.intSeconds;
                        }
                        else
                        {
                            this.subGetCostAndQuantityByResourceRecursive(null, eleetentity.intPk, null,
                                (int)intnPkResource, boolUnitAllowDecimal, strLink, jobentity_I, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrioentityAllIO_I, darriojentityAllIOJ_I, darrpiwentityProcessInJob_I,
                                darrioqytjsonIOQuantity_M, darrwstjsonWaste, darrwstpropjson_M, ref numCostByResource,
                                ref numQuantity, ref boolWorkflowJobIsReady_IO);
                        }

                        //                                  //GetFinalCost for each IO without link in the input. 
                        if (
                            strLink == null &&
                            jobentity_I != null &&
                            (jobentity_I.intStage == JobJob.intCompletedStage)
                            )
                        {
                            //                              //Get the final cost if it exists for this calculation.
                            List<FnlcostentityFinalCostEntityDB> darrfnlcostentity = context.FinalCost.Where(fnl =>
                                fnl.intPkJob == jobentity_I.intPk && fnl.intPkProcessInWorkflow == piwentity_I.intPk &&
                                fnl.intnPkElementElementType == eleetentity.intPk && fnl.intnPkElementElement == null &&
                                fnl.intnPkResource == intnPkResource).ToList();
                            darrfnlcostentity.Sort();

                            if (
                                //                          //Find the final cost.
                                darrfnlcostentity.Count > 0
                                )
                            {
                                //                          //Get the last final cost.
                                FnlcostentityFinalCostEntityDB fnlcostentity = darrfnlcostentity.Last();
                                if (
                                    fnlcostentity.numnCost != null
                                    )
                                {
                                    numJobFinalCost_IO = numJobFinalCost_IO + (double)fnlcostentity.numnCost;
                                }
                                else
                                {
                                    if (
                                        numQuantity > 0
                                        )
                                    {
                                        numJobFinalCost_IO = numJobFinalCost_IO +
                                            ((numCostByResource / numQuantity) *
                                        (double)fnlcostentity.numnQuantity);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //                                  //boolAreInputs_I is false, means:
                        //                                  //IO Output.

                        if (
                            (etentityResType.strCustomTypeId == ResResource.strComponent)
                            )
                        {
                            this.subAddOutputComponentDimensionsAndThickness(null, eleetentity.intPk, null,
                                (int)intnPkResource, ioentity, jobjson_I, piwentity_I, darrdynlkjson_I,
                                darrpiwentityProcessInJob_I);
                        }

                        /*CASE*/
                        if (
                            //                              //This io is set as a final product.
                            ioentity != null && ioentity.boolnIsFinalProduct == true
                            )
                        {
                            if (
                               //                           //IO has Links.
                               strLink != null
                               )
                            {
                                //                          //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                                    strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                            }

                            //                              //Take the quantity from job and and save in the arr 
                            //                              //      quantity for this IO.
                            ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity, ref strUnit);
                        }
                        else if (
                           //                               //IO has Links.
                           strLink != null
                           )
                        {
                            //                              //Take the quantity from next process linked 
                            //                              //    input.
                            //                              //Description Task: Take the quantity from next process
                            //                              //    linked to this IO and save in the arr quantity.

                            //                              //IO output has link.
                            //                              //Get Quantity'info of the NEXT PIW for this IO with LInk.
                            this.subGetQuantityFromIOWithLinkInTheOutput(null, ioentity.intnPkElementElementType,
                                ioentity.intnPkElementElement, (int)intnPkResource, jobentity_I, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M,
                                darrwstpropjson_M, ref numQuantity, ref boolWorkflowJobIsReady_IO, ref strLink);
                        }
                        else if (
                           //                               //IO has not Links.
                           strLink == null
                           )
                        {
                            //                              //Work with Transform calculation.
                            this.subGetQuantityFromTransformCalculation(piwentity_I, jobjson_I, eleetentity.intPk,
                                null, (int)intnPkResource, ref numQuantity, ref darrioqytjsonIOQuantity_M);
                        }
                        /*END-CASE*/
                    }

                    //                                      //Verify if Unit allow or not Decimal.
                    numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                    //                                      //Get dimensions.
                    //strDimensionsAndThickness = ProdtypProductType.strDimensionsAndThicknessUnit(piwentity_I.intPk,
                    //    eleetentity.intPk, null, intnPkResource, boolAreInputs_I, jobjson_I, numQuantity, strUnit, 
                    //    this.darrresthkjsonResThickness);

                    if (
                        (etentityResType.strCustomTypeId == ResResource.strMedia) ||
                        (etentityResType.strCustomTypeId == ResResource.strComponent)
                        )
                    {
                        strDimensionsAndThickness = this.strDimensionsAndThickness(eleetentity.intPk, null,
                            (int)intnPkResource, numQuantity, strUnit, piwentity_I);
                    }

                    //                                      //Get availability for cal.
                    if (
                        boolnIsCalendar == true
                        )
                    {
                        List<PerentityPeriodEntityDB> darrperentity = context.Period.Where(perentity =>
                            perentity.intJobId == jobjson_I.intJobId &&
                            perentity.intPkWorkflow == piwentity_I.intPkWorkflow &&
                            perentity.intProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                            perentity.intnPkElementElementType == eleetentity.intPk &&
                            perentity.intnEstimateId == null).ToList();

                        boolnIsAvailable = darrperentity.Count >= 1 ? true : false;
                    }
                }
                else
                //                                          //There is not a resource
                {
                    if (
                        //                                  //IO has Links.
                        strLink != null
                        )
                    {
                        //                                  //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                            strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                    }
                }

                bool boolIsPhysical = RestypResourceType.boolIsPhysical(etentityResType.strClassification);
                bool boolIsPaper =
                    (etentityResType.strCustomTypeId == ResResource.strComponent) ||
                    (etentityResType.strCustomTypeId == ResResource.strMedia);

                bool boolIsCustom = etentityResType.strXJDFTypeId == "None";
                String strName = (boolIsCustom) ? etentityResType.strCustomTypeId : etentityResType.strXJDFTypeId;

                //                                      //To know if is a Device or MiscConsumable.
                bool boolIsDeviceOrMiscConsumable =
                    (etentityResType.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                    etentityResType.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                bool boolThickness = ioentity != null ?
                    (ioentity.boolnThickness != null ? (bool)ioentity.boolnThickness : false) :
                    false;

                //                                          //Json to return.
                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(etentityResType.intPk,
                    null, eleetentity.intPk, true, strName, strResource, strLink, intnPkResource, numQuantity, strUnit,
                    numCostByResource, boolIsPhysical, boolnIsCalendar, boolnIsAvailable, intHours, intMinutes,
                    intSeconds, boolAutomaticallySet, boolOneResource, boolHasNotResource, boolIsCustom, boolIsPaper,
                    ioentity?.boolnIsFinalProduct, boolUnitAllowDecimal, darrwstjsonWaste.ToArray(), arrwstaddjson,
                    strDimensionsAndThickness, boolIsDeviceOrMiscConsumable, boolnSize, boolThickness);

                darriojson1.Add(iojson1);
            }

            return darriojson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public void subAddMediaDimensionsAndThickness(
            //                                              //Add dimensions and thickness of the a media in
            //                                              //      darrresthkjsonResThickness list.

            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkProcessInWorkflow_I,
            int intPkResource_I,
            int intPkResType_I,
            double? numnWidth_I,
            double? numnLength_I,
            String strWidthUnit_I,
            String strLengthUnit_I
            )
        {
            ResthkjsonResourceThicknessJson resthkjson = this.darrresthkjsonResThickness.FirstOrDefault(
                resthk => resthk.intnPkEleet == intnPkEleet_I && resthk.intnPkEleele == intnPkEleele_I &&
                resthk.intPkProcessInWorkflow == intPkProcessInWorkflow_I);

            if (
                //                                          //The thickness is not in the list yet
                resthkjson == null
                )
            {
                double? numnThickness;
                String strThicknessUnit;
                ProdtypProductType.subfunGetMediaThickness(intPkResource_I, intPkResType_I, out numnThickness,
                    out strThicknessUnit);

                //                                          //Store resource thickness
                this.darrresthkjsonResThickness.Add(
                    new ResthkjsonResourceThicknessJson(intnPkEleet_I, intnPkEleele_I, null, intPkProcessInWorkflow_I,
                        intPkResource_I, true, false, numnThickness, strThicknessUnit, numnWidth_I, strWidthUnit_I,
                        numnLength_I, strLengthUnit_I)
                    );
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subfunGetMediaThickness(
            //                                              //Get thickness and thickness unit from DB.

            int intPkResource_I,
            int intPkResType_I,
            out double? numnThickness_O,
            out String strThicknessUnit_O
            )
        {
            numnThickness_O = null;
            strThicknessUnit_O = null;

            Odyssey2Context context = new Odyssey2Context();

            //                                          //Attributes for Resource.
            List<AttrentityAttributeEntityDB> darrattrResource =
                (from attrentity in context.Attribute
                 join attretentity in context.AttributeElementType
                 on attrentity.intPk equals attretentity.intPkAttribute
                 where attretentity.intPkElementType == intPkResType_I
                 select attrentity).ToList();

            //                                          //Get the thickness.
            AttrentityAttributeEntityDB attrentityThickness = darrattrResource.FirstOrDefault(a =>
                a.strXJDFName == "Thickness" || a.strCustomName == "XJDFThickness");
            AttrentityAttributeEntityDB attrentityThicknessUnit = darrattrResource.FirstOrDefault(a =>
                a.strXJDFName == "ThicknessUnit" || a.strCustomName == "XJDFThicknessUnit");

            if (
                attrentityThickness != null && attrentityThicknessUnit != null
                )
            {
                //                                      //Get the Thickness value.
                ValentityValueEntityDB valentityThickness = context.Value.FirstOrDefault(val =>
                    val.intPkElement == intPkResource_I &&
                    val.intPkAttribute == attrentityThickness.intPk);

                //                                      //Get the ThicknessUnit value.
                ValentityValueEntityDB valentityThicknessUnit = context.Value.FirstOrDefault(val =>
                    val.intPkElement == intPkResource_I &&
                    val.intPkAttribute == attrentityThicknessUnit.intPk);

                if (
                    valentityThickness != null && valentityThicknessUnit != null
                    )
                {
                    numnThickness_O = (valentityThickness.strValue).ParseToNum(); ;
                    strThicknessUnit_O = valentityThicknessUnit.strValue;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private void subAddOutputComponentDimensionsAndThickness(
            //                                              //Add dimensions and thickness of the an output component 
            //                                              //      in darrresthkjsonResThickness list.

            int? intnEstimateIdThatInvokeThisMethod_I,
            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            IoentityInputsAndOutputsEntityDB ioentityOutput_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            //                                              //PIWs will be shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I
            )
        {
            List<ResthkjsonResourceThicknessJson> darrresthkjson = this.darrresthkjsonResThickness.Where(
                resthk => resthk.intnPkEleet == intnPkEleet_I && resthk.intnPkEleele == intnPkEleele_I &&
                resthk.intPkProcessInWorkflow == piwentity_I.intPk &&
                resthk.intPkResource == intPkResource_I).ToList();

            if (
                darrresthkjson.Count > 0
                )
            {
                //                                          //Do nothing
            }
            else
            {
                bool? boolnQFromIsSize = ioentityOutput_I != null ? ioentityOutput_I.boolnSize : null;

                if (
                    boolnQFromIsSize == true
                    )
                {
                    this.subAddOutputComponentDimesionsAndThicknessFromJob(intnEstimateIdThatInvokeThisMethod_I,
                        intnPkEleet_I, intnPkEleele_I, intPkResource_I, jobjson_I, piwentity_I, darrdynlkjson_I,
                        darrpiwentityProcessInJob_I);
                }
                else
                {
                    //                                      //If there was no data in the list it is because there is
                    //                                      //      no paper transformation for this IO

                    //                                      //Check if the resource that has it as qfrom has data
                    this.subAddOutputComponentDimensionsAndThicknessWithoutPT(intnEstimateIdThatInvokeThisMethod_I,
                        intnPkEleet_I, intnPkEleele_I, intPkResource_I, jobjson_I, piwentity_I, darrdynlkjson_I,
                        darrpiwentityProcessInJob_I);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public void subAddOutputComponentDimensionsAndThicknessWithoutPT(
            //                                              //Add dimensions and thickness of the an output component 
            //                                              //      that does not have Paper transfomation in 
            //                                              //      darrresthkjsonResThickness list..

            int? intnEstimateIdThatInvokeThisMethod_I,
            int? intnPkEleetOutput_I,
            int? intnPkEleeleOutput_I,
            int intPkResourceOutput_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            //                                              //PIWs will be shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();
            //                                              //Check if a calculation of a resource of type media has it
            //                                              //      as qfrom
            //                                              //Get the Paper Transformations.

            List<CalCalculation> darrcal = this.darrcalentityGetCalculationApplyInput(
                intnEstimateIdThatInvokeThisMethod_I, intnPkEleetOutput_I, intnPkEleeleOutput_I, intPkResourceOutput_I,
                jobjson_I, piwentity_I);

            int? intnPkEleetInput = null;
            int? intnPkEleeleInput = null;
            int intPkResourceInput = 0;
            bool boolIsThereAPaper = false;
            int intI = 0;
            /*WHILE-DO*/
            while (
                intI < darrcal.Count && !boolIsThereAPaper
                )
            {
                //                                          //Get the resource entities.
                EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                    ele.intPk == darrcal[intI].intnPkResourceElementBelongsTo);
                //                                          //Get the resource type entities.
                EtentityElementTypeEntityDB etentityResType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityRes.intPkElementType);

                bool boolIsMedia = etentityResType.strCustomTypeId == ResResource.strMedia;
                bool boolIsComponent = etentityResType.strCustomTypeId == ResResource.strComponent;

                if (
                    boolIsMedia || boolIsComponent
                    )
                {
                    boolIsThereAPaper = true;

                    intnPkEleetInput = darrcal[intI].intnPkElementElementTypeBelongsTo;
                    intnPkEleeleInput = darrcal[intI].intnPkElementElementBelongsTo;
                    intPkResourceInput = (int)darrcal[intI].intnPkResourceElementBelongsTo;

                    ResthkjsonResourceThicknessJson resthkjsonInput =
                        this.darrresthkjsonResThickness.FirstOrDefault(resthk =>
                        resthk.intnPkEleet == intnPkEleetInput && resthk.intnPkEleele == intnPkEleeleInput &&
                        resthk.intPkProcessInWorkflow == piwentity_I.intPk &&
                        resthk.intPkResource == intPkResourceInput);

                    if (
                        resthkjsonInput != null
                        )
                    {
                        //                                  //Do nothing
                    }
                    else
                    {
                        if (
                            boolIsMedia
                            )
                        {
                            ResthkjsonResourceThicknessJson resthkjson = this.darrresthkjsonResThickness.FirstOrDefault(
                                resthk => resthk.intnPkEleet == intnPkEleetInput && 
                                resthk.intnPkEleele == intnPkEleeleInput && 
                                resthk.intPkResource == eleentityRes.intPk &&
                                resthk.intPkProcessInWorkflow == piwentity_I.intPk);

                            if (
                                //                          //The data is not in the list yet
                                resthkjson == null
                                )
                            {
                                double? numnWidth;
                                double? numnLength;
                                String strWidthUnit;
                                String strLengthUnit;
                                ProdtypProductType.subfunGetDimensions(intnPkEleetInput, intnPkEleeleInput,
                                    eleentityRes.intPk, true, jobjson_I, piwentity_I, this, out numnWidth, 
                                    out numnLength, out strWidthUnit, out strLengthUnit);

                                this.subAddMediaDimensionsAndThickness(intnPkEleetInput, intnPkEleeleInput,
                                    piwentity_I.intPk, eleentityRes.intPk, etentityResType.intPk, numnWidth, 
                                    numnLength, strWidthUnit, strLengthUnit);
                            }
                        }
                        else if (
                            boolIsComponent
                            )
                        {
                            String strLink = null;
                            //                                      //To get link
                            IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(
                                io => io.intnPkElementElementType == intnPkEleetInput &&
                                io.intnPkElementElement == intnPkEleeleInput &&
                                io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                                io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId);

                            if (
                                ioentity != null
                                )
                            {
                                strLink = ioentity.strLink;
                            }

                            this.subAddInputComponentDimensionsAndThickness(intnEstimateIdThatInvokeThisMethod_I,
                                intnPkEleetInput, intnPkEleeleInput, intPkResourceInput, strLink, jobjson_I,
                                piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I);
                        }
                    }
                }

                intI++;
            }

            if (
                //                                          //If there was a paper resource
                boolIsThereAPaper
                )
            {
                this.subAddOutputComponentDimAndThicknessDependingIOInput(intnPkEleetInput, intnPkEleeleInput,
                    intPkResourceInput, intnPkEleetOutput_I, intnPkEleeleOutput_I, intPkResourceOutput_I,
                    piwentity_I.intPk);
            }
            else
            {
                //                                          //Store resource without thickness, because there is no 
                //                                          //      thickness or dimension to propagate
                this.darrresthkjsonResThickness.Add(
                    new ResthkjsonResourceThicknessJson(intnPkEleetOutput_I, intnPkEleeleOutput_I, null,
                    piwentity_I.intPk, intPkResourceOutput_I, false, true, null, null, null, null, null, null)
                    );
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private void subAddOutputComponentDimAndThicknessDependingIOInput(

            int? intnPkEleetInput_I,
            int? intnPkEleeleInput_I,
            int intPkResourceInput_I,
            int? intnPkEleetOutput_I,
            int? intnPkEleeleOutput_I,
            int intPkResourceOutput_I,
            int intPkProcessInWorkflow_I
            )
        {
            //                                              //Check if the thickness of the input resource has already
            //                                              //      been added and add the thickness of the
            //                                              //      current resource
            List<ResthkjsonResourceThicknessJson> darrresthkjson = this.darrresthkjsonResThickness.Where(
                resthk => resthk.intnPkEleet == intnPkEleetInput_I && resthk.intnPkEleele == intnPkEleeleInput_I &&
                resthk.intPkProcessInWorkflow == intPkProcessInWorkflow_I &&
                resthk.intPkResource == intPkResourceInput_I).ToList();

            if (
                darrresthkjson.Count > 0
                )
            {
                double? numnThickness = null;
                String strThicknessUnit = null;
                double? numnWidth = null;
                String strWidthUnit = null;
                double? numnLength = null;
                String strLengthUnit = null;
                if (
                    darrresthkjson.Count == 1
                    )
                {
                    //                              //To easy code
                    numnThickness = darrresthkjson[0].numnThickness;
                    strThicknessUnit = darrresthkjson[0].strThicknessUnit;
                    numnWidth = darrresthkjson[0].numnWidth;
                    strWidthUnit = darrresthkjson[0].strWidthUnit;
                    numnLength = darrresthkjson[0].numnLength;
                    strLengthUnit = darrresthkjson[0].strLengthUnit;
                }
                else
                {
                    //                              //Store resource without thickness, because there may be
                    //                              //      different thicknesses therefore it is not known
                    //                              //      which one to take
                }

                //                                  //Store resource thickness
                this.darrresthkjsonResThickness.Add(
                    new ResthkjsonResourceThicknessJson(intnPkEleetOutput_I, intnPkEleeleOutput_I, null,
                    intPkProcessInWorkflow_I, intPkResourceOutput_I, false, true, numnThickness, strThicknessUnit,
                    numnWidth, strWidthUnit, numnLength, strLengthUnit)
                    );
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private List<CalCalculation> darrcalentityGetCalculationApplyInput(

            int? intnEstimateIdThatInvokeThisMethod_I,
            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I
            )
        {
            List<CalCalculation> darrcalApplyInput = new List<CalCalculation>();

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get calculation.
            List<CalCalculation> darrcal = this.darrcalDependingJob.Where(cal =>
                cal.strCalculationType == CalCalculation.strPerQuantity &&
                cal.intnPkWorkflowBelongsTo == piwentity_I.intPkWorkflow &&
                cal.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                cal.intnPkQFromElementElementTypeBelongsTo == intnPkEleet_I &&
                cal.intnPkQFromElementElementBelongsTo == intnPkEleele_I &&
                cal.intnPkQFromResourceElementBelongsTo == intPkResource_I &&
                //                                          //Calculation is enable.
                cal.boolIsEnable &&
                Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I)).ToList();


            foreach (CalCalculation cal in darrcal)
            {
                bool boolIsEleetInput;
                int intPkEleetOrEleeleInput;

                if (
                    cal.intnPkElementElementTypeBelongsTo != null
                    )
                {
                    boolIsEleetInput = true;
                    intPkEleetOrEleeleInput = (int)cal.intnPkElementElementTypeBelongsTo;
                }
                else
                {
                    boolIsEleetInput = false;
                    intPkEleetOrEleeleInput = (int)cal.intnPkElementElementBelongsTo;
                }

                //                                          //List Of process inputs and outputs.
                List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2IOFromPIW;

                if (
                    !this.dicProcessIOs.ContainsKey(piwentity_I.intPk)
                    )
                {
                    //                                          //Get eleet-s.
                    List<EleetentityElementElementTypeEntityDB> darreleetentityAllEleEt =
                        context.ElementElementType.Where(
                        eleet => eleet.intPkElementDad == piwentity_I.intPkProcess).ToList();

                    //                                          //Get eleele-s.
                    List<EleeleentityElementElementEntityDB> darreleeleentityAllEleEle = 
                        context.ElementElement.Where(
                        eleele => eleele.intPkElementDad == piwentity_I.intPkProcess).ToList();

                    ProdtypProductType.subGetProcessInputsAndOutputs(jobjson_I, piwentity_I, this,
                        darreleeleentityAllEleEle, darreleetentityAllEleEt, out darrioinfrmpiwjson2IOFromPIW);

                    this.dicProcessIOs.Add(piwentity_I.intPk, darrioinfrmpiwjson2IOFromPIW);
                }
                else
                {
                    darrioinfrmpiwjson2IOFromPIW = this.dicProcessIOs.FirstOrDefault(
                        piw => piw.Key == piwentity_I.intPk).Value;
                }

                if (
                    //                                      //Valid that res exist in IOs list.
                    darrioinfrmpiwjson2IOFromPIW.Exists(io =>
                        io.boolIsEleet == boolIsEleetInput &&
                        io.intPkEleetOrEleele == intPkEleetOrEleeleInput &&
                        io.intPkResource == cal.intnPkResourceElementBelongsTo)
                    )
                {
                    darrcalApplyInput.Add(cal);
                }
                else
                {
                    bool boolResourceIsInThisWFJobOrEstimateData = false;

                    if (
                        //                                  //this was called in some method from estimations.
                        intnEstimateIdThatInvokeThisMethod_I != null
                        )
                    {
                        //                                  //Find in estimationData.
                        //                                  //Get Estimation Data.
                        EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                            estdata => estdata.intId == intnEstimateIdThatInvokeThisMethod_I &&
                            estdata.intJobId == jobjson_I.intJobId &&
                            estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
                            estdata.intnPkElementElementType == cal.intnPkElementElementTypeBelongsTo &&
                            estdata.intnPkElementElement == cal.intnPkElementElementBelongsTo &&
                            estdata.intPkResource == cal.intnPkResourceElementBelongsTo);

                        boolResourceIsInThisWFJobOrEstimateData = estdataentity != null ? true : false;
                    }
                    else
                    {
                        //                                  //Find in the list that was generate in options
                        //                                  //    for io that has a resource group.
                        if (
                            this.darriojsoninInputsCombinationsAndInputsSelected != null
                            )
                        {
                            boolResourceIsInThisWFJobOrEstimateData =
                                this.darriojsoninInputsCombinationsAndInputsSelected.Exists(io =>
                                io.intPkPIW == piwentity_I.intPk &&
                                io.intnPkElementElementType == cal.intnPkElementElementTypeBelongsTo &&
                                io.intnPkElementElement == cal.intnPkElementElementBelongsTo &&
                                io.intPkResource == cal.intnPkResourceElementBelongsTo);
                        }
                    }

                    if (
                        boolResourceIsInThisWFJobOrEstimateData
                        )
                    {
                        darrcalApplyInput.Add(cal);
                    }
                }
            }

            return darrcalApplyInput;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public void subAddOutputComponentDimensionsAndThicknessWithPT(
            //                                              //Add dimensions and thickness of the an output component 
            //                                              //      that has Paper transfomation in 
            //                                              //      darrresthkjsonResThickness list.

            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int? intnPkEleetQFrom_I,
            int? intnPkEleeleQFrom_I,
            int intPkCalculation_I,
            int intPkProcessInWorkflow_I,
            int intPkResource_I,
            int intPkResourceQFrom_I,
            EtentityElementTypeEntityDB etentityQFromRes_I,
            PatransPaperTransformationEntityDB patransentity_I
            )
        {
            ResthkjsonResourceThicknessJson resthkjsonOutput = this.darrresthkjsonResThickness.FirstOrDefault(
                resthk => resthk.intnPkEleet == intnPkEleetQFrom_I && resthk.intnPkEleele == intnPkEleeleQFrom_I &&
                resthk.intPkProcessInWorkflow == intPkProcessInWorkflow_I &&
                resthk.intnPkCalculation == intPkCalculation_I);

            if (
                //                                          //The thickness is not in the list yet
                resthkjsonOutput == null
                )
            {
                Odyssey2Context context = new Odyssey2Context();

                //                                          //Get the resource entities.
                EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                    ele.intPk == intPkResource_I);
                //                                          //Get the resource type entities.
                EtentityElementTypeEntityDB etentityResType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityRes.intPkElementType);

                bool boolIsMedia = etentityResType.strCustomTypeId == ResResource.strMedia;
                bool boolIsComponent = etentityResType.strCustomTypeId == ResResource.strComponent;

                bool boolIsPaper = boolIsMedia || boolIsComponent;

                if (
                    //                                      //Only media and components have thickness
                    boolIsPaper && (etentityQFromRes_I.strCustomTypeId == ResResource.strComponent)
                    )
                {
                    ResthkjsonResourceThicknessJson resthkjsonInput = this.darrresthkjsonResThickness.FirstOrDefault(
                        resthk => resthk.intnPkEleet == intnPkEleet_I && resthk.intnPkEleele == intnPkEleele_I &&
                        resthk.intPkProcessInWorkflow == intPkProcessInWorkflow_I &&
                        resthk.intPkResource == intPkResource_I && resthk.boolIsMedia == boolIsMedia &&
                        resthk.boolIsComponent == boolIsComponent);

                    if (
                        resthkjsonInput != null
                        )
                    {
                        //                                  //Calculate thickness using factor
                        double? numnThickness = resthkjsonInput.numnThickness * patransentity_I.intFoldFactor;
                        String strThicknessUnit = resthkjsonInput.strThicknessUnit;

                        double? numnWidth = patransentity_I.numWidthO;
                        String strWidthUnit = patransentity_I.strUnit;
                        double? numnLength = patransentity_I.numHeightO;
                        String strLengthUnit = patransentity_I.strUnit;

                        if (
                            resthkjsonInput.strWidthUnit != "Undetermined"
                            )
                        {
                            numnWidth = patransentity_I.numWidthO;
                            strWidthUnit = patransentity_I.strUnit;
                            numnLength = patransentity_I.numHeightO;
                            strLengthUnit = patransentity_I.strUnit;
                        }
                        else
                        {
                            numnThickness = null;
                            strThicknessUnit = null;
                            numnWidth = null;
                            strWidthUnit = "Undetermined";
                            numnLength = null;
                            strLengthUnit = null;
                        }

                        //                                  //Store resource thickness
                        this.darrresthkjsonResThickness.Add(
                            new ResthkjsonResourceThicknessJson(intnPkEleetQFrom_I, intnPkEleeleQFrom_I,
                                intPkCalculation_I, intPkProcessInWorkflow_I, intPkResourceQFrom_I, false, true,
                                numnThickness, strThicknessUnit, numnWidth, strWidthUnit, numnLength, strLengthUnit)
                            );
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public void subAddInputComponentDimensionsAndThickness(
            //                                              //Add thickness of the an input component in
            //                                              //      darrresthkjsonResThickness list.

            int? intnEstimateIdThatInvokeThisMethod_I,
            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            String strLink_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            //                                              //PIWs will be shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I
            )
        {
            ResthkjsonResourceThicknessJson resthkjson = this.darrresthkjsonResThickness.FirstOrDefault(
                resthk => resthk.intnPkEleet == intnPkEleet_I &&
                resthk.intnPkEleele == intnPkEleele_I &&
                resthk.intPkProcessInWorkflow == piwentity_I.intPk);

            if (
                //                                          //The thickness is not in the list yet
                resthkjson == null
                )
            {
                //                                          //Get the Paper Transformations.
                List<PatransPaperTransformationEntityDB> darrpatransentity =
                    this.darrpatransDependingJob.Where(pt =>
                    pt.intPkProcessInWorkflow == piwentity_I.intPk &&
                    pt.intnPkElementElementTypeI == intnPkEleet_I &&
                    pt.intnPkElementElementI == intnPkEleele_I &&
                    pt.intPkResourceI == intPkResource_I &&
                    pt.intnPkCalculationOwn != null).ToList();

                //                                          //Get the Paper Transformations that apply.
                List<PatransPaperTransformationEntityDB> darrpatransentityApplyInput;
                ProdtypProductType.GetPaperTransformationOwnApplyInput(darrpatransentity, piwentity_I, jobjson_I,
                    this, out darrpatransentityApplyInput);

                bool boolIsThereOnlyOne = false;
                bool boolIsThereSeveral = false;
                bool boolIsThereNot = false;
                double? numnWidthInput = null;
                String strWidthUnitInput = null;
                double? numnLengthInput = null;
                String strLengthUnitInput = null;
                /*CASE*/
                if (
                    darrpatransentityApplyInput.Count == 1
                    )
                {
                    numnWidthInput = darrpatransentityApplyInput[0].numWidthI;
                    strWidthUnitInput = darrpatransentityApplyInput[0].strUnit;
                    numnLengthInput = darrpatransentityApplyInput[0].numnHeightI;
                    strLengthUnitInput = darrpatransentityApplyInput[0].strUnit;

                    boolIsThereOnlyOne = true;
                }
                else if (
                    darrpatransentityApplyInput.Count > 1
                    )
                {
                    boolIsThereSeveral = true;
                }
                else if (
                    darrpatransentityApplyInput.Count == 0
                    )
                {
                    boolIsThereNot = true;
                }
                /*END-CASE*/

                bool boolIsThereOnlyOneOtherSide = false;
                bool boolIsThereSeveralOtherSide = false;
                bool boolIsThereNotOtherSide = false;
                double? numnThickness = null;
                String strThicknessUnit = null;
                double? numnWidth = null;
                String strWidthUnit = null;
                double? numnLength = null;
                String strLengthUnit = null;

                if (
                    strLink_I != null
                    )
                {
                    Odyssey2Context context = new Odyssey2Context();

                    String strLinkNew = strLink_I;
                    //                                      //Find the other side of the link.
                    PiwentityProcessInWorkflowEntityDB piwentityPrevious = null;
                    IoentityInputsAndOutputsEntityDB ioentityOtherSide = null;

                    ProdtypProductType.subGetOtherSideOfTheLink(piwentity_I, intnPkEleet_I, intnPkEleele_I,
                        darrpiwentityProcessInJob_I, darrdynlkjson_I, context, ref strLinkNew, out piwentityPrevious,
                        out ioentityOtherSide);

                    if (
                        ioentityOtherSide != null
                        )
                    {
                        //                                  //To easy code
                        int? intnPkEleetOtherSide = ioentityOtherSide.intnPkElementElementType;
                        int? intnPkEleeleOtherSide = ioentityOtherSide.intnPkElementElement;

                        List<ResthkjsonResourceThicknessJson> darrresthkjsonOtherSide =
                            this.darrresthkjsonResThickness.Where(
                            resthk => resthk.intnPkEleet == intnPkEleetOtherSide &&
                            resthk.intnPkEleele == intnPkEleeleOtherSide &&
                            resthk.intPkProcessInWorkflow == piwentityPrevious.intPk).ToList();

                        if (
                            darrresthkjsonOtherSide.Count > 0
                            )
                        {
                            if (
                                darrresthkjsonOtherSide.Count == 1
                                )
                            {
                                //                          //To easy code
                                numnThickness = darrresthkjsonOtherSide[0].numnThickness;
                                strThicknessUnit = darrresthkjsonOtherSide[0].strThicknessUnit;
                                numnWidth = darrresthkjsonOtherSide[0].numnWidth;
                                strWidthUnit = darrresthkjsonOtherSide[0].strWidthUnit;
                                numnLength = darrresthkjsonOtherSide[0].numnLength;
                                strLengthUnit = darrresthkjsonOtherSide[0].strLengthUnit;

                                boolIsThereOnlyOneOtherSide = true;
                            }
                            else
                            {
                                //                          //Store resource without thickness, because there may be
                                //                          //      different thicknesses therefore it is not known
                                //                          //      which one to take
                                boolIsThereSeveralOtherSide = true;
                            }
                        }
                        else
                        //                              //No other side IO thickness in the list yet
                        {
                            this.subAddDimensionsAndThicknessRecursive(intnEstimateIdThatInvokeThisMethod_I,
                                intnPkEleetOtherSide, intnPkEleeleOtherSide, intPkResource_I, true,
                                jobjson_I, piwentityPrevious, darrdynlkjson_I, darrpiwentityProcessInJob_I);

                            //                              //Check if the thickness of the other side has already been
                            //                              //      added and add the thickness of the current resource
                            darrresthkjsonOtherSide = this.darrresthkjsonResThickness.Where(
                                resthk => resthk.intnPkEleet == intnPkEleetOtherSide &&
                                resthk.intnPkEleele == intnPkEleeleOtherSide &&
                                resthk.intPkProcessInWorkflow == piwentityPrevious.intPk).ToList();

                            if (
                                darrresthkjsonOtherSide.Count > 0
                                )
                            {
                                if (
                                    darrresthkjsonOtherSide.Count == 1
                                    )
                                {
                                    //                      //To easy code
                                    numnThickness = darrresthkjsonOtherSide[0].numnThickness;
                                    strThicknessUnit = darrresthkjsonOtherSide[0].strThicknessUnit;
                                    numnWidth = darrresthkjsonOtherSide[0].numnWidth;
                                    strWidthUnit = darrresthkjsonOtherSide[0].strWidthUnit;
                                    numnLength = darrresthkjsonOtherSide[0].numnLength;
                                    strLengthUnit = darrresthkjsonOtherSide[0].strLengthUnit;

                                    boolIsThereOnlyOneOtherSide = true;
                                }
                                else
                                {
                                    //                      //Store resource without thickness, because there may be
                                    //                      //      different thicknesses therefore it is not known
                                    //                      //      which one to take
                                    boolIsThereSeveralOtherSide = true;
                                }
                            }
                            else
                            {
                                boolIsThereNotOtherSide = true;
                            }
                        }
                    }
                }

                /*CASE*/
                if (
                    boolIsThereOnlyOne && boolIsThereOnlyOneOtherSide
                    )
                {
                    if (
                        (numnWidth == null) && (numnLength == null)
                        )
                    {
                        numnWidth = numnWidthInput;
                        strWidthUnit = strWidthUnitInput;
                        numnLength = numnLengthInput;
                        strLengthUnit = strLengthUnitInput;
                    }
                    else if (
                        (numnWidthInput == numnWidth) && (numnLengthInput == numnLength) &&
                        (strWidthUnitInput == strWidthUnit) && (strLengthUnitInput == strLengthUnit)
                        )
                    {
                        //                                  //Do nothing
                    }
                    else
                    {
                        numnThickness = null;
                        strThicknessUnit = null;
                        numnWidth = null;
                        strWidthUnit = "Undetermined";
                        numnLength = null;
                        strLengthUnit = null;
                    }
                }
                else if (
                    boolIsThereOnlyOne && boolIsThereNotOtherSide
                    )
                {
                    numnWidth = numnWidthInput;
                    strWidthUnit = strWidthUnitInput;
                    numnLength = numnLengthInput;
                    strLengthUnit = strLengthUnitInput;
                }
                else if (
                    boolIsThereOnlyOneOtherSide && boolIsThereNot
                    )
                {
                    //                                      //Do nothing
                }
                else if (
                    boolIsThereSeveral
                    )
                {
                    numnThickness = null;
                    strThicknessUnit = null;
                    numnWidth = null;
                    strWidthUnit = "Undetermined";
                    numnLength = null;
                    strLengthUnit = null;
                }
                else if (
                    boolIsThereSeveralOtherSide && boolIsThereOnlyOne
                    )
                {
                    numnWidth = numnWidthInput;
                    strWidthUnit = strWidthUnitInput;
                    numnLength = numnLengthInput;
                    strLengthUnit = strLengthUnitInput;
                }
                /*END-CASE*/

                //                                          //Store resource thickness
                this.darrresthkjsonResThickness.Add(
                    new ResthkjsonResourceThicknessJson(intnPkEleet_I, intnPkEleele_I, null,
                    piwentity_I.intPk, intPkResource_I, false, true, numnThickness, strThicknessUnit,
                    numnWidth, strWidthUnit, numnLength, strLengthUnit)
                    );
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public void subAddDimensionsAndThicknessRecursive(
            //                                              //Add dimensions and thickness of the a resource in
            //                                              //      darrresthkjsonResThickness list.

            int? intnEstimateIdThatInvokeThisMethod_I,
            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            bool boolIsOutputIO_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            //                                              //PIWs will be shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();
            if (
                boolIsOutputIO_I
                )
            {
                IoentityInputsAndOutputsEntityDB ioentityOutput = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intnPkElementElementType == intnPkEleet_I && io.intnPkElementElement == intnPkEleele_I &&
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId);

                bool? boolnQFromIsSize = ioentityOutput != null ? ioentityOutput.boolnSize : null;

                if (
                    boolnQFromIsSize == true
                    )
                {
                    this.subAddOutputComponentDimesionsAndThicknessFromJob(intnEstimateIdThatInvokeThisMethod_I,
                        intnPkEleet_I, intnPkEleele_I, intPkResource_I, jobjson_I, piwentity_I, 
                        darrdynlkjson_I, darrpiwentityProcessInJob_I);
                }
                else
                {

                    List<PatransPaperTransformationEntityDB> darrpatransentity = this.darrpatransDependingJob.Where(
                        patrans => patrans.intPkProcessInWorkflow == piwentity_I.intPk &&
                        patrans.intnPkElementElementTypeO == intnPkEleet_I &&
                        patrans.intnPkElementElementO == intnPkEleele_I &&
                        patrans.intnPkCalculationOwn != null).ToList();

                    //                                      //Get the Paper Transformations that apply.
                    List<PatransPaperTransformationEntityDB> darrpatransentityApplyOutput;
                    this.GetPaperTransformationApplyOutput(intnEstimateIdThatInvokeThisMethod_I,
                        jobjson_I, piwentity_I, darrpatransentity, out darrpatransentityApplyOutput);

                    /*CASE*/
                    if (
                        darrpatransentityApplyOutput.Count == 1
                        )
                    {
                        //                                  //To easy code
                        int? intnPkEleetInput = darrpatransentityApplyOutput[0].intnPkElementElementTypeI;
                        int? intnPkEleeleInput = darrpatransentityApplyOutput[0].intnPkElementElementI;
                        int intPkResourceInput = darrpatransentityApplyOutput[0].intPkResourceI;
                        int? intnPkEleetOutput = intnPkEleet_I;
                        int? intnPkEleeleOutput = intnPkEleele_I;
                        int intPkResourceOutput = intPkResource_I;
                        int intFoldFactor = darrpatransentityApplyOutput[0].intFoldFactor;
                        int intPkCalculation = (int)darrpatransentityApplyOutput[0].intnPkCalculationOwn;

                        if (
                            //                              //Input resource thickness already exists in 
                            //                              //      darrresthkjsonResThickness list
                            this.darrresthkjsonResThickness.Exists(resthk => resthk.intnPkEleet == intnPkEleetInput &&
                                resthk.intnPkEleele == intnPkEleeleInput &&
                                resthk.intPkProcessInWorkflow == piwentity_I.intPk &&
                                resthk.intPkResource == intPkResourceInput)
                            )
                        {
                            //                              //Do nothing
                        }
                        else
                        {
                            //                              //Get Input resource thickness
                            this.subAddDimensionsAndThicknessRecursive(intnEstimateIdThatInvokeThisMethod_I,
                                intnPkEleetInput, intnPkEleeleInput, intPkResourceInput, false,
                                jobjson_I, piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I);
                        }

                        //                                  //Get the resource entity.
                        EleentityElementEntityDB eleentityResOutput = context.Element.FirstOrDefault(ele =>
                            ele.intPk == intPkResource_I);
                        //                                  //Get the resource type entity.
                        EtentityElementTypeEntityDB etentityResTypeOutput = context.ElementType.FirstOrDefault(et =>
                            et.intPk == eleentityResOutput.intPkElementType);

                        this.subAddOutputComponentDimensionsAndThicknessWithPT(intnPkEleetInput, intnPkEleeleInput,
                            intnPkEleetOutput, intnPkEleeleOutput, intPkCalculation, piwentity_I.intPk,
                            intPkResourceInput, intPkResourceOutput, etentityResTypeOutput,
                            darrpatransentityApplyOutput[0]);
                    }
                    else if (
                        //                                  //There is more than one paper transformation
                        darrpatransentityApplyOutput.Count > 1
                        )
                    {
                        //                                  //Store resource without thickness, because there may be
                        //                                  //      different thicknesses therefore it is not known
                        //                                  //      which one to take
                        this.darrresthkjsonResThickness.Add(
                            new ResthkjsonResourceThicknessJson(intnPkEleet_I, intnPkEleele_I, null, piwentity_I.intPk,
                            intPkResource_I, false, true, null, null, null, null, null, null)
                            );
                    }
                    else if (
                        //                                  //Not related to any paper transformation
                        darrpatransentityApplyOutput.Count == 0
                        )
                    {
                        this.subAddOutputComponentDimensionsAndThicknessWithoutPT(intnEstimateIdThatInvokeThisMethod_I,
                            intnPkEleet_I, intnPkEleele_I, intPkResource_I, jobjson_I, piwentity_I, darrdynlkjson_I,
                            darrpiwentityProcessInJob_I);
                    }
                    /*END-CASE*/
                }
            }
            else
            //                                              //It is an Input IO
            {
                //                                          //Get the resource entity.
                EleentityElementEntityDB eleentityResInput = context.Element.FirstOrDefault(ele =>
                    ele.intPk == intPkResource_I);
                //                                          //Get the resource type entity.
                EtentityElementTypeEntityDB etentityResTypeInput = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityResInput.intPkElementType);

                bool boolIsMedia = etentityResTypeInput.strCustomTypeId == ResResource.strMedia;
                bool boolIsComponent = etentityResTypeInput.strCustomTypeId == ResResource.strComponent;

                if (
                    boolIsMedia
                    )
                {
                    ResthkjsonResourceThicknessJson resthkjson = this.darrresthkjsonResThickness.FirstOrDefault(
                        resthk => resthk.intnPkEleet == intnPkEleet_I && resthk.intnPkEleele == intnPkEleele_I &&
                        resthk.intPkResource == eleentityResInput.intPk &&
                        resthk.intPkProcessInWorkflow == piwentity_I.intPk);

                    if (
                        //                                  //The data is not in the list yet
                        resthkjson == null
                        )
                    {
                        double? numnWidth;
                        double? numnLength;
                        String strWidthUnit;
                        String strLengthUnit;
                        ProdtypProductType.subfunGetDimensions(intnPkEleet_I, intnPkEleele_I, eleentityResInput.intPk,
                            true, jobjson_I, piwentity_I, this, out numnWidth, out numnLength, out strWidthUnit,
                            out strLengthUnit);

                        this.subAddMediaDimensionsAndThickness(intnPkEleet_I, intnPkEleele_I, piwentity_I.intPk,
                            eleentityResInput.intPk, etentityResTypeInput.intPk, numnWidth, numnLength, strWidthUnit,
                            strLengthUnit);
                    }
                }
                else if (
                    boolIsComponent
                    )
                {
                    String strLink = null;
                    //                                      //To get link
                    IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                        io.intnPkElementElementType == intnPkEleet_I && io.intnPkElementElement == intnPkEleele_I &&
                        io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                        io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId);

                    if (
                        ioentity != null
                        )
                    {
                        strLink = ioentity.strLink;
                    }

                    this.subAddInputComponentDimensionsAndThickness(intnEstimateIdThatInvokeThisMethod_I,
                        intnPkEleet_I, intnPkEleele_I, intPkResource_I, strLink, jobjson_I, piwentity_I,
                        darrdynlkjson_I, darrpiwentityProcessInJob_I);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subfunGetDimensions(
            //                                              //Return the string with the dimensions for this IO.

            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            bool boolIsInput_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            ProdtypProductType prodtyp_I,
            out double? numnWidth_O,
            out double? numnLength_O,
            out String strWidthUnit_O,
            out String strLengthUnit_O
            )
        {
            numnWidth_O = null;
            numnLength_O = null;
            strWidthUnit_O = null;
            strLengthUnit_O = null;

            String strDimensionsAndThicknessUnit = "";

            Odyssey2Context context = new Odyssey2Context();

            if (
                //                                      //IO is Input.
                boolIsInput_I
                )
            {
                //                                      //Get the Paper Transformations.
                List<PatransPaperTransformationEntityDB> darrpatransentityNoPropagation =
                    prodtyp_I.darrpatransDependingJob.Where(pt =>
                    pt.intPkProcessInWorkflow == piwentity_I.intPk &&
                    pt.intnPkElementElementTypeI == intnPkEleet_I &&
                    pt.intnPkElementElementI == intnPkEleele_I &&
                    pt.intPkResourceI == intPkResource_I &&
                    pt.intnPkCalculationOwn != null).ToList();

                //List<PatransPaperTransformationEntityDB> darrpatransentityNoPropagation =
                //        darrpatransentityAll.Where(pt =>
                //        pt.intnPkCalculationOwn != null).ToList();

                //List<PatransPaperTransformationEntityDB> darrpatransentityPropagation =
                //    darrpatransentityAll.Where(pt =>
                //    pt.intnPkCalculationOwn == null &&
                //    pt.intnPkCalculationLink != null).ToList();

                //ProdtypProductType.GetDimensionsForInput((int)intPkResource_I, jobjson_I, piwentity_I,
                //    darrpatransentityNoPropagation, ref numnWidth_O, ref numnLength_O, ref strWidthUnit_O,

                ProdtypProductType.GetDimensionsForInput((int)intPkResource_I, jobjson_I, piwentity_I, prodtyp_I,
                    darrpatransentityNoPropagation, ref numnWidth_O, ref  numnLength_O, ref strWidthUnit_O, 

                    ref strLengthUnit_O);
            }
            else
            {
                //                                      //IO is Output.

                List<PatransPaperTransformationEntityDB> darrpatransentityAll =
                    context.PaperTransformation.Where(pt =>
                    pt.intPkProcessInWorkflow == piwentity_I.intPk &&
                    pt.intnPkElementElementTypeO == intnPkEleet_I &&
                    pt.intnPkElementElementO == intnPkEleele_I &&
                    pt.intnPkResourceO == intPkResource_I).ToList();

                List<PatransPaperTransformationEntityDB> darrpatransentityNoPropagation =
                    darrpatransentityAll.Where(pt => pt.intnPkCalculationOwn != null).ToList();

                List<PatransPaperTransformationEntityDB> darrpatransentityApplyOutput =
                    new List<PatransPaperTransformationEntityDB>();

                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == intnPkEleet_I &&
                    io.intnPkElementElement == intnPkEleele_I);

                ProdtypProductType.GetDimensionsForOutput(darrpatransentityNoPropagation, piwentity_I, jobjson_I,
                    ioentity.boolnSize, ref strDimensionsAndThicknessUnit);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        //private static String strDimensionsAndThicknessUnit(
        //    //                                              //Return the string with the dimensions for this IO.

        //    int intPkProcessInWorkflow_I,
        //    int? intnPkEleet_I,
        //    int? intnPkEleele_I,
        //    int? intnPkResource_I,
        //    bool boolIsInput_I,
        //    JobjsonJobJson jobjson_I,
        //    double numQuantity_I,
        //    String strUnit_I,
        //    List<ResthkjsonResourceThicknessJson> darrResourceThickness_I
        //    )
        //{
        //    String strDimensionsAndThicknessUnit = "";

        //    Odyssey2Context context = new Odyssey2Context();

        //    PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piwentity =>
        //        piwentity.intPk == intPkProcessInWorkflow_I);

        //    if (
        //        piwentity != null
        //        )
        //    {
        //        if (
        //            //                                      //IO is Input.
        //            boolIsInput_I
        //            )
        //        {
        //            //                                      //Get the Paper Transformations.
        //            List<PatransPaperTransformationEntityDB> darrpatransentityAll =
        //                context.PaperTransformation.Where(pt =>
        //                pt.intPkProcessInWorkflow == intPkProcessInWorkflow_I &&
        //                pt.intnPkElementElementTypeI == intnPkEleet_I &&
        //                pt.intnPkElementElementI == intnPkEleele_I &&
        //                pt.intPkResourceI == intnPkResource_I).ToList();

        //            List<PatransPaperTransformationEntityDB> darrpatransentityNoPropagation =
        //                    darrpatransentityAll.Where(pt =>
        //                    pt.intnPkCalculationOwn != null).ToList();

        //            List<PatransPaperTransformationEntityDB> darrpatransentityPropagation =
        //                darrpatransentityAll.Where(pt =>
        //                pt.intnPkCalculationOwn == null &&
        //                pt.intnPkCalculationLink != null).ToList();

        //            //                                      //Get Resource and resource type entities.
        //            EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
        //                ele.intPk == intnPkResource_I);
        //            EtentityElementTypeEntityDB etentityRes = context.ElementType.FirstOrDefault(et =>
        //                et.intPk == eleentityRes.intPkElementType);

        //            ProdtypProductType.GetDimensionsForInput(darrpatransentityNoPropagation,
        //                darrpatransentityPropagation, piwentity, jobjson_I, (int)intnPkResource_I,
        //                numQuantity_I, strUnit_I, ref strDimensionsAndThicknessUnit);
        //        }
        //        else
        //        {
        //            //                                      //IO is Output.

        //            List<PatransPaperTransformationEntityDB> darrpatransentityAll =
        //                context.PaperTransformation.Where(pt =>
        //                pt.intPkProcessInWorkflow == intPkProcessInWorkflow_I &&
        //                pt.intnPkElementElementTypeO == intnPkEleet_I &&
        //                pt.intnPkElementElementO == intnPkEleele_I &&
        //                pt.intnPkResourceO == intnPkResource_I).ToList();

        //            List<PatransPaperTransformationEntityDB> darrpatransentityNoPropagation =
        //                darrpatransentityAll.Where(pt => pt.intnPkCalculationOwn != null).ToList();

        //            List<PatransPaperTransformationEntityDB> darrpatransentityApplyOutput =
        //                new List<PatransPaperTransformationEntityDB>();

        //            IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
        //                io.intPkWorkflow == piwentity.intPkWorkflow &&
        //                io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
        //                io.intnPkElementElementType == intnPkEleet_I &&
        //                io.intnPkElementElement == intnPkEleele_I);

        //            ProdtypProductType.GetDimensionsForOutput(darrpatransentityNoPropagation, piwentity, jobjson_I,
        //                ioentity.boolnSize, ref strDimensionsAndThicknessUnit);
        //        }

        //        double? numnThickness;
        //        String strThicknessUnit;
        //        String strThickness = "";
        //        if (
        //            ProdtypProductType.subfunHasThicknessAndThicknessUnit(intnPkEleet_I, intnPkEleele_I,
        //                (int)intnPkResource_I, intPkProcessInWorkflow_I, darrResourceThickness_I,
        //                out numnThickness, out strThicknessUnit)
        //            )
        //        {
        //            strThickness = " x " + numnThickness + " " + strThicknessUnit;
        //        }

        //        strDimensionsAndThicknessUnit = strDimensionsAndThicknessUnit + strThickness;
        //    }
        //    return strDimensionsAndThicknessUnit;
        //}

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private String strDimensionsAndThickness(
            //                                              //Return the string with the dimensions and thickness
            //                                              //      for this IO.

            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            double numQuantity_I,
            String strUnit_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I
            )
        {
            double? numnThickness = null;
            String strThicknessUnit = null;
            double? numnWidth = null;
            String strWidthUnit = null;
            double? numnLength = null;
            String strLengthUnit = null;
            String strDimensions = null;

            List<ResthkjsonResourceThicknessJson> darrresthkjson = this.darrresthkjsonResThickness.Where(resthk =>
                resthk.intnPkEleet == intnPkEleet_I && resthk.intnPkEleele == intnPkEleele_I &&
                resthk.intPkProcessInWorkflow == piwentity_I.intPk &&
                resthk.intPkResource == intPkResource_I).ToList();

            if (
                darrresthkjson.Count > 0
                )
            {
                if (
                    darrresthkjson.Count == 1
                    )
                {
                    ResResource resResource = ResResource.resFromDB(intPkResource_I, false);
                    bool boolMediaRoll = resResource.boolMediaRoll();

                    //                                      //To easy code
                    numnThickness = darrresthkjson[0].numnThickness;
                    strThicknessUnit = darrresthkjson[0].strThicknessUnit;
                    numnWidth = darrresthkjson[0].numnWidth;
                    strWidthUnit = darrresthkjson[0].strWidthUnit;
                    numnLength = boolMediaRoll ? numQuantity_I : darrresthkjson[0].numnLength;
                    strLengthUnit = boolMediaRoll ? strUnit_I : darrresthkjson[0].strLengthUnit;

                    if (
                        numnWidth != null && numnLength != null
                        )
                    {
                        strDimensions = numnWidth + " " + strWidthUnit + " x " + numnLength + " " + strLengthUnit;
                    }
                    else if (
                        numnWidth == null && strWidthUnit != null
                        )
                    {
                        strDimensions = "Undetermined";
                    }
                }
                else
                {
                    //                                      //No values ​​are assigned, because there may be
                    //                                      //      different thicknesses therefore it is not known
                    //                                      //      which one to take

                    strDimensions = "Undetermined";
                }
            }

            String strDimensionsAndThicknessUnit = null;

            /*CASE*/
            if (
                strDimensions != null && strDimensions.Length > 0 && numnThickness > 0
                )
            {
                strDimensionsAndThicknessUnit = strDimensions + " x " + numnThickness + " " + strThicknessUnit;
            }
            else if (
               strDimensions != null && strDimensions.Length > 0 && numnThickness == null
               )
            {
                strDimensionsAndThicknessUnit = strDimensions;
            }
            else if (
                strDimensions == null && numnThickness != null
                )
            {
                strDimensionsAndThicknessUnit = numnThickness + " " + strThicknessUnit;
            }
            /*END-CASE*/

            return strDimensionsAndThicknessUnit;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void GetDimensionsForInput(

            int intPkResource_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            ProdtypProductType prodtyp_I,
            List<PatransPaperTransformationEntityDB> darrpatransentityNoPropagation_I,
            ref double? numnWidth_O,
            ref double? numnLength_O,
            ref String strWidthUnit_O,
            ref String strLengthUnit_O
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              To know if the resource is a roll.
            ResResource resResource = ResResource.resFromDB(intPkResource_I, false);
            bool boolMediaRoll = resResource.boolMediaRoll();

            List<PatransPaperTransformationEntityDB> darrpatransentityApplyInput =
                new List<PatransPaperTransformationEntityDB>();

            if (
                //                                          //There are Paper Transformation.
                darrpatransentityNoPropagation_I.Count > 0
                )
            {
                //                                          //Get the Paper Transformations that apply.
                List<PatransPaperTransformationEntityDB> darrpatransentityOwnApplyInput;
                ProdtypProductType.GetPaperTransformationOwnApplyInput(darrpatransentityNoPropagation_I,
                    piwentity_I, jobjson_I, prodtyp_I, out darrpatransentityOwnApplyInput);

                //                                          //Check if only there is one PaperTransformation that apply
                darrpatransentityApplyInput.AddRange(darrpatransentityOwnApplyInput);

                if (
                    darrpatransentityApplyInput.Count == 1
                    )
                {
                    double numWidthI = darrpatransentityApplyInput[0].numWidthI;
                    double? numnLengthI = darrpatransentityApplyInput[0].numnHeightI;
                    String strDimensionsUnit = darrpatransentityApplyInput[0].strUnit;

                    double numWidthINext = darrpatransentityApplyInput[0].numWidthI;
                    double? numnLengthINext = darrpatransentityApplyInput[0].numnHeightI;
                    String strDimensionsUnitNext = darrpatransentityApplyInput[0].strUnit;

                    if (
                        //                              //strDimensionsUnitNext same unit than original.
                        strDimensionsUnit == strDimensionsUnitNext
                        )
                    {
                        //                              //Do nothing.
                    }
                    else
                    {
                        //                              //strDimensionsUnitNext diferent unit than original.
                        //                              //Transform strDimensionsUnitNext to strDimensionsUnit.
                        if (
                            strDimensionsUnit == "cm"
                            )
                        {
                            //                          //Transform strDimensionsUnitNext to cm.
                            numWidthINext = numWidthINext * 2.54;
                            numnLengthINext = numnLengthINext * 2.54;
                        }
                        else
                        {
                            //                          //Transform strDimensionsUnitNext to in.
                            numWidthINext = numWidthINext / 2.54;
                            numnLengthINext = numnLengthINext / 2.54;
                        }
                    }

                    if (
                        //                              //When PaperTransformation are fold.
                        (numnLengthI == null && numnLengthINext == null)
                        ||
                        ((numnLengthI != null && numnLengthINext != null) &&
                        (Math.Abs(numWidthI - numWidthINext) <= Math.Abs(0.1)) &&
                        (Math.Abs((double)numnLengthI - (double)numnLengthINext) <= Math.Abs(0.1)))
                        )
                    {
                        int intStatus = 200;
                        String strUserMessage = "";
                        String strDevMessage = "";
                        if (
                            numWidthI == 0 && numnLengthI == 0
                            )
                        {
                            //                                          //Get output dimensions from Job.
                            double numWidthOFromJob = 0.0;
                            double numLengthOFromJob = 0.0;
                            String strDimensionsFromJob = "";
                            double? numnLengthOFromJob = 0.0;
                            CalCalculation.subGetWidthAndLengthOutput(jobjson_I, null, ref numWidthOFromJob,
                                ref numnLengthOFromJob, ref strDimensionsFromJob, ref intStatus, ref strUserMessage,
                                ref strDevMessage);
                            numLengthOFromJob = (double)numnLengthOFromJob;

                            if (
                                (numWidthOFromJob > 0) &&
                                (numLengthOFromJob > 0)
                                )
                            {
                                numWidthI = numWidthOFromJob;
                                numnLengthI = numLengthOFromJob;
                                strDimensionsUnit = strDimensionsFromJob;
                            }
                        }

                        if (
                            intStatus == 200
                            )
                        {
                            numnWidth_O = numWidthI;
                            strWidthUnit_O = strDimensionsUnit;
                            numnLength_O = numnLengthI;
                            strLengthUnit_O = strDimensionsUnit;
                        }
                    }
                }
                else if (
                    darrpatransentityApplyInput.Count == 0
                    )
                {
                    //                                      //Get Resource and resource type entities.
                    EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                        ele.intPk == intPkResource_I);
                    EtentityElementTypeEntityDB etentityRes = context.ElementType.FirstOrDefault(et =>
                        et.intPk == eleentityRes.intPkElementType);

                    bool boolIsMedia = etentityRes.strXJDFTypeId == 
                        ProdtypProductType.strResourceTypeMedia ? true : false;

                    double? numnWidthI = null;
                    double? numnLengthI = null;
                    String strDimensionsUnit = null;
                    String strWidthUnit = null;
                    String strLengthUnit = null;

                    if (
                        boolIsMedia
                        )
                    {
                        int intStatus = 200; String strUserMessage = ""; String strDevMessage = "";
                        //                                      //Look for WidthI and LengthI from Resource attributes.
                        ProdtypProductType.GetDimensionsFromResourceAttributes(eleentityRes, etentityRes, boolMediaRoll,
                            out numnWidthI, out numnLengthI, out strDimensionsUnit, out strWidthUnit, out strLengthUnit,
                            ref intStatus, ref strUserMessage, ref strDevMessage);

                        if (
                            !boolMediaRoll
                            )
                        {
                            numnWidth_O = numnWidthI;
                            strWidthUnit_O = (strDimensionsUnit != null ? strDimensionsUnit : strWidthUnit);
                            strLengthUnit_O = (strDimensionsUnit != null ? strDimensionsUnit : strLengthUnit);

                            if (
                                strWidthUnit_O != strLengthUnit_O
                                )
                            {
                                numnLength_O = CvtConvert.to((double)numnLengthI, strLengthUnit, strWidthUnit);
                                strLengthUnit_O = strWidthUnit;
                            }
                            else
                            {
                                numnLength_O = numnLengthI;
                            }
                        }
                        else
                        {
                            numnWidth_O = numnWidthI;
                            strWidthUnit_O = strWidthUnit;
                            numnLength_O = numnLengthI;
                            strLengthUnit_O = strLengthUnit;
                        }
                    }
                }
            }
            else if (
                //                                          //There are no Paper Transformation at all.
                //                                          //If resource is media, get the dimensions from resource.

                darrpatransentityNoPropagation_I.Count == 0
                )
            {
                //                                          //Get Resource and resource type entities.
                EleentityElementEntityDB eleentityRes = context.Element.FirstOrDefault(ele =>
                    ele.intPk == intPkResource_I);
                EtentityElementTypeEntityDB etentityRes = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityRes.intPkElementType);

                bool boolIsMedia = etentityRes.strXJDFTypeId == ProdtypProductType.strResourceTypeMedia ? true : false;

                double? numnWidthI = null;
                double? numnLengthI = null;
                String strDimensionsUnit = null;
                String strWidthUnit = null;
                String strLengthUnit = null;

                if (
                    boolIsMedia
                    )
                {
                    int intStatus = 200; String strUserMessage = ""; String strDevMessage = "";
                    //                                      //Look for WidthI and LengthI from Resource attributes.
                    ProdtypProductType.GetDimensionsFromResourceAttributes(eleentityRes, etentityRes, boolMediaRoll,
                        out numnWidthI, out numnLengthI, out strDimensionsUnit, out strWidthUnit, out strLengthUnit,
                        ref intStatus, ref strUserMessage, ref strDevMessage);

                    if (
                        !boolMediaRoll
                        )
                    {
                        numnWidth_O = numnWidthI;
                        strWidthUnit_O = (strDimensionsUnit != null ? strDimensionsUnit : strWidthUnit);
                        strLengthUnit_O = (strDimensionsUnit != null ? strDimensionsUnit : strLengthUnit);

                        if (
                            strWidthUnit_O != strLengthUnit_O
                            )
                        {
                            numnLength_O = CvtConvert.to((double)numnLengthI, strLengthUnit, strWidthUnit);
                            strLengthUnit_O = strWidthUnit;
                        }
                        else
                        {
                            numnLength_O = numnLengthI;
                            strLengthUnit_O = strLengthUnit_O;
                        }
                    }
                    else
                    {
                        numnWidth_O = numnWidthI;
                        strWidthUnit_O = strWidthUnit;
                        numnLength_O = numnLengthI;
                        strLengthUnit_O = strLengthUnit;
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void GetPaperTransformationOwnApplyInput(
            List<PatransPaperTransformationEntityDB> darrpatransentityNoPropagation_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            ProdtypProductType prodtyp_I,
            out List<PatransPaperTransformationEntityDB> darrpatransentityOwnApplyInput_O
            )
        {
            darrpatransentityOwnApplyInput_O = new List<PatransPaperTransformationEntityDB>();

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get calculation.
            List<CalCalculation> darrcal = prodtyp_I.darrcalDependingJob.Where(cal =>
                //                                          //Per Quantity calculation, take quantity the Job.
                (cal.strCalculationType == CalCalculation.strPerQuantity)
                &&
                (cal.strByX == CalCalculation.strByResource) &&
                //                                          //Calculation is enable.
                cal.boolIsEnable).ToList();

            foreach (PatransPaperTransformationEntityDB patransentity in darrpatransentityNoPropagation_I)
            {
                CalCalculation cal = darrcal.FirstOrDefault(cal =>
                    cal.intPk == patransentity.intnPkCalculationOwn &&
                    //                                      //Condition to apply and quantity condition apply for 
                    //                                      //      this cal.
                    Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I));

                if (
                    //                                      //The calculation is valid for the current job
                    cal != null
                    )
                {
                    bool boolIsEleetOutput;
                    int intPkEleetOrEleeleOutput;

                    if (
                        cal.intnPkQFromElementElementTypeBelongsTo != null
                        )
                    {
                        boolIsEleetOutput = true;
                        intPkEleetOrEleeleOutput = (int)cal.intnPkQFromElementElementTypeBelongsTo;
                    }
                    else
                    {
                        boolIsEleetOutput = false;
                        intPkEleetOrEleeleOutput = (int)cal.intnPkQFromElementElementBelongsTo;
                    }

                    //                                      //List Of process inputs and outputs.
                    List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2IOFromPIW;

                    if (
                        !prodtyp_I.dicProcessIOs.ContainsKey(piwentity_I.intPk)
                        )
                    {
                        //                                  //Get eleet-s.
                        List<EleetentityElementElementTypeEntityDB> darreleetentityAllEleEt =
                            context.ElementElementType.Where(
                            eleet => eleet.intPkElementDad == piwentity_I.intPkProcess).ToList();

                        //                                  //Get eleele-s.
                        List<EleeleentityElementElementEntityDB> darreleeleentityAllEleEle =
                            context.ElementElement.Where(
                            eleele => eleele.intPkElementDad == piwentity_I.intPkProcess).ToList();

                        ProdtypProductType.subGetProcessInputsAndOutputs(jobjson_I, piwentity_I, prodtyp_I,
                            darreleeleentityAllEleEle, darreleetentityAllEleEt, out darrioinfrmpiwjson2IOFromPIW);

                        prodtyp_I.dicProcessIOs.Add(piwentity_I.intPk, darrioinfrmpiwjson2IOFromPIW);
                    }
                    else
                    {
                        darrioinfrmpiwjson2IOFromPIW = prodtyp_I.dicProcessIOs.FirstOrDefault(
                            piw => piw.Key == piwentity_I.intPk).Value;
                    }

                    if (
                        //                                  //Valid that res exist in IOs list.
                        darrioinfrmpiwjson2IOFromPIW.Exists(io =>
                            io.boolIsEleet == boolIsEleetOutput &&
                            io.intPkEleetOrEleele == intPkEleetOrEleeleOutput &&
                            io.intPkResource == cal.intnPkQFromResourceElementBelongsTo)
                        )
                    {
                        darrpatransentityOwnApplyInput_O.Add(patransentity);
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void GetPaperTransformationPropagationApplyInput(
            List<PatransPaperTransformationEntityDB> darrpatransentityPropagation_I,
            JobjsonJobJson jobjson_I,
            out List<PatransPaperTransformationEntityDB> darrpatransentityPropagationApplyInput_O
            )
        {
            darrpatransentityPropagationApplyInput_O = new List<PatransPaperTransformationEntityDB>();

            Odyssey2Context context = new Odyssey2Context();

            foreach (PatransPaperTransformationEntityDB patransentity in darrpatransentityPropagation_I)
            {
                CalCalculation cal = CalCalculation.calGetFromDb((int)patransentity.intnPkCalculationLink);

                bool boolConditionApply = Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I);

                PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                    piw.intPk == patransentity.intPkProcessInWorkflow);

                IojentityInputsAndOutputsForAJobEntityDB iojentityCal =
                    context.InputsAndOutputsForAJob.FirstOrDefault(iojentity =>
                    iojentity.intPkProcessInWorkflow == piwentity.intPk &&
                    iojentity.intnPkElementElementType == patransentity.intnPkElementElementTypeI &&
                    iojentity.intnPkElementElement == patransentity.intnPkElementElementI &&
                    iojentity.intPkResource == patransentity.intPkResourceI &&
                    iojentity.intJobId == jobjson_I.intJobId);

                IoentityInputsAndOutputsEntityDB ioentityCal = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                    io.intnPkElementElementType == patransentity.intnPkElementElementTypeI &&
                    io.intnPkElementElement == patransentity.intnPkElementElementI &&
                    io.intnPkResource == patransentity.intPkResourceI);

                if (
                    boolConditionApply &&
                    //                                  //Check if res of cal is in the piw.
                    (iojentityCal != null || ioentityCal != null)
                    )
                {
                    darrpatransentityPropagationApplyInput_O.Add(patransentity);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private void GetPaperTransformationApplyOutput(

            int? intnEstimateIdThatInvokeThisMethod_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<PatransPaperTransformationEntityDB> darrpatransentity_I,
            out List<PatransPaperTransformationEntityDB> darrpatransentityApplyOutput_O
            )
        {
            darrpatransentityApplyOutput_O = new List<PatransPaperTransformationEntityDB>();

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get calculation.
            List<CalCalculation> darrcal = this.darrcalDependingJob.Where(cal =>
                //                                          //Per Quantity calculation, take quantity the Job.
                (cal.strCalculationType == CalCalculation.strPerQuantity)
                &&
                (cal.strByX == CalCalculation.strByResource) &&
                //                                          //Calculation is enable.
                cal.boolIsEnable).ToList();

            foreach (PatransPaperTransformationEntityDB patransentity in darrpatransentity_I)
            {
                CalCalculation cal = darrcal.FirstOrDefault(cal => 
                    cal.intPk == patransentity.intnPkCalculationOwn &&
                    //                                      //Condition to apply and quantity condition apply for 
                    //                                      //      this cal.
                    Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I));

                if (
                    //                                      //The calculation is valid for the current job
                    cal != null
                    )
                {
                    bool boolIsEleetInput;
                    int intPkEleetOrEleeleInput;

                    if (
                        cal.intnPkElementElementTypeBelongsTo != null
                        )
                    {
                        boolIsEleetInput = true;
                        intPkEleetOrEleeleInput = (int)cal.intnPkElementElementTypeBelongsTo;
                    }
                    else
                    {
                        boolIsEleetInput = false;
                        intPkEleetOrEleeleInput = (int)cal.intnPkElementElementBelongsTo;
                    }

                    //                                      //List Of process inputs and outputs.
                    List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2IOFromPIW;

                    if (
                        !this.dicProcessIOs.ContainsKey(piwentity_I.intPk)
                        )
                    {
                        //                                  //Get eleet-s.
                        List<EleetentityElementElementTypeEntityDB> darreleetentityAllEleEt =
                            context.ElementElementType.Where(
                            eleet => eleet.intPkElementDad == piwentity_I.intPkProcess).ToList();

                        //                                  //Get eleele-s.
                        List<EleeleentityElementElementEntityDB> darreleeleentityAllEleEle =
                            context.ElementElement.Where(
                            eleele => eleele.intPkElementDad == piwentity_I.intPkProcess).ToList();

                        ProdtypProductType.subGetProcessInputsAndOutputs(jobjson_I, piwentity_I, this,
                            darreleeleentityAllEleEle, darreleetentityAllEleEt, out darrioinfrmpiwjson2IOFromPIW);

                        this.dicProcessIOs.Add(piwentity_I.intPk, darrioinfrmpiwjson2IOFromPIW);
                    }
                    else
                    {
                        darrioinfrmpiwjson2IOFromPIW = this.dicProcessIOs.FirstOrDefault(
                            piw => piw.Key == piwentity_I.intPk).Value;
                    }

                    if (
                        //                                  //Valid that res exist in IOs list.
                        darrioinfrmpiwjson2IOFromPIW.Exists(io =>
                            io.boolIsEleet == boolIsEleetInput &&
                            io.intPkEleetOrEleele == intPkEleetOrEleeleInput &&
                            io.intPkResource == cal.intnPkResourceElementBelongsTo)
                        )
                    {
                        darrpatransentityApplyOutput_O.Add(patransentity);
                    }
                    else
                    {
                        bool boolResourceIsInThisWFJobOrEstimateData = false;

                        if (
                            //                              //this was called in some method from estimations.
                            intnEstimateIdThatInvokeThisMethod_I != null
                            )
                        {
                            //                              //Find in estimationData.
                            //                              //Get Estimation Data.
                            EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                                estdata => estdata.intId == intnEstimateIdThatInvokeThisMethod_I &&
                                estdata.intJobId == jobjson_I.intJobId &&
                                estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
                                estdata.intnPkElementElementType == cal.intnPkElementElementTypeBelongsTo &&
                                estdata.intnPkElementElement == cal.intnPkElementElementBelongsTo &&
                                estdata.intPkResource == cal.intnPkResourceElementBelongsTo);

                            boolResourceIsInThisWFJobOrEstimateData = estdataentity != null ? true : false;
                        }
                        else
                        {
                            //                              //Find in the list that was generate in options
                            //                              //    for io that has a resource group.
                            if (
                                this.darriojsoninInputsCombinationsAndInputsSelected != null
                                )
                            {
                                boolResourceIsInThisWFJobOrEstimateData =
                                    this.darriojsoninInputsCombinationsAndInputsSelected.Exists(io =>
                                    io.intPkPIW == piwentity_I.intPk &&
                                    io.intnPkElementElementType == cal.intnPkElementElementTypeBelongsTo &&
                                    io.intnPkElementElement == cal.intnPkElementElementBelongsTo &&
                                    io.intPkResource == cal.intnPkResourceElementBelongsTo);
                            }
                        }

                        if (
                            boolResourceIsInThisWFJobOrEstimateData
                            )
                        {
                            darrpatransentityApplyOutput_O.Add(patransentity);
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static bool subfunHasThicknessAndThicknessUnit(
            //                                              //Get thickness and thickness unit.

            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            int intPkProcessInWorkflow_I,
            List<ResthkjsonResourceThicknessJson> darrResourceThickness_I,
            out double? numnThickness_O,
            out String strThicknessUnit_O
            )
        {
            bool boolHasThickness = false;
            numnThickness_O = null;
            strThicknessUnit_O = null;

            ResthkjsonResourceThicknessJson resthkjson = darrResourceThickness_I.FirstOrDefault(resthk =>
                resthk.intnPkEleet == intnPkEleet_I && resthk.intnPkEleele == intnPkEleele_I &&
                resthk.intPkProcessInWorkflow == intPkProcessInWorkflow_I &&
                resthk.intPkResource == intPkResource_I);

            if (
                resthkjson != null &&
                resthkjson.numnThickness != null &&
                resthkjson.strThicknessUnit != null
                )
            {
                boolHasThickness = true;
                numnThickness_O = resthkjson.numnThickness;
                strThicknessUnit_O = resthkjson.strThicknessUnit;
            }

            return boolHasThickness;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void GetDimensionsForOutput(
            List<PatransPaperTransformationEntityDB> darrpatransentityNoPropagation_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            bool? boolnIsSize_I,
            ref String strDimensions_IO
            )
        {
            if (
                boolnIsSize_I != null &&
                boolnIsSize_I == true
               )
            {
                int intStatus = 200;
                String strUserMessage = "";
                String strDevMessage = "";
                //                                          //Get output dimensions from Job.
                double numWidthOFromJob = 0.0;
                double numLengthOFromJob = 0.0;
                String strDimensionsFromJob = "";
                double? numnLengthOFromJob = 0.0;
                CalCalculation.subGetWidthAndLengthOutput(jobjson_I, null, ref numWidthOFromJob,
                    ref numnLengthOFromJob, ref strDimensionsFromJob, ref intStatus, ref strUserMessage,
                    ref strDevMessage);
                numLengthOFromJob = (double)numnLengthOFromJob;

                if (
                    //(numWidthOFromJob > 0) &&
                    //(numLengthOFromJob > 0)
                    intStatus == 200
                    )
                {
                    strDimensions_IO = numWidthOFromJob + " " + strDimensionsFromJob + " x " + numLengthOFromJob + " " +
                        strDimensionsFromJob;
                }
            }
            else
            {
                Odyssey2Context context = new Odyssey2Context();

                List<PatransPaperTransformationEntityDB> darrpatransentityApplyOutput =
                    new List<PatransPaperTransformationEntityDB>();

                if (
                    //                                          //There are Paper Tranformation,
                    //                                          //      only can have OWN no-propagation.
                    darrpatransentityNoPropagation_I.Count > 0
                    )
                {
                    foreach (PatransPaperTransformationEntityDB patransentity in darrpatransentityNoPropagation_I)
                    {
                        CalCalculation cal = CalCalculation.calGetFromDb((int)patransentity.
                            intnPkCalculationOwn);

                        bool boolConditionApply = Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, 
                            jobjson_I);

                        IojentityInputsAndOutputsForAJobEntityDB iojentity =
                            context.InputsAndOutputsForAJob.FirstOrDefault(iojentity =>
                            iojentity.intPkProcessInWorkflow == piwentity_I.intPk &&
                            iojentity.intnPkElementElementType == patransentity.intnPkElementElementTypeI &&
                            iojentity.intnPkElementElement == patransentity.intnPkElementElementI &&
                            iojentity.intPkResource == patransentity.intPkResourceI &&
                            iojentity.intJobId == jobjson_I.intJobId);

                        IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                            io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                            io.intnPkElementElementType == patransentity.intnPkElementElementTypeI &&
                            io.intnPkElementElement == patransentity.intnPkElementElementI &&
                            io.intnPkResource == patransentity.intPkResourceI);

                        if (
                            boolConditionApply &&
                            //                                  //Check if res is in the piw.
                            (iojentity != null || ioentity != null)
                            )
                        {
                            darrpatransentityApplyOutput.Add(patransentity);
                        }
                    }

                    if (
                        darrpatransentityApplyOutput.Count > 0
                        )
                    {
                        double numWidthO = darrpatransentityApplyOutput[0].numWidthO;
                        double numLengthO = darrpatransentityApplyOutput[0].numHeightO;
                        String strDimensionsUnit = darrpatransentityApplyOutput[0].strUnit;

                        bool boolAllPaperTranformationApplyAndJobSizeSameDimensions = true;
                        int intI = 1;
                        /*WHILE*/
                        while
                            (
                            intI < darrpatransentityApplyOutput.Count &&
                            boolAllPaperTranformationApplyAndJobSizeSameDimensions
                            )
                        {
                            double numWidthONext = darrpatransentityApplyOutput[intI].numWidthO;
                            double numLengthONext = darrpatransentityApplyOutput[intI].numHeightO;
                            String strDimensionsUnitNext = darrpatransentityApplyOutput[intI].strUnit;

                            if (
                                //                              //strDimensionsUnitNext same unit than original.
                                strDimensionsUnit == strDimensionsUnitNext
                                )
                            {
                                //                              //Do nothing.
                            }
                            else
                            {
                                //                              //strDimensionsUnitNext diferent unit than original.
                                //                              //Transform strDimensionsUnitNext to strDimensionsUnit.
                                if (
                                    strDimensionsUnit == "cm"
                                    )
                                {
                                    //                          //Transform strDimensionsUnitNext to cm.
                                    numWidthONext = numWidthONext * 2.54;
                                    numLengthONext = numLengthONext * 2.54;
                                }
                                else
                                {
                                    //                          //Transform strDimensionsUnitNext to in.
                                    numWidthONext = numWidthONext / 2.54;
                                    numLengthONext = numLengthONext / 2.54;
                                }
                            }

                            if (
                                (Math.Abs(numWidthO - numWidthONext) <= Math.Abs(0.1)) &&
                                (Math.Abs(numWidthO - numWidthONext) <= Math.Abs(0.1))
                                )
                            {
                                //                              //Do nothing.
                            }
                            else
                            {
                                boolAllPaperTranformationApplyAndJobSizeSameDimensions = false;
                            }

                            intI = intI + 1;
                        }

                        //                                  //The Paper Transformation that apply do not have the same
                        //                                  //      dimensions.
                        strDimensions_IO = "Undetermined";

                        if (
                            boolAllPaperTranformationApplyAndJobSizeSameDimensions
                            )
                        {
                            //                                  //All Paper Transformation that apply and Job
                            //                                  //      have the same dimensions.
                            strDimensions_IO = numWidthO + " " + strDimensionsUnit + " x " + numLengthO + " " +
                                strDimensionsUnit;
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subTakeJobQtyForTheFinalProduct(
            //                                              //Take the quantity from job and and save in the quantity  
            //                                              //      list for this IO.

            int intPkProcessInWorkflow_I,
            bool boolIsInput_I,
            String strLink_I,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            JobjsonJobJson jobjson_I,
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            ref double numQuantity_IO,
            ref String strUnit_IO
            )
        {
            //                                              //Job unit of measurement.
            strUnit_IO = jobjson_I.strProductCategory;
            //                                              //Get Job Quantity
            numQuantity_IO = (jobjson_I.intnQuantity == null ? 0 : (int)jobjson_I.intnQuantity);

            IoqytjsonIOQuantityJson ioqytjsonCurrentIO = new IoqytjsonIOQuantityJson(intPkProcessInWorkflow_I,
                ioentity_I.intnPkElementElementType, ioentity_I.intnPkElementElement, ioentity_I.intnPkResource,
                numQuantity_IO, 0, boolIsInput_I, strLink_I, null);

            darrioqytjsonIOQuantity_M.Add(ioqytjsonCurrentIO);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        //public void subGetQuantityFromIOWithLinkInTheOutput(
        //    //                                              //Update the list darrioqytjsonIOQuantity_IO
        //    //                                              //    and return the quantity for this IO
        //    //                                              //    with link.

        //    PiwentityProcessInWorkflowEntityDB piwentity_I,
        //    JobjsonJobJson jobjson_I,
        //    String strPrintshopId_I,
        //    int? intnPkEleet_I,
        //    int? intnPkEleele_I,
        //    int intPkResource_I,
        //    String strLink_I,
        //    //                                              //PIWs will be shown in job workflow
        //    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
        //    //                                              //Links node to node
        //    List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
        //    IConfiguration configuration_I,
        //    List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsGenerateWithOptions_I,
        //    out String strNewLink_O,
        //    ref double numQuantity_IO,
        //    //                                              //List waste to propagate.             
        //    ref List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
        //    //                                              //Arr to quantitys for each IO.
        //    ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
        //    ref bool boolWorkflowJobIsReady_M
        //    )
        //{
        //    strNewLink_O = strLink_I;
        //    //                                              //To easy code.
        //    Odyssey2Context context = new Odyssey2Context();

        //    //                                              //Find the other part of the link.
        //    PiwentityProcessInWorkflowEntityDB piwentityNext = null;
        //    IoentityInputsAndOutputsEntityDB ioentityOtherPartLink = null;

        //    ProdtypProductType.subGetOtherSideOfTheLink(piwentity_I, intnPkEleet_I, intnPkEleele_I,
        //        darrpiwentityProcessInJob_I, darrdynlkjson_I, context, ref strNewLink_O, out piwentityNext,
        //        out ioentityOtherPartLink);

        //    if (
        //        //                                          //The other side of the link if found
        //        piwentityNext != null
        //        )
        //    {
        //        strLink_I = strNewLink_O;

        //        if (
        //            //                                      //The IO from Next PIW was analized.
        //            darrioqytjsonIOQuantity_M.Exists(ioqyt =>
        //            ioqyt.intPkProcessInWorkflow == piwentityNext.intPk &&
        //            ioqyt.intnPkEleet == ioentityOtherPartLink.intnPkElementElementType &&
        //            ioqyt.intnPkEleele == ioentityOtherPartLink.intnPkElementElement &&
        //            ioqyt.boolAreInput == true &&
        //            ioqyt.strLink == strLink_I)
        //            )
        //        {
        //            //                                      //Do not something.
        //        }
        //        else
        //        {
        //            if (
        //                piwentityNext.boolIsPostProcess == true
        //                )
        //            {
        //                String strUnitNotUsed = null;
        //                //                                  //Take the quantity from job and and save in the arr 
        //                //                                  //      quantity for this IO.
        //                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentityNext.intPk, true, strLink_I,
        //                    ioentityOtherPartLink, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity_IO,
        //                    ref strUnitNotUsed);
        //            }
        //            else
        //            {
        //                //                                  //List to Add IO Inputs.
        //                List<Iojson1InputOrOutputJson1> darriojson1Input = new List<Iojson1InputOrOutputJson1>();

        //                //                                  //Find Input type Quantity info of the next 
        //                //                                  //    PIW recursively.
        //                darriojson1Input.AddRange(this.subGetQuantityTypePerPIWNextRecursive(piwentityNext, jobjson_I,
        //                    strPrintshopId_I, true, darrpiwentityProcessInJob_I, darrdynlkjson_I, configuration_I,
        //                    ref darrwstpropjson_M, ref darrioqytjsonIOQuantity_M, ref boolWorkflowJobIsReady_M,
        //                    context));

        //                //                                  //Find input template Quantity info of the next 
        //                //                                  //    PIW recursively.
        //                darriojson1Input.AddRange(this.subGetQuantityTemplatePerPIWNextRecursive(piwentityNext, 
        //                    jobjson_I, strPrintshopId_I, true, darrpiwentityProcessInJob_I, darrdynlkjson_I, 
        //                    configuration_I, ref darrwstpropjson_M, ref darrioqytjsonIOQuantity_M, 
        //                    ref boolWorkflowJobIsReady_M));

        //                //                                  //Propagate waste.
        //                ProdtypProductType.subPropagateWaste(jobjson_I, piwentityNext, this, darrwstpropjson_M,
        //                    configuration_I, strPrintshopId_I, darriojsoninInputsGenerateWithOptions_I, 
        //                    ref darriojson1Input);

        //                ProdtypProductType.CalculateTime(jobjson_I, piwentityNext, configuration_I, strPrintshopId_I,
        //                    ref darriojson1Input, null);

        //                ProdtypProductType.subUpdateDarrIoQuantity(piwentityNext, darriojson1Input,
        //                    ref darrioqytjsonIOQuantity_M);

        //                //                                  //Find Output type Quantity info of the next 
        //                //                                  //    PIW recursively.
        //                this.subGetQuantityTypePerPIWNextRecursive(piwentityNext, jobjson_I, strPrintshopId_I, false,
        //                    darrpiwentityProcessInJob_I, darrdynlkjson_I, configuration_I,
        //                    ref darrwstpropjson_M, ref darrioqytjsonIOQuantity_M, ref boolWorkflowJobIsReady_M, context);

        //                //                                  //Find Output template Quantity info of the next 
        //                //                                  //    PIW recursively.
        //                this.subGetQuantityTemplatePerPIWNextRecursive(piwentityNext, jobjson_I, strPrintshopId_I, false,
        //                    darrpiwentityProcessInJob_I, darrdynlkjson_I, configuration_I,
        //                    ref darrwstpropjson_M, ref darrioqytjsonIOQuantity_M, ref boolWorkflowJobIsReady_M);
        //            }
        //        }

        //        //                                          //Find quantity for IO input of the the next process.
        //        IoqytjsonIOQuantityJson ioqytjsonInputForNextProcessWithLlink = darrioqytjsonIOQuantity_M.FirstOrDefault(
        //            ioqyt =>
        //            ioqyt.intPkProcessInWorkflow == piwentityNext.intPk &&
        //            ioqyt.intnPkEleet == ioentityOtherPartLink.intnPkElementElementType &&
        //            ioqyt.intnPkEleele == ioentityOtherPartLink.intnPkElementElement &&
        //            ioqyt.boolAreInput == true &&
        //            ioqyt.strLink == strLink_I);

        //        //                                          //Build Qytjson output.
        //        IoqytjsonIOQuantityJson ioqytjsonOutputNew = new IoqytjsonIOQuantityJson(piwentity_I.intPk,
        //            intnPkEleet_I, intnPkEleele_I, intPkResource_I, ioqytjsonInputForNextProcessWithLlink.numQuantityIO,
        //            0, false, strLink_I, null);

        //        darrioqytjsonIOQuantity_M.Add(ioqytjsonOutputNew);

        //        numQuantity_IO = ioqytjsonInputForNextProcessWithLlink.numQuantityIO;
        //    }
        //    else
        //    //                                              //The other side of the link is missing
        //    {
        //        numQuantity_IO = 0;
        //    }
        //}

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subGetQuantityFromIOWithLinkInTheOutput(
            //                                              //Update the list darrioqytjsonIOQuantity_IO
            //                                              //    and return the quantity for this IO
            //                                              //    with link.

            int? intnEstimateIdThatInvokeThisMethod_I,
            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            //                                              //PIWs will be shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            //                                              //List waste to propagate.             
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            ref double numQuantity_IO,
            ref bool boolWorkflowJobIsReady_IO,
            ref String strLink_IO
            )
        {
            //                                              //To easy code.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Find the other part of the link.
            PiwentityProcessInWorkflowEntityDB piwentityNext = null;
            IoentityInputsAndOutputsEntityDB ioentityOtherPartLink = null;

            ProdtypProductType.subGetOtherSideOfTheLink(piwentity_I, intnPkEleet_I, intnPkEleele_I,
                darrpiwentityProcessInJob_I, darrdynlkjson_I, context, ref strLink_IO, out piwentityNext,
                out ioentityOtherPartLink);

            String strNewLink = strLink_IO;
            if (
                //                                          //The other side of the link if found
                piwentityNext != null
                )
            {
                if (
                    //                                      //The IO from Next PIW was analized.
                    darrioqytjsonIOQuantity_M.Exists(ioqyt =>
                    ioqyt.intPkProcessInWorkflow == piwentityNext.intPk &&
                    ioqyt.intnPkEleet == ioentityOtherPartLink.intnPkElementElementType &&
                    ioqyt.intnPkEleele == ioentityOtherPartLink.intnPkElementElement &&
                    ioqyt.boolAreInput == true &&
                    ioqyt.strLink == strNewLink)
                    )
                {
                    //                                      //Do nothing
                }
                else
                {
                    if (
                        piwentityNext.boolIsPostProcess == true
                        )
                    {
                        String strUnitNotUsed = null;
                        //                                  //Take the quantity from job and and save in the arr 
                        //                                  //      quantity for this IO.
                        ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentityNext.intPk, true, strLink_IO,
                            ioentityOtherPartLink, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity_IO,
                            ref strUnitNotUsed);
                    }
                    else
                    {
                        //                                  //The lists are for optimization

                        //                                  //Get eleet-s.
                        List<EleetentityElementElementTypeEntityDB> darreleetentityAll =
                            context.ElementElementType.Where(eleet =>
                            eleet.intPkElementDad == piwentityNext.intPkProcess).ToList();
                        //                                  //Get eleet-s.
                        List<EleeleentityElementElementEntityDB> darreleeleentityAll = context.ElementElement.Where(
                            eleele => eleele.intPkElementDad == piwentityNext.intPkProcess).ToList();

                        //                                  //Get io-s.
                        List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO = context.InputsAndOutputs.Where(io =>
                            io.intPkWorkflow == piwentityNext.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentityNext.intProcessInWorkflowId).ToList();

                        //                                  //Get ioj-s.
                        List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ =
                            context.InputsAndOutputsForAJob.Where(ioj =>
                            ioj.intPkProcessInWorkflow == piwentityNext.intPk &&
                            ioj.intJobId == jobjson_I.intJobId).ToList();

                        if (
                            !this.dicProcessIOs.ContainsKey(piwentityNext.intPk)
                            )
                        {
                            List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2IosFromPIW;
                            ProdtypProductType.subGetProcessInputsAndOutputs(jobjson_I, piwentityNext, this,
                                darreleeleentityAll, darreleetentityAll, out darrioinfrmpiwjson2IosFromPIW);

                            this.dicProcessIOs.Add(piwentityNext.intPk, darrioinfrmpiwjson2IosFromPIW);
                        }

                        //                                  //List to Add IO Inputs.
                        List<Iojson1InputOrOutputJson1> darriojson1Input = new List<Iojson1InputOrOutputJson1>();

                        //                                  //Find Input type Quantity info of the next 
                        //                                  //    PIW recursively.
                        darriojson1Input.AddRange(this.subGetQuantityTypePerPIWNextRecursive(
                            intnEstimateIdThatInvokeThisMethod_I, true, jobentity_I,
                            jobjson_I, piwentityNext, darrdynlkjson_I, darreleetentityAll, darrioentityAllIO,
                            darriojentityAllIOJ, darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M,
                            darrwstpropjson_M, ref boolWorkflowJobIsReady_IO));

                        //                                  //Find input template Quantity info of the next 
                        //                                  //    PIW recursively.
                        darriojson1Input.AddRange(this.subGetQuantityTemplatePerPIWNextRecursive(
                            intnEstimateIdThatInvokeThisMethod_I, true, jobentity_I,
                            jobjson_I, piwentityNext, darrdynlkjson_I, darreleeleentityAll, darrioentityAllIO,
                            darriojentityAllIOJ, darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M,
                            darrwstpropjson_M, ref boolWorkflowJobIsReady_IO));

                        //                                  //Propagate waste.
                        ProdtypProductType.subPropagateWaste(jobjson_I, piwentityNext, this, darrwstpropjson_M, null,
                            null, null, ref darriojson1Input);

                        //ProdtypProductType.CalculateTime(jobjson_I, piwentityNext, configuration_I, strPrintshopId_I,
                        //    ref darriojson1Input, null);

                        ProdtypProductType.subUpdateDarrIoQuantity(piwentityNext, darriojson1Input,
                            ref darrioqytjsonIOQuantity_M);

                        //                                  //Find Output type Quantity info of the next 
                        //                                  //    PIW recursively.
                        this.subGetQuantityTypePerPIWNextRecursive(intnEstimateIdThatInvokeThisMethod_I, false,
                            jobentity_I, jobjson_I, piwentityNext, darrdynlkjson_I, darreleetentityAll,
                            darrioentityAllIO, darriojentityAllIOJ, darrpiwentityProcessInJob_I,
                            darrioqytjsonIOQuantity_M, darrwstpropjson_M, ref boolWorkflowJobIsReady_IO);

                        //                                  //Find Output template Quantity info of the next 
                        //                                  //    PIW recursively.
                        this.subGetQuantityTemplatePerPIWNextRecursive(intnEstimateIdThatInvokeThisMethod_I, false,
                            jobentity_I, jobjson_I, piwentityNext, darrdynlkjson_I, darreleeleentityAll,
                            darrioentityAllIO, darriojentityAllIOJ, darrpiwentityProcessInJob_I,
                            darrioqytjsonIOQuantity_M, darrwstpropjson_M, ref boolWorkflowJobIsReady_IO);
                    }
                }

                //                                          //Find quantity for IO input of the the next process.
                IoqytjsonIOQuantityJson ioqytjsonInputForNextProcessWithLlink =
                    darrioqytjsonIOQuantity_M.FirstOrDefault(ioqyt =>
                   ioqyt.intPkProcessInWorkflow == piwentityNext.intPk &&
                   ioqyt.intnPkEleet == ioentityOtherPartLink.intnPkElementElementType &&
                   ioqyt.intnPkEleele == ioentityOtherPartLink.intnPkElementElement &&
                   ioqyt.boolAreInput == true &&
                   ioqyt.strLink == strNewLink);

                //                                          //Build Qytjson output.
                IoqytjsonIOQuantityJson ioqytjsonOutputNew = new IoqytjsonIOQuantityJson(piwentity_I.intPk,
                    intnPkEleet_I, intnPkEleele_I, intPkResource_I, ioqytjsonInputForNextProcessWithLlink.numQuantityIO,
                    0, false, strNewLink, null);

                darrioqytjsonIOQuantity_M.Add(ioqytjsonOutputNew);

                numQuantity_IO = ioqytjsonInputForNextProcessWithLlink.numQuantityIO;
            }
            else
            //                                              //The other side of the link is missing
            {
                numQuantity_IO = 0;
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetOtherSideOfTheLink(
            //                                              //Get the other side of the link if it exists in job's 
            //                                              //      workflow.

            PiwentityProcessInWorkflowEntityDB piwentityOneSide_I,
            int? intnPkEleetOneSide_I,
            int? intnPkEleeleOneSide_I,
            //                                              //PIWs will be shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            Odyssey2Context context_M,
            ref String strLink_IO,
            out PiwentityProcessInWorkflowEntityDB piwentityOtherSide_O,
            out IoentityInputsAndOutputsEntityDB ioentityOtherSide_O
           )
        {
            ProdtypProductType.subLookForTheOtherSideOfTheLink(piwentityOneSide_I, intnPkEleetOneSide_I,
                intnPkEleeleOneSide_I, darrpiwentityProcessInJob_I, darrdynlkjson_I, context_M, ref strLink_IO,
                out piwentityOtherSide_O, out ioentityOtherSide_O);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public String strGetNameOtherSideOfTheLink(
            //                                              //Get name of the other side of the link if it exists

            PiwentityProcessInWorkflowEntityDB piwentityOneSide_I,
            int? intnPkEleetOneSide_I,
            int? intnPkEleeleOneSide_I,
            String strLink_I,
            //                                              //PIWs will be shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            Odyssey2Context context_M
           )
        {
            String strLink = strLink_I;
            PiwentityProcessInWorkflowEntityDB piwentityOtherSide = null;
            IoentityInputsAndOutputsEntityDB ioentityOtherSide = null;

            ProdtypProductType.subLookForTheOtherSideOfTheLink(piwentityOneSide_I, intnPkEleetOneSide_I,
                intnPkEleeleOneSide_I, darrpiwentityProcessInJob_I, darrdynlkjson_I, context_M, ref strLink,
                out piwentityOtherSide, out ioentityOtherSide);

            return strLink;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subLookForTheOtherSideOfTheLink(
            //                                              //Look for the other side of the link

            PiwentityProcessInWorkflowEntityDB piwentityOneSide_I,
            int? intnPkEleetOneSide_I,
            int? intnPkEleeleOneSide_I,
            //                                              //PIWs will be shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            Odyssey2Context context_M,
            ref String strLink_IO,
            out PiwentityProcessInWorkflowEntityDB piwentityOtherSide_O,
            out IoentityInputsAndOutputsEntityDB ioentityOtherSide_O
            )
        {
            piwentityOtherSide_O = null;
            ioentityOtherSide_O = null;
            String strLink = strLink_IO;

            //                                              //Verify if it is a eleet or eleele.
            bool boolIsEleet = intnPkEleetOneSide_I != null ? true : false;

            //                                              //Get IOs with the same link
            List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSideOfLink;
            if (
                //                                          //It is Eleet.
                boolIsEleet
                )
            {
                darrioentityOtherSideOfLink = context_M.InputsAndOutputs.Where(io =>
                   io.intPkWorkflow == piwentityOneSide_I.intPkWorkflow &&
                   io.intnProcessInWorkflowId != null &&
                   io.intnPkElementElementType != intnPkEleetOneSide_I &&
                   io.strLink == strLink).ToList();
            }
            else if (
                //                                              //It is Eleele.
                !boolIsEleet
                )
            {
                darrioentityOtherSideOfLink = context_M.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == piwentityOneSide_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId != null &&
                    io.intnPkElementElement != intnPkEleeleOneSide_I &&
                    io.strLink == strLink).ToList();
            }
            else
            {
                darrioentityOtherSideOfLink = context_M.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == piwentityOneSide_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId != null &&
                    io.intnProcessInWorkflowId != piwentityOneSide_I.intProcessInWorkflowId &&
                    io.strLink == strLink).ToList();
            }

            //                                              //Find the other side of the link in normal links.
            PiwentityProcessInWorkflowEntityDB piwentityNext = null;
            int intI = 0;
            while (
                ioentityOtherSide_O == null && intI < darrioentityOtherSideOfLink.Count()
                )
            {
                //                                          //Get Pk of PIW to which current io belongs
                piwentityNext = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                    piw.intPkWorkflow == darrioentityOtherSideOfLink[intI].intPkWorkflow &&
                    piw.intProcessInWorkflowId == darrioentityOtherSideOfLink[intI].intnProcessInWorkflowId);

                if (
                    //                                      //The Piw exists in the list (darrpiwentityProcessInJob)
                    darrpiwentityProcessInJob_I.Exists(piw => piw.intPk == piwentityNext.intPk)
                    )
                {
                    //                                      //Get PIW which is the other side of the link
                    piwentityOtherSide_O = piwentityNext;
                    //                                      //Get IO which is the other side of the link
                    ioentityOtherSide_O = darrioentityOtherSideOfLink[intI];
                }

                intI = intI + 1;
            }

            if (
                ioentityOtherSide_O != null
                )
            {
                bool boolIsOneSideOutput = ProdtypProductType.boolIsOutput(intnPkEleetOneSide_I,
                intnPkEleeleOneSide_I);

                bool boolIsOtherSideInput = ProdtypProductType.boolIsInputIO(
                    ioentityOtherSide_O.intnPkElementElementType, ioentityOtherSide_O.intnPkElementElement, context_M);

                if (
                    boolIsOneSideOutput && !boolIsOtherSideInput
                    )
                {
                    throw new Exception("The two sides of the link are output ios.");
                }
                else if (
                    !boolIsOneSideOutput && boolIsOtherSideInput
                    )
                {
                    throw new Exception("The two sides of the link are input ios.");
                }
            }

            if (
               //                                           //The IO was not found in normal links
               ioentityOtherSide_O == null
                )
            {
                //                                          //Find the other side of the link in dynamic links.
                ProdtypProductType.subGetOtherSideOfTheLinkInDynamicLinks(boolIsEleet, intnPkEleetOneSide_I,
                    intnPkEleeleOneSide_I, piwentityOneSide_I, darrdynlkjson_I, context_M, ref strLink_IO,
                    ref piwentityOtherSide_O, ref ioentityOtherSide_O);
            }

            if (
               //                                           //The link is not found
               ioentityOtherSide_O == null
                )
            {
                strLink_IO = null;
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subGetOtherSideOfTheLinkInDynamicLinks(

            bool boolIsEleet_I,
            int? intnPkEleetOneSide_I,
            int? intnPkEleeleOneSide_I,
            PiwentityProcessInWorkflowEntityDB piwentityOneSide_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            Odyssey2Context context_M,
            ref String strLink_IO,
            ref PiwentityProcessInWorkflowEntityDB piwentityOtherSide_M,
            ref IoentityInputsAndOutputsEntityDB ioentityOtherSide_M
            )
        {
            String strLink = strLink_IO;

            //                                              //To easy code.
            EleetentityElementElementTypeEntityDB eleetentity = null;
            EleeleentityElementElementEntityDB eleeleentity = null;
            if (
                boolIsEleet_I
                )
            {
                //                                          //Find element element type.
                eleetentity = context_M.ElementElementType.FirstOrDefault(
                    eleet => eleet.intPk == intnPkEleetOneSide_I);
            }
            else
            {
                //                                          //Find element element.
                eleeleentity = context_M.ElementElement.FirstOrDefault(
                    eleele => eleele.intPk == intnPkEleeleOneSide_I);
            }

            if (
                //                                          //It is an Io Output.
                (eleetentity != null &&
                !eleetentity.boolUsage) ||
                (eleeleentity != null &&
                !eleeleentity.boolUsage)
                )
            {
                //                                          //Get the other side of the link in list 
                //                                          //      (darrdynlkjson_I)
                DynLkjsonDynamicLinkJson dynlkProcessInWorkflowNext = darrdynlkjson_I.FirstOrDefault(dynlink =>
                    dynlink.intnPiwO == piwentityOneSide_I.intPk && dynlink.boolIsEleetO == boolIsEleet_I &&
                    (dynlink.intnPkEleetOrEleeleO == intnPkEleetOneSide_I ||
                    dynlink.intnPkEleetOrEleeleO == intnPkEleeleOneSide_I));

                if (
                    //                                      //The dynamic link is found
                    dynlkProcessInWorkflowNext != null
                    )
                {
                    //                                      //Get PIW which is the other side of the link
                    PiwentityProcessInWorkflowEntityDB piwentity = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPk == dynlkProcessInWorkflowNext.intnPiwI);
                    //                                      //Concatenate the link
                    strLink_IO = strLink + dynlkProcessInWorkflowNext.strLinkI;

                    if (
                        dynlkProcessInWorkflowNext.boolIsEleetI
                        )
                    {
                        //                                  //Get IO which is the other side of the link
                        ioentityOtherSide_M = context_M.InputsAndOutputs.FirstOrDefault(io =>
                            io.intPkWorkflow == piwentity.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                            io.intnPkElementElementType == dynlkProcessInWorkflowNext.intnPkEleetOrEleeleI &&
                            io.strLink == dynlkProcessInWorkflowNext.strLinkI);
                    }
                    else
                    {
                        //                                  //Get IO which is the other side of the link
                        ioentityOtherSide_M = context_M.InputsAndOutputs.FirstOrDefault(io =>
                            io.intPkWorkflow == piwentity.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                            io.intnPkElementElement == dynlkProcessInWorkflowNext.intnPkEleetOrEleeleI &&
                            io.strLink == dynlkProcessInWorkflowNext.strLinkI);
                    }

                    //                                      //Assign piwentity to the object to return
                    piwentityOtherSide_M = piwentity;
                }
            }
            else if (
                //                                          //It is an Io input.
                (eleetentity != null &&
                eleetentity.boolUsage) ||
                (eleeleentity != null &&
                eleeleentity.boolUsage)
                )
            {
                //                                          //Get the other side of the link in list 
                //                                          //      (darrdynlkjson_I)
                DynLkjsonDynamicLinkJson dynlkProcessInWorkflowPrevious = darrdynlkjson_I.FirstOrDefault(dynlink =>
                    dynlink.intnPiwI == piwentityOneSide_I.intPk && dynlink.boolIsEleetI == boolIsEleet_I &&
                    (dynlink.intnPkEleetOrEleeleI == intnPkEleetOneSide_I ||
                    dynlink.intnPkEleetOrEleeleI == intnPkEleeleOneSide_I));

                if (
                    //                                      //The dynamic link is found
                    dynlkProcessInWorkflowPrevious != null
                    )
                {
                    //                                      //Get PIW which is the other side of the link
                    PiwentityProcessInWorkflowEntityDB piwentity = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPk == dynlkProcessInWorkflowPrevious.intnPiwO);
                    //                                      //Get the other side of the link
                    strLink_IO = dynlkProcessInWorkflowPrevious.strLinkO + strLink;

                    if (
                        dynlkProcessInWorkflowPrevious.boolIsEleetO
                        )
                    {
                        //                                  //Get IO which is the other side of the link
                        ioentityOtherSide_M = context_M.InputsAndOutputs.FirstOrDefault(io =>
                            io.intPkWorkflow == piwentity.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                            io.intnPkElementElementType == dynlkProcessInWorkflowPrevious.intnPkEleetOrEleeleO &&
                            io.strLink == dynlkProcessInWorkflowPrevious.strLinkO);
                    }
                    else
                    {
                        //                                  //Get IO which is the other side of the link
                        ioentityOtherSide_M = context_M.InputsAndOutputs.FirstOrDefault(io =>
                            io.intPkWorkflow == piwentity.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                            io.intnPkElementElement == dynlkProcessInWorkflowPrevious.intnPkEleetOrEleeleO &&
                            io.strLink == dynlkProcessInWorkflowPrevious.strLinkO);
                    }

                    //                                      //Assign piwentity to the object to return
                    piwentityOtherSide_M = piwentity;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subUpdateDarrIoQuantity(
            //                                              //Update darrioqytjsonIOQuantity_M.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<Iojson1InputOrOutputJson1> darriojson1Input_I,
            ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            foreach (Iojson1InputOrOutputJson1 iojson1 in darriojson1Input_I)
            {
                int? intnPkEleet = iojson1.boolIsEleet ? (int?)iojson1.intPkEleetOrEleele : null;
                int? intnPkEleeele = !iojson1.boolIsEleet ? (int?)iojson1.intPkEleetOrEleele : null;

                IoqytjsonIOQuantityJson ioqytjson = darrioqytjsonIOQuantity_M.FirstOrDefault(ioqyt =>
                    ioqyt.intPkProcessInWorkflow == piwentity_I.intPk && ioqyt.intnPkEleet == intnPkEleet &&
                    ioqyt.intnPkEleele == intnPkEleeele);

                if (
                    ioqytjson != null
                    )
                {
                    ioqytjson.numQuantityIO = iojson1.numQuantity;
                    ioqytjson.arrwstaddWasteAdditional = iojson1.arrwstaddWasteAdditional;
                    ioqytjson.numCostResource = iojson1.numCostByResource;
                    ioqytjson.intHours = iojson1.intHours;
                    ioqytjson.intMinutes = iojson1.intMinutes;
                    ioqytjson.intSeconds = iojson1.intSeconds;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subGetQuantityFromTransformCalculation(
            //                                              //Only calculate the quantity.

            //                                              //Do Task: Only calculate the quantity.
            //                                              //Description Task: Only calcualte the quanty and
            //                                              //    dont'n use the arr quantity(not save quantity and 
            //                                              //    and not add quanity).
            //                                              //    Note. analize all code for add and remove code
            //                                              //    correspondent for the new funcionality.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            int? intnPkEleetO_I,
            int? intnPkEleeleO_I,
            int intPkResourceO_I,
            ref double numQuantity_IO,
            ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            //                                              //To easy code.
            Odyssey2Context context = new Odyssey2Context();

            List<TrfcalentityTransformCalculationEntityDB> darrtrfcalentityApply =
                new List<TrfcalentityTransformCalculationEntityDB>();

            //                                              //Get job stage.
            JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID == jobjson_I.intJobId);

            //                                              //Find the transform calculation for this PIW Eleet and res.
            List<TrfcalentityTransformCalculationEntityDB> darrtrfcalentityAll = context.TransformCalculation.Where(
                trfcal => trfcal.intPkProcessInWorkflow == piwentity_I.intPk &&
                trfcal.intnPkElementElementTypeO == intnPkEleetO_I &&
                trfcal.intnPkElementElementO == intnPkEleeleO_I &&
                trfcal.intPkResourceO == intPkResourceO_I).ToList();
            darrtrfcalentityAll.Sort();

            if (
                jobentity != null &&
                (jobentity.intStage == JobJob.intInProgressStage ||
                jobentity.intStage == JobJob.intCompletedStage)
                )
            {
                darrtrfcalentityApply = CalCalculation.darrtrfcalentityGetJobTransformCalculation(jobentity,
                        darrtrfcalentityAll);
            }
            else
            {
                //                                          //Find the last available calculation.
                darrtrfcalentityApply = darrtrfcalentityAll.Where(trfcalentity => trfcalentity.strEndDate == null &&
                    trfcalentity.strEndTime == null).ToList();
            }

            if (
                darrtrfcalentityApply.Count > 0
                )
            {
                double numQuantityTemp = 0;
                foreach (TrfcalentityTransformCalculationEntityDB trfcalentity in darrtrfcalentityApply)
                {
                    if (
                         //                                  //The transform calculation is applicable
                         Tools.boolCalculationOrLinkApplies(null, null, null, trfcalentity.intPk, jobjson_I)
                        )
                    {
                        //                                  //Get Quantity In.

                        //                                  //Find the calculation in the list.
                        IoqytjsonIOQuantityJson IoqytjsonQFromRes = darrioqytjsonIOQuantity_M.FirstOrDefault(ioqyt =>
                            ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                            ioqyt.intnPkEleet == trfcalentity.intnPkElementElementTypeI &&
                            ioqyt.intnPkEleele == trfcalentity.intnPkElementElementI &&
                            ioqyt.intnPkResource == trfcalentity.intPkResourceI &&
                            ioqyt.boolAreInput == true);

                        if (
                            //                              //IO Quantity is found
                            IoqytjsonQFromRes != null
                            )
                        {
                            double numInitialQuantity = IoqytjsonQFromRes.numQuantityIO;

                            if (
                                //                          //Take initial quantity.
                                IoqytjsonQFromRes.arrwstjsonWaste != null
                                )
                            {
                                //                          //Reset.
                                numInitialQuantity = 0.0;

                                foreach (WstjsonWasteJson wstjson in IoqytjsonQFromRes.arrwstjsonWaste)
                                {
                                    numInitialQuantity = numInitialQuantity + wstjson.numInitial;
                                }
                            }

                            numQuantityTemp = numQuantityTemp + ((trfcalentity.numPerUnits / trfcalentity.numNeeded) *
                                numInitialQuantity);
                        }
                        else
                        {
                            //                              //If the Resource belong to a group Resources and also
                            //                              //      it is not selected in the job workflow, therefore
                            //                              //      this resource does not exist in the arr io quantity 
                            //                              //      (darrioqytjsonIOQuantity_IO).
                        }
                    }
                }

                numQuantity_IO = numQuantityTemp;
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] subGetQuantityTypePerPIWNextRecursive(
            //                                              //Get Quantity and cost per PIW.

            int? intnEstimateIdThatInvokeThisMethod_I,
            bool boolAreInputs_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs going to shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            //                                              //List waste to propagate.             
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            ref bool boolWorkflowJobIsReady_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //To fill an return.
            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();

            //                                              //Get eleet-s.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = darreleetentityAll_I.Where(
                eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                String strUnit = null;
                bool boolUnitAllowDecimal = true;

                //                                          //Calculated data for final resource.
                double numQuantity = 0.0;
                double numCostByResource = 0.0;

                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size.
                bool? boolnSize = null;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == eleetentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;

                    //                                      //Set size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = null;
                            if (
                                jobentity_I != null
                                )
                            {
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity);
                            }
                            else
                            {
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
                            }
                            if (
                                valentity != null
                                )
                            {
                                strUnit = valentity.strValue;
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }
                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;

                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == eleetentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = null;
                        if (
                            jobentity_I != null
                            )
                        {
                            //                              //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity);
                        }
                        else
                        {
                            //                              //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
                        }
                        if (
                            valentity != null
                            )
                        {
                            strUnit = valentity.strValue;
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                     (bool)valentity.boolnIsDecimal;
                        }
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                }

                //                                          //Get the restype.
                EtentityElementTypeEntityDB etentityResType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleetentity.intPkElementTypeSon);

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        boolAreInputs_I
                        )
                    {
                        if (
                            (etentityResType.strCustomTypeId == ResResource.strMedia)
                            )
                        {
                            ResthkjsonResourceThicknessJson resthkjson = this.darrresthkjsonResThickness.FirstOrDefault(
                                resthk => resthk.intnPkEleet == eleetentity.intPk && resthk.intnPkEleele == null &&
                                resthk.intPkResource == (int)intnPkResource &&
                                resthk.intPkProcessInWorkflow == piwentity_I.intPk);

                            if (
                                //                          //The data is not in the list yet
                                resthkjson == null
                                )
                            {
                                double? numnWidth;
                                double? numnLength;
                                String strWidthUnit;
                                String strLengthUnit;
                                ProdtypProductType.subfunGetDimensions(eleetentity.intPk, null, (int)intnPkResource,
                                    true, jobjson_I, piwentity_I, this, out numnWidth, out numnLength, out strWidthUnit,
                                    out strLengthUnit);

                                this.subAddMediaDimensionsAndThickness(eleetentity.intPk, null, piwentity_I.intPk,
                                    (int)intnPkResource, etentityResType.intPk, numnWidth, numnLength, strWidthUnit,
                                    strLengthUnit);
                            }
                        }

                        if (
                            (etentityResType.strCustomTypeId == ResResource.strComponent)
                            )
                        {
                            this.subAddInputComponentDimensionsAndThickness(intnEstimateIdThatInvokeThisMethod_I,
                                eleetentity.intPk, null, (int)intnPkResource, strLink, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrpiwentityProcessInJob_I);
                        }

                        //                                  //Perform calculation own for get the Quantity
                        //                                  //    for this IO and save in the 
                        //                                  //    arr quantitys.
                        //                                  //Find calculation and find the quantity From. 

                        //                                  //Qfrom Output.
                        //                                  //Find the quantity associate with this qfrom in the 
                        //                                  //    arr quantitys, if it is not found in the arr quantity, 
                        //                                  //    it is need to find the quantity with link of the next 
                        //                                  //    process (method recursively).

                        //                                  //Qfrom Input.
                        //                                  //Perform calculation for get quantity correct for this IO
                        //                                  //    consider the waste'propagation
                        //                                  //Note. save waste in the arr waste.

                        this.subGetCostAndQuantityByResourceRecursive(intnEstimateIdThatInvokeThisMethod_I,
                            eleetentity.intPk, null, (int)intnPkResource, boolUnitAllowDecimal, strLink,
                            jobentity_I, jobjson_I, piwentity_I, darrdynlkjson_I, darrioentityAllIO_I,
                            darriojentityAllIOJ_I, darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M,
                            darrwstjsonWaste, darrwstpropjson_M, ref numCostByResource,

                            ref numQuantity, ref boolWorkflowJobIsReady_IO);
                    }
                    else
                    {
                        if (
                            (etentityResType.strCustomTypeId == ResResource.strComponent)
                            )
                        {
                            this.subAddOutputComponentDimensionsAndThickness(intnEstimateIdThatInvokeThisMethod_I,
                                eleetentity.intPk, null, (int)intnPkResource, ioentity, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrpiwentityProcessInJob_I);
                        }

                        /*CASE*/
                        if (
                            //                              //It has resource productFinal setted in this IO.
                            ioentity != null && ioentity.boolnIsFinalProduct == true
                            )
                        {
                            if (
                               //                           //IO has Links.
                               strLink != null
                               )
                            {
                                //                          //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I,
                                    eleetentity.intPk, null, strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I,
                                    context);
                            }

                            //                              //Take the quantity from job and and save in the arr 
                            //                              //      quantity for this IO.
                            ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity, ref strUnit);
                        }
                        else if (
                           //                               //IO has Links.
                           strLink != null
                           )
                        {
                            //                              //Take the quantity from next process linked 
                            //                              //    input.
                            //                              //Description Task: Take the quantity from next process
                            //                              //    linked to this IO and save in the arr quantity.

                            //                              //IO output has link.
                            //                              //Get Quantity'info of the NEXT PIW for this IO with LInk.
                            this.subGetQuantityFromIOWithLinkInTheOutput(intnEstimateIdThatInvokeThisMethod_I,
                                ioentity.intnPkElementElementType, ioentity.intnPkElementElement, (int)intnPkResource,
                                jobentity_I, jobjson_I, piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I,
                                darrioqytjsonIOQuantity_M, darrwstpropjson_M, ref numQuantity,
                                ref boolWorkflowJobIsReady_IO, ref strLink);
                        }
                        else if (
                           //                               //IO has not Links.
                           strLink == null
                           )
                        {
                            //                              //Do not something because it is a method recursive
                            //                              //    and transformation'calculation do not have impact
                            //                              //    over other calculate and not save in the arr of the 
                            //                              //    quantitys.
                        }
                        /*END-CASE*/
                    }
                }

                //                                          //Verify if Unit allow or not Decimal.
                numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                bool boolThickness = ioentity != null ?
                    (ioentity.boolnThickness != null ? (bool)ioentity.boolnThickness : false) :
                    false;

                //                                          //Json to return.
                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(etentityResType.intPk,
                    null, eleetentity.intPk, true, null, strResource, strLink, intnPkResource, numQuantity, strUnit,
                    numCostByResource, false, false, null, 0, 0, 0, boolAutomaticallySet, false, false, false, false,
                    ioentity?.boolnIsFinalProduct, boolUnitAllowDecimal, darrwstjsonWaste.ToArray(), null, null, null,
                    boolnSize, boolThickness);

                darriojson1.Add(iojson1);
            }
            return darriojson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] subGetQuantityTemplatePerPIWNextRecursive(
            //                                              //Get Quantity and cost per PIW.

            int? intnEstimateIdThatInvokeThisMethod_I,
            bool boolAreInputs_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleeleentityElementElementEntityDB> darreleeleentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs going to shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            //                                              //List waste to propagate.             
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            ref bool boolWorkflowJobIsReady_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //To fill an return.
            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();

            //                                              //Get eleet-s.
            List<EleeleentityElementElementEntityDB> darreleeleentity = darreleeleentityAll_I.Where(
                eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I).ToList();

            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                //                                          //Template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);

                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                String strUnit = null;
                bool boolUnitAllowDecimal = true;

                //                                          //Calculated data for final resource.
                double numQuantity = 0.0;
                double numCostByResource = 0.0;

                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size.
                bool? boolnSize = null;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == eleeleentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;

                    //                                      //Set size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = null;
                            if (
                                jobentity_I != null
                                )
                            {
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I,
                                    eleentity);
                            }
                            else
                            {
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
                            }
                            if (
                                valentity != null
                                )
                            {
                                strUnit = valentity.strValue;
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }
                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;

                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElement == eleeleentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = null;
                        if (
                            jobentity_I != null
                            )
                        {
                            //                              //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity);
                        }
                        else
                        {
                            //                              //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
                        }

                        if (
                            valentity != null
                            )
                        {
                            strUnit = valentity.strValue;
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                     (bool)valentity.boolnIsDecimal;
                        }
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                }

                //                                          //Get the restype.
                EtentityElementTypeEntityDB etentityResType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        //                                  //IO Input.
                        boolAreInputs_I
                        )
                    {
                        if (
                            (etentityResType.strCustomTypeId == ResResource.strMedia)
                            )
                        {
                            ResthkjsonResourceThicknessJson resthkjson = this.darrresthkjsonResThickness.FirstOrDefault(
                                resthk => resthk.intnPkEleet == null && resthk.intnPkEleele == eleeleentity.intPk &&
                                resthk.intPkResource == (int)intnPkResource &&
                                resthk.intPkProcessInWorkflow == piwentity_I.intPk);

                            if (
                                //                          //The data is not in the list yet
                                resthkjson == null
                                )
                            {
                                double? numnWidth;
                                double? numnLength;
                                String strWidthUnit;
                                String strLengthUnit;
                                ProdtypProductType.subfunGetDimensions(null, eleeleentity.intPk, (int)intnPkResource,
                                    true, jobjson_I, piwentity_I, this, out numnWidth, out numnLength, out strWidthUnit,
                                    out strLengthUnit);

                                this.subAddMediaDimensionsAndThickness(null, eleeleentity.intPk, piwentity_I.intPk,
                                    (int)intnPkResource, etentityResType.intPk, numnWidth, numnLength, strWidthUnit,
                                    strLengthUnit);
                            }
                        }

                        if (
                            (etentityResType.strCustomTypeId == ResResource.strComponent)
                            )
                        {
                            this.subAddInputComponentDimensionsAndThickness(null, null, eleeleentity.intPk,
                                (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                                darrpiwentityProcessInJob_I);
                        }

                        //                                  //Perform calculation own for get the Quantity
                        //                                  //    for this IO and save in the 
                        //                                  //    arr quantitys.
                        //                                  //Find calculation and find the quantity From. 

                        //                                  //Qfrom Output.
                        //                                  //Find the quantity associate with this qfrom in the 
                        //                                  //    arr quantitys, if it is not found in the arr quantity, 
                        //                                  //    it is need to find the quantity with link of the next 
                        //                                  //    process (method recursively).

                        //                                  //Qfrom Input.
                        //                                  //Perform calculation for get quantity correct for this IO
                        //                                  //    consider the waste'propagation
                        //                                  //Note. save waste in the arr waste.

                        this.subGetCostAndQuantityByResourceRecursive(intnEstimateIdThatInvokeThisMethod_I, null,
                            eleeleentity.intPk, (int)intnPkResource, boolUnitAllowDecimal, strLink, jobentity_I,
                            jobjson_I, piwentity_I, darrdynlkjson_I, darrioentityAllIO_I, darriojentityAllIOJ_I,
                            darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M, darrwstjsonWaste,
                            darrwstpropjson_M, ref numCostByResource, ref numQuantity, ref boolWorkflowJobIsReady_IO);
                    }
                    else
                    {
                        if (
                            (etentityResType.strCustomTypeId == ResResource.strComponent)
                            )
                        {
                            this.subAddOutputComponentDimensionsAndThickness(intnEstimateIdThatInvokeThisMethod_I,
                                null, eleeleentity.intPk, (int)intnPkResource, ioentity, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrpiwentityProcessInJob_I);
                        }

                        /*CASE*/
                        if (
                            //                              //It has resource productFinal setted in this IO.
                            ioentity != null && ioentity.boolnIsFinalProduct == true
                            )
                        {
                            if (
                               //                       //IO has Links.
                               strLink != null
                               )
                            {
                                //                      //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I,
                                    null, eleeleentity.intPk, strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I,
                                    context);
                            }

                            //                              //Take the quantity from job and and save in the arr 
                            //                              //      quantity for this IO.
                            ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity, ref strUnit);
                        }
                        else if (
                           //                               //IO has Links.
                           strLink != null
                           )
                        {
                            //                              //Take the quantity from next process linked 
                            //                              //    input.
                            //                              //Description Task: Take the quantity from next process
                            //                              //    linked to this IO and save in the arr quantity.

                            //                              //IO output has link.
                            //                              //Get Quantity'info of the NEXT PIW for this IO with LInk.

                            this.subGetQuantityFromIOWithLinkInTheOutput(intnEstimateIdThatInvokeThisMethod_I,
                                ioentity.intnPkElementElementType, ioentity.intnPkElementElement, (int)intnPkResource,
                                jobentity_I, jobjson_I, piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I,
                                darrioqytjsonIOQuantity_M, darrwstpropjson_M, ref numQuantity,
                                ref boolWorkflowJobIsReady_IO, ref strLink);
                        }
                        else if (
                           //                               //IO has not Links.
                           strLink == null
                           )
                        {
                            //                              //Do not something because it is a method recursive
                            //                              //    and transformation'calculation do not have impact
                            //                              //    over other calculate and not save in the arr of the 
                            //                              //    quantitys.
                        }
                        /*END-CASE*/
                    }
                }

                //                                          //Verify if Unit allow or not Decimal.
                numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                bool boolThickness = ioentity != null ?
                    (ioentity.boolnThickness != null ? (bool)ioentity.boolnThickness : false) :
                    false;

                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(eleentityTemplate.intPkElementType,
                    eleentityTemplate.intPk, eleeleentity.intPk, false, null, strResource, strLink, intnPkResource,
                    numQuantity, strUnit, numCostByResource, false, null, null, 0, 0, 0, boolAutomaticallySet, false,
                    false, false, false, ioentity?.boolnIsFinalProduct, boolUnitAllowDecimal, null, null, null, null,
                    boolnSize, boolThickness);

                darriojson1.Add(iojson1);
            }

            return darriojson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static ValentityValueEntityDB valentityGetUnitDependJobDate(
            //                                              //Get the unit of measurement depends the date job was
            //                                              //    sending to inprogress or completed.

            JobentityJobEntityDB jobentity_I,
            EleentityElementEntityDB eleentity_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get date when job was started.
            ZonedTime ztimeJobDate = ZonedTimeTools.NewZonedTime(jobentity_I.strStartDate.ParseToDate(),
                    jobentity_I.strStartTime.ParseToTime());

            //                                              //Attributes for this ele.
            IQueryable<AttrentityAttributeEntityDB> setattr =
                from attrentity in context.Attribute
                join attretentity in context.AttributeElementType
                on attrentity.intPk equals attretentity.intPkAttribute
                where attretentity.intPkElementType == eleentity_I.intPkElementType
                select attrentity;
            List<AttrentityAttributeEntityDB> darrattr = setattr.ToList();

            //                                              //Get the Unit attribute.
            AttrentityAttributeEntityDB attrentityUnit = darrattr.FirstOrDefault(a =>
                a.strXJDFName == "Unit" || a.strCustomName == "Unit");

            //                                              //Get all the units for the resource.
            IQueryable<ValentityValueEntityDB> setvalentity = context.Value.Where(val => val.intPkElement ==
                eleentity_I.intPk && val.intPkAttribute == attrentityUnit.intPk);
            List<ValentityValueEntityDB> darrvalentity = setvalentity.ToList();

            ValentityValueEntityDB valentityReturn = null;
            if (
                darrvalentity.Count > 0
                )
            {
                if (
                    //                                      //There is more than one unit.
                    darrvalentity.Count() > 1
                    )
                {
                    darrvalentity.Sort();
                    foreach (ValentityValueEntityDB valentityCheck in darrvalentity)
                    {
                        //                                  //Get the date when the unit was created.
                        ZonedTime ztimevalEntity = ZonedTimeTools.NewZonedTime(valentityCheck.strSetDate.ParseToDate(),
                                valentityCheck.strSetTime.ParseToTime());
                        if (
                            //                              //Unit match with job's date.
                            ztimeJobDate >= ztimevalEntity
                            )
                        {
                            //                              //Get the unit.
                            valentityReturn = valentityCheck;
                        }
                    }
                }
                else
                {
                    //                                      //Get the unit when there is only one unit.
                    valentityReturn = darrvalentity[0];
                }
            }
            return valentityReturn;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subCalculateResTime(
            //                                              //Calculates the needed time for a resource to do a task.

            EleetentityElementElementTypeEntityDB eleetentity_I,
            EleeleentityElementElementEntityDB eleeleentity_I,
            EleentityElementEntityDB eleentity_I,
            int? intnJobQuantity_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            IConfiguration configuration_I,
            String strPrintshopId_I,
            int? intnEstimateIdThatInvokeThisMethod_I,
            List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsGenerateWithOptions_I,
            ref int intHours_IO,
            ref int intMinutes_IO,
            ref int intSeconds_IO
            )
        {
            //                                              //To easy code.
            int? intnPkElementElementType = eleetentity_I != null ? intnPkElementElementType = eleetentity_I.intPk : null;
            int? intnPkElementElement = eleetentity_I != null ? null : intnPkElementElement = eleeleentity_I.intPk;
            int intPkEleetOrEleele = intnPkElementElementType != null ? (int)intnPkElementElementType :
                (int)intnPkElementElement;
            bool boolIsEleet = intnPkElementElementType != null ? true : false;

            //                                              //Initiate connection.
            Odyssey2Context context = new Odyssey2Context();

            List<CalCalculation> darrcalApply = ResResource.darrcalApplyForAJob(eleentity_I.intPk, intPkEleetOrEleele,
                boolIsEleet, piwentity_I, jobjson_I);

            //                                              //Verify if it is device type or tool type.
            EtentityElementTypeEntityDB eletentity = context.ElementType.FirstOrDefault(elet =>
                elet.intPk == eleentity_I.intPkElementType && (elet.strXJDFTypeId == "Device" ||
                elet.strXJDFTypeId == "Tool" || elet.strXJDFTypeId == "Custom"));

            TimeentityTimeEntityDB timeentity = null;
            if (
                eletentity != null
                )
            {
                //                                              //Get the time entity of the res.
                timeentity = ResResource.timeentityGet(eleentity_I.intPk, jobjson_I, piwentity_I,
                    intPkEleetOrEleele, boolIsEleet, configuration_I, strPrintshopId_I, darrcalApply,
                    intnEstimateIdThatInvokeThisMethod_I, darriojsoninInputsGenerateWithOptions_I);
            }
            double numSumNeededHours = 0;

            if (
                (darrcalApply.Count != 0) &&
                (eletentity != null) &&
                (timeentity != null) &&
                (intnJobQuantity_I != null) &&
                (intnJobQuantity_I > 0)
                )
            {
                //                                          //Transform mins and secs to hours.
                double numHours = (double)timeentity.intHours;
                double numMinsToHours = (double)timeentity.intMinutes / 60d;
                double numSecsToHours = (double)timeentity.intSeconds / 3600d;

                //                                          //Data from timeentity needed to calculate time.
                double numTotalHours = numHours + numMinsToHours + numSecsToHours;
                double numTimeQuantity = timeentity.numQuantity;

                //                                          //One or more calculation found.
                foreach (CalCalculation cal in darrcalApply)
                {
                    if (
                        cal.strCalculationType == CalCalculation.strPerQuantity
                        )
                    {
                        double numCalNeeded = (double)cal.numnNeeded;
                        double numCalPerUnits = (double)cal.numnPerUnits;

                        //                                  //Apply a multiplication rule to get necessary res.
                        double numCalQuantity = ((int)intnJobQuantity_I * numCalNeeded) / numCalPerUnits;

                        //                                  //Apply a multiplication rule to get necessary hours.
                        double numNeededHours = (numCalQuantity * numTotalHours) / numTimeQuantity;
                        numSumNeededHours = numSumNeededHours + numNeededHours;
                    }
                    else
                    {
                        //                                  //Calculation is strPerQuantityBase.

                        double numCalQuantity = (double)cal.numnNeeded;

                        //                                      //Apply a multiplication rule to get necessary hours.
                        double numNeededHours = (numCalQuantity * numTotalHours) / numTimeQuantity;
                        numSumNeededHours = numSumNeededHours + numNeededHours;
                    }
                }

                //                                          //Transforms hours to hours.
                intHours_IO = (int)numSumNeededHours;
                double numMinutesInHours = numSumNeededHours % 1;

                //                                          //Transforms hours to minutes.
                intMinutes_IO = (int)(numMinutesInHours * 60);
                double numSecondsInMinutes = (numMinutesInHours * 60) % 1;

                //                                          //Transforms hours to seconds.
                intSeconds_IO = (int)(numSecondsInMinutes * 60);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subCalculateResTimeFromQuantity(
            //                                              //Calculates the needed time using the final quantity.

            //                                              //Pk resource, not null.        
            int intPkResource_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            double numQuantity_I,
            IConfiguration configuration_I,
            String strPrintshopId_I,
            int? intnEstimateIdThatInvokeThisMethod_I,
            List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsGenerateWithOptions_I,
            ref int intHours_IO,
            ref int intMinutes_IO,
            ref int intSeconds_IO
            )
        {
            //                                              //Initiate connection.
            Odyssey2Context context = new Odyssey2Context();

            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele => ele.intPk == intPkResource_I);

            //                                              //Verify if it is device type or tool type.
            EtentityElementTypeEntityDB eletentity = context.ElementType.FirstOrDefault(elet =>
                elet.intPk == eleentity.intPkElementType && (elet.strXJDFTypeId == "Device" ||
                elet.strXJDFTypeId == "Tool" || elet.strXJDFTypeId == "Custom"));

            TimeentityTimeEntityDB timeentity = null;
            if (
                eletentity != null
                )
            {
                //                                              //Get the time entity of the res.
                timeentity = ResResource.timeentityGet(intPkResource_I, jobjson_I, piwentity_I,
                    intPkEleetOrEleele_I, boolIsEleet_I, configuration_I, strPrintshopId_I, null,
                    intnEstimateIdThatInvokeThisMethod_I, darriojsoninInputsGenerateWithOptions_I);
            }

            if (
                (eletentity != null) &&
                (timeentity != null)
                )
            {
                //                                          //Transform mins and secs to hours.
                double numHours = (double)timeentity.intHours;
                double numMinsToHours = (double)timeentity.intMinutes / 60d;
                double numSecsToHours = (double)timeentity.intSeconds / 3600d;

                double numTotalHours = numHours + numMinsToHours + numSecsToHours;
                double numTimeQuantity = timeentity.numQuantity;

                double numNeededHours = ((numQuantity_I * numTotalHours) / numTimeQuantity).Round(3);

                //                                          //Transforms hours to hours.
                intHours_IO = (int)numNeededHours;
                double numMinutesInHours = numNeededHours % 1;

                //                                          //Transforms hours to minutes.
                intMinutes_IO = (int)(numMinutesInHours * 60);
                double numSecondsInMinutes = (numMinutesInHours * 60) % 1;

                //                                          //Transforms hours to seconds.
                intSeconds_IO = (int)(numSecondsInMinutes * 60);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] arriojson1GetTemplates(
            //                                              //Get the inputs and outputs for the given process according
            //                                              //      with the boolean from the types.

            bool boolAreInputs_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleeleentityElementElementEntityDB> darreleeleentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            //                                              //List waste to propagate.             
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            ref double numJobFinalCost_IO,
            ref bool boolWorkflowJobIsReady_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the inputs/outputs types.
            List<EleeleentityElementElementEntityDB> darreleeleentity = darreleeleentityAll_I.Where(eleele =>
                eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I).ToList();

            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();
            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                //                                          //Template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);

                EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                String strUnit = null;
                bool boolUnitAllowDecimal = true;
                bool? boolnIsCalendar = null;
                bool boolOneResource = false;
                bool boolHasNotResource = true;
                //                                          //Calculated data for final resource.
                bool? boolnIsAvailable = null;
                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                String strName = (etentityType.strXJDFTypeId == "None") ? etentityType.strCustomTypeId :
                    etentityType.strXJDFTypeId;
                String strTypeAndTemplate = strName + " : " + eleentityTemplate.strElementName;
                //                                          //Needed data to resource time.
                int intHours = 0;
                int intMinutes = 0;
                int intSeconds = 0;
                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size.
                bool? boolnSize = null;
                String strDimensionsAndThickness = "";

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == eleeleentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set link.
                    strLink = ioentity.strLink;

                    //                                      //Set size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentityResource.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = null;
                            if (
                                jobentity_I != null
                                )
                            {
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I,
                                    eleentityResource);
                            }
                            else
                            {
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentityResource.intPk);
                            }
                            if (
                                valentity != null
                                )
                            {
                                strUnit = valentity.strValue;
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                     (bool)valentity.boolnIsDecimal;
                            }
                        }

                        String strResourceName = ResResource.strGetMediaResourceName(eleentityResource.intPk);
                        strResource = strResourceName;
                        intnPkResource = eleentityResource.intPk;
                        boolnIsCalendar = eleentityResource.boolnIsCalendar;
                        boolnIsAvailable = eleentityResource.boolnIsAvailable;
                        boolOneResource = true;
                        boolHasNotResource = false;
                    }

                    if (
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        boolOneResource = false;
                        boolHasNotResource = false;
                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElement == eleeleentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentityResource.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = null;
                        if (
                            jobentity_I != null
                            )
                        {
                            //                              //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentityResource);
                        }
                        else
                        {
                            //                              //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentityResource.intPk);
                        }

                        if (
                            valentity != null
                            )
                        {
                            strUnit = valentity.strValue;
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                     (bool)valentity.boolnIsDecimal;
                        }
                        String strResourceName = ResResource.strGetMediaResourceName(eleentityResource.intPk);
                        strResource = strResourceName;
                        intnPkResource = eleentityResource.intPk;
                        boolnIsCalendar = eleentityResource.boolnIsCalendar;
                        boolnIsAvailable = eleentityResource.boolnIsAvailable;
                    }
                }

                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                WstaddjsonWasteAdditionalJson[] arrwstaddjson = null;

                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        //                                  //IO Input.
                        boolAreInputs_I
                        )
                    {
                        if (
                            (etentityType.strCustomTypeId == ResResource.strMedia)
                            )
                        {
                            ResthkjsonResourceThicknessJson resthkjson = this.darrresthkjsonResThickness.FirstOrDefault(
                                resthk => resthk.intnPkEleet == null && resthk.intnPkEleele == eleeleentity.intPk &&
                                resthk.intPkResource == (int)intnPkResource &&
                                resthk.intPkProcessInWorkflow == piwentity_I.intPk);

                            if (
                                //                          //The data is not in the list yet
                                resthkjson == null
                                )
                            {
                                double? numnWidth;
                                double? numnLength;
                                String strWidthUnit;
                                String strLengthUnit;
                                ProdtypProductType.subfunGetDimensions(null, eleeleentity.intPk, (int)intnPkResource,
                                    boolAreInputs_I, jobjson_I, piwentity_I, this, out numnWidth, out numnLength,
                                    out strWidthUnit, out strLengthUnit);

                                this.subAddMediaDimensionsAndThickness(null, eleeleentity.intPk, piwentity_I.intPk,
                                    (int)intnPkResource, etentityType.intPk, numnWidth, numnLength, strWidthUnit,
                                    strLengthUnit);
                            }
                        }

                        if (
                            (etentityType.strCustomTypeId == ResResource.strComponent)
                            )
                        {
                            this.subAddInputComponentDimensionsAndThickness(null, null, eleeleentity.intPk,
                                (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                                darrpiwentityProcessInJob_I);
                        }

                        //                                  //Perform calculation own for get the Quantity
                        //                                  //    for this IO and save in the 
                        //                                  //    arr quantitys.
                        //                                  //Find calculation and find the quantity From. 

                        //                                  //Qfrom Output.
                        //                                  //Find the quantity associate with this qfrom in the 
                        //                                  //    arr quantitys, if it is not found in the arr quantity, 
                        //                                  //    it is need to find the quantity with link of the next 
                        //                                  //    process (method recursively).

                        //                                  //Qfrom Input.
                        //                                  //Perform calculation for get quantity correct for this IO
                        //                                  //    consider the waste'propagation
                        //                                  //Note. save waste in the arr waste.


                        if (
                            //                              //IO has Links.
                            strLink != null
                            )
                        {
                            //                              //Find name of the other side of the link.
                            strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                                strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                        }

                        IoqytjsonIOQuantityJson ioqytjsonQuantityExists = darrioqytjsonIOQuantity_M.FirstOrDefault(
                            ioqyt => ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                            ioqyt.intnPkEleet == null && ioqyt.intnPkEleele == eleeleentity.intPk &&
                            ioqyt.boolAreInput == true && ioqyt.strLink == strLink);

                        if (
                            //                              //The IO already was analized.
                            ioqytjsonQuantityExists != null
                            )
                        {
                            numQuantity = ioqytjsonQuantityExists.numQuantityIO;
                            numCostByResource = ioqytjsonQuantityExists.numCostResource;
                            darrwstjsonWaste = ioqytjsonQuantityExists.arrwstjsonWaste.ToList();
                            arrwstaddjson = ioqytjsonQuantityExists.arrwstaddWasteAdditional;
                            strLink = ioqytjsonQuantityExists.strLink;
                            intHours = ioqytjsonQuantityExists.intHours;
                            intMinutes = ioqytjsonQuantityExists.intMinutes;
                            intSeconds = ioqytjsonQuantityExists.intSeconds;
                        }
                        else
                        {
                            this.subGetCostAndQuantityByResourceRecursive(null, null, eleeleentity.intPk,
                                (int)intnPkResource, boolUnitAllowDecimal, strLink, jobentity_I, jobjson_I,
                                piwentity_I, darrdynlkjson_I, darrioentityAllIO_I, darriojentityAllIOJ_I,
                                darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M, darrwstjsonWaste,
                                darrwstpropjson_M, ref numCostByResource, ref numQuantity,
                                ref boolWorkflowJobIsReady_IO);

                        }

                        //                                  //GetFinalCost for each IO without link in the input.
                        if (
                            strLink == null &&
                            jobentity_I != null &&
                            (jobentity_I.intStage == JobJob.intCompletedStage)
                            )
                        {
                            //                              //Get the final cost if it exists for this calculation.
                            List<FnlcostentityFinalCostEntityDB> darrfnlcostentity = context.FinalCost.Where(fnl =>
                                fnl.intPkJob == jobentity_I.intPk && fnl.intPkProcessInWorkflow == piwentity_I.intPk &&
                                fnl.intnPkElementElementType == null && fnl.intnPkElementElement == eleeleentity.intPk &&
                                fnl.intnPkResource == intnPkResource).ToList();
                            darrfnlcostentity.Sort();

                            if (
                                //                          //Find the final cost.
                                darrfnlcostentity.Count > 0
                                )
                            {
                                //                          //Get the last final cost.
                                FnlcostentityFinalCostEntityDB fnlcostentity = darrfnlcostentity.Last();
                                if (
                                    fnlcostentity.numnCost != null
                                    )
                                {
                                    numJobFinalCost_IO = numJobFinalCost_IO + (double)fnlcostentity.numnCost;
                                }
                                else
                                {
                                    if (
                                        numQuantity > 0
                                        )
                                    {
                                        numJobFinalCost_IO = numJobFinalCost_IO + ((numCostByResource / numQuantity) *
                                        (double)fnlcostentity.numnQuantity);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (
                            (etentity.strCustomTypeId == ResResource.strComponent)
                            )
                        {
                            this.subAddOutputComponentDimensionsAndThickness(null, null, eleeleentity.intPk,
                                (int)intnPkResource, ioentity, jobjson_I, piwentity_I, darrdynlkjson_I,
                                darrpiwentityProcessInJob_I);
                        }

                        /*CASE*/
                        if (
                            //                              //It has resource productFinal setted in this IO.
                            ioentity != null && ioentity.boolnIsFinalProduct == true
                            )
                        {
                            if (
                               //                           //IO has Links.
                               strLink != null
                               )
                            {
                                //                          //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                                    strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                            }

                            //                              //Take the quantity from job and and save in the arr 
                            //                              //      quantity for this IO.
                            ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity, ref strUnit);
                        }
                        else if (
                           //                               //IO has Links.
                           strLink != null
                           )
                        {
                            //                              //Take the quantity from next process linked 
                            //                              //    input.
                            //                              //Description Task: Take the quantity from next process
                            //                              //    linked to this IO and save in the arr quantity.

                            //                              //IO output has link.
                            //                              //Get Quantity'info of the NEXT PIW for this IO with LInk.
                            this.subGetQuantityFromIOWithLinkInTheOutput(null, ioentity.intnPkElementElementType,
                                ioentity.intnPkElementElement, (int)intnPkResource, jobentity_I, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M,
                                darrwstpropjson_M, ref numQuantity, ref boolWorkflowJobIsReady_IO, ref strLink);
                        }
                        else if (
                            //                              //IO has not Links.
                            strLink == null
                            )
                        {
                            //                              //Work with Transform calculation.
                            this.subGetQuantityFromTransformCalculation(piwentity_I, jobjson_I, eleeleentity.intPk,
                                null, (int)intnPkResource, ref numQuantity, ref darrioqytjsonIOQuantity_M);
                        }
                        /*END-CASE*/
                    }

                    //                                      //Get dimensions.
                    if (
                        (etentity.strCustomTypeId == ResResource.strMedia) ||
                        (etentity.strCustomTypeId == ResResource.strComponent)
                        )
                    {
                        strDimensionsAndThickness = this.strDimensionsAndThickness(null, eleeleentity.intPk,
                            (int)intnPkResource, numQuantity, strUnit, piwentity_I);
                    }

                    //                                      //Get availability for cal.
                    if (
                        boolnIsCalendar == true
                       )
                    {
                        List<PerentityPeriodEntityDB> darrperentity = context.Period.Where(perentity =>
                        perentity.intJobId == jobjson_I.intJobId &&
                        perentity.intPkWorkflow == piwentity_I.intPkWorkflow &&
                        perentity.intProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                        perentity.intnPkElementElement == eleeleentity.intPk &&
                        perentity.intnEstimateId == null).ToList();

                        boolnIsAvailable = darrperentity.Count >= 1 ? true : false;
                    }
                }
                else
                {
                    if (
                        //                                  //IO has Links.
                        strLink != null
                        )
                    {
                        //                      //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                            strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                    }
                }

                bool boolIsPhysical = RestypResourceType.boolIsPhysical(etentity.strClassification);
                bool boolIsPaper =
                    (etentity.strCustomTypeId == ResResource.strComponent) ||
                    (etentity.strCustomTypeId == ResResource.strMedia);


                //                                          //Verify if Unit allow or not Decimal.
                numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                //                                      //To know if is a Device or MiscConsumable.
                bool boolIsDeviceOrMiscConsumable =
                    (etentity.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                    etentity.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                bool boolThickness = ioentity != null ?
                    (ioentity.boolnThickness != null ? (bool)ioentity.boolnThickness : false) :
                    false;

                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(eleentityTemplate.intPkElementType,
                    eleentityTemplate.intPk, eleeleentity.intPk, false, strTypeAndTemplate, strResource, strLink,
                    intnPkResource, numQuantity, strUnit, numCostByResource, boolIsPhysical, boolnIsCalendar,
                    boolnIsAvailable, intHours, intMinutes, intSeconds, boolAutomaticallySet, boolOneResource,
                    boolHasNotResource, false, boolIsPaper, ioentity?.boolnIsFinalProduct, boolUnitAllowDecimal,
                    darrwstjsonWaste.ToArray(), arrwstaddjson, strDimensionsAndThickness, boolIsDeviceOrMiscConsumable,
                    boolnSize, boolThickness);

                darriojson1.Add(iojson1);
            }

            return darriojson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        //public void subGetCostAndQuantityByResourceRecursive(
        //    //                                              //Return the sum of the calculations associated only with 
        //    //                                              //      the process:
        //    //                                              //  - PerQuantity ByResource.
        //    //                                              //  - Base Quantity By Resource.    
        //    //                                              //It is necessary validate if the calculation applies as it
        //    //                                              //      is validated where the job is calculated.

        //    //                                              //Job, it is necessary to verify the condition to apply.
        //    JobjsonJobJson jobjson_I,
        //    String strPrintshopId_I,
        //    int intPkResource_I,
        //    PiwentityProcessInWorkflowEntityDB piwentity_I,
        //    int? intnPkEleet_I,
        //    int? intnPkEleele_I,
        //    String strLink_I,
        //    bool boolUnitAllowDecimal_I,
        //    //                                              //PIWs will be shown in the job workflow
        //    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
        //    //                                              //Links node to node
        //    List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
        //    //                                              //intnEstimateIdThatInvokeThisMethod_I 
        //    //                                              //      != null if this is invoked from estiamtion.
        //    //                                              //intnEstimateIdThatInvokeThisMethod_I 
        //    //                                              //      == null if this is invoked from WF job.
        //    int? intnEstimateIdThatInvokeThisMethod_I,
        //    IConfiguration configuration_I,
        //    ref double numQuantity_IO,
        //    ref double numCostByResource_IO,
        //    //                                              //List waste to propagate.  
        //    ref List<WstjsonWasteJson> darrwstjsonWaste_M,
        //    ref List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
        //    ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantityInput_M,
        //    ref bool boolWorkflowJobIsReady_M
        //    )
        //{
        //    //                                              //Establish the connection.
        //    Odyssey2Context context = new Odyssey2Context();

        //    //                                              //Get job stage.
        //    JobentityJobEntityDB jobjob = context.Job.FirstOrDefault(job => job.intJobID == jobjson_I.intJobId);

        //    //                                              //Get all the calculations for this product.
        //    //                                              //Depending on the job stage.
        //    List<CalCalculation> darrcalFromDB = new List<CalCalculation>();
        //    if (
        //        jobjob != null &&
        //        //                                          //Job is InProgress or Completed.
        //        (jobjob.intStage == JobJob.intInProgressStage ||
        //        jobjob.intStage == JobJob.intCompletedStage)
        //        )
        //    {
        //        ZonedTime ztimeJobDate;
        //        ProdtypProductType.GetJobDate(jobjob, out ztimeJobDate);
        //        darrcalFromDB = this.GetCalculationsDependingDate(ztimeJobDate);
        //    }
        //    else
        //    {
        //        //                                          //Job is Pending.
        //        darrcalFromDB = this.darrcalCurrent;
        //    }

        //    //                                              //Get calculation for this IO.
        //    darrcalFromDB = darrcalFromDB.Where(cal =>
        //        //                                          //Per Quantity calculation, take quantity the Job.
        //        (cal.strCalculationType == CalCalculation.strPerQuantity
        //        || cal.strCalculationType == CalCalculation.strPerQuantityBase)
        //        &&
        //        (cal.strByX == CalCalculation.strByResource) &&
        //        (cal.intnPkResourceElementBelongsTo == intPkResource_I) &&
        //        (cal.intnPkWorkflowBelongsTo == piwentity_I.intPkWorkflow) &&
        //        (cal.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId) &&
        //        (cal.intnPkElementElementTypeBelongsTo == intnPkEleet_I) &&
        //        (cal.intnPkElementElementBelongsTo == intnPkEleele_I) &&
        //        //                                          //Calculation is enable.
        //        cal.boolIsEnable &&
        //        //                                          //Condition to apply and quantity condition apply for 
        //        //                                          //      this cal.
        //        ProdtypProductType.boolCalculationConditionsApply(cal.strConditionToApply, cal.intnMinAmount,
        //        cal.intnMaxAmount, cal.boolConditionAnd, jobjson_I)).ToList();

        //    double numAcumCurrentResourceQuantity = 0.0;

        //    foreach (CalCalculation cal in darrcalFromDB)
        //    {
        //        int intStatus = 0;
        //        String strUserMessage = "";
        //        String strDevMessage = "";

        //        if (
        //            cal.strCalculationType == CalCalculation.strPerQuantity
        //            )
        //        {
        //            bool boolQFromIsInThisJob = ProdtypProductType.boolQFromIsInThisWFJobOrEstimateData(
        //                cal.intnPkResourceElementBelongsTo, cal.intnPkElementElementTypeBelongsTo,
        //                cal.intnPkElementElementBelongsTo, cal.intnPkQFromResourceElementBelongsTo,
        //                cal.intnPkQFromElementElementTypeBelongsTo, cal.intnPkQFromElementElementBelongsTo,
        //                configuration_I, jobjson_I.intJobId, strPrintshopId_I, piwentity_I.intPk,
        //                intnEstimateIdThatInvokeThisMethod_I, this.darriojsoninInputsCombinationsAndInputsSelected,
        //                ref intStatus, ref strUserMessage, ref strDevMessage);

        //            if (
        //                boolQFromIsInThisJob
        //                )
        //            {
        //                //                                  //Find the Qfrom for this calculation.
        //                int? intnPkQFromEleet = cal.intnPkQFromElementElementTypeBelongsTo;
        //                int? intnPkQFromEleele = cal.intnPkQFromElementElementBelongsTo;
        //                int intPkQfromResource = (int)cal.intnPkQFromResourceElementBelongsTo;

        //                //                                  //Find Qfrom IO.
        //                IoentityInputsAndOutputsEntityDB ioentityQfromRes = context.InputsAndOutputs.FirstOrDefault(
        //                    io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
        //                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
        //                    io.intnPkElementElementType == intnPkQFromEleet &&
        //                    io.intnPkElementElement == intnPkQFromEleele);

        //                int? intnPkQfromRes = null;
        //                String strLinkQFrom = null;
        //                if (
        //                    //                              //If QFrom IO is in InputsAndOutputs
        //                    ioentityQfromRes != null
        //                    )
        //                {
        //                    if (
        //                        //                          //If QFrom IO has a GroupResource
        //                        ioentityQfromRes.intnGroupResourceId != null
        //                        )
        //                    {
        //                        EstdataentityEstimationDataEntityDB estdata = context.EstimationData.FirstOrDefault(
        //                            estdata => estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
        //                            estdata.intnPkElementElementType == intnPkQFromEleet &&
        //                            estdata.intnPkElementElement == intnPkQFromEleele &&
        //                            estdata.intPkResource == intPkQfromResource);

        //                        intnPkQfromRes = estdata != null ? (int?)estdata.intPkResource : null;

        //                        if (
        //                            //                      //The resource was not found.
        //                            intnPkQfromRes == null &&
        //                            //                      //There are options of the resource generated.
        //                            this.darriojsoninInputsCombinationsAndInputsSelected != null
        //                            )
        //                        {
        //                            //                      //Find in the list that was generate in options
        //                            //                      //    for io that has a resource group.
        //                            IojsoninInputOrOutputJsonInternal iojsonin =
        //                                this.darriojsoninInputsCombinationsAndInputsSelected.FirstOrDefault(io =>
        //                                io.intPkPIW == piwentity_I.intPk &&
        //                                io.intnPkElementElement == intnPkQFromEleele &&
        //                                io.intnPkElementElementType == intnPkQFromEleet &&
        //                                io.intPkResource == (int)intPkQfromResource);

        //                            intnPkQfromRes = iojsonin != null ? (int?)iojsonin.intPkResource : null;
        //                        }
        //                    }
        //                    else
        //                    //                              //If QFrom IO has not a GroupResource
        //                    {
        //                        //                          //Obtain the resource
        //                        intnPkQfromRes = ioentityQfromRes.intnPkResource;
        //                    }

        //                    strLinkQFrom = ioentityQfromRes.strLink;
        //                }

        //                if (
        //                    //                              //If QFrom resource was not found in InputsAndOutputs
        //                    intnPkQfromRes == null
        //                    )
        //                {
        //                    //                              //Find QFrom IO   
        //                    IojentityInputsAndOutputsForAJobEntityDB ioentityQfromResForAJob =
        //                       context.InputsAndOutputsForAJob.FirstOrDefault(iofaj =>
        //                       //                                   //Job is important! Added 2020/02/02! LGF.
        //                       iofaj.intJobId == jobjson_I.intJobId &&
        //                       iofaj.intPkProcessInWorkflow == piwentity_I.intPk &&
        //                       iofaj.intnPkElementElementType == intnPkQFromEleet &&
        //                       iofaj.intnPkElementElement == intnPkQFromEleele);

        //                    if (
        //                        //                          //If QFrom resource was set directly in the job 
        //                        ioentityQfromResForAJob != null
        //                        )
        //                    {
        //                        intnPkQfromRes = ioentityQfromResForAJob.intPkResource;
        //                    }
        //                }

        //                if (
        //                    //                              //If QFrom Resource was found.
        //                    intnPkQfromRes != null
        //                    )
        //                {
        //                    double numIOQuantityFromCalculation;
        //                    double numWasteCalculated;
        //                    double numIOQuantity = 0.0;
        //                    double numFactor;
        //                    double numQuantityWithoutWaste;
        //                    bool boolIsInputIO;
        //                    bool boolIsEleet;
        //                    if (
        //                        //                          //Find in ElementElementType
        //                        intnPkQFromEleet != null
        //                        )
        //                    {
        //                        boolIsInputIO = context.ElementElementType.FirstOrDefault(
        //                            eleet => eleet.intPk == intnPkQFromEleet).boolUsage;
        //                        boolIsEleet = true;
        //                    }
        //                    else
        //                    //                              //Find in ElementElement
        //                    {
        //                        boolIsInputIO = context.ElementElement.FirstOrDefault(eleele =>
        //                            eleele.intPk == intnPkQFromEleele).boolUsage;
        //                        boolIsEleet = false;
        //                    }

        //                    if (
        //                        //                          //QFrom Resource is input IO
        //                        boolIsInputIO
        //                        )
        //                    {
        //                        //                          //Check if the Qfrom has already been analyzed and
        //                        //                          //      get its quantity from the list
        //                        IoqytjsonIOQuantityJson ioqytIOQuantity = darrioqytjsonIOQuantityInput_M.FirstOrDefault(
        //                            ioqty => ioqty.intPkProcessInWorkflow == piwentity_I.intPk &&
        //                            ioqty.intnPkEleet == intnPkQFromEleet && ioqty.intnPkEleele == intnPkQFromEleele &&
        //                            ioqty.intnPkResource == intnPkQfromRes && ioqty.boolAreInput == true);

        //                        if (
        //                            ioqytIOQuantity != null
        //                            )
        //                        {
        //                            //                      //Get waste of the Qfrom
        //                            List<WstpropjsonWasteToPropagateJson> darrwstprop = darrwstpropjson_M.Where(wstprop =>
        //                                wstprop.intPkProcessInWorkflow == piwentity_I.intPk &&
        //                                wstprop.intnPkEleetSource == ioqytIOQuantity.intnPkEleet &&
        //                                wstprop.intnPkEleeleSource == ioqytIOQuantity.intnPkEleele).ToList();

        //                            //                      //Set to numIOQuantity the quantity that was obtained from
        //                            //                      //      the ioqytIOQuantity
        //                            numIOQuantity = ioqytIOQuantity.numQuantityIO;

        //                            foreach (WstpropjsonWasteToPropagateJson wstprop in darrwstprop)
        //                            {
        //                                //                  //For each waste on the list subtract it from numIOQuantity
        //                                numIOQuantity = numIOQuantity - wstprop.numWaste;
        //                            }
        //                        }
        //                        else
        //                        {
        //                            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(
        //                                ele => ele.intPk == intnPkQfromRes);

        //                            bool boolAllowDecimal = true;
        //                            if (
        //                                EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
        //                                RestypResourceType.strResourceTypeParameter
        //                                )
        //                            {
        //                                //                  //Get the current unit of measurement.
        //                                ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
        //                                    eleentity.intPk);

        //                                boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                                    (bool)valentity.boolnIsDecimal;
        //                            }

        //                            double numCostByResourceNotUsed = 0.0;
        //                            List<WstjsonWasteJson> darrwstjsonWasteNotUsed = new List<WstjsonWasteJson>();

        //                            this.subGetCostAndQuantityByResourceRecursive(jobjson_I, strPrintshopId_I,
        //                                (int)intnPkQfromRes, piwentity_I, intnPkQFromEleet, intnPkQFromEleele,
        //                                strLinkQFrom, boolAllowDecimal, darrpiwentityProcessInJob_I, darrdynlkjson_I,
        //                                intnEstimateIdThatInvokeThisMethod_I, configuration_I, ref numIOQuantity,
        //                                ref numCostByResourceNotUsed, ref darrwstjsonWasteNotUsed,
        //                                ref darrwstpropjson_M, ref darrioqytjsonIOQuantityInput_M, 
        //                                ref boolWorkflowJobIsReady_M);
        //                        }

        //                        if (
        //                            //                      //It is only calculated the quantity and cost for this IO
        //                            //                      //      if the quantity of the QFromRes is greater than 0.
        //                            numIOQuantity > 0
        //                            )
        //                        {
        //                            bool? boolnQFromIsSize = ioentityQfromRes != null ? ioentityQfromRes.boolnSize : 
        //                                null;

        //                            //                      //Get the cost.
        //                            //                      //cal is By Resource and PerQuantity.
        //                            numCostByResource_IO = numCostByResource_IO + ProdtypProductType.
        //                                numGetPerQuantityCost(cal, jobjson_I, numIOQuantity, boolUnitAllowDecimal_I, 
        //                                boolnQFromIsSize, piwentity_I.intPk, this.darrresthkjsonResThickness, 
        //                                out numQuantityWithoutWaste, out numIOQuantityFromCalculation,
        //                                out numWasteCalculated, out numFactor, ref boolWorkflowJobIsReady_M, 
        //                                ref intStatus, ref strUserMessage, ref strDevMessage);

        //                            numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity +
        //                                numIOQuantityFromCalculation;

        //                            ProdtypProductType.subFillWasteDetail((int)intnPkQfromRes, boolIsEleet,
        //                                numQuantityWithoutWaste, numIOQuantityFromCalculation, numWasteCalculated, 
        //                                numFactor, ioentityQfromRes, ref darrwstjsonWaste_M);

        //                            WstpropjsonWasteToPropagateJson wstpropjsonWstToPropagate =
        //                                new WstpropjsonWasteToPropagateJson(piwentity_I.intPk, intnPkEleet_I, 
        //                                intnPkEleele_I, intnPkQFromEleet, intnPkQFromEleele, 
        //                                numWasteCalculated.Round(2), numFactor);

        //                            darrwstpropjson_M.Add(wstpropjsonWstToPropagate);
        //                        }
        //                    }
        //                    //                              //QFrom Resource is output IO
        //                    else
        //                    {
        //                        IoqytjsonIOQuantityJson ioqytIOQuantity = darrioqytjsonIOQuantityInput_M.FirstOrDefault(
        //                            ioqty => ioqty.intPkProcessInWorkflow == piwentity_I.intPk &&
        //                            ioqty.intnPkEleet == intnPkQFromEleet && ioqty.intnPkEleele == intnPkQFromEleele &&
        //                            ioqty.intnPkResource == intnPkQfromRes && ioqty.boolAreInput == false);

        //                        if (
        //                            ioqytIOQuantity != null
        //                            )
        //                        {
        //                            numIOQuantity = ioqytIOQuantity.numQuantityIO;
        //                        }
        //                        else
        //                        {
        //                            if (
        //                                //                  //QFrom Resource is the final product.
        //                                ioentityQfromRes.boolnIsFinalProduct == true
        //                                )
        //                            {
        //                                String strLinkQF = ioentityQfromRes.strLink;
        //                                if (
        //                                   //               //IO has Links.
        //                                   strLinkQF != null
        //                                   )
        //                                {
        //                                    //              //Find name of the other side of the link.
        //                                    strLinkQF = this.strGetNameOtherSideOfTheLink(piwentity_I,
        //                                        ioentityQfromRes.intnPkElementElementType, null, strLinkQF,
        //                                        darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
        //                                }

        //                                String strUnitNotUsed = null;
        //                                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, false,
        //                                    strLinkQF, ioentityQfromRes, jobjson_I, darrioqytjsonIOQuantityInput_M,
        //                                    ref numIOQuantity, ref strUnitNotUsed);
        //                            }
        //                            else
        //                            {
        //                                if (
        //                                   //               //IO output has Links.
        //                                   ioentityQfromRes.strLink != null
        //                                   )
        //                                {
        //                                    //              //Take the quantity from next process linked input
        //                                    //              //Get Quantity'info of the NEXT PIW for this IO 
        //                                    //              //      with Link.
        //                                    String strLinkNewNotUsed;
        //                                    this.subGetQuantityFromIOWithLinkInTheOutput(piwentity_I, jobjson_I,
        //                                        strPrintshopId_I, intnPkQFromEleet, intnPkQFromEleele,
        //                                        (int)intnPkQfromRes, ioentityQfromRes.strLink,
        //                                        darrpiwentityProcessInJob_I, darrdynlkjson_I,
        //                                        configuration_I, null, out strLinkNewNotUsed, ref numIOQuantity,
        //                                        ref darrwstpropjson_M,
        //                                        ref darrioqytjsonIOQuantityInput_M, ref boolWorkflowJobIsReady_M);
        //                                }
        //                                else if (
        //                                   //               //IO output do not has Links.
        //                                   ioentityQfromRes.strLink == null
        //                                   )
        //                                {
        //                                    //              //Work with Transform calculation.
        //                                    this.subGetQuantityFromTransformCalculation(piwentity_I, jobjson_I,
        //                                        intnPkQFromEleet, intnPkQFromEleele, (int)intnPkQfromRes,
        //                                        ref numIOQuantity, ref darrioqytjsonIOQuantityInput_M);
        //                                }
        //                            }
        //                        }

        //                        if (
        //                            //                      //it is only calculated the quantity and cost for this IO
        //                            //                      //      if the quantity of the QFromRes is greater than 0.
        //                            numIOQuantity > 0
        //                            )
        //                        {
        //                            bool? boolnQFromIsSize = ioentityQfromRes != null ? ioentityQfromRes.boolnSize : 
        //                                null;

        //                            //                      //Get the cost.
        //                            numCostByResource_IO = numCostByResource_IO + ProdtypProductType.
        //                                numGetPerQuantityCost(cal, jobjson_I, numIOQuantity, boolUnitAllowDecimal_I, 
        //                                boolnQFromIsSize, piwentity_I.intPk, this.darrresthkjsonResThickness, 
        //                                out numQuantityWithoutWaste, out numIOQuantityFromCalculation,
        //                                out numWasteCalculated, out numFactor, ref boolWorkflowJobIsReady_M, 
        //                                ref intStatus, ref strUserMessage, ref strDevMessage);

        //                            numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity +
        //                                numIOQuantityFromCalculation;

        //                            WstjsonWasteJson wstjsonWaste = new WstjsonWasteJson(numQuantityWithoutWaste.
        //                                Round(2), numWasteCalculated.Round(2), numIOQuantityFromCalculation.Round(2), 
        //                                null, "-", "-");

        //                            darrwstjsonWaste_M.Add(wstjsonWaste);

        //                            WstpropjsonWasteToPropagateJson wstpropjsonWstToPropagate = new 
        //                                WstpropjsonWasteToPropagateJson(piwentity_I.intPk, intnPkEleet_I, 
        //                                intnPkEleele_I, null, null, numWasteCalculated.Round(2), numFactor);

        //                            darrwstpropjson_M.Add(wstpropjsonWstToPropagate);
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        else
        //        {
        //            numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity + (double)cal.numnNeeded;
        //        }
        //    }

        //    if (
        //        //                                          //The resource quantity is greater than 0
        //        numAcumCurrentResourceQuantity > 0
        //        )
        //    {
        //        //                                          //Obtain the cost.
        //        double? numnCalculationCost = 0.0;
        //        double? numnCalculationQuantity = 0.0;
        //        double? numnCalculationMin = 0.0;
        //        double? numnCalculationBlock = 0.0;

        //        //                                          //Get resource cost data
        //        ProdtypProductType.subGetResourceCostData(intPkResource_I, jobjson_I.intJobId, ref numnCalculationCost,
        //            ref numnCalculationQuantity, ref numnCalculationMin, ref numnCalculationBlock);

        //        //                                          //Use minToUse
        //        ProdtypProductType.subGetNewQuantityDependingMinToUse(boolUnitAllowDecimal_I, numnCalculationMin,
        //            numnCalculationBlock, ref numAcumCurrentResourceQuantity);

        //        double numCostPerUnit = 0.0;
        //        if (
        //            ((numnCalculationCost != null) && (numnCalculationCost > 0)) &&
        //            ((numnCalculationQuantity != null) && (numnCalculationQuantity > 0))
        //            )
        //        {
        //            numCostPerUnit = (double)numnCalculationCost / (double)numnCalculationQuantity;

        //            //                                      //Obtaining the cost.
        //            numCostByResource_IO = (numAcumCurrentResourceQuantity * numCostPerUnit).Round(2);
        //        }
        //    }

        //    if (
        //        //                                          //IO has Links.
        //        strLink_I != null && darrpiwentityProcessInJob_I != null
        //        )
        //    {
        //        //                                          //Find name of the other side of the link.
        //        strLink_I = this.strGetNameOtherSideOfTheLink(piwentity_I, intnPkEleet_I, intnPkEleele_I, strLink_I,
        //            darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
        //    }

        //    //                                              //Save info current IO in the list for Optimization.
        //    IoqytjsonIOQuantityJson ioqytjsonCurrentIO = new IoqytjsonIOQuantityJson(piwentity_I.intPk, intnPkEleet_I,
        //        intnPkEleele_I, intPkResource_I, numAcumCurrentResourceQuantity, numCostByResource_IO, true, strLink_I,
        //        darrwstjsonWaste_M.ToArray());
        //    darrioqytjsonIOQuantityInput_M.Add(ioqytjsonCurrentIO);

        //    numQuantity_IO = numAcumCurrentResourceQuantity;

        //    numQuantity_IO = numQuantity_IO.Round(2);
        //    numCostByResource_IO = numCostByResource_IO.Round(2);
        //}

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolQFromIsInThisWFJobOrEstimateData(
            //                                              //Return if the qfrom exist in the wfJob of in the 
            //                                              //    estimationData considering grpResources.

            int? intnPkResourceElementBelongsTo_I,
            int? intnPkElementElementTypeBelongsTo_I,
            int? intnPkElementElementBelongsTo_I,
            int? intnPkQFromResourceElementBelongsTo_I,
            int? intnPkQFromElementElementTypeBelongsTo_I,
            int? intnPkQFromElementElementBelongsTo_I,
            IConfiguration configuration_I,
            int? intnJobId_I,
            String strPrintshopId_I,
            int intPkProcesInWorkflow_I,
            //                                              //id != null if this was called from estimate.
            //                                              //id == null if this was called from WF job.
            int? intnEstimateIdThatInvokeThisMethod_I,
            List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsGenerateWithOptions_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {

            bool boolQFromIsInThisWFJobOrEstimateData = true;

            if (
                (intnPkResourceElementBelongsTo_I != null &&
                (intnPkElementElementTypeBelongsTo_I != null ||
                intnPkElementElementBelongsTo_I != null) &&
                intnPkQFromResourceElementBelongsTo_I != null &&
                (intnPkQFromElementElementTypeBelongsTo_I != null ||
                intnPkQFromElementElementBelongsTo_I != null))
                )
            {
                Odyssey2Context context = new Odyssey2Context();

                int intPkEleetOrEleele = (int)(intnPkElementElementTypeBelongsTo_I != null ?
                    intnPkElementElementTypeBelongsTo_I : intnPkElementElementBelongsTo_I);
                bool boolIsEleet = intnPkElementElementTypeBelongsTo_I != null ? true : false;
                int intPkResource = (int)intnPkResourceElementBelongsTo_I;

                int intPkEleetOrEleeleQFrom = (int)(intnPkQFromElementElementTypeBelongsTo_I != null ?
                    intnPkQFromElementElementTypeBelongsTo_I : intnPkQFromElementElementBelongsTo_I);
                bool boolIsEleetQFrom = intnPkQFromElementElementTypeBelongsTo_I != null ? true : false;
                int intPkResourceQFrom = (int)intnPkQFromResourceElementBelongsTo_I;

                //                                          //List Of process inputs.
                List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjsonIosFromPIW = new List<IofrmpiwjsonIOFromPIWJson>();

                ProdtypProductType.subGetProcessInputs(intnJobId_I, strPrintshopId_I, intPkProcesInWorkflow_I,
                configuration_I, intPkEleetOrEleele, boolIsEleet, intPkResource, out darrioinfrmpiwjsonIosFromPIW,
                ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);

                if (
                    //                                      //Valid that res exist in qFrom list.
                    darrioinfrmpiwjsonIosFromPIW.Exists(io =>
                    io.boolIsEleet == boolIsEleetQFrom &&
                    io.intnPkEleetOrEleele == intPkEleetOrEleeleQFrom &&
                    io.intnPkResource == intPkResourceQFrom)
                    )
                {
                    boolQFromIsInThisWFJobOrEstimateData = true;
                }
                else
                {
                    if (
                        //                                  //this was called in some method from estimations.
                        intnEstimateIdThatInvokeThisMethod_I != null
                        )
                    {
                        //                                  //Find in estimationData.
                        //                                  //Get Estimation Data.
                        EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                            estdata => estdata.intId == intnEstimateIdThatInvokeThisMethod_I &&
                            estdata.intJobId == intnJobId_I &&
                            estdata.intPkProcessInWorkflow == intPkProcesInWorkflow_I &&
                            estdata.intnPkElementElementType == (boolIsEleetQFrom ? (int?)intPkEleetOrEleeleQFrom : null) &&
                            estdata.intnPkElementElement == (!boolIsEleetQFrom ? (int?)intPkEleetOrEleeleQFrom : null) &&
                            estdata.intPkResource == intPkResourceQFrom);

                        boolQFromIsInThisWFJobOrEstimateData = estdataentity != null ? true : false;
                    }
                    else
                    {
                        boolQFromIsInThisWFJobOrEstimateData = false;

                        //                                  //Find in the list that was generate in options
                        //                                  //    for io that has a resource group.
                        if (
                            darriojsoninInputsGenerateWithOptions_I != null
                            )
                        {
                            boolQFromIsInThisWFJobOrEstimateData = darriojsoninInputsGenerateWithOptions_I.Exists(io =>
                                io.intPkPIW == intPkProcesInWorkflow_I &&
                                io.intnPkElementElement == (!boolIsEleetQFrom ? (int?)intPkEleetOrEleeleQFrom : null) &&
                                io.intnPkElementElementType == (boolIsEleetQFrom ? (int?)intPkEleetOrEleeleQFrom : null) &&
                                io.intPkResource == intPkResourceQFrom);
                        }
                    }
                }
            }
            return boolQFromIsInThisWFJobOrEstimateData;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subGetCostAndQuantityByResourceRecursive(
            //                                              //Return the sum of the calculations associated only with 
            //                                              //      the process:
            //                                              //  - PerQuantity ByResource.
            //                                              //  - Base Quantity By Resource.    
            //                                              //It is necessary validate if the calculation applies as it
            //                                              //      is validated where the job is calculated.

            //                                              //intnEstimateIdThatInvokeThisMethod_I 
            //                                              //      != null if this is invoked from estiamtion.
            //                                              //intnEstimateIdThatInvokeThisMethod_I 
            //                                              //      == null if this is invoked from WF job.
            int? intnEstimateIdThatInvokeThisMethod_I,
            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            bool boolUnitAllowDecimal_I,
            String strLink_I,
            //                                              //Job, it is necessary to verify the condition to apply.
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantityInput_M,
            //                                              //List waste to propagate.  
            List<WstjsonWasteJson> darrwstjsonWaste_M,
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            ref double numCostByResource_IO,
            ref double numQuantity_IO,
            ref bool boolWorkflowJobIsReady_IO
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();
            //                                              //Get all the calculations for this product.
            //                                              //Depending on the job stage.
            List<CalCalculation> darrcalFromDB = new List<CalCalculation>();

            if (
                //                                          //This Method is Invoqued from Estimate.
                intnEstimateIdThatInvokeThisMethod_I != null
                )
            {
                //                                          //Verify if the workflow is a custom.
                int intPkWorkflow = piwentity_I.intPkWorkflow;
                WfentityWorkflowEntityDB wfentityCustom = context.Workflow.FirstOrDefault(wf => 
                    wf.intPk == intPkWorkflow && wf.intnJobId == jobjson_I.intJobId);

                if (
                    //                                      //It is a Workflow custom for a job.
                    wfentityCustom != null
                    )
                {
                    //                                              //Get all calculations for this.
                    List<CalentityCalculationEntityDB> darrcalentity = context.Calculation.Where(
                        caletentity => caletentity.intnPkWorkflow == wfentityCustom.intPk && 
                        caletentity.strEndDate == null).ToList();

                    //                                              //Get all the calculations.
                    foreach (CalentityCalculationEntityDB calentity in darrcalentity)
                    {
                        CalCalculation cal = new CalCalculation(calentity.intPk, calentity.strUnit,
                            calentity.numnQuantity, calentity.numnCost, calentity.intnHours, calentity.intnMinutes,
                            calentity.intnSeconds, calentity.numnBlock, calentity.boolIsEnable, calentity.strValue,
                            calentity.strAscendants, calentity.strDescription, calentity.numnProfit,
                            calentity.intnPkProduct, calentity.intnPkProcess, calentity.intnPkResource,
                            calentity.strCalculationType, calentity.strByX, calentity.strStartDate,
                            calentity.strStartTime, calentity.strEndDate, calentity.strEndTime, calentity.numnNeeded,
                            calentity.numnPerUnits, calentity.numnMin, calentity.numnQuantityWaste, calentity.numnPercentWaste,
                            calentity.intnPkWorkflow, calentity.intnProcessInWorkflowId,
                            calentity.intnPkElementElementType, calentity.intnPkElementElement,
                            calentity.intnPkQFromElementElementType, calentity.intnPkQFromElementElement,
                            calentity.intnPkQFromResource, calentity.intnPkAccount, calentity.boolnFromThickness,
                            calentity.boolnIsBlock, calentity.boolnByArea);
                        darrcalFromDB.Add(cal);
                    }
                }
                else
                {
                    //                                      //This method is invoqued from estimate.
                    darrcalFromDB = this.darrcalDependingJob;
                }
            }
            else
            {
                //                                          //This method is invoqued from job.
                darrcalFromDB = this.darrcalDependingJob;
            }

            //if (
            //    jobentity_I != null &&
            //    //                                          //Job is InProgress or Completed.
            //    (jobentity_I.intStage == JobJob.intInProgressStage ||
            //    jobentity_I.intStage == JobJob.intCompletedStage)
            //    )
            //{
            //    ZonedTime ztimeJobDate;
            //    ProdtypProductType.GetJobDate(jobentity_I, out ztimeJobDate);
            //    darrcalFromDB = this.GetCalculationsDependingDate(ztimeJobDate);
            //}
            //else
            //{
            //    //                                          //Job is Pending.
            //    darrcalFromDB = this.darrcalCurrent;
            //}

            //                                              //Get calculation for this IO.
            darrcalFromDB = darrcalFromDB.Where(cal =>
                //                                          //Per Quantity calculation, take quantity the Job.
                (cal.strCalculationType == CalCalculation.strPerQuantity
                || cal.strCalculationType == CalCalculation.strPerQuantityBase)
                &&
                (cal.strByX == CalCalculation.strByResource) &&
                (cal.intnPkResourceElementBelongsTo == intPkResource_I) &&
                (cal.intnPkWorkflowBelongsTo == piwentity_I.intPkWorkflow) &&
                (cal.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId) &&
                (cal.intnPkElementElementTypeBelongsTo == intnPkEleet_I) &&
                (cal.intnPkElementElementBelongsTo == intnPkEleele_I) &&
                //                                          //Calculation is enable.
                cal.boolIsEnable &&
                //                                          //Calculation applies.
                Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I)).ToList();

            double numAcumCurrentResourceQuantity = 0.0;

            foreach (CalCalculation cal in darrcalFromDB)
            {
                int intStatus = 0;
                String strUserMessage = "";
                String strDevMessage = "";

                if (
                    cal.strCalculationType == CalCalculation.strPerQuantity
                    )
                {
                    bool boolQFromIsInThisJob = ProdtypProductType.boolQFromIsInThisWFJobOrEstimateData(
                        cal.intnPkResourceElementBelongsTo, cal.intnPkElementElementTypeBelongsTo,
                        cal.intnPkElementElementBelongsTo, cal.intnPkQFromResourceElementBelongsTo,
                        cal.intnPkQFromElementElementTypeBelongsTo, cal.intnPkQFromElementElementBelongsTo,
                        jobjson_I.intJobId, piwentity_I.intPk, intnEstimateIdThatInvokeThisMethod_I,
                        this.darriojsoninInputsCombinationsAndInputsSelected, this.dicProcessIOs);

                    if (
                        boolQFromIsInThisJob
                        )
                    {
                        //                                  //Find the Qfrom for this calculation.
                        int? intnPkQFromEleet = cal.intnPkQFromElementElementTypeBelongsTo;
                        int? intnPkQFromEleele = cal.intnPkQFromElementElementBelongsTo;
                        int intPkQfromResource = (int)cal.intnPkQFromResourceElementBelongsTo;

                        //                                  //Find Qfrom IO.
                        IoentityInputsAndOutputsEntityDB ioentityQfromRes = darrioentityAllIO_I.FirstOrDefault(
                            io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                            io.intnPkElementElementType == intnPkQFromEleet &&
                            io.intnPkElementElement == intnPkQFromEleele);

                        int? intnPkQfromRes = null;
                        String strQFromLink = null;
                        ProdtypProductType.subfunFindQFromResourceAndLink(intnPkQFromEleet, intnPkQFromEleele,
                            intPkQfromResource, jobjson_I.intJobId, ioentityQfromRes, piwentity_I,
                            darriojentityAllIOJ_I, this.darriojsoninInputsCombinationsAndInputsSelected,
                            out intnPkQfromRes, out strQFromLink);

                        if (
                            //                              //If QFrom Resource was found.
                            intnPkQfromRes != null
                            )
                        {
                            double numIOQuantityFromCalculation;
                            double numWasteCalculated;
                            double numIOQuantity = 0.0;
                            double numFactor;
                            double numQuantityWithoutWaste;
                            bool boolIsInputIO;
                            bool boolIsEleet;
                            EtentityElementTypeEntityDB etentityQFromRes;
                            int? intnPkEleet = null;
                            int? intnPkEleele = null;
                            if (
                                //                          //Find in ElementElementType
                                intnPkQFromEleet != null
                                )
                            {
                                EleetentityElementElementTypeEntityDB eleetentity =
                                    context.ElementElementType.FirstOrDefault(
                                    eleet => eleet.intPk == intnPkQFromEleet);
                                boolIsInputIO = eleetentity.boolUsage;
                                boolIsEleet = true;
                                intnPkEleet = intnPkQFromEleet;
                                etentityQFromRes = context.ElementType.FirstOrDefault(etentity =>
                                    etentity.intPk == eleetentity.intPkElementTypeSon);
                            }
                            else
                            //                              //Find in ElementElement
                            {
                                //                          //Find ElementElement resource.
                                EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(
                                    eleele => eleele.intPk == intnPkQFromEleele);

                                boolIsInputIO = eleeleentity.boolUsage;
                                boolIsEleet = false;
                                intnPkEleele = intnPkQFromEleet;

                                //                          //Find template of QFrom resource.
                                EleentityElementEntityDB eleentitytemplate = context.Element.FirstOrDefault(ele =>
                                    ele.intPk == eleeleentity.intPkElementSon);

                                etentityQFromRes = context.ElementType.FirstOrDefault(etentity =>
                                    etentity.intPk == eleentitytemplate.intPkElementType);
                            }

                            if (
                                //                          //QFrom Resource is input IO
                                boolIsInputIO
                                )
                            {
                                if (
                                    (etentityQFromRes.strCustomTypeId == ResResource.strMedia)
                                    )
                                {
                                    ResthkjsonResourceThicknessJson resthkjson = 
                                        this.darrresthkjsonResThickness.FirstOrDefault(
                                        resthk => resthk.intnPkEleet == intnPkEleet && 
                                        resthk.intnPkEleele == intnPkEleele &&
                                        resthk.intPkResource == (int)intnPkQfromRes &&
                                        resthk.intPkProcessInWorkflow == piwentity_I.intPk);

                                    if (
                                        //                          //The data is not in the list yet
                                        resthkjson == null
                                        )
                                    {
                                        double? numnWidth;
                                        double? numnLength;
                                        String strWidthUnit;
                                        String strLengthUnit;
                                        ProdtypProductType.subfunGetDimensions(intnPkEleet, intnPkEleele,
                                            (int)intnPkQfromRes, true, jobjson_I, piwentity_I, this, out numnWidth,
                                            out numnLength, out strWidthUnit, out strLengthUnit);

                                        this.subAddMediaDimensionsAndThickness(intnPkEleet, intnPkEleele, 
                                            piwentity_I.intPk, (int)intnPkQfromRes, etentityQFromRes.intPk, numnWidth,
                                            numnLength, strWidthUnit, strLengthUnit);
                                    }
                                }

                                if (
                                    (etentityQFromRes.strCustomTypeId == ResResource.strComponent)
                                    )
                                {
                                    this.subAddInputComponentDimensionsAndThickness(
                                        intnEstimateIdThatInvokeThisMethod_I, intnPkEleet, intnPkEleele,
                                        (int)intnPkQfromRes, strQFromLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                                        darrpiwentityProcessInJob_I);
                                }

                                //                          //Check if the Qfrom has already been analyzed and
                                //                          //      get its quantity from the list
                                IoqytjsonIOQuantityJson ioqytIOQuantity = darrioqytjsonIOQuantityInput_M.FirstOrDefault(
                                    ioqty => ioqty.intPkProcessInWorkflow == piwentity_I.intPk &&
                                    ioqty.intnPkEleet == intnPkQFromEleet && ioqty.intnPkEleele == intnPkQFromEleele &&
                                    ioqty.intnPkResource == intnPkQfromRes && ioqty.boolAreInput == true);

                                if (
                                    ioqytIOQuantity != null
                                    )
                                {
                                    //                      //Get waste of the Qfrom
                                    List<WstpropjsonWasteToPropagateJson> darrwstprop = darrwstpropjson_M.Where(wstprop =>
                                        wstprop.intPkProcessInWorkflow == piwentity_I.intPk &&
                                        wstprop.intnPkEleetSource == ioqytIOQuantity.intnPkEleet &&
                                        wstprop.intnPkEleeleSource == ioqytIOQuantity.intnPkEleele).ToList();

                                    //                      //Set to numIOQuantity the quantity that was obtained from
                                    //                      //      the ioqytIOQuantity
                                    numIOQuantity = ioqytIOQuantity.numQuantityIO;

                                    foreach (WstpropjsonWasteToPropagateJson wstprop in darrwstprop)
                                    {
                                        //                  //For each waste on the list subtract it from numIOQuantity
                                        numIOQuantity = numIOQuantity - wstprop.numWaste;
                                    }
                                }
                                else
                                {
                                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(
                                        ele => ele.intPk == intnPkQfromRes);

                                    bool boolAllowDecimal = true;
                                    if (
                                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                                        RestypResourceType.strResourceTypeParameter
                                        )
                                    {
                                        //                  //Get the current unit of measurement.
                                        ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                                            eleentity.intPk);

                                        boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                            (bool)valentity.boolnIsDecimal;
                                    }

                                    double numCostByResourceNotUsed = 0.0;
                                    List<WstjsonWasteJson> darrwstjsonWasteNotUsed = new List<WstjsonWasteJson>();

                                    this.subGetCostAndQuantityByResourceRecursive(intnEstimateIdThatInvokeThisMethod_I,
                                        intnPkQFromEleet, intnPkQFromEleele, (int)intnPkQfromRes, boolAllowDecimal,
                                        strQFromLink, jobentity_I, jobjson_I, piwentity_I, darrdynlkjson_I,
                                        darrioentityAllIO_I, darriojentityAllIOJ_I, darrpiwentityProcessInJob_I,
                                        darrioqytjsonIOQuantityInput_M, darrwstjsonWasteNotUsed, darrwstpropjson_M,
                                        ref numCostByResourceNotUsed, ref numIOQuantity, ref boolWorkflowJobIsReady_IO);
                                }

                                if (
                                    //                      //It is only calculated the quantity and cost for this IO
                                    //                      //      if the quantity of the QFromRes is greater than 0.
                                    numIOQuantity > 0
                                    )
                                {
                                    bool? boolnQFromIsSize = ioentityQfromRes != null ? ioentityQfromRes.boolnSize :
                                        null;

                                    //                      //Get the cost.
                                    //                      //cal is By Resource and PerQuantity.
                                    numCostByResource_IO = numCostByResource_IO + ProdtypProductType.
                                        numGetPerQuantityCost(cal, jobjson_I, numIOQuantity, boolUnitAllowDecimal_I,
                                        boolnQFromIsSize, piwentity_I.intPk, this.darrresthkjsonResThickness,
                                        out numQuantityWithoutWaste, out numIOQuantityFromCalculation,
                                        out numWasteCalculated, out numFactor, ref boolWorkflowJobIsReady_IO,
                                        ref intStatus, ref strUserMessage, ref strDevMessage);

                                    numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity +
                                        numIOQuantityFromCalculation;

                                    ProdtypProductType.subFillWasteDetail((int)intnPkQfromRes, boolIsEleet,
                                        numQuantityWithoutWaste, numIOQuantityFromCalculation, numWasteCalculated,
                                        numFactor, ioentityQfromRes, ref darrwstjsonWaste_M);

                                    WstpropjsonWasteToPropagateJson wstpropjsonWstToPropagate =
                                        new WstpropjsonWasteToPropagateJson(piwentity_I.intPk, intnPkEleet_I,
                                        intnPkEleele_I, intnPkQFromEleet, intnPkQFromEleele,
                                        numWasteCalculated.Round(2), numFactor);

                                    darrwstpropjson_M.Add(wstpropjsonWstToPropagate);
                                }
                            }
                            //                              //QFrom Resource is output IO
                            else
                            {
                                bool? boolnQFromIsSize = ioentityQfromRes != null ? ioentityQfromRes.boolnSize : null;

                                if (
                                    boolnQFromIsSize == true
                                    )
                                {
                                    this.subAddOutputComponentDimesionsAndThicknessFromJob(
                                        intnEstimateIdThatInvokeThisMethod_I, intnPkQFromEleet, intnPkQFromEleele,
                                        (int)intnPkQfromRes, jobjson_I, piwentity_I, darrdynlkjson_I,
                                        darrpiwentityProcessInJob_I);
                                }
                                else
                                {
                                    //PatransPaperTransformationEntityDB patransentity =
                                    //    this.darrpatransDependingJob.FirstOrDefault(pt => 
                                    //    pt.intnPkCalculationOwn == cal.intPk);

                                    //if (
                                    //    //                  //This calculation has a paper trasformation
                                    //    patransentity != null
                                    //    )
                                    //{
                                    //    this.subAddOutputComponentDimensionsAndThicknessWithPT(intnPkEleet_I,
                                    //        intnPkEleele_I, intnPkQFromEleet, intnPkQFromEleele, cal.intPk,
                                    //        piwentity_I.intPk, intPkResource_I, (int)intnPkQfromRes, etentityQFromRes,
                                    //        patransentity);
                                    //}
                                    List<ResthkjsonResourceThicknessJson> darrresthkjsonOtherSide =
                                       this.darrresthkjsonResThickness.Where(
                                       resthk => resthk.intnPkEleet == intnPkQFromEleet &&
                                       resthk.intnPkEleele == intnPkQFromEleele &&
                                       resthk.intPkResource == (int)intnPkQfromRes &&
                                       resthk.intPkProcessInWorkflow == piwentity_I.intPk).ToList();

                                    if (
                                        darrresthkjsonOtherSide.Count == 0
                                        )
                                    {
                                        this.subAddDimensionsAndThicknessRecursive(intnEstimateIdThatInvokeThisMethod_I,
                                            intnPkQFromEleet, intnPkQFromEleele, (int)intnPkQfromRes, true,
                                            jobjson_I, piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I);
                                    }    
                                }

                                IoqytjsonIOQuantityJson ioqytIOQuantity = darrioqytjsonIOQuantityInput_M.FirstOrDefault(
                                    ioqty => ioqty.intPkProcessInWorkflow == piwentity_I.intPk &&
                                    ioqty.intnPkEleet == intnPkQFromEleet && ioqty.intnPkEleele == intnPkQFromEleele &&
                                    ioqty.intnPkResource == intnPkQfromRes && ioqty.boolAreInput == false);

                                if (
                                    ioqytIOQuantity != null
                                    )
                                {
                                    numIOQuantity = ioqytIOQuantity.numQuantityIO;
                                }
                                else
                                {
                                    if (
                                        //                  //QFrom Resource is the final product.
                                        ioentityQfromRes.boolnIsFinalProduct == true
                                        )
                                    {
                                        String strLinkQF = ioentityQfromRes.strLink;
                                        if (
                                           //               //IO has Links.
                                           strLinkQF != null
                                           )
                                        {
                                            //              //Find name of the other side of the link.
                                            strLinkQF = this.strGetNameOtherSideOfTheLink(piwentity_I,
                                                ioentityQfromRes.intnPkElementElementType, null, strLinkQF,
                                                darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                                        }

                                        String strUnitNotUsed = null;
                                        ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, false,
                                            strLinkQF, ioentityQfromRes, jobjson_I, darrioqytjsonIOQuantityInput_M,
                                            ref numIOQuantity, ref strUnitNotUsed);
                                    }
                                    else
                                    {
                                        if (
                                           //               //IO output has Links.
                                           ioentityQfromRes.strLink != null
                                           )
                                        {
                                            //              //Take the quantity from next process linked input
                                            //              //Get Quantity'info of the NEXT PIW for this IO 
                                            //              //      with Link.
                                            String strLinkNewNotUsed = ioentityQfromRes.strLink;

                                            this.subGetQuantityFromIOWithLinkInTheOutput(
                                                intnEstimateIdThatInvokeThisMethod_I, intnPkQFromEleet,
                                                intnPkQFromEleele, (int)intnPkQfromRes, jobentity_I, jobjson_I,
                                                piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I,
                                                darrioqytjsonIOQuantityInput_M, darrwstpropjson_M, ref numIOQuantity,
                                                ref boolWorkflowJobIsReady_IO, ref strLinkNewNotUsed);
                                        }
                                        else if (
                                           //               //IO output do not has Links.
                                           ioentityQfromRes.strLink == null
                                           )
                                        {
                                            //              //Work with Transform calculation.
                                            this.subGetQuantityFromTransformCalculation(piwentity_I, jobjson_I,
                                                intnPkQFromEleet, intnPkQFromEleele, (int)intnPkQfromRes,
                                                ref numIOQuantity, ref darrioqytjsonIOQuantityInput_M);
                                        }
                                    }
                                }

                                if (
                                    //                      //it is only calculated the quantity and cost for this IO
                                    //                      //      if the quantity of the QFromRes is greater than 0.
                                    numIOQuantity > 0
                                    )
                                {
                                    //                      //Get the cost.
                                    numCostByResource_IO = numCostByResource_IO + ProdtypProductType.
                                        numGetPerQuantityCost(cal, jobjson_I, numIOQuantity, boolUnitAllowDecimal_I,
                                        boolnQFromIsSize, piwentity_I.intPk, this.darrresthkjsonResThickness,
                                        out numQuantityWithoutWaste, out numIOQuantityFromCalculation,
                                        out numWasteCalculated, out numFactor, ref boolWorkflowJobIsReady_IO,
                                        ref intStatus, ref strUserMessage, ref strDevMessage);

                                    numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity +
                                        numIOQuantityFromCalculation;

                                    WstjsonWasteJson wstjsonWaste = new WstjsonWasteJson(numQuantityWithoutWaste.
                                        Round(2), numWasteCalculated.Round(2), numIOQuantityFromCalculation.Round(2),
                                        null, "-", "-");

                                    darrwstjsonWaste_M.Add(wstjsonWaste);

                                    WstpropjsonWasteToPropagateJson wstpropjsonWstToPropagate = new
                                        WstpropjsonWasteToPropagateJson(piwentity_I.intPk, intnPkEleet_I,
                                        intnPkEleele_I, null, null, numWasteCalculated.Round(2), numFactor);

                                    darrwstpropjson_M.Add(wstpropjsonWstToPropagate);
                                }
                            }
                        }
                    }
                }
                else
                {
                    numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity + (double)cal.numnNeeded;
                }
            }

            if (
                //                                          //The resource quantity is greater than 0
                numAcumCurrentResourceQuantity > 0
                )
            {
                //                                          //Obtain the cost.
                double? numnCalculationCost = 0.0;
                double? numnCalculationQuantity = 0.0;
                double? numnCalculationMin = 0.0;
                double? numnCalculationBlock = 0.0;

                //                                          //Get resource cost data
                ProdtypProductType.subGetResourceCostData(intPkResource_I, jobjson_I.intJobId, ref numnCalculationCost,
                    ref numnCalculationQuantity, ref numnCalculationMin, ref numnCalculationBlock);

                //                                          //Use minToUse
                ProdtypProductType.subGetNewQuantityDependingMinToUse(boolUnitAllowDecimal_I, numnCalculationMin,
                    numnCalculationBlock, ref numAcumCurrentResourceQuantity);

                double numCostPerUnit = 0.0;
                if (
                    ((numnCalculationCost != null) && (numnCalculationCost > 0)) &&
                    ((numnCalculationQuantity != null) && (numnCalculationQuantity > 0))
                    )
                {
                    numCostPerUnit = (double)numnCalculationCost / (double)numnCalculationQuantity;

                    //                                      //Obtaining the cost.
                    numCostByResource_IO = (numAcumCurrentResourceQuantity * numCostPerUnit).Round(2);
                }
            }
            else
            {
                numCostByResource_IO = 0;
            }

            if (
                //                                          //IO has Links.
                strLink_I != null && darrpiwentityProcessInJob_I != null
                )
            {
                //                                          //Find name of the other side of the link.
                strLink_I = this.strGetNameOtherSideOfTheLink(piwentity_I, intnPkEleet_I, intnPkEleele_I, strLink_I,
                    darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
            }

            //                                              //Save info current IO in the list for Optimization.
            IoqytjsonIOQuantityJson ioqytjsonCurrentIO = new IoqytjsonIOQuantityJson(piwentity_I.intPk, intnPkEleet_I,
                intnPkEleele_I, intPkResource_I, numAcumCurrentResourceQuantity, numCostByResource_IO, true, strLink_I,
                darrwstjsonWaste_M.ToArray());
            darrioqytjsonIOQuantityInput_M.Add(ioqytjsonCurrentIO);

            numQuantity_IO = numAcumCurrentResourceQuantity;

            numQuantity_IO = numQuantity_IO.Round(2);
            numCostByResource_IO = numCostByResource_IO.Round(2);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolQFromIsInThisWFJobOrEstimateData(
            //                                              //Return if the qfrom exist in the wfJob of in the 
            //                                              //    estimationData considering grpResources.

            int? intnPkResourceElementBelongsTo_I,
            int? intnPkElementElementTypeBelongsTo_I,
            int? intnPkElementElementBelongsTo_I,
            int? intnPkQFromResourceElementBelongsTo_I,
            int? intnPkQFromElementElementTypeBelongsTo_I,
            int? intnPkQFromElementElementBelongsTo_I,
            int intJobId_I,
            int intPkProcesInWorkflow_I,
            //                                              //id != null if this was called from estimate.
            //                                              //id == null if this was called from WF job.
            int? intnEstimateIdThatInvokeThisMethod_I,
            List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsGenerateWithOptions_I,
            Dictionary<int, List<Iofrmpiwjson2IOFromPIWJson2>> dicProcessIOs_I
            )
        {

            bool boolQFromIsInThisWFJobOrEstimateData = true;

            if (
                (intnPkResourceElementBelongsTo_I != null &&
                (intnPkElementElementTypeBelongsTo_I != null ||
                intnPkElementElementBelongsTo_I != null) &&
                intnPkQFromResourceElementBelongsTo_I != null &&
                (intnPkQFromElementElementTypeBelongsTo_I != null ||
                intnPkQFromElementElementBelongsTo_I != null))
                )
            {
                Odyssey2Context context = new Odyssey2Context();

                int intPkEleetOrEleele = (int)(intnPkElementElementTypeBelongsTo_I != null ?
                    intnPkElementElementTypeBelongsTo_I : intnPkElementElementBelongsTo_I);
                bool boolIsEleet = intnPkElementElementTypeBelongsTo_I != null ? true : false;
                int intPkResource = (int)intnPkResourceElementBelongsTo_I;

                int intPkEleetOrEleeleQFrom = (int)(intnPkQFromElementElementTypeBelongsTo_I != null ?
                    intnPkQFromElementElementTypeBelongsTo_I : intnPkQFromElementElementBelongsTo_I);
                bool boolIsEleetQFrom = intnPkQFromElementElementTypeBelongsTo_I != null ? true : false;
                int intPkResourceQFrom = (int)intnPkQFromResourceElementBelongsTo_I;

                //                                          //List Of process inputs and outputs.
                List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjsonIosFromPIW = dicProcessIOs_I.FirstOrDefault(
                    piw => piw.Key == intPkProcesInWorkflow_I).Value;

                if (
                    //                                      //Valid that res exist in qFrom list.
                    darrioinfrmpiwjsonIosFromPIW.Exists(io =>
                    io.boolIsEleet == boolIsEleetQFrom &&
                    io.intPkEleetOrEleele == intPkEleetOrEleeleQFrom &&
                    io.intPkResource == intPkResourceQFrom)
                    )
                {
                    boolQFromIsInThisWFJobOrEstimateData = true;
                }
                else
                {
                    if (
                        //                                  //this was called in some method from estimations.
                        intnEstimateIdThatInvokeThisMethod_I != null
                        )
                    {
                        //                                  //Find in estimationData.
                        //                                  //Get Estimation Data.
                        EstdataentityEstimationDataEntityDB estdataentity = context.EstimationData.FirstOrDefault(
                            estdata => estdata.intId == intnEstimateIdThatInvokeThisMethod_I &&
                            estdata.intJobId == intJobId_I &&
                            estdata.intPkProcessInWorkflow == intPkProcesInWorkflow_I &&
                            estdata.intnPkElementElementType == (boolIsEleetQFrom ? (int?)intPkEleetOrEleeleQFrom : null) &&
                            estdata.intnPkElementElement == (!boolIsEleetQFrom ? (int?)intPkEleetOrEleeleQFrom : null) &&
                            estdata.intPkResource == intPkResourceQFrom);

                        boolQFromIsInThisWFJobOrEstimateData = estdataentity != null ? true : false;
                    }
                    else
                    {
                        boolQFromIsInThisWFJobOrEstimateData = false;

                        //                                  //Find in the list that was generate in options
                        //                                  //    for io that has a resource group.
                        if (
                            darriojsoninInputsGenerateWithOptions_I != null
                            )
                        {
                            boolQFromIsInThisWFJobOrEstimateData = darriojsoninInputsGenerateWithOptions_I.Exists(io =>
                                io.intPkPIW == intPkProcesInWorkflow_I &&
                                io.intnPkElementElement == (!boolIsEleetQFrom ? (int?)intPkEleetOrEleeleQFrom : null) &&
                                io.intnPkElementElementType == (boolIsEleetQFrom ? (int?)intPkEleetOrEleeleQFrom : null) &&
                                io.intPkResource == intPkResourceQFrom);
                        }
                    }
                }
            }
            return boolQFromIsInThisWFJobOrEstimateData;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subfunFindQFromResourceAndLink(

            int? intnPkQFromEleet_I,
            int? intnPkQFromEleele_I,
            int intPkQfromResource_I,
            int intJobId_I,
            IoentityInputsAndOutputsEntityDB ioentityQfromRes_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            List<IojsoninInputOrOutputJsonInternal> darriojsoninInputsGenerateWithOptions_I,
            out int? intnPkQfromRes_O,
            out String strQFromLink_O
            )
        {
            intnPkQfromRes_O = null;
            strQFromLink_O = null;

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            if (
                //                                          //If QFrom IO is in InputsAndOutputs
                ioentityQfromRes_I != null
                )
            {
                if (
                    //                                      //If QFrom IO has a GroupResource
                    ioentityQfromRes_I.intnGroupResourceId != null
                    )
                {
                    EstdataentityEstimationDataEntityDB estdata = context.EstimationData.FirstOrDefault(
                        estdata => estdata.intPkProcessInWorkflow == piwentity_I.intPk &&
                        estdata.intnPkElementElementType == intnPkQFromEleet_I &&
                        estdata.intnPkElementElement == intnPkQFromEleele_I &&
                        estdata.intPkResource == intPkQfromResource_I);

                    intnPkQfromRes_O = estdata != null ? (int?)estdata.intPkResource : null;

                    if (
                        //                                  //The resource was not found.
                        intnPkQfromRes_O == null &&
                        //                                  //There are options of the resource generated.
                        darriojsoninInputsGenerateWithOptions_I != null
                        )
                    {
                        //                                  //Find in the list that was generate in options
                        //                                  //    for io that has a resource group.
                        IojsoninInputOrOutputJsonInternal iojsonin =
                            darriojsoninInputsGenerateWithOptions_I.FirstOrDefault(io =>
                            io.intPkPIW == piwentity_I.intPk &&
                            io.intnPkElementElement == intnPkQFromEleele_I &&
                            io.intnPkElementElementType == intnPkQFromEleet_I &&
                            io.intPkResource == intPkQfromResource_I);

                        intnPkQfromRes_O = iojsonin != null ? (int?)iojsonin.intPkResource : null;
                    }
                }
                else
                //                                          //If QFrom IO has not a GroupResource
                {
                    //                                      //Obtain the resource
                    intnPkQfromRes_O = ioentityQfromRes_I.intnPkResource;
                }

                strQFromLink_O = ioentityQfromRes_I.strLink;
            }

            if (
                //                                          //If QFrom resource was not found in InputsAndOutputs
                intnPkQfromRes_O == null
                )
            {
                //                                          //Find QFrom IO   
                IojentityInputsAndOutputsForAJobEntityDB ioentityQfromResForAJob =
                   darriojentityAllIOJ_I.FirstOrDefault(iofaj =>
                   //                                       //Job is important! Added 2020/02/02! LGF.
                   iofaj.intJobId == intJobId_I &&
                   iofaj.intPkProcessInWorkflow == piwentity_I.intPk &&
                   iofaj.intnPkElementElementType == intnPkQFromEleet_I &&
                   iofaj.intnPkElementElement == intnPkQFromEleele_I);

                if (
                    //                                      //If QFrom resource was set directly in the job 
                    ioentityQfromResForAJob != null
                    )
                {
                    intnPkQfromRes_O = ioentityQfromResForAJob.intPkResource;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subAddOutputComponentDimesionsAndThicknessFromJob(
            //                                              //Add dimensions and thickness of the an output component 
            //                                              //      from job in darrresthkjsonResThickness list.

            int? intnEstimateIdThatInvokeThisMethod_I,
            int? intnPkEleetQFrom_I,
            int? intnPkEleeleQFrom_I,
            int intPkResourceQFrom_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I
            )
        {
            ResthkjsonResourceThicknessJson resthkjsonOutput = this.darrresthkjsonResThickness.FirstOrDefault(
                resthk => resthk.intnPkEleet == intnPkEleetQFrom_I && resthk.intnPkEleele == intnPkEleeleQFrom_I &&
                resthk.intPkProcessInWorkflow == piwentity_I.intPk &&
                resthk.intPkResource == intPkResourceQFrom_I);

            if (
                resthkjsonOutput == null
                )
            {
                int intStatus = 200;
                String strUserMessage = "";
                String strDevMessage = "";
                //                                          //Get output dimensions from Job.
                double numWidthOFromJob = 0.0;
                double numLengthOFromJob = 0.0;
                String strDimensionsFromJob = "";
                double? numnLengthOFromJob = 0.0;
                CalCalculation.subGetWidthAndLengthOutput(jobjson_I, null, ref numWidthOFromJob,
                    ref numnLengthOFromJob, ref strDimensionsFromJob, ref intStatus, ref strUserMessage,
                    ref strDevMessage);
                numLengthOFromJob = (double)numnLengthOFromJob;

                if (
                    intStatus == 200
                    )
                {
                    String strMediaUnit = null;
                    double? numnThickness = null;
                    String strThicknessUnit = null;

                    List<PatransPaperTransformationEntityDB> darrpatransentity = this.darrpatransDependingJob.Where(
                        patrans => patrans.intPkProcessInWorkflow == piwentity_I.intPk &&
                        patrans.intnPkElementElementTypeO == intnPkEleetQFrom_I &&
                        patrans.intnPkElementElementO == intnPkEleeleQFrom_I &&
                        patrans.intnPkCalculationOwn != null).ToList();

                    //                                      //Get the Paper Transformations that apply.
                    List<PatransPaperTransformationEntityDB> darrpatransentityApplyOutput;
                    this.GetPaperTransformationApplyOutput(intnEstimateIdThatInvokeThisMethod_I,
                        jobjson_I, piwentity_I, darrpatransentity, out darrpatransentityApplyOutput);

                    if (
                        darrpatransentityApplyOutput.Count == 1
                        )
                    {
                        //                                  //Easy code
                        int? intnPkEleetInput = darrpatransentityApplyOutput[0].intnPkElementElementTypeI;
                        int? intnPkEleeleInput = darrpatransentityApplyOutput[0].intnPkElementElementI;
                        int intPkResourceInput = darrpatransentityApplyOutput[0].intPkResourceI;
                        int? intnPkEleetOutput = intnPkEleetQFrom_I;
                        int? intnPkEleeleOutput = intnPkEleeleQFrom_I;
                        int intPkResourceOutput = intPkResourceQFrom_I;
                        int intFoldFactor = darrpatransentityApplyOutput[0].intFoldFactor;
                        int intPkCalculation = (int)darrpatransentityApplyOutput[0].intnPkCalculationOwn;

                        ResthkjsonResourceThicknessJson resthkjsonInput =
                            this.darrresthkjsonResThickness.FirstOrDefault(resthk =>
                            resthk.intnPkEleet == intnPkEleetInput && resthk.intnPkEleele == intnPkEleeleInput &&
                            resthk.intPkProcessInWorkflow == piwentity_I.intPk &&
                            resthk.intPkResource == intPkResourceInput);

                        if (
                            //                              //Input resource thickness already exists in 
                            //                              //      darrresthkjsonResThickness list
                            resthkjsonInput != null
                            )
                        {
                            numnThickness = resthkjsonInput.numnThickness * intFoldFactor;
                            strThicknessUnit = resthkjsonInput.strThicknessUnit;
                            strMediaUnit = resthkjsonInput.strWidthUnit;
                        }
                        else
                        //                                  //Input resource thickness does not exist yet
                        {
                            //                              //Get Input resource thickness
                            this.subAddDimensionsAndThicknessRecursive(intnEstimateIdThatInvokeThisMethod_I,
                                intnPkEleetInput, intnPkEleeleInput, intPkResourceInput, false, jobjson_I,
                                piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I);

                            //                              //Check if the thickness of the input resource has already
                            //                              //      been added
                            resthkjsonInput = this.darrresthkjsonResThickness.FirstOrDefault(resthk =>
                                resthk.intnPkEleet == intnPkEleetInput && resthk.intnPkEleele == intnPkEleeleInput &&
                                resthk.intPkProcessInWorkflow == piwentity_I.intPk &&
                                resthk.intPkResource == intPkResourceInput);

                            if (
                                //                          //Input resource thickness already exists in 
                                //                          //      darrresthkjsonResThickness list
                                resthkjsonInput != null
                                )
                            {
                                //                          //Calculate thickness using factor
                                numnThickness = resthkjsonInput.numnThickness * intFoldFactor;
                                strThicknessUnit = resthkjsonInput.strThicknessUnit;
                                strMediaUnit = resthkjsonInput.strWidthUnit;
                            }
                        }
                    }

                    double? numnWidth = numWidthOFromJob;
                    String strWidthUnit = strDimensionsFromJob;
                    double? numnLength = numLengthOFromJob;
                    String strLengthUnit = strDimensionsFromJob;

                    if (
                        strMediaUnit != null && strMediaUnit != "Undetermined"
                        )
                    {
                        numnWidth = CvtConvert.to((double)numnWidth, strWidthUnit, strMediaUnit);
                        strWidthUnit = strMediaUnit;

                        numnLength = CvtConvert.to((double)numnLength, strLengthUnit, strMediaUnit);
                        strLengthUnit = strWidthUnit;
                    }

                    //                                      //Store resource thickness
                    this.darrresthkjsonResThickness.Add(
                        new ResthkjsonResourceThicknessJson(intnPkEleetQFrom_I, intnPkEleeleQFrom_I, null,
                        piwentity_I.intPk, intPkResourceQFrom_I, false, true, numnThickness, strThicknessUnit,
                        numnWidth, strWidthUnit, numnLength, strLengthUnit)
                        );
                }
                else
                {
                    //                                      //Store resource thickness
                    this.darrresthkjsonResThickness.Add(
                        new ResthkjsonResourceThicknessJson(intnPkEleetQFrom_I, intnPkEleeleQFrom_I, null,
                        piwentity_I.intPk, intPkResourceQFrom_I, false, true, null, null, null, null, null, null)
                        );
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolIsConditionQtyValidToCalculation(
            //                                              //Verify if job's quantity is valid vs quantity conditions.
            //                                              //Return true, if valid.

            int? intnMinQty_I,
            int? intnMaxQty_I,
            int intJobQuantity_I
            )
        {

            int? intnMinQty = intnMinQty_I;
            int? intnMaxQty = intnMaxQty_I;

            bool boolConditionQtyValid = false;

            /*CASE*/
            if (
                intnMinQty == null && intnMaxQty == null
                )
            {
                boolConditionQtyValid = true;
            }
            else if (
                intnMinQty == null && intnMaxQty != null
                )
            {
                boolConditionQtyValid = (intJobQuantity_I <= intnMaxQty) ? true : false;
            }
            else if (
                intnMinQty != null && intnMaxQty == null
                )
            {
                boolConditionQtyValid = (intJobQuantity_I >= intnMinQty) ? true : false;
            }
            else if (
                intnMinQty != null && intnMaxQty != null
                )
            {
                boolConditionQtyValid = (intJobQuantity_I >= intnMinQty && intJobQuantity_I <= intnMaxQty) ? true :
                    false;
            }
            /*END-CASE*/

            return boolConditionQtyValid;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

        private static void subFillWasteDetail(
            int intnPkQfromRes_I,
            bool boolIsEleet_I,
            double numQuantityWithoutWaste_I,
            double numIOQuantityFromCalculation_I,
            double numWasteCalculated_I,
            double numFactor_I,
            IoentityInputsAndOutputsEntityDB ioentityQfromRes_I,
            ref List<WstjsonWasteJson> darrwstjsonWaste_M
            )
        {

            Odyssey2Context context = new Odyssey2Context();
            //                                              //Find QFrom resource.
            EleentityElementEntityDB eleentityqfrom = context.Element.FirstOrDefault(ele =>
                ele.intPk == intnPkQfromRes_I);

            String strQFromResName = eleentityqfrom.strElementName;

            //                                              //QFrom unit of measurement.
            String strResQFromUnit = ProdtypProductType.strUnitFromEleentityResource(eleentityqfrom);

            //                                              //Find QFrom resource type.
            EtElementTypeAbstract eletqfrom = EletemElementType.etFromDB(eleentityqfrom.intPkElementType);

            String strTarget;
            //                                              //QFrom Resource is ElementElementType
            if (
                boolIsEleet_I
                )
            {
                //                                          //Type and resource concatenation.
                strTarget = "(" + eletqfrom.strXJDFTypeId + ") " + strQFromResName;
            }
            //                                              //QFrom Resource is ElementElement
            else
            {
                //                                          //Find ElementElement resource.
                EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(
                    eleele => eleele.intPk == ioentityQfromRes_I.intnPkElementElement);

                //                                          //Find template of QFrom resource.
                EleentityElementEntityDB eleentitytemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);

                //                                          //Type, template and resource concatenation.
                strTarget = "(" + eletqfrom.strXJDFTypeId + " : " +
                    eleentitytemplate.strElementName + ") " + strQFromResName;
            }

            double numWasteToPropagate = 0;
            if (
                numWasteCalculated_I > 0
                )
            {
                numWasteToPropagate = (numWasteCalculated_I / numFactor_I);
            }

            WstjsonWasteJson wstjsonWaste = new WstjsonWasteJson(numQuantityWithoutWaste_I.Round(2),
                numWasteCalculated_I.Round(2), numIOQuantityFromCalculation_I.Round(2), numWasteToPropagate.Round(2),
                strResQFromUnit, strTarget);

            darrwstjsonWaste_M.Add(wstjsonWaste);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetJobPriceCostAndProfit(
            //                                              //To get the price of a Job.

            //                                              //Job's ID.
            ProdtypProductType prodtyp_I,
            JobjsonJobJson jobjson_I,
            double numCostByProduct_I,
            List<Piwjson1ProcessInWorkflowJson1> darrpiwjson1_I,
            int intPkWorkflow_I,
            ref double numPrice_IO,
            ref double numCost_IO,
            //                                              //Cost due to the hourly rate.
            double numExtraCost_I,
            ref double numProfit_IO,

            ref double numFinalCost_IO,

            ref double numFinalProfit_IO
            )
        {
            numCost_IO = numCost_IO + numCostByProduct_I;

            foreach (Piwjson1ProcessInWorkflowJson1 piwjson1 in darrpiwjson1_I)
            {
                numCost_IO = numCost_IO + piwjson1.numCostByProcess;

                foreach (Iojson1InputOrOutputJson1 iojson1 in piwjson1.arrresortypInput)
                {
                    if (
                        //                                  //Is an input without link.
                        iojson1.strLink == null
                        )
                    {
                        numCost_IO = numCost_IO + iojson1.numCostByResource;
                    }
                }
            }

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get last price.
            List<PriceentityPriceEntityDB> darrprice = context.Price.Where(price =>
                price.intJobId == jobjson_I.intJobId && price.intnPkWorkflow == intPkWorkflow_I).ToList();
            darrprice.Sort();

            if (
                //                                          //Last price exists and it is diferent to the calculated.
                (darrprice.Count() > 0) &&
                (darrprice[0].numnPrice != null)
                )
            {
                numPrice_IO = (double)darrprice[0].numnPrice;
            }
            else
            {
                //                                          //Keep the calculated cost.
                numPrice_IO = numCost_IO;
                double numCostProfitable = numCost_IO - numExtraCost_I;
                double numCostNonProfitable = numExtraCost_I;

                //                                          //Get profit calculation.
                CalentityCalculationEntityDB calentity = context.Calculation.FirstOrDefault(cal =>
                    cal.intnPkProduct == prodtyp_I.intPk && cal.strCalculationType == CalCalculation.strProfit &&
                    cal.boolIsEnable == true);

                if (
                    //                                      //There is a profit calculation.
                    calentity != null
                    )
                {
                    //                                      //Get the price.
                    numProfit_IO = (double)calentity.numnProfit / 100;
                    numPrice_IO = numCostProfitable * (1 + numProfit_IO) + numCostNonProfitable;

                    if (
                        numPrice_IO == 0
                        )
                    {
                        //                                  //If there is no price there is no profit
                        numProfit_IO = 0;
                    }
                }
            }

            if (
                numCost_IO > 0
                )
            {
                //                                          //Calculate profit.
                numProfit_IO = ((numPrice_IO - numCost_IO) / numCost_IO * 100);

                //                                          //Profit with 2 decimal.
                String strProfitTo2Decimal = numProfit_IO.ToString("#.00");
                numProfit_IO = strProfitTo2Decimal.ParseToNum();
            }

            if (
                numFinalCost_IO > 0
                )
            {
                numFinalProfit_IO = ((numPrice_IO - numFinalCost_IO) / numFinalCost_IO) * 100;
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] arriojson1GetTypesPostProcess(
            //                                              //Get the inputs and output for the given process according
            //                                              //      with the boolean from the types and the cost and 
            //                                              //      quantity if the resource has associated 
            //                                              //      calculations.


            bool boolAreInputs_I,
            String strPrintshopId_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            IConfiguration configuration_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            ref double numJobFinalCost_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = darreleetentityAll_I.Where(
                eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            //                                              //To fill an return.
            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                String strUnit = null;
                bool boolUnitAllowDecimal = true;
                bool? boolnIsCalendar = null;
                bool boolOneResource = false;
                bool boolHasNotResource = true;
                //                                          //Calculated data for final resource.
                bool? boolnIsAvailable = null;
                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                //                                          //Needed data to resource time.
                int intHours = 0;
                int intMinutes = 0;
                int intSeconds = 0;
                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size.
                bool? boolnSize = null;
                String strDimensionsAndThickness = "";

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == eleetentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;

                    //                                      //Set size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        //                                  //Get the unit of the resource.
                        if (
                            //                              //Comment missing!
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = jobentity_I != null ?
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                            if (
                                valentity != null
                                )
                            {
                                strUnit = valentity.strValue;
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }

                        String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);
                        strResource = strResourceName;
                        intnPkResource = eleentity.intPk;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolOneResource = true;
                        boolHasNotResource = false;
                    }

                    if (
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        boolOneResource = false;
                        boolHasNotResource = false;
                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == eleetentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = jobentity_I != null ?
                        //                                  //Get unit depends job's date.
                        valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                        //                                  //Get the current unit of measurement.
                        valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                        if (
                            valentity != null
                            )
                        {
                            strUnit = valentity.strValue;
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                        }
                    }

                    String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);
                    strResource = strResourceName;
                    intnPkResource = eleentity.intPk;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                }

                //                                          //Get the restype.
                EtentityElementTypeEntityDB etentityResType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleetentity.intPkElementTypeSon);

                if (
                    intnPkResource != null
                    )
                {
                    if (
                        //                                  //IO Input.
                        boolAreInputs_I
                        )
                    {
                        if (
                            //                              //IO has not Links.
                            strLink == null
                            )
                        {
                            //                              //Work with calculation From Quantity.
                            //                              //Get cost and quantity.
                            this.subGetCostAndQuantityByResourceRecursivePostProcess(null, eleetentity.intPk, null,
                                (int)intnPkResource, boolUnitAllowDecimal, jobentity_I, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrioentityAllIO_I, darrpiwentityProcessInJob_I,
                                darrioqytjsonIOQuantity_M, ref numCostByResource, ref numQuantity);

                            //                              //GetFinalCost for each IO without link in the input.
                            if (
                                jobentity_I != null &&
                                (jobentity_I.intStage == JobJob.intCompletedStage)
                                )
                            {
                                //                          //Get the final cost if it exists for this calculation.
                                List<FnlcostentityFinalCostEntityDB> darrfnlcostentity = context.FinalCost.Where(
                                    fnl => fnl.intPkJob == jobentity_I.intPk &&
                                    fnl.intPkProcessInWorkflow == piwentity_I.intPk &&
                                    fnl.intnPkElementElementType == eleetentity.intPk &&
                                    fnl.intnPkElementElement == null &&
                                    fnl.intnPkResource == intnPkResource).ToList();
                                darrfnlcostentity.Sort();

                                if (
                                    //                      //Find the final cost.
                                    darrfnlcostentity.Count > 0
                                    )
                                {
                                    //                      //Get the last final cost.
                                    FnlcostentityFinalCostEntityDB fnlcostentity = darrfnlcostentity.Last();
                                    if (
                                        fnlcostentity.numnCost != null
                                        )
                                    {
                                        numJobFinalCost_IO = numJobFinalCost_IO + (double)fnlcostentity.numnCost;
                                    }
                                    else
                                    {
                                        if (
                                            numQuantity > 0
                                            )
                                        {
                                            numJobFinalCost_IO = numJobFinalCost_IO +
                                                ((numCostByResource / numQuantity) *
                                                (double)fnlcostentity.numnQuantity);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (
                                //                              //This io is set as a final product.
                                ioentity != null && ioentity.boolnIsFinalProduct == true
                                )
                            {
                                this.subAddInputComponentDimensionsAndThickness(null, eleetentity.intPk, null,
                                    (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                                    darrpiwentityProcessInJob_I);

                                //                              //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                                    strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);

                                //                              //Take the quantity from job and and store in the 
                                //                              //      quantity list for this IO.
                                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                    strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity,
                                    ref strUnit);
                            }
                            else
                            {
                                //                              //IO has Links.
                                //                              //Get Quantity info of the previously PIW for each IO
                                //                              //    for the PIW previously.

                                String strLinkNew;
                                this.subGetQuantityFromIOWithLinkInTheInput(ioentity.intnPkElementElementType,
                                    ioentity.intnPkElementElement, (int)intnPkResource, strLink, jobentity_I, jobjson_I,
                                    piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I, out strLinkNew,
                                    darrioqytjsonIOQuantity_M, ref numQuantity);
                                strLink = strLinkNew;
                            }
                        }
                    }
                    else
                    {
                        if (
                            //                              //IO has Links.
                            strLink != null
                            )
                        {
                            //                              //Find name of the other side of the link.
                            strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                                strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                        }

                        //                                  //boolAreInputs_I is false, means:
                        //                                  //IO Output.
                        //                                  //Work with Transform calculation.
                        this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
                            eleetentity.intPk, null, (int)intnPkResource, strLink, ref numQuantity,
                            ref darrioqytjsonIOQuantity_M);
                    }

                    if (
                        (etentityResType.strCustomTypeId == ResResource.strMedia) ||
                        (etentityResType.strCustomTypeId == ResResource.strComponent)
                        )
                    {
                        strDimensionsAndThickness = this.strDimensionsAndThickness(eleetentity.intPk, null,
                            (int)intnPkResource, numQuantity, strUnit, piwentity_I);
                    }

                    //                                      //Get availability for cal.
                    if (
                        boolnIsCalendar == true
                        )
                    {
                        List<PerentityPeriodEntityDB> darrperentity = context.Period.Where(perentity =>
                            perentity.intJobId == jobjson_I.intJobId &&
                            perentity.intPkWorkflow == piwentity_I.intPkWorkflow &&
                            perentity.intProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                            perentity.intnPkElementElementType == eleetentity.intPk &&
                            perentity.intnEstimateId == null).ToList();

                        boolnIsAvailable = darrperentity.Count >= 1 ? true : false;
                    }
                }
                else
                {
                    if (
                        //                                  //IO has Links.
                        strLink != null
                        )
                    {
                        //                                  //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                            strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                    }
                }

                bool boolIsPhysical = RestypResourceType.boolIsPhysical(etentityResType.strClassification);
                bool boolIsPaper =
                    (etentityResType.strCustomTypeId == ResResource.strComponent) ||
                    (etentityResType.strCustomTypeId == ResResource.strMedia);

                bool boolIsCustom = etentityResType.strXJDFTypeId == "None";
                String strName = (boolIsCustom) ? etentityResType.strCustomTypeId : etentityResType.strXJDFTypeId;

                //                                          //Verify if Unit allow or not Decimal.
                numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                //                                          //To know if is a Device or MiscConsumable.
                bool boolIsDeviceOrMiscConsumable =
                    (etentityResType.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                    etentityResType.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                bool boolThickness = ioentity != null ?
                    (ioentity.boolnThickness != null ? (bool)ioentity.boolnThickness : false) : false;

                //                                          //Only an input IO can be final product in a post process
                bool? boolnIsFinalProduct = boolAreInputs_I ? (ioentity?.boolnIsFinalProduct) : null;

                //                                          //Json to return.
                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(etentityResType.intPk, null,
                    eleetentity.intPk, true, strName, strResource, strLink, intnPkResource, numQuantity, strUnit,
                    numCostByResource, boolIsPhysical, boolnIsCalendar, boolnIsAvailable, intHours, intMinutes,
                    intSeconds, boolAutomaticallySet, boolOneResource, boolHasNotResource, boolIsCustom, boolIsPaper,
                    boolnIsFinalProduct, boolUnitAllowDecimal, null, null, strDimensionsAndThickness,
                    boolIsDeviceOrMiscConsumable, boolnSize, boolThickness);

                darriojson1.Add(iojson1);
            }

            return darriojson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] arriojson1GetTemplatesPostProcess(
            //                                              //Get the inputs and outputs for the given process according
            //                                              //      with the boolean from the types.

            bool boolAreInputs_I,
            String strPrintshopId_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleeleentityElementElementEntityDB> darreleeleentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            IConfiguration configuration_I,
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            ref double numJobFinalCost_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantityNoUsed =
                                            new List<IoqytjsonIOQuantityJson>();

            //                                              //Get the inputs/outputs types.
            List<EleeleentityElementElementEntityDB> darreleeleentity = darreleeleentityAll_I.Where(eleele =>
                eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I).ToList();

            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();
            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                //                                          //Template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);

                EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                String strUnit = null;
                bool boolUnitAllowDecimal = true;
                bool? boolnIsCalendar = null;
                bool boolOneResource = false;
                bool boolHasNotResource = true;
                //                                          //Calculated data for final resource.
                bool? boolnIsAvailable = null;
                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                String strName = (etentityType.strXJDFTypeId == "None") ? etentityType.strCustomTypeId :
                    etentityType.strXJDFTypeId;
                String strTypeAndTemplate = strName + " : " + eleentityTemplate.strElementName;
                //                                          //Needed data to resource time.
                int intHours = 0;
                int intMinutes = 0;
                int intSeconds = 0;
                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size.
                bool? boolnSize = null;
                String strDimensionsAndThickness = "";

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == eleeleentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set link.
                    strLink = ioentity.strLink;

                    //                                      //Set size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentityResource.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = null;
                            if (
                                jobentity_I != null
                                )
                            {
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I,
                                    eleentityResource);
                            }
                            else
                            {
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentityResource.intPk);
                            }
                            if (
                                valentity != null
                                )
                            {
                                strUnit = valentity.strValue;
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }

                        String strResourceName = ResResource.strGetMediaResourceName(eleentityResource.intPk);
                        strResource = strResourceName;
                        intnPkResource = eleentityResource.intPk;
                        boolnIsCalendar = eleentityResource.boolnIsCalendar;
                        boolnIsAvailable = eleentityResource.boolnIsAvailable;
                        boolOneResource = true;
                        boolHasNotResource = false;
                    }

                    if (
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        boolOneResource = false;
                        boolHasNotResource = false;
                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElement == eleeleentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentityResource.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = null;
                        if (
                            jobentity_I != null
                            )
                        {
                            //                              //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentityResource);
                        }
                        else
                        {
                            //                              //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentityResource.intPk);
                        }

                        if (
                            valentity != null
                            )
                        {
                            strUnit = valentity.strValue;
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                        }

                        String strResourceName = ResResource.strGetMediaResourceName(eleentityResource.intPk);
                        strResource = strResourceName;
                        intnPkResource = eleentityResource.intPk;
                        boolnIsCalendar = eleentityResource.boolnIsCalendar;
                        boolnIsAvailable = eleentityResource.boolnIsAvailable;
                    }
                }


                EtentityElementTypeEntityDB etentity = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        boolAreInputs_I
                        )
                    {
                        if (
                            //                              //IO has not Links.
                            strLink == null
                            )
                        {
                            //                              //Work with calculation From Quantity.
                            //                              //Get cost and quantity.
                            this.subGetCostAndQuantityByResourceRecursivePostProcess(null, null, eleeleentity.intPk,
                                (int)intnPkResource, boolUnitAllowDecimal, jobentity_I, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrioentityAllIO_I, darrpiwentityProcessInJob_I,
                                darrioqytjsonIOQuantity_M, ref numCostByResource, ref numQuantity);

                            //                              //GetFinalCost for each IO without link in the input.
                            if (
                                jobentity_I != null &&
                                (jobentity_I.intStage == JobJob.intCompletedStage)
                                )
                            {
                                //                          //Get the final cost if it exists for this calculation.
                                List<FnlcostentityFinalCostEntityDB> darrfnlcostentity = context.FinalCost.Where(
                                    fnl => fnl.intPkJob == jobentity_I.intPk &&
                                    fnl.intPkProcessInWorkflow == piwentity_I.intPk &&
                                    fnl.intnPkElementElementType == null &&
                                    fnl.intnPkElementElement == eleeleentity.intPk &&
                                    fnl.intnPkResource == intnPkResource).ToList();
                                darrfnlcostentity.Sort();

                                if (
                                    //                      //Find the final cost.
                                    darrfnlcostentity.Count > 0
                                    )
                                {
                                    //                      //Get the last final cost.
                                    FnlcostentityFinalCostEntityDB fnlcostentity = darrfnlcostentity.Last();
                                    if (
                                        fnlcostentity.numnCost != null
                                        )
                                    {
                                        numJobFinalCost_IO = numJobFinalCost_IO + (double)fnlcostentity.numnCost;
                                    }
                                    else
                                    {
                                        if (
                                            numQuantity > 0
                                            )
                                        {
                                            numJobFinalCost_IO = numJobFinalCost_IO +
                                                ((numCostByResource / numQuantity) *
                                                (double)fnlcostentity.numnQuantity);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (
                                //                          //This io is set as a final product.
                                ioentity != null && ioentity.boolnIsFinalProduct == true
                                )
                            {
                                this.subAddInputComponentDimensionsAndThickness(null, null, eleeleentity.intPk,
                                    (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                                    darrpiwentityProcessInJob_I);

                                //                          //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                                    strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);

                                //                          //Take the quantity from job and and store in the 
                                //                          //      quantity list for this IO.
                                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                    strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity,
                                    ref strUnit);
                            }
                            else
                            {
                                //                          //IO has Links.
                                //                          //Get Quantity info of the previously PIW.

                                String strLinkNew;
                                this.subGetQuantityFromIOWithLinkInTheInput(ioentity.intnPkElementElementType,
                                    ioentity.intnPkElementElement, (int)intnPkResource, strLink, jobentity_I, jobjson_I,
                                    piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I, out strLinkNew,
                                    darrioqytjsonIOQuantity_M, ref numQuantity);
                                strLink = strLinkNew;
                            }
                        }
                    }
                    else
                    {
                        if (
                            //                              //IO has Links.
                            strLink != null
                            )
                        {
                            //                              //Find name of the other side of the link.
                            strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                                strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                        }

                        //                                  //Work with Transform calculation.
                        this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I, null,
                            eleeleentity.intPk, (int)intnPkResource, strLink, ref numQuantity,
                            ref darrioqytjsonIOQuantity_M);
                    }

                    if (
                        (etentity.strCustomTypeId == ResResource.strMedia) ||
                        (etentity.strCustomTypeId == ResResource.strComponent)
                        )
                    {
                        strDimensionsAndThickness = this.strDimensionsAndThickness(null, eleeleentity.intPk,
                            (int)intnPkResource, numQuantity, strUnit, piwentity_I);
                    }

                    //                                      //Get availability for cal.
                    if (
                        boolnIsCalendar == true
                       )
                    {
                        List<PerentityPeriodEntityDB> darrperentity = context.Period.Where(perentity =>
                            perentity.intJobId == jobjson_I.intJobId &&
                            perentity.intPkWorkflow == piwentity_I.intPkWorkflow &&
                            perentity.intProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                            perentity.intnPkElementElement == eleeleentity.intPk &&
                            perentity.intnEstimateId == null).ToList();

                        boolnIsAvailable = darrperentity.Count >= 1 ? true : false;
                    }
                }
                else
                {
                    if (
                        //                                  //IO has Links.
                        strLink != null
                        )
                    {
                        //                                  //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                            strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);
                    }
                }

                bool boolIsPhysical = RestypResourceType.boolIsPhysical(etentity.strClassification);

                bool boolIsPaper =
                   (etentity.strCustomTypeId == ResResource.strComponent) ||
                   (etentity.strCustomTypeId == ResResource.strMedia);

                //                                          //Verify if Unit allow or not Decimal.
                numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                //                                          //To know if is a Device or MiscConsumable.
                bool boolIsDeviceOrMiscConsumable =
                    (etentity.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                    etentity.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true : false;

                bool boolThickness = ioentity != null ?
                    (ioentity.boolnThickness != null ? (bool)ioentity.boolnThickness : false) : false;

                //                                          //Only an input IO can be final product in a post process
                bool? boolnIsFinalProduct = boolAreInputs_I ? (ioentity?.boolnIsFinalProduct) : null;

                //                                          //Json to return.
                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(eleentityTemplate.intPkElementType,
                   eleentityTemplate.intPk, eleeleentity.intPk, false, strTypeAndTemplate, strResource, strLink,
                   intnPkResource, numQuantity, strUnit, numCostByResource, boolIsPhysical, boolnIsCalendar,
                   boolnIsAvailable, intHours, intMinutes, intSeconds, boolAutomaticallySet, boolOneResource,
                   boolHasNotResource, false, boolIsPaper, boolnIsFinalProduct, boolUnitAllowDecimal, null,
                   null, strDimensionsAndThickness, boolIsDeviceOrMiscConsumable, boolnSize, boolThickness);

                darriojson1.Add(iojson1);
            }

            return darriojson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subGetQuantityFromIOWithLinkInTheInput(
            //                                              //Update the list darrioqytjsonIOQuantity_IO
            //                                              //    and return the quantity for this IO
            //                                              //    with link.

            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            String strLink_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            //                                              //PIWs will be shown in job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            out String strNewLink_O,
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            ref double numQuantity_IO
            )
        {
            //                                              //To easy code.
            Odyssey2Context context = new Odyssey2Context();

            strNewLink_O = strLink_I;

            //                                              //Find the other part of the link.
            PiwentityProcessInWorkflowEntityDB piwentityPreviously = null;
            IoentityInputsAndOutputsEntityDB ioentityOtherPartLink = null;

            ProdtypProductType.subGetOtherSideOfTheLink(piwentity_I, intnPkEleet_I, intnPkEleele_I,
                darrpiwentityProcessInJob_I, darrdynlkjson_I, context, ref strNewLink_O, out piwentityPreviously,
                out ioentityOtherPartLink);

            String strLink = strNewLink_O;

            /*CASE*/
            if (
                ioentityOtherPartLink.boolnIsFinalProduct == true
                )
            {
                this.subAddInputComponentDimensionsAndThickness(null, intnPkEleet_I, intnPkEleele_I, intPkResource_I,
                    strLink_I, jobjson_I, piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I);

                String strUnit = "";
                //                                          //Take the quantity from job and and save in the arr 
                //                                          //      quantity for this IO.
                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentityPreviously.intPk, false, strLink,
                    ioentityOtherPartLink, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity_IO, ref strUnit);
            }
            else if (
                //                                          //The PIW was previously analized.
                darrioqytjsonIOQuantity_M.Exists(ioqyt =>
                ioqyt.intPkProcessInWorkflow == piwentityPreviously.intPk)
                )
            {
                //                                          //Do nothing.
            }
            else
            {
                //                                          //Get eleet-s.
                List<EleetentityElementElementTypeEntityDB> darreleetentityAllEleEt = context.ElementElementType.Where(
                    eleet => eleet.intPkElementDad == piwentityPreviously.intPkProcess).ToList();

                //                                          //Get eleele-s.
                List<EleeleentityElementElementEntityDB> darreleeleentityAllEleEle = context.ElementElement.Where(
                    eleele => eleele.intPkElementDad == piwentityPreviously.intPkProcess).ToList();

                //                                          //Get io-s.
                List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO = context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == piwentityPreviously.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentityPreviously.intProcessInWorkflowId).ToList();

                //                                          //Get ioj-s.
                List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ =
                    context.InputsAndOutputsForAJob.Where(ioj =>
                    ioj.intPkProcessInWorkflow == piwentityPreviously.intPk &&
                    ioj.intJobId == jobjson_I.intJobId).ToList();

                if (
                    !this.dicProcessIOs.ContainsKey(piwentityPreviously.intPk)
                    )
                {
                    List<Iofrmpiwjson2IOFromPIWJson2> darrioinfrmpiwjson2IosFromPIW;
                    ProdtypProductType.subGetProcessInputsAndOutputs(jobjson_I, piwentityPreviously, this,
                        darreleeleentityAllEleEle, darreleetentityAllEleEt, out darrioinfrmpiwjson2IosFromPIW);

                    this.dicProcessIOs.Add(piwentityPreviously.intPk, darrioinfrmpiwjson2IosFromPIW);
                }

                //                                          //Find Input type Quantity info of the before 
                //                                          //    PIW recursively.
                this.subGetQuantityTypePerPIWRecursive(true, jobentity_I, jobjson_I, piwentityPreviously,
                    darrdynlkjson_I, darreleetentityAllEleEt, darrioentityAllIO, darriojentityAllIOJ,
                    darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M);

                //                                          //Find input template Quantity info of the before 
                //                                          //    PIW recursively.
                this.subGetQuantityTemplatePerPIWRecursive(true, jobentity_I, jobjson_I, piwentityPreviously,
                    darrdynlkjson_I, darreleeleentityAllEleEle, darrioentityAllIO, darriojentityAllIOJ,
                    darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M);

                //                                          //Find Output type Quantity info of the before 
                //                                          //    PIW recursively.
                this.subGetQuantityTypePerPIWRecursive(false, jobentity_I, jobjson_I, piwentityPreviously,
                    darrdynlkjson_I, darreleetentityAllEleEt, darrioentityAllIO, darriojentityAllIOJ,
                    darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M);

                //                                          //Find Output template Quantity info of the before 
                //                                          //    PIW recursively.
                this.subGetQuantityTemplatePerPIWRecursive(false, jobentity_I, jobjson_I, piwentityPreviously,
                    darrdynlkjson_I, darreleeleentityAllEleEle, darrioentityAllIO, darriojentityAllIOJ,
                    darrpiwentityProcessInJob_I, darrioqytjsonIOQuantity_M);
            }
            /*END-CASE*/

            //                                              //Find quantity for this resource.
            IoqytjsonIOQuantityJson ioqytjsonOutputWithLlink = darrioqytjsonIOQuantity_M.FirstOrDefault(ioqyt =>
                ioqyt.intPkProcessInWorkflow == piwentityPreviously.intPk &&
                ioqyt.boolAreInput == false &&
                ioqyt.strLink == strLink);

            if (
                //                                          //If not exist the link.
                !(darrioqytjsonIOQuantity_M.Exists(ioqyt =>
                ioqyt.boolAreInput == true &&
                ioqyt.strLink == strLink))
                )
            {
                //                                          //Qytjson Input.
                IoqytjsonIOQuantityJson ioqytjsonInputNew = new IoqytjsonIOQuantityJson(piwentity_I.intPk,
                intnPkEleet_I, intnPkEleele_I, intPkResource_I, ioqytjsonOutputWithLlink.numQuantityIO, 0.0, true,
                strLink, null);

                darrioqytjsonIOQuantity_M.Add(ioqytjsonInputNew);
            }

            numQuantity_IO = ioqytjsonOutputWithLlink.numQuantityIO;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        //public void subGetQuantityTypePerPIWRecursive(
        //    //                                              //Get Quantity and cost per PIW.

        //    PiwentityProcessInWorkflowEntityDB piwentity_I,
        //    JobjsonJobJson jobjson_I,
        //    String strPrintshopId_I,
        //    bool boolAreInputs_I,
        //    //                                              //PIWs will be shown in the job workflow
        //    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
        //    //                                              //Links node to node
        //    List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
        //    IConfiguration configuration_I,
        //    ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_IO
        //    )
        //{
        //    Odyssey2Context context = new Odyssey2Context();

        //    //                                              //Get eleet-s.
        //    List<EleetentityElementElementTypeEntityDB> darreleetentity = context.ElementElementType.Where(
        //        eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
        //        eleet.boolUsage == boolAreInputs_I).ToList();

        //    foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
        //    {
        //        //                                          //Inital data for iojson1.
        //        //                                          //Link.
        //        String strLink = null;
        //        bool boolUnitAllowDecimal = true;
        //        //                                          //Resource data from IO or IOj.
        //        String strResource = null;
        //        int? intnPkResource = null;

        //        //                                          //Calculated data for final resource.
        //        double numQuantity = 0.0;
        //        double numCostByResource = 0.0;

        //        int? intnJobQuantity = jobjson_I.intnQuantity;

        //        //                                          //Get the resource if it exists in the product workflow and
        //        //                                          //      the link if it exists.
        //        IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
        //            io.intPkWorkflow == piwentity_I.intPkWorkflow &&
        //            io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
        //            io.intnPkElementElementType == eleetentity.intPk);
        //        if (
        //            ioentity != null
        //            )
        //        {
        //            //                                      //Set the link.
        //            strLink = ioentity.strLink;

        //            if (
        //                ioentity.intnPkResource != null
        //                )
        //            {
        //                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                    ele.intPk == ioentity.intnPkResource);

        //                if (
        //                    EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
        //                    RestypResourceType.strResourceTypeParameter
        //                    )
        //                {
        //                    //                              //Get job in order to get date.
        //                    JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID ==
        //                        jobjson_I.intJobId);
        //                    ValentityValueEntityDB valentity = null;
        //                    if (
        //                        jobentity != null
        //                        )
        //                    {
        //                        //                          //Get unit depends job's date.
        //                        valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity, eleentity);
        //                    }
        //                    else
        //                    {
        //                        //                          //Get the current unit of measurement.
        //                        valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
        //                    }
        //                    if (
        //                        valentity != null
        //                        )
        //                    {
        //                        boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                            (bool)valentity.boolnIsDecimal;
        //                    }
        //                }
        //                strResource = eleentity.strElementName;
        //                intnPkResource = eleentity.intPk;

        //            }
        //        }

        //        bool boolAutomaticallySet = false;
        //        //                                          //Get the resource if it exists in the job workflow.
        //        IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
        //            FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
        //            ioj.intnPkElementElementType == eleetentity.intPk &&
        //            ioj.intJobId == jobjson_I.intJobId);
        //        if (
        //            iojentity != null
        //            )
        //        {
        //            boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
        //            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                ele.intPk == iojentity.intPkResource);

        //            if (
        //                EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
        //                RestypResourceType.strResourceTypeParameter
        //                )
        //            {
        //                //                                  //Get job in order to get date.
        //                JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID ==
        //                         jobjson_I.intJobId);
        //                ValentityValueEntityDB valentity = null;
        //                if (
        //                    jobentity != null
        //                    )
        //                {
        //                    //                          //Get unit depends job's date.
        //                    valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity, eleentity);
        //                }
        //                else
        //                {
        //                    //                          //Get the current unit of measurement.
        //                    valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
        //                }
        //                if (
        //                    valentity != null
        //                    )
        //                {
        //                    boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                        (bool)valentity.boolnIsDecimal;
        //                }
        //            }

        //            strResource = eleentity.strElementName;
        //            intnPkResource = eleentity.intPk;
        //        }

        //        //                                          //Get calculations associated to the resource and the 
        //        //                                          //      product if the input/output has a resource set.
        //        if (
        //            intnPkResource != null
        //            )
        //        {
        //            if (
        //                boolAreInputs_I
        //                )
        //            {
        //                if (
        //                    //                              //IO has not Links.
        //                    strLink == null
        //                    )
        //                {
        //                    double numJobFinalCostNotUsed = 0.0;

        //                    //                              //Work with calculation From Quantity.
        //                    //                              //Get cost and quantity.
        //                    this.subGetCostAndQuantityByResourceRecursivePostProcess(jobjson_I, strPrintshopId_I,
        //                        (int)intnPkResource, piwentity_I, eleetentity.intPk, null, boolUnitAllowDecimal,
        //                        darrpiwentityProcessInJob_I, darrdynlkjson_I, null, configuration_I, ref numQuantity,
        //                        ref numCostByResource, ref numJobFinalCostNotUsed, ref darrioqytjsonIOQuantity_IO);
        //                }
        //                else
        //                {
        //                    //                              //IO has Links.
        //                    //                              //Get Quantity info of the new PIW.
        //                    String strLinkNew;
        //                    this.subGetQuantityFromIOWithLinkInTheInput(piwentity_I, jobjson_I, strPrintshopId_I,
        //                        ioentity.intnPkElementElementType, ioentity.intnPkElementElement,
        //                        (int)intnPkResource, strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I,
        //                        configuration_I, out strLinkNew, ref numQuantity, ref darrioqytjsonIOQuantity_IO);

        //                    strLink = strLinkNew;
        //                }
        //            }
        //            else
        //            {
        //                //                                  //Work with Transform calculation.
        //                this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
        //                    eleetentity.intPk, null, (int)intnPkResource, strLink, ref numQuantity, 
        //                    ref darrioqytjsonIOQuantity_IO);
        //            }
        //        }
        //    }
        //}

        ////- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        //public void subGetQuantityTemplatePerPIWRecursive(
        //    //                                              //Get Quantity and cost per PIW.

        //    PiwentityProcessInWorkflowEntityDB piwentity_I,
        //    JobjsonJobJson jobjson_I,
        //    String strPrintshopId_I,
        //    bool boolAreInputs_I,
        //    //                                              //PIWs will be shown in the job workflow
        //    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
        //    //                                              //Links node to node
        //    List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
        //    IConfiguration configuration_I,
        //    ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_IO
        //    )
        //{
        //    Odyssey2Context context = new Odyssey2Context();

        //    //                                              //Get eleet-s.
        //    List<EleeleentityElementElementEntityDB> darreleeleentity = context.ElementElement.Where(
        //        eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
        //        eleele.boolUsage == boolAreInputs_I).ToList();

        //    foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
        //    {
        //        //                                          //Inital data for iojson1.
        //        //                                          //Link.
        //        String strLink = null;
        //        bool boolUnitAllowDecimal = true;
        //        //                                          //Resource data from IO or IOj.
        //        String strResource = null;
        //        int? intnPkResource = null;

        //        //                                          //Calculated data for final resource.
        //        double numQuantity = 0.0;
        //        double numCostByResource = 0.0;

        //        int? intnJobQuantity = jobjson_I.intnQuantity;

        //        //                                          //Get the resource if it exists in the product workflow and
        //        //                                          //      the link if it exists.
        //        IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
        //            io.intPkWorkflow == piwentity_I.intPkWorkflow &&
        //            io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
        //            io.intnPkElementElement == eleeleentity.intPk);
        //        if (
        //            ioentity != null
        //            )
        //        {
        //            //                                      //Set the link.
        //            strLink = ioentity.strLink;

        //            if (
        //                ioentity.intnPkResource != null
        //                )
        //            {
        //                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                    ele.intPk == ioentity.intnPkResource);

        //                if (
        //                    EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
        //                    RestypResourceType.strResourceTypeParameter
        //                    )
        //                {
        //                    //                              //Get job in order to get date.
        //                    JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID ==
        //                        jobjson_I.intJobId);
        //                    ValentityValueEntityDB valentity = null;
        //                    if (
        //                        jobentity != null
        //                        )
        //                    {
        //                        //                          //Get unit depends job's date.
        //                        valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity, eleentity);
        //                    }
        //                    else
        //                    {
        //                        //                          //Get the current unit of measurement.
        //                        valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
        //                    }
        //                    if (
        //                        valentity != null
        //                        )
        //                    {
        //                        boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                            (bool)valentity.boolnIsDecimal;
        //                    }
        //                }
        //                strResource = eleentity.strElementName;
        //                intnPkResource = eleentity.intPk;
        //            }
        //        }

        //        bool boolAutomaticallySet = false;
        //        //                                          //Get the resource if it exists in the job workflow.
        //        IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
        //            FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
        //            ioj.intnPkElementElement == eleeleentity.intPk &&
        //            ioj.intJobId == jobjson_I.intJobId);
        //        if (
        //            iojentity != null
        //            )
        //        {
        //            boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
        //            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
        //                ele.intPk == iojentity.intPkResource);

        //            if (
        //                EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
        //                RestypResourceType.strResourceTypeParameter
        //                )
        //            {
        //                //                                  //Get job in order to get date.
        //                JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID ==
        //                         jobjson_I.intJobId);
        //                ValentityValueEntityDB valentity = null;
        //                if (
        //                    jobentity != null
        //                    )
        //                {
        //                    //                          //Get unit depends job's date.
        //                    valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity, eleentity);
        //                }
        //                else
        //                {
        //                    //                          //Get the current unit of measurement.
        //                    valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
        //                }
        //                if (
        //                    valentity != null
        //                    )
        //                {
        //                    boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
        //                        (bool)valentity.boolnIsDecimal;
        //                }
        //            }

        //            strResource = eleentity.strElementName;
        //            intnPkResource = eleentity.intPk;
        //        }

        //        //                                          //Get calculations associated to the resource and the 
        //        //                                          //      product if the input/output has a resource set.
        //        if (
        //            intnPkResource != null
        //            )
        //        {
        //            if (
        //                boolAreInputs_I
        //                )
        //            {
        //                if (
        //                    //                              //IO has not Links.
        //                    strLink == null
        //                    )
        //                {
        //                    double numJobFinalCostNotUsed = 0.0;

        //                    //                              //Work with calculation From Quantity.
        //                    //                              //Get cost and quantity.
        //                    this.subGetCostAndQuantityByResourceRecursivePostProcess(jobjson_I, strPrintshopId_I,
        //                        (int)intnPkResource, piwentity_I, null, eleeleentity.intPk, boolUnitAllowDecimal,
        //                        darrpiwentityProcessInJob_I, darrdynlkjson_I, null, configuration_I, ref numQuantity,
        //                        ref numCostByResource, ref numJobFinalCostNotUsed, ref darrioqytjsonIOQuantity_IO);
        //                }
        //                else
        //                {
        //                    //                              //IO has Links.
        //                    //                              //Get Quantity info of the new PIW.
        //                    String strLinkNew;
        //                    this.subGetQuantityFromIOWithLinkInTheInput(piwentity_I, jobjson_I, strPrintshopId_I,
        //                        ioentity.intnPkElementElementType, ioentity.intnPkElementElement,
        //                        (int)intnPkResource, strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I,
        //                        configuration_I, out strLinkNew, ref numQuantity, ref darrioqytjsonIOQuantity_IO);

        //                    strLink = strLinkNew;
        //                }
        //            }
        //            else
        //            {
        //                //                                  //Work with Transform calculation.
        //                this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I, null,
        //                    eleeleentity.intPk, (int)intnPkResource, strLink, ref numQuantity, 
        //                    ref darrioqytjsonIOQuantity_IO);
        //            }
        //        }
        //    }
        //}

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subGetQuantityTypePerPIWRecursive(
            //                                              //Get Quantity and cost per PIW.

            bool boolAreInputs_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = darreleetentityAll_I.Where(
                eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                bool boolUnitAllowDecimal = true;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;

                //                                          //Calculated data for final resource.
                double numQuantity = 0.0;
                double numCostByResource = 0.0;

                int? intnJobQuantity = jobjson_I.intnQuantity;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == eleetentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = null;
                            if (
                                jobentity_I != null
                                )
                            {
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity);
                            }
                            else
                            {
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
                            }
                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }
                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;

                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == eleetentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = null;
                        if (
                            jobentity_I != null
                            )
                        {
                            //                          //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity);
                        }
                        else
                        {
                            //                          //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
                        }
                        if (
                            valentity != null
                            )
                        {
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                        }
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                }

                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        boolAreInputs_I
                        )
                    {
                        if (
                            //                              //IO has not Links.
                            strLink == null
                            )
                        {
                            //                              //Work with calculation From Quantity.
                            //                              //Get cost and quantity.
                            this.subGetCostAndQuantityByResourceRecursivePostProcess(null, eleetentity.intPk, null,
                                (int)intnPkResource, boolUnitAllowDecimal, jobentity_I, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrioentityAllIO_I, darrpiwentityProcessInJob_I,
                                darrioqytjsonIOQuantity_M, ref numCostByResource, ref numQuantity);
                        }
                        else
                        {
                            if (
                                //                          //This io is set as a final product.
                                ioentity != null && ioentity.boolnIsFinalProduct == true
                                )
                            {
                                //                          //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                                    strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);

                                String strUnitNotUsed = null;
                                //                          //Take the quantity from job and and store in the 
                                //                          //      quantity list for this IO.
                                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                    strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity,
                                    ref strUnitNotUsed);
                            }
                            else
                            {

                                //                          //IO has Links.
                                //                          //Get Quantity info of the new PIW.
                                String strLinkNew;
                                this.subGetQuantityFromIOWithLinkInTheInput(ioentity.intnPkElementElementType,
                                    ioentity.intnPkElementElement, (int)intnPkResource, strLink, jobentity_I, jobjson_I,
                                    piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I, out strLinkNew,
                                    darrioqytjsonIOQuantity_M, ref numQuantity);

                                strLink = strLinkNew;
                            }
                        }
                    }
                    else
                    {
                        //                                  //Work with Transform calculation.
                        this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
                            eleetentity.intPk, null, (int)intnPkResource, strLink, ref numQuantity,
                            ref darrioqytjsonIOQuantity_M);
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subGetQuantityTemplatePerPIWRecursive(
            //                                              //Get Quantity and cost per PIW.

            bool boolAreInputs_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleeleentityElementElementEntityDB> darreleeleentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleele-s.
            List<EleeleentityElementElementEntityDB> darreleeleentity = darreleeleentityAll_I.Where(
                eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I).ToList();

            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                bool boolUnitAllowDecimal = true;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;

                //                                          //Calculated data for final resource.
                double numQuantity = 0.0;
                double numCostByResource = 0.0;

                int? intnJobQuantity = jobjson_I.intnQuantity;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == eleeleentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = null;
                            if (
                                jobentity_I != null
                                )
                            {
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity);
                            }
                            else
                            {
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
                            }
                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }
                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElement == eleeleentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = null;
                        if (
                            jobentity_I != null
                            )
                        {
                            //                          //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity);
                        }
                        else
                        {
                            //                          //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);
                        }
                        if (
                            valentity != null
                            )
                        {
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                        }
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                }

                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        boolAreInputs_I
                        )
                    {
                        if (
                            //                              //IO has not Links.
                            strLink == null
                            )
                        {
                            //                              //Work with calculation From Quantity.
                            //                              //Get cost and quantity.
                            this.subGetCostAndQuantityByResourceRecursivePostProcess(null, null, eleeleentity.intPk,
                                (int)intnPkResource, boolUnitAllowDecimal, jobentity_I, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrioentityAllIO_I, darrpiwentityProcessInJob_I,
                                darrioqytjsonIOQuantity_M, ref numCostByResource, ref numQuantity);
                        }
                        else
                        {
                            if (
                                //                          //This io is set as a final product.
                                ioentity != null && ioentity.boolnIsFinalProduct == true
                                )
                            {
                                //                          //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                                    strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I, context);

                                String strUnitNotUsed = null;
                                //                          //Take the quantity from job and and store in the 
                                //                          //      quantity list for this IO.
                                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                    strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity,
                                    ref strUnitNotUsed);
                            }
                            else
                            {
                                //                              //IO has Links.
                                //                              //Get Quantity info of the new PIW.
                                String strLinkNew;
                                this.subGetQuantityFromIOWithLinkInTheInput(ioentity.intnPkElementElementType,
                                    ioentity.intnPkElementElement, (int)intnPkResource, strLink, jobentity_I, jobjson_I,
                                    piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I, out strLinkNew,
                                    darrioqytjsonIOQuantity_M, ref numQuantity);
                                strLink = strLinkNew;
                            }
                        }
                    }
                    else
                    {
                        //                                  //Work with Transform calculation.
                        this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I, null,
                            eleeleentity.intPk, (int)intnPkResource, strLink, ref numQuantity,
                            ref darrioqytjsonIOQuantity_M);
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subGetQuantityFromTransformCalculationPostProcess(
            //                                              //Update the list darrioqytjsonIOQuantity_IO
            //                                              //      and return the quantity for this IO
            //                                              //      and the pkCalcualtion.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            int? intnPkEleetO_I,
            int? intnPkEleeleO_I,
            int intPkResourceO_I,
            String strLink_I,
            ref double numQuantity_IO,
            ref List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            //                                              //To easy code.
            Odyssey2Context context = new Odyssey2Context();

            List<TrfcalentityTransformCalculationEntityDB> darrtrfcalentityApply =
                new List<TrfcalentityTransformCalculationEntityDB>();

            //                                              //Get job stage.
            JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID == jobjson_I.intJobId);

            //                                              //Find the transform calculation for this PIW Eleet and res.
            List<TrfcalentityTransformCalculationEntityDB> darrtrfcalentityAll = context.TransformCalculation.Where(
                trfcal => trfcal.intPkProcessInWorkflow == piwentity_I.intPk &&
                trfcal.intnPkElementElementTypeO == intnPkEleetO_I &&
                trfcal.intnPkElementElementO == intnPkEleeleO_I &&
                trfcal.intPkResourceO == intPkResourceO_I).ToList();
            darrtrfcalentityAll.Sort();

            if (
                jobentity != null &&
                (jobentity.intStage == JobJob.intInProgressStage ||
                jobentity.intStage == JobJob.intCompletedStage)
                )
            {
                darrtrfcalentityApply = CalCalculation.darrtrfcalentityGetJobTransformCalculation(jobentity,
                        darrtrfcalentityAll);
            }
            else
            {
                //                                          //Find the last available calculation.
                darrtrfcalentityApply = darrtrfcalentityAll.Where(trfcalentity => trfcalentity.strEndDate == null &&
                    trfcalentity.strEndTime == null).ToList();
            }

            if (
                darrtrfcalentityApply.Count > 0
                )
            {
                double numQuantityTemp = 0;
                foreach (TrfcalentityTransformCalculationEntityDB trfcalentity in darrtrfcalentityApply)
                {
                    if (
                         //                                  //Calculation applies.
                         Tools.boolCalculationOrLinkApplies(null, null, null, trfcalentity.intPk, jobjson_I)
                        )
                    {
                        //                                  //Get Quantity In.

                        //                                  //Find the calculation in the list.
                        IoqytjsonIOQuantityJson IoqytjsonQFromRes = darrioqytjsonIOQuantity_M.FirstOrDefault(ioqyt =>
                            ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                            ioqyt.intnPkEleet == trfcalentity.intnPkElementElementTypeI &&
                            ioqyt.intnPkEleele == trfcalentity.intnPkElementElementI &&
                            ioqyt.intnPkResource == trfcalentity.intPkResourceI &&
                            ioqyt.boolAreInput == true);

                        if (
                            IoqytjsonQFromRes != null
                            )
                        {
                            numQuantityTemp = numQuantityTemp + ((trfcalentity.numPerUnits / trfcalentity.numNeeded) *
                                IoqytjsonQFromRes.numQuantityIO);
                        }
                        else
                        {
                            //                              //No exist quanityt beacause it is not setted in the 
                            //                              //    grpResource from IO.
                        }
                    }
                }

                numQuantity_IO = numQuantityTemp;
            }
            //                                              //Save info current IO in the list for Optimization.
            IoqytjsonIOQuantityJson ioqytjsonCurrentIOTransformaton =
                new IoqytjsonIOQuantityJson(piwentity_I.intPk, intnPkEleetO_I, intnPkEleeleO_I,
                intPkResourceO_I, numQuantity_IO, 0.0, false, strLink_I, null);

            darrioqytjsonIOQuantity_M.Add(ioqytjsonCurrentIOTransformaton);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void subGetCostAndQuantityByResourceRecursivePostProcess(
            //                                              //Return the sum of the calculations associated only with 
            //                                              //      the process:
            //                                              //  - PerQuantity ByResource.
            //                                              //It is necessary validate if the calculation applies as it
            //                                              //      is validated where the job is calculated.


            //                                              //intnEstimateIdThatInvokeThisMethod_I != null if this is 
            //                                              //      invoked from estiamtion.
            //                                              //intnEstimateIdThatInvokeThisMethod_I == null if this is
            //                                              //      invoked from WF job.
            int? intnEstimateIdThatInvokeThisMethod_I,
            int? intnPkEleet_I,
            int? intnPkEleele_I,
            int intPkResource_I,
            bool boolUnitAllowDecimal_I,
            JobentityJobEntityDB jobentity_I,
            //                                              //Job, it is necessary to verify the condition to apply.
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M,
            ref double numCostByResource_IO,
            ref double numQuantity_IO
            )
        {
            //                                              //Get all the calculations for this product.
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            List<CalCalculation> darrcalFromDB = new List<CalCalculation>();
            darrcalFromDB = this.darrcalCurrent;
            if (
                jobentity_I != null &&
                (jobentity_I.intStage == JobJob.intInProgressStage ||
                jobentity_I.intStage == JobJob.intCompletedStage)
                )
            {
                ZonedTime ztimeJobDate;
                ProdtypProductType.GetJobDate(jobentity_I, out ztimeJobDate);
                darrcalFromDB = this.GetCalculationsDependingDate(ztimeJobDate);
            }

            //                                              //Get calculation for this IO.
            darrcalFromDB = darrcalFromDB.Where(
            //                                              //Per Quantity calculation, take quantity the Job.
            cal => (cal.strCalculationType == CalCalculation.strPerQuantity ||
                cal.strCalculationType == CalCalculation.strPerQuantityBase) &&
                (cal.strByX == CalCalculation.strByResource) &&
                (cal.intnPkResourceElementBelongsTo == intPkResource_I) &&
                (cal.intnPkWorkflowBelongsTo == piwentity_I.intPkWorkflow) &&
                (cal.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId) &&
                (cal.intnPkElementElementTypeBelongsTo == intnPkEleet_I) &&
                (cal.intnPkElementElementBelongsTo == intnPkEleele_I) &&
                //                                          //Calculation is enable.
                cal.boolIsEnable &&
                //                                          //Calculation applies.
                Tools.boolCalculationOrLinkApplies(cal.intPk, null, null, null, jobjson_I)).ToList();

            double numAcumCurrentResourceQuantity = 0.0;

            foreach (CalCalculation cal in darrcalFromDB)
            {
                if (
                    cal.strCalculationType == CalCalculation.strPerQuantity
                    )
                {
                    bool boolQFromIsInThisJob = ProdtypProductType.boolQFromIsInThisWFJobOrEstimateData(
                        cal.intnPkResourceElementBelongsTo, cal.intnPkElementElementTypeBelongsTo,
                        cal.intnPkElementElementBelongsTo, cal.intnPkQFromResourceElementBelongsTo,
                        cal.intnPkQFromElementElementTypeBelongsTo, cal.intnPkQFromElementElementBelongsTo,
                        jobjson_I.intJobId, piwentity_I.intPk, intnEstimateIdThatInvokeThisMethod_I,
                        this.darriojsoninInputsCombinationsAndInputsSelected, this.dicProcessIOs);

                    if (
                        boolQFromIsInThisJob
                        )
                    {
                        //                                  //Find the Qfrom for this calcualtion.
                        int? intnPkQFromEleet = cal.intnPkQFromElementElementTypeBelongsTo;
                        int? intnPkQFromEleele = cal.intnPkQFromElementElementBelongsTo;
                        int? intnPkQfromResource = cal.intnPkQFromResourceElementBelongsTo;

                        //                                  //Verify if the Qfrom Res has link.
                        IoentityInputsAndOutputsEntityDB ioentityQfromResWithLink =
                            darrioentityAllIO_I.FirstOrDefault(
                            io => io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                            io.intnPkElementElementType == intnPkQFromEleet &&
                            io.intnPkElementElement == intnPkQFromEleele &&
                            io.strLink != null);

                        bool boolIsInputIO;
                        if (
                            //                              //Find in ElementElementType
                            intnPkQFromEleet != null
                            )
                        {
                            boolIsInputIO = context.ElementElementType.FirstOrDefault(
                                eleet => eleet.intPk == intnPkQFromEleet).boolUsage;
                        }
                        else
                        //                                  //Find in ElementElement
                        {
                            boolIsInputIO = context.ElementElement.FirstOrDefault(eleele =>
                                eleele.intPk == intnPkQFromEleele).boolUsage;
                        }

                        if (
                            //                              //IOentity QFrom has link.
                            ioentityQfromResWithLink != null
                            )
                        {
                            double numIOQuantity = 0.0;
                            if (
                                //                          //QFrom Resource is input IO
                                boolIsInputIO
                                )
                            {
                                String strLink = ioentityQfromResWithLink.strLink;
                                String strLinkNew;
                                if (
                                    //                      //This io is set as a final product.
                                    ioentityQfromResWithLink.boolnIsFinalProduct == true
                                    )
                                {
                                    this.subAddInputComponentDimensionsAndThickness(
                                        intnEstimateIdThatInvokeThisMethod_I, intnPkQFromEleet, intnPkQFromEleele,
                                        (int)intnPkQfromResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                                        darrpiwentityProcessInJob_I);

                                    //                      //Find name of the other side of the link.
                                    strLinkNew = this.strGetNameOtherSideOfTheLink(piwentity_I, intnPkQFromEleet,
                                        intnPkQFromEleele, strLink, darrpiwentityProcessInJob_I, darrdynlkjson_I,
                                        context);

                                    String strUnitNotUsed = null;
                                    //                      //Take the quantity from job and and store in the 
                                    //                      //      quantity list for this IO.
                                    ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, true,
                                        strLinkNew, ioentityQfromResWithLink, jobjson_I, darrioqytjsonIOQuantity_M,
                                        ref numIOQuantity, ref strUnitNotUsed);
                                }
                                else
                                {
                                    //                      //IO has Links.
                                    //                      //Get Quantity info of the new PIW Qfrom.
                                    this.subGetQuantityFromIOWithLinkInTheInput(intnPkQFromEleet, intnPkQFromEleele,
                                        (int)intnPkQfromResource, ioentityQfromResWithLink.strLink, jobentity_I,
                                        jobjson_I, piwentity_I, darrdynlkjson_I, darrpiwentityProcessInJob_I,
                                        out strLinkNew, darrioqytjsonIOQuantity_M, ref numIOQuantity);
                                }
                            }
                            else
                            {
                                //                          //Work with Transform calculation.
                                this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
                                    intnPkQFromEleet, intnPkQFromEleele, (int)intnPkQfromResource,
                                    ioentityQfromResWithLink.strLink, ref numIOQuantity, ref darrioqytjsonIOQuantity_M);
                            }

                            double numIOQuantityFromCalculation;
                            double numIOCostFromCalculation;

                            ProdtypProductType.subGetPerQuantityCostPostProcess(cal, jobjson_I, numIOQuantity,
                                boolUnitAllowDecimal_I, piwentity_I.intPk, this.darrresthkjsonResThickness,
                                out numIOQuantityFromCalculation, out numIOCostFromCalculation);

                            //                              //Get the cost.
                            numCostByResource_IO = numCostByResource_IO + numIOCostFromCalculation;

                            numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity +
                                numIOQuantityFromCalculation;
                        }
                        else
                        {
                            //                              //IOentity QFrom has not link.

                            //                              //Find the calculation in the list for otimization.
                            IoqytjsonIOQuantityJson IoqytjsonQFromRes = darrioqytjsonIOQuantity_M.FirstOrDefault(io =>
                                io.intPkProcessInWorkflow == piwentity_I.intPk &&
                                io.intnPkEleet == intnPkQFromEleet &&
                                io.intnPkEleele == intnPkQFromEleele &&
                                io.intnPkResource == intnPkQfromResource &&
                                io.boolAreInput == true);

                            double numIOQuantityFromCalculation;
                            double numIOCostFromCalculation;
                            if (
                                IoqytjsonQFromRes != null
                                )
                            {
                                ProdtypProductType.subGetPerQuantityCostPostProcess(cal, jobjson_I,
                                    IoqytjsonQFromRes.numQuantityIO, boolUnitAllowDecimal_I, piwentity_I.intPk,
                                    this.darrresthkjsonResThickness, out numIOQuantityFromCalculation,
                                    out numIOCostFromCalculation);

                                //                          //Get the cost.
                                numCostByResource_IO = numCostByResource_IO + numIOCostFromCalculation;

                                //                          //Add all result for each calculation.
                                numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity +
                                    numIOQuantityFromCalculation;
                            }
                            else
                            {
                                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(
                                    ele => ele.intPk == (int)intnPkQfromResource);

                                bool boolAllowDecimal = true;
                                if (
                                    EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                                        RestypResourceType.strResourceTypeParameter
                                    )
                                {
                                    //                      //Get the current unit of measurement.
                                    ValentityValueEntityDB valentity = ResResource.GetResourceUnitOfMeasurement(
                                        eleentity.intPk);

                                    boolAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                        (bool)valentity.boolnIsDecimal;
                                }

                                double numQuantityIO = 0.0;
                                if (
                                    //                      //QFrom Resource is an input IO
                                    boolIsInputIO
                                    )
                                {
                                    //                      //Continue finding the Qfrom'Quantity recursively.

                                    //                      //Finding Io for get the quantity dependent for
                                    //                      //    for the IO.
                                    double numCostByResourceNotUsed = 0.0;
                                    //                      //Get cost and quantity.
                                    this.subGetCostAndQuantityByResourceRecursivePostProcess(
                                        intnEstimateIdThatInvokeThisMethod_I, intnPkQFromEleet, intnPkQFromEleele,
                                        (int)intnPkQfromResource, boolAllowDecimal, jobentity_I, jobjson_I, piwentity_I,
                                        darrdynlkjson_I, darrioentityAllIO_I, darrpiwentityProcessInJob_I,
                                        darrioqytjsonIOQuantity_M, ref numCostByResourceNotUsed, ref numQuantityIO);
                                }
                                else
                                //                          //QFrom Resource is an ouput IO
                                {
                                    //                      //Work with Transform calculation.
                                    this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
                                        intnPkQFromEleet, intnPkQFromEleele, (int)intnPkQfromResource,
                                        ioentityQfromResWithLink.strLink, ref numQuantityIO,
                                        ref darrioqytjsonIOQuantity_M);
                                }

                                ProdtypProductType.subGetPerQuantityCostPostProcess(cal, jobjson_I, numQuantityIO,
                                    boolAllowDecimal, piwentity_I.intPk, this.darrresthkjsonResThickness,
                                    out numIOQuantityFromCalculation, out numIOCostFromCalculation);

                                //                          //Get the cost.
                                numCostByResource_IO = numCostByResource_IO + numIOCostFromCalculation;

                                //                          //Add all result for each calculation.
                                numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity +
                                    numIOQuantityFromCalculation;
                            }
                        }
                    }
                }
                else
                {
                    numAcumCurrentResourceQuantity = numAcumCurrentResourceQuantity + (double)cal.numnNeeded;
                }
            }

            if (
                //                                          //The resource quantity is greater than 0
                numAcumCurrentResourceQuantity > 0
                )
            {
                //                                          //Obtain the cost.
                double? numnCalculationCost = 0.0;
                double? numnCalculationQuantity = 0.0;
                double? numnCalculationMin = 0.0;
                double? numnCalculationBlock = 0.0;

                //                                          //Get resource cost data
                ProdtypProductType.subGetResourceCostData(intPkResource_I, jobjson_I.intJobId, ref numnCalculationCost,
                    ref numnCalculationQuantity, ref numnCalculationMin, ref numnCalculationBlock);

                //                                          //Use minToUse
                ProdtypProductType.subGetNewQuantityDependingMinToUse(boolUnitAllowDecimal_I, numnCalculationMin,
                    numnCalculationBlock, ref numAcumCurrentResourceQuantity);

                double numCostPerUnit = 0.0;
                if (
                    ((numnCalculationCost != null) && (numnCalculationCost > 0)) &&
                    ((numnCalculationQuantity != null) && (numnCalculationQuantity > 0))
                    )
                {
                    numCostPerUnit = (double)numnCalculationCost / (double)numnCalculationQuantity;

                    //                                      //Obtaining the cost.
                    numCostByResource_IO = (numAcumCurrentResourceQuantity * numCostPerUnit).Round(2);
                }
            }

            //                                              //Save info current IO in the list for Optimization.
            IoqytjsonIOQuantityJson ioqytjsonCurrentIO = new IoqytjsonIOQuantityJson(piwentity_I.intPk, intnPkEleet_I,
                intnPkEleele_I, intPkResource_I, numAcumCurrentResourceQuantity, 0.0, true, null, null);
            darrioqytjsonIOQuantity_M.Add(ioqytjsonCurrentIO);

            numQuantity_IO = numAcumCurrentResourceQuantity;

            numQuantity_IO = numQuantity_IO.Round(2);
            numCostByResource_IO = numCostByResource_IO.Round(2);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetPerQuantityCostPostProcess(
            CalCalculation cal_I,
            JobjsonJobJson jobjson_I,
            double? numnQuantity_I,
            bool boolAllowDecimal_I,
            int intPkProcessInWorkflow_I,
            List<ResthkjsonResourceThicknessJson> darrResourceThickness_I,
            out double numIoOrJobQuantity_O,
            out double numCost_0
            )
        {
            double? numnNeeded = null;
            double? numnPerUnit = null;

            /*CASE*/
            if (
                //                                      //Has needed and per units.
                (cal_I.numnNeeded != null) && (cal_I.numnNeeded != 0) &&
                (cal_I.numnPerUnits != null) && (cal_I.numnPerUnits != 0) &&
                (cal_I.boolnIsBlock != true)
                )
            {
                //                                      //Normal calculation with Needed y PerUnit
                numnNeeded = cal_I.numnNeeded;
                numnPerUnit = cal_I.numnPerUnits;
            }
            else if (
                //                                      //Calculation has to take perunit from thickness.
                cal_I.boolnFromThickness == true
                )
            {
                numnPerUnit = CalCalculation.intGetPerUnit(cal_I.intnPkQFromElementElementTypeBelongsTo,
                    cal_I.intnPkQFromElementElementBelongsTo, (int)cal_I.intnPkResourceElementBelongsTo,
                    (int)cal_I.intnPkQFromResourceElementBelongsTo, intPkProcessInWorkflow_I,
                    darrResourceThickness_I);
                numnNeeded = 1;
            }
            else if (
                (cal_I.boolnIsBlock == true)
                )
            {
                numnPerUnit = cal_I.numnPerUnits;
                numnNeeded = 1;
            }
            /*END-CASE*/

            numCost_0 = 0.0;
            numIoOrJobQuantity_O = 0.0;

            if (
                numnQuantity_I != null
                )
            {
                //                                          //Set the quantity as the quantity of the job.
                double numJobQuantity = (double)numnQuantity_I;

                //                                          //The needed per unit set as one.
                double numNeededPerUnit = 1;

                if (
                    (numnNeeded != null) && (numnNeeded > 0) &&
                    (numnPerUnit != null) && (numnPerUnit > 0)
                    )
                {
                    //                                      //Obtain the needed per unit.
                    numNeededPerUnit = (double)numnNeeded / (double)numnPerUnit;

                    //                                      //Update the quantity as the needed per unit (product) 
                    //                                      //      multiplied by the products needed for the job.
                    double numFinalQuantity = numJobQuantity * numNeededPerUnit;

                    numIoOrJobQuantity_O = boolAllowDecimal_I ? numFinalQuantity.Round(2) :
                        Math.Ceiling(numFinalQuantity);

                    //                                      //Obtain the cost.
                    double? numnCalculationCost = cal_I.numnCost;
                    double? numnCalculationQuantity = cal_I.numnQuantity;
                    double? numnCalculationMin = cal_I.numnMin;
                    double? numnCalculationBlock = cal_I.numnBlock;

                    if (
                        cal_I.intnPkResourceElementBelongsTo != null
                        )
                    {
                        //                                  //Get quantity and cost of the resource
                        ProdtypProductType.subGetResourceCostData((int)cal_I.intnPkResourceElementBelongsTo,
                            jobjson_I.intJobId, ref numnCalculationCost, ref numnCalculationQuantity,
                            ref numnCalculationMin, ref numnCalculationBlock);
                    }

                    double numCostPerUnit = 0.0;
                    if (
                        ((numnCalculationCost != null) && (numnCalculationCost > 0)) &&
                        ((numnCalculationQuantity != null) && (numnCalculationQuantity > 0))
                        )
                    {
                        numCostPerUnit = (double)numnCalculationCost / (double)numnCalculationQuantity;
                    }

                    //                                      //If the calc use FromThickness, re-calculate neededPerUnit
                    if (
                        (cal_I.boolnFromThickness == true) ||
                        (cal_I.boolnIsBlock == true)
                        )
                    {
                        numIoOrJobQuantity_O = Math.Ceiling(numIoOrJobQuantity_O) * (double)cal_I.numnNeeded;
                    }

                    //                                          //Obtaining the final cost.
                    numCost_0 = numIoOrJobQuantity_O * numCostPerUnit;
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subThisWorkflowJobIsReady(
            List<Piwjson1ProcessInWorkflowJson1> darrpiwjson1_I,
            JobjsonJobJson jobjson_I,
            JobentityJobEntityDB jobentity_I,
            int intPkPrintshop_I,
            int intPkProduct_I,
            String strStage_I,
            int? intnOrderId_I,
            IHubContext<ConnectionHub> iHubContext_I,
            out bool boolAllResourcesAreSet_O,
            out bool boolAllResourcesAreAvailable_O,
            out bool boolAllResourcesHaveAnAccount_O,
            out bool boolAllCalculationsByProcessHaveAnAccount_O,
            out bool boolAllCalculationsByProductHaveAnAccount_O,
            out bool boolIsNotEstimate_O,
            out bool boolJobWFHasSizeSet_O,
            out String strDeliveryDate_O,
            out List<String> darrstrResourcesNamesWithoutAccount_O,
            out List<String> darrstrProcessCalculationsWithoutAccount_O
            )
        {
            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Variables to return.
            boolAllResourcesAreSet_O = true;
            boolAllResourcesAreAvailable_O = true;
            boolAllResourcesHaveAnAccount_O = true;
            boolAllCalculationsByProcessHaveAnAccount_O = true;
            boolAllCalculationsByProductHaveAnAccount_O = true;
            boolIsNotEstimate_O = true;
            boolJobWFHasSizeSet_O = false;
            strDeliveryDate_O = "Delivery date not available.";
            darrstrResourcesNamesWithoutAccount_O = new List<string>();
            darrstrProcessCalculationsWithoutAccount_O = new List<string>();

            //                                              //Used to calculate the Delivery Date.
            ZonedTime ztimeDeliveryDate = ZonedTime.MinValue;

            //                                              //Process in workflow.
            Piwjson1ProcessInWorkflowJson1[] arrpiw = darrpiwjson1_I.ToArray();

            int intI = 0;
            /*WHILE-DO*/
            while (
                //                                          //While there is a next piw.
                intI < arrpiw.Length
                )
            {
                //                                          //Get PIW in order to get the necessary data to filter
                //                                          //      the process's calculations.
                PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(
                    piw => piw.intPk == arrpiw[intI].intPkProcessInWorkflow);

                //                                          //Get the process calculations.
                List<CalentityCalculationEntityDB> darrcalentityAllProcess = context.Calculation.Where(
                    cal => cal.intnPkProcess == piwentity.intPkProcess &&
                    cal.intnPkWorkflow == piwentity.intPkWorkflow &&
                    cal.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                    //                                      //To consider only current calculations.
                    cal.strEndDate == null && cal.strEndTime == null
                    ).ToList();

                //                                          //Cost Calculations to review if they have an account.
                List<CalentityCalculationEntityDB> darrcalentityCostProcess = darrcalentityAllProcess.Where(cal =>
                    (cal.numnCost != null) &&
                    ((cal.intnHours == null) && (cal.intnMinutes == null) && (cal.intnSeconds == null))).ToList();

                //                                          //Time calculations to calculate Delivery Date.
                List<CalentityCalculationEntityDB> darrcalentityTimeProcess = darrcalentityAllProcess.Where(cal =>
                    (cal.numnCost == null) &&
                    ((cal.intnHours != null) || (cal.intnMinutes != null) || (cal.intnSeconds != null))).ToList();

                //                                          //To calculate de Delivery Date.
                //                                          //First while just for periods of calcutaions.

                bool boolAllProcessCalculationHasPeriod = (darrcalentityTimeProcess.Count > 0);

                int intK = 0;
                /*WHILE-DO*/
                while (
                    //                                      //While there are time calculations.
                    (intK < darrcalentityTimeProcess.Count &&
                    //                                      //If one of the calculation does not have a period, then 
                    //                                      //there is no need to keep calculating the delivery date.
                    //      
                    boolAllProcessCalculationHasPeriod)
                    )
                {
                    ResResource res = ResResource.resFromDB(darrcalentityTimeProcess[intK].intnPkResource, false);
                    if (
                        //                                  //Calculation is enable.
                        darrcalentityTimeProcess[intK].boolIsEnable &&
                        //                                  //Verify calculations conditions.
                        Tools.boolCalculationOrLinkApplies(darrcalentityTimeProcess[intK].intPk, null, null, null,
                        jobjson_I) &&
                        //                                  //It is a time calculation for the process.
                        ((((darrcalentityTimeProcess[intK].intnHours != null) ||
                        (darrcalentityTimeProcess[intK].intnMinutes != null) ||
                        (darrcalentityTimeProcess[intK].intnSeconds != null))
                        &&
                        (darrcalentityTimeProcess[intK].strByX == CalCalculation.strByProcess)) ||
                        ((darrcalentityTimeProcess[intK].strByX == CalCalculation.strByResource) &&
                        (res.boolnIsCalendar == true)))
                        )
                    {
                        //                                  //Get calculation's period.
                        PerentityPeriodEntityDB perentityCalculation = context.Period.FirstOrDefault(
                            per => per.intnPkCalculation == darrcalentityTimeProcess[intK].intPk && 
                            per.intJobId == jobjson_I.intJobId);

                        //                                  //If there is a period, get delivery date, 
                        //                                  //      else the delivery date is not available.
                        if (
                            perentityCalculation != null
                            )
                        {
                            ZonedTime ztime =
                                ZonedTimeTools.NewZonedTime((perentityCalculation.strEndDate).ParseToDate(),
                                perentityCalculation.strEndTime.ParseToTime());
                            if (
                                ztime > ztimeDeliveryDate
                                )
                            {
                                ztimeDeliveryDate = ztime;
                                strDeliveryDate_O = ztimeDeliveryDate.Date.ToString() + ", " +
                                    ztimeDeliveryDate.Time.ToString().Substring(0, 5);

                                //                          //Delete alerts related to periods that were deleted
                                //                          //      because period's tolerance was not reached.
                                ProdtypProductType.subDeletePeriodAlertWhenDeliveryDateExists(
                                    jobjson_I.intJobId, intPkPrintshop_I, iHubContext_I);
                            }
                        }
                        else
                        {
                            boolAllProcessCalculationHasPeriod = false;
                            strDeliveryDate_O = "Delivery date not available.";
                        }
                    }
                    intK++;
                }

                //                                          //To review if any Process Calculation does not have an 
                //                                          //      account.
                foreach (CalentityCalculationEntityDB calentity in darrcalentityCostProcess)
                {
                    if (
                        calentity.intnPkAccount == null
                        )
                    {
                        boolAllCalculationsByProcessHaveAnAccount_O = false;

                        //                                  //Get process's name.
                        String strProcessName = ProProcess.proFromDB(piwentity.intPkProcess).strName;
                        darrstrProcessCalculationsWithoutAccount_O.Add(strProcessName);
                    }
                }

                //                                          //Inputs and outputs.
                List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();
                darriojson1.AddRange(arrpiw[intI].arrresortypInput.ToList());
                darriojson1.AddRange(arrpiw[intI].arrresortypOutput.ToList());
                //                                          //Filter by physical resources.
                darriojson1 = darriojson1.Where(iojson1 => iojson1.boolIsPhysical == true).ToList();
                Iojson1InputOrOutputJson1[] arriojson1 = darriojson1.ToArray();

                //                                          //To calculate de Delivery Date.
                //                                          //Second while just for resource periods.
                //                                          //Also calculate the boolAllResourcesAreAvailable_O.

                bool boolAllResourcesOfCalendarTypeHasAPeriod = true;
                int intJ = 0;
                /*WHILE-DO*/
                while (
                    intJ < arriojson1.Length
                    )
                {
                    if (
                        //                                  //The size is set
                        !boolJobWFHasSizeSet_O
                        )
                    {
                        boolJobWFHasSizeSet_O = arriojson1[intJ].boolnSize != null ?
                            (bool)arriojson1[intJ].boolnSize : false;
                    }

                    ResResource res = ResResource.resFromDB(arriojson1[intJ].intnPkResource, false);
                    if (
                        res == null
                        )
                    {
                        boolAllResourcesAreSet_O = false;
                    }
                    else
                    {
                        //                                  //To easy code.
                        int? intnPkElementElementType = null;
                        int? intnPkElementElement = null;
                        bool boolIsInput = true;
                        if (
                            arriojson1[intJ].boolIsEleet
                            )
                        {
                            intnPkElementElementType = arriojson1[intJ].intPkEleetOrEleele;
                            boolIsInput = context.ElementElementType.FirstOrDefault(eleetentity =>
                                eleetentity.intPk == intnPkElementElementType).boolUsage;
                        }
                        else
                        {
                            intnPkElementElement = arriojson1[intJ].intPkEleetOrEleele;
                            boolIsInput = context.ElementElement.FirstOrDefault(eleeleentity =>
                                eleeleentity.intPk == intnPkElementElement).boolUsage;
                        }

                        //                                  //To see if all resources are available.
                        if (
                            boolAllResourcesAreAvailable_O &&
                            (res.boolnIsAvailable == null ||
                            (res.boolnIsAvailable != null &&
                            (bool)res.boolnIsAvailable))
                            )
                        {
                            //                              //Update the delivery date.
                            if (
                                //                          //This res is not Calendar
                                !((bool)res.boolnIsCalendar)
                                )
                            {
                                //                          //Do nothing
                            } 
                            else if (
                                //                          //Only if all time process cal has a period.
                                boolAllProcessCalculationHasPeriod &&
                                //                          //This res is Calendar.
                                (bool)res.boolnIsCalendar &&
                                //                          //Up to now, all res(calendar type) has period.
                                boolAllResourcesOfCalendarTypeHasAPeriod
                                )
                            {
                                //                          //Get periods resource.
                                List<PerentityPeriodEntityDB> darrperentityRes = context.Period.Where(perentity =>
                                    perentity.intJobId == jobjson_I.intJobId &&
                                    perentity.intPkElement == res.intPk &&
                                    perentity.intPkWorkflow == piwentity.intPkWorkflow &&
                                    perentity.intProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                                    perentity.intnPkElementElementType == intnPkElementElementType &&
                                    perentity.intnPkElementElement == intnPkElementElement &&
                                    perentity.intnEstimateId == null).ToList();

                                if (
                                    darrperentityRes.Count == 0
                                    )
                                {
                                    boolAllResourcesOfCalendarTypeHasAPeriod = false;
                                    strDeliveryDate_O = "Delivery date not available.";
                                }

                                foreach (PerentityPeriodEntityDB perentity in darrperentityRes)
                                {
                                    ZonedTime ztime =
                                        ZonedTimeTools.NewZonedTime((perentity.strEndDate).ParseToDate(),
                                         perentity.strEndTime.ParseToTime());
                                    if (
                                        ztime > ztimeDeliveryDate
                                        )
                                    {
                                        ztimeDeliveryDate = ztime;
                                        strDeliveryDate_O = ztimeDeliveryDate.Date.ToString() + ", " +
                                            ztimeDeliveryDate.Time.ToString().Substring(0, 5);

                                        //                  //Delete alerts related to periods that were deleted
                                        //                  //      because period's tolerance was not reached.
                                        ProdtypProductType.subDeletePeriodAlertWhenDeliveryDateExists(
                                            jobjson_I.intJobId, intPkPrintshop_I, iHubContext_I);
                                    }
                                }
                            }
                            else
                            {
                                boolAllResourcesOfCalendarTypeHasAPeriod = false;
                                strDeliveryDate_O = "Delivery date not available.";
                            }
                        }
                        else
                        {
                            boolAllResourcesAreAvailable_O = false;
                            strDeliveryDate_O = "Delivery date not available.";
                        }

                        //                                  //Review if res has an account.
                        //                                  //Only if this resource is going to cost in the job 
                        //                                  //      (Input without link).

                        if (
                            arriojson1[intJ].strLink == null && boolIsInput
                            )
                        {
                            int? intnPkAccount = null;

                            CostentityCostEntityDB costentity = null;
                            if (
                                strStage_I == JobJob.strPendingStage
                                )
                            {
                                costentity = res.costentityCurrent;
                            }
                            else
                            {
                                ZonedTime ztimeJobDate =
                                    ZonedTimeTools.NewZonedTime(jobentity_I.strStartDate.ParseToDate(),
                                    jobentity_I.strStartTime.ParseToTime());
                                costentity = res.GetCostDependingDate(ztimeJobDate);
                            }

                            if (
                                costentity != null
                                )
                            {
                                //                          //Get the account of the resource.
                                intnPkAccount = costentity.intPkAccount;
                            }
                            if (
                                intnPkAccount == null
                                )
                            {
                                boolAllResourcesHaveAnAccount_O = false;

                                //                          //Add resource name to list.
                                darrstrResourcesNamesWithoutAccount_O.Add(res.strName);
                            }
                        }
                    }
                    intJ = intJ + 1;
                }
                intI = intI + 1;
            }

            //                                              //Get the product calculations.
            List<CalentityCalculationEntityDB> darrcalentityAllProduct = context.Calculation.Where(
                cal => cal.intnPkProduct == intPkProduct_I &&
                cal.strByX == CalCalculation.strByProduct &&
                //                                          //To consider only current calculations.
                cal.strEndDate == null && cal.strEndTime == null).ToList();

            //                                              //To review if any Product Calculation does not have an 
            //                                              //      account.
            foreach (CalentityCalculationEntityDB calentity in darrcalentityAllProduct)
            {
                //                                          //The claculation byProduct profit has not account 
                //                                          //      associated.
                if (
                    !(calentity.strCalculationType == CalCalculation.strProfit) &&
                    calentity.intnPkAccount == null
                    )
                {
                    boolAllCalculationsByProductHaveAnAccount_O = false;
                }
            }

            if (
                //                                          //Estimates have order ids under 0.
                intnOrderId_I == null || intnOrderId_I <= 0
                )
            {
                boolIsNotEstimate_O = false;
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subDeletePeriodAlertWhenDeliveryDateExists(
            //                                              //Delete alerts that were created when a period was 
            //                                              //      deleted because its tolerance time was not 
            //                                              //      reached.

            int intJobId_I,
            int intPkPrintshop_I,
            IHubContext<ConnectionHub> iHubContext_I
            )
        {
            //                                              //Establish the connection to db.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Job must be in progress.
            JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID == intJobId_I &&
                job.intStage == JobJob.intInProgressStage);
            if (
                jobentity != null
                )
            {
                //                                          //Find supervisors.
                List<RolentityRoleEntityDB> darrroleentity = context.Role.Where(role =>
                    role.intPkPrintshop == intPkPrintshop_I && role.boolSupervisor).ToList();

                //                                          //Delete alerts related to deleted periods.

                //                                          //Find alert type related to periods that were deleted.
                AlerttypeentityAlertTypeEntityDB alerttypeentity = context.AlertType.FirstOrDefault(alerttype =>
                    alerttype.strType == AlerttypeentityAlertTypeEntityDB.strDueDateAtRisk);
                //                                          //Find all alerts generated in the job related to 
                //                                          //      deleted periods.
                List<AlertentityAlertEntityDB> darralertentity = context.Alert.Where(alert =>
                    alert.intnJobId == intJobId_I && alert.intPkAlertType == alerttypeentity.intPk).ToList();

                foreach (AlertentityAlertEntityDB alertentity in darralertentity)
                {
                    foreach (RolentityRoleEntityDB roleentity in darrroleentity)
                    {
                        if (
                            //                              //Notification not read.
                            !PsPrintShop.boolNotificationReadByUser(alertentity, roleentity.intContactId)
                            )
                        {
                            AlnotAlertNotification.subReduceToOne(roleentity.intContactId, iHubContext_I);
                        }
                    }

                    context.Alert.Remove(alertentity);
                }
                context.SaveChanges();
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolOtherSideLinkProcessIsCompleted(
            //                                              //Verify if dependencies are completed.
            int intJobId_I,
            PsPrintShop ps_I,
            List<Iojson1InputOrOutputJson1> darriojson1Input_I,
            PiwentityProcessInWorkflowEntityDB piwentityProcessInWorkflow_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessInJob_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I
            )
        {
            //                                              //Establish the connection to db.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Verify each input of the process.
            bool boolCanStartProcess = true;
            int intI = 0;
            while (
                boolCanStartProcess == true &&
                intI < darriojson1Input_I.Count()
                )
            {
                if (
                    //                                      //The input has link.
                    darriojson1Input_I[intI].strLink != null
                    )
                {
                    //                                      //Get IOs with the same link
                    List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSideOfLink = context.InputsAndOutputs.Where(
                        io =>
                        io.intPkWorkflow == piwentityProcessInWorkflow_I.intPkWorkflow &&
                        io.intnProcessInWorkflowId != null &&
                        io.intnProcessInWorkflowId != piwentityProcessInWorkflow_I.intProcessInWorkflowId &&
                        io.strLink == darriojson1Input_I[intI].strLink).ToList();

                    int intPkProcessInWorkflowPre = -1;
                    bool boolIOFound = false;
                    int intJ = 0;
                    while (
                        boolIOFound == false && intJ < darrioentityOtherSideOfLink.Count()
                        )
                    {
                        //                                  //Get Pk of PIW to the belong the current IO 
                        intPkProcessInWorkflowPre = context.ProcessInWorkflow.FirstOrDefault(piw =>
                            piw.intPkWorkflow == darrioentityOtherSideOfLink[intJ].intPkWorkflow &&
                            piw.intProcessInWorkflowId ==
                            darrioentityOtherSideOfLink[intJ].intnProcessInWorkflowId).intPk;

                        if (
                            //                              //The PIW is in the normal process list
                            darrpiwentityProcessInJob_I.Exists(piw => piw.intPk == intPkProcessInWorkflowPre)
                            )
                        {
                            boolIOFound = true;
                        }

                        intJ = intJ + 1;
                    }

                    if (
                        //                                  //The IO was not found
                        !boolIOFound
                        )
                    //                                      //It is a link node - node
                    {
                        //                                  //Get Pk of previous PIW in list (darrdynlkjson_I)
                        intPkProcessInWorkflowPre = (int)darrdynlkjson_I.FirstOrDefault(piw =>
                            piw.intnPiwI == piwentityProcessInWorkflow_I.intPk).intnPiwO;
                    }

                    //                                      //Verify if process is completed.
                    PiwjentityProcessInWorkflowForAJobEntityDB piwjentity =
                            context.ProcessInWorkflowForAJob.FirstOrDefault(piwj =>
                            piwj.intJobId == intJobId_I &&
                            piwj.intPkPrintshop == ps_I.intPk &&
                            piwj.intPkProcessInWorkflow == intPkProcessInWorkflowPre);
                    if (
                        (piwjentity == null || piwjentity.intStage != JobJob.intProcessInWorkflowCompleted)
                        )
                    {
                        //                                  //The process has not been started yet or the process is
                        //                                  //  not completed.
                        boolCanStartProcess = false;
                    }
                }
                intI = intI + 1;
            }

            return boolCanStartProcess;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subGetJobStage(
            //                                              //To get the stage of a Job.
            int intJobId_I,
            ref String strStage_IO
            )
        {
            //                                              //Establish the connection to db.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get register from job's table.
            JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID == intJobId_I);

            strStage_IO = "Pending.";
            if (
                //                                          //Job has a stage.
                jobentity != null
                )
            {
                /*CASE*/
                if (
                    jobentity.intStage == JobJob.intInProgressStage
                    )
                {
                    strStage_IO = JobJob.strInProgressStage;
                }
                else if (
                   jobentity.intStage == JobJob.intCompletedStage
                   )
                {
                    strStage_IO = JobJob.strCompletedStage;
                }
                /*END-CASE*/
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subGetWorkflowInformation(
            //                                              //To return the information about why a workflow is not 
            //                                              //      ready.
            //                                              //A process that is not connected to the main processes
            //                                              //      make workflow not ready. 
            //                                              //If last process in a process chain is not a final
            //                                              //      product, then workflow is not ready. 

            int intPkWorkflow_I,
            out WnrjsonWorkflowNotReadyJson wnrjsonWFIsReady_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Object to return.
            wnrjsonWFIsReady_O = null;

            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Find workflow.
            WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                wf.intPk == intPkWorkflow_I);

            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "No workflow found.";
            if (
                wfentity != null
                )
            {
                //                                          //Get info about workflow.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityWithFinalProduct;
                bool boolWorkflowIsReady;
                bool? boolnOnlyOneStart_O;
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesNotReady;
                ProdtypProductType.subfunWorkflowIsReady(intPkWorkflow_I, out darrpiwentityWithFinalProduct,
                    out boolWorkflowIsReady, out boolnOnlyOneStart_O, out darrpiwentityProcessesNotReady);

                bool boolHasFinalProduct_I = darrpiwentityWithFinalProduct.Count > 0 ? true : false;

                if (
                    //                                      //Workflow totally complete.
                    boolWorkflowIsReady &&
                    boolHasFinalProduct_I
                    )
                {
                    //                                      //Create object to return.

                    List<String> darrstrProcessNames = new List<String>();
                    //                                      //Create message.
                    String strMessage = "Everything is fine.";
                    //                                      //Object to return.
                    WnrjsonWorkflowNotReadyJson wnrjson = new WnrjsonWorkflowNotReadyJson(strMessage,
                        darrstrProcessNames.ToArray());
                    wnrjsonWFIsReady_O = wnrjson;
                }
                else
                {
                    //                                      //Workflow not ready.

                    List<String> darrstrProcessNames = new List<String>();
                    foreach (PiwentityProcessInWorkflowEntityDB piwentityNotReady in darrpiwentityProcessesNotReady)
                    {
                        //                                  //To easy code.
                        String strProcessName = ProProcess.proFromDB(piwentityNotReady.intPkProcess).strName;
                        strProcessName = piwentityNotReady.intnId != null ?
                            strProcessName + " (" + piwentityNotReady.intnId + ")" : strProcessName;
                        darrstrProcessNames.Add(strProcessName);
                    }

                    if (
                        darrstrProcessNames.Count > 0 &&
                        boolnOnlyOneStart_O != false
                        )
                    {
                        //                                  //Create object to return.

                        String strTips = "1.- Process needs to have a final product. \r\n 2.- Process's links need " +
                            "to reach a process with final product. \r\n 3.- Process may have two or more outputs " +
                            "that are linked directly to processes with final product. \r\n 4.- Process needs to " +
                            "be linked to other processes.";
                        wnrjsonWFIsReady_O = new WnrjsonWorkflowNotReadyJson(strTips, darrstrProcessNames.ToArray());
                    }
                    else
                    {
                        if (
                            boolnOnlyOneStart_O == false
                            )
                        {
                            String strTips = "1.- Two or more processes cannot be connected to the same node.";
                            wnrjsonWFIsReady_O = new WnrjsonWorkflowNotReadyJson(strTips, darrstrProcessNames.ToArray());
                        }
                        else
                        {
                            //                                  //No processes added to workflow.

                            String strTips = "No processes found.";
                            wnrjsonWFIsReady_O = new WnrjsonWorkflowNotReadyJson(strTips, darrstrProcessNames.ToArray());
                        }

                    }
                }

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "";
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void GetWorkflowData(
            //                                              //To get data from database.

            int intPkWorkflow_I,
            //                                              //Processes in workflow.
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityFromProduct_O,
            //                                              //All IOs in the processes in this workflow.
            out List<IoentityInputsAndOutputsEntityDB> darrioentityAllFromProduct_O,
            //                                              //Get all nodes from workflow product.
            out List<IoentityInputsAndOutputsEntityDB> darrioentityNodeFromProduct_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            darrpiwentityFromProduct_O = new List<PiwentityProcessInWorkflowEntityDB>();
            darrioentityAllFromProduct_O = new List<IoentityInputsAndOutputsEntityDB>();
            darrioentityNodeFromProduct_O = new List<IoentityInputsAndOutputsEntityDB>();

            darrpiwentityFromProduct_O = context.ProcessInWorkflow.Where(
                piw => piw.intPkWorkflow == intPkWorkflow_I).ToList();

            darrioentityAllFromProduct_O = context.InputsAndOutputs.Where(ioentity =>
                    ioentity.intPkWorkflow == intPkWorkflow_I).ToList();

            //                                              //Get Nodes from workflow.
            darrioentityNodeFromProduct_O = darrioentityAllFromProduct_O.Where(io =>
            io.intnPkElementElementType == null && io.intnPkElementElement == null).ToList();

            intStatus_IO = 200;
            strUserMessage_IO = "";
            strDevMessage_IO = "";
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public void GetResourcesWithCalculationsNotInThisWorkflow(
            //                                              //To get all the resources that have calculation and does
            //                                              //      not have condition to apply, that are not in this
            //                                              //      workflow.                                                              

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityFromProduct_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityFromProduct_I,
            //                                              //array of resources to return.
            out ResorprojsonResourceOrProcessJson[] resorprojsonResources_O,

            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Get Calculation without condition to apply.
            Dictionary<int, CalCalculation> diccal = this.diccal;
            List<CalCalculation> darrcalResourcesOfThisProduct = new List<CalCalculation>();
            foreach (KeyValuePair<int, CalCalculation> cal in diccal)
            {
                if (
                    (Tools.gpcondjsonGetCondition(cal.Value.intPk, null, null, null) == null) &&
                    (cal.Value.intnPkResourceElementBelongsTo != null)
                    )
                {
                    darrcalResourcesOfThisProduct.Add(cal.Value);
                }
            }

            //                                              //Get the not yet setted resources of the calculations.
            List<ResorprojsonResourceOrProcessJson> darrresorprojson =
                new List<ResorprojsonResourceOrProcessJson>();
            foreach (CalCalculation cal in darrcalResourcesOfThisProduct)
            {
                ResResource res = ResResource.resFromDB(cal.intnPkResourceElementBelongsTo, false);
                bool boolIsSettedInWorkflow = false;
                int intI = 0;
                while (
                    (intI < darrioentityFromProduct_I.Count) &&
                    !boolIsSettedInWorkflow
                    )
                {
                    if (
                        darrioentityFromProduct_I[intI].intnPkResource != null
                        )
                    {
                        int intPkIOres = (int)darrioentityFromProduct_I[intI].intnPkResource;
                        if (
                            intPkIOres == res.intPk
                            )
                        {
                            boolIsSettedInWorkflow = true;
                        }
                    }
                    intI = intI + 1;
                }

                if (
                    !boolIsSettedInWorkflow
                    )
                {
                    ResorprojsonResourceOrProcessJson resorprojson = new ResorprojsonResourceOrProcessJson(
                        res.intPk, res.strName);
                    darrresorprojson.Add(resorprojson);
                }
            }

            resorprojsonResources_O = darrresorprojson.ToArray();

            intStatus_IO = 200;
            strUserMessage_IO = "";
            strDevMessage_IO = "";
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subGetInfoProcessesAndNodes(
            //                                              //To get all IOs without link in the input side.

            int intPkWorkflow_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityFromProduc_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityFromProduct_I,
            out List<ResorprojsonResourceOrProcessJson> darrresorprojsonProcessNoLinksAtOutput_O,
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNoLinksAtInput_O,
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNoLinksAtOutput_O,
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNoEleetOrEleele_O,
            //                                              //PIW with finalProduct setted.
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityWithFinalProduct_O,
            //                                              //Node without link at input.
            out List<IoentityInputsAndOutputsEntityDB> darrioentityNodesWithoutLinkAtInput_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            darrresorprojsonProcessNoLinksAtOutput_O = new List<ResorprojsonResourceOrProcessJson>();
            darrpiwentityNoLinksAtInput_O = new List<PiwentityProcessInWorkflowEntityDB>();
            darrpiwentityNoLinksAtOutput_O = new List<PiwentityProcessInWorkflowEntityDB>();
            darrpiwentityNoEleetOrEleele_O = new List<PiwentityProcessInWorkflowEntityDB>();
            darrpiwentityWithFinalProduct_O = new List<PiwentityProcessInWorkflowEntityDB>();
            darrioentityNodesWithoutLinkAtInput_O = new List<IoentityInputsAndOutputsEntityDB>();

            //                                          //Find nodes that do not have input links.
            darrioentityNodesWithoutLinkAtInput_O =
                ProdtypProductType.darrioentityStartingNodesInWorkflow(intPkWorkflow_I, new Odyssey2Context());

            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentityFromProduc_I)
            {
                //                                          //Find PIW with finalProduct setted.
                if (
                    //                                      //Veryfy if already there is a resouce setted 
                    //                                      //    how the productFinal in this PIW.
                    ProdtypProductType.boolIsResourceProductFinalSetted(piwentity, darrioentityFromProduct_I)
                    )
                {
                    //                                      //Add PIW with resource FinalProduct setted.
                    darrpiwentityWithFinalProduct_O.Add(piwentity);
                }

                bool boolNoLinksAtInput = true;
                bool boolNoLinksAtOutput = true;
                bool boolNoEleetOrEleeleAtInput = true;
                bool boolNoEleetOrEleeleAtOutput = true;

                int intI = 0;
                while (
                    (intI < darrioentityFromProduct_I.Count) &&
                    //                                      //Salgo solo si ambos son falsos, ya encontre liga 
                    //                                      //       a la salida y a la entrada.
                    (boolNoLinksAtInput || boolNoLinksAtOutput)
                    )
                {
                    if (
                        //                                  //There is a IO and has link.
                        piwentity.intPkWorkflow == darrioentityFromProduct_I[intI].intPkWorkflow &&
                        piwentity.intProcessInWorkflowId == darrioentityFromProduct_I[intI].intnProcessInWorkflowId &&
                        darrioentityFromProduct_I[intI].strLink != null
                        )
                    {
                        if (
                            //                              //IO is in Input.
                            ProdtypProductType.BoolIOIsInput(darrioentityFromProduct_I[intI])
                            )
                        {
                            boolNoLinksAtInput = false;
                        }
                        else
                        {
                            //                              //IO is an Output.
                            boolNoLinksAtOutput = false;
                        }
                    }
                    intI = intI + 1;
                }
                if (
                    boolNoLinksAtInput ||
                    boolNoLinksAtOutput
                    )
                {

                    ProProcess proProcess = ProProcess.proFromDB(piwentity.intPkProcess);

                    ResorprojsonResourceOrProcessJson resorprojson = new ResorprojsonResourceOrProcessJson(
                        proProcess.intPk, proProcess.strName);

                    if (
                        boolNoLinksAtInput
                        )
                    {
                        darrpiwentityNoLinksAtInput_O.Add(piwentity);
                    }
                    if (
                        boolNoLinksAtOutput
                        )
                    {
                        darrresorprojsonProcessNoLinksAtOutput_O.Add(resorprojson);
                        darrpiwentityNoLinksAtOutput_O.Add(piwentity);
                    }
                }

                List<int> darrintPDadInput;
                List<int> darrintPDadOutput;
                ProdtypProductType.getDads(piwentity.intPkProcess, out darrintPDadInput, out darrintPDadOutput);

                if (
                    darrintPDadInput.Count > 0
                    )
                {
                    boolNoEleetOrEleeleAtInput = false;
                }
                if (
                    darrintPDadOutput.Count > 0
                    )
                {
                    boolNoEleetOrEleeleAtOutput = false;
                }

                if (
                    boolNoEleetOrEleeleAtInput || boolNoEleetOrEleeleAtOutput
                    )
                {
                    darrpiwentityNoEleetOrEleele_O.Add(piwentity);
                }
            }
            intStatus_IO = 200;
            strUserMessage_IO = "";
            strDevMessage_IO = "";
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void getDads(

            int intPkProcess_I,

            out List<int> darrintPkDadInput_O,
            out List<int> darrintPkDadOutput_O
            )
        {
            darrintPkDadInput_O = new List<int>();
            darrintPkDadOutput_O = new List<int>();

            List<EleetentityElementElementTypeEntityDB> darreleetentityDads =
                new List<EleetentityElementElementTypeEntityDB>();
            List<EleeleentityElementElementEntityDB> darreleeleentityDads =
                new List<EleeleentityElementElementEntityDB>();

            Odyssey2Context context = new Odyssey2Context();

            IQueryable<EleetentityElementElementTypeEntityDB> seteleetentity = context.ElementElementType.
                Where(eleetentity => eleetentity.intPkElementDad == intPkProcess_I);
            darreleetentityDads = seteleetentity.ToList();

            IQueryable<EleeleentityElementElementEntityDB> seteleeleentity = context.ElementElement.
                Where(eteleentity => eteleentity.intPkElementDad == intPkProcess_I);
            darreleeleentityDads = seteleeleentity.ToList();

            IEnumerable<int> setintPkDadInput1 = from eleetentity in darreleetentityDads
                                                 where
                                                 eleetentity.boolUsage == true
                                                 select eleetentity.intPkElementDad;
            IEnumerable<int> setintPkDadInput2 = from eteleentity in darreleeleentityDads
                                                 where eteleentity.boolUsage == true
                                                 select eteleentity.intPkElementDad;

            IEnumerable<int> setintPkDadOutput1 = from eleetentity in darreleetentityDads
                                                  where
                                                  eleetentity.boolUsage == false
                                                  select eleetentity.intPkElementDad;
            IEnumerable<int> setintPkDadOutput2 = from eleeleentity in darreleeleentityDads
                                                  where eleeleentity.boolUsage == false
                                                  select eleeleentity.intPkElementDad;

            foreach (int intPkDad in setintPkDadInput1)
            {
                darrintPkDadInput_O.Add(intPkDad);
            }
            foreach (int intPkDad in setintPkDadInput2)
            {
                darrintPkDadInput_O.Add(intPkDad);
            }

            foreach (int intPkDad in setintPkDadOutput1)
            {
                darrintPkDadOutput_O.Add(intPkDad);
            }
            foreach (int intPkDad in setintPkDadOutput2)
            {
                darrintPkDadOutput_O.Add(intPkDad);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool BoolIOIsInput(

            IoentityInputsAndOutputsEntityDB ioentity_I
            )
        {
            bool boolIsInput = true;

            Odyssey2Context context = new Odyssey2Context();

            if (
                 ioentity_I.intnPkElementElementType != null
                )
            {
                EleetentityElementElementTypeEntityDB eleetentity = context.ElementElementType.FirstOrDefault(
                    eleet => eleet.intPk == ioentity_I.intnPkElementElementType);

                if (
                    eleetentity.boolUsage == true
                    )
                {
                    boolIsInput = true;
                }
                else
                {
                    boolIsInput = false;
                }

            }
            if (
                ioentity_I.intnPkElementElement != null
                )
            {
                EleeleentityElementElementEntityDB etele = context.ElementElement.FirstOrDefault(
                    etele => etele.intPk == ioentity_I.intnPkElementElement);
                if (
                    etele.boolUsage == true
                    )
                {
                    boolIsInput = true;
                }
                else
                {
                    boolIsInput = false;
                }
            }
            return boolIsInput;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subVerifyProcess(
            //                                              /Each process is validated in the workflow.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNoLinksAlOutput_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityFromProduct_I,
            ref List<int> darrintStackProcesInWorkflow_M,
            //                                              //Verified stack of analyzed processes in the workflow.
            ref List<int> darrintpkProcessStackAnalyzedInAllWF_M,
            //                                              //Final PIW of the workflow.
            ref PiwentityProcessInWorkflowEntityDB piwentityFinalPIW_M,
            ref bool boolHasCycles_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Add pk process to stack process to verify.
            darrintpkProcessStackAnalyzedInAllWF_M.Add(piwentity_I.intPk);

            //                                              //Take all Links Outputs of a Process.
            List<IoentityInputsAndOutputsEntityDB> ioentityIOProcessOutputs =
                new List<IoentityInputsAndOutputsEntityDB>();

            /*CASE*/
            if (
                //                                          //PIW is the last process.
                darrpiwentityNoLinksAlOutput_I.Exists(piwentityLastProcess =>
                piwentityLastProcess.intPk == piwentity_I.intPk)
                )
            {
                //                                          //End of recursive method.

                //                                          //Get last ProcessInWorkflow.
                piwentityFinalPIW_M = piwentity_I;
            }
            else if (
               //                                          //PIW has Cycle.
               darrintStackProcesInWorkflow_M.Exists(intPkProcess => intPkProcess == piwentity_I.intPk)
               )
            {
                boolHasCycles_IO = true;
            }
            else
            {
                //                                          //Find IO of a process with links.
                List<IoentityInputsAndOutputsEntityDB> darrIOsFromProcess = darrioentityFromProduct_I.Where(ioentity =>
                    ioentity.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    ioentity.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    ioentity.strLink != null).ToList();

                //                                          //Find all the next processes.
                List<IoentityInputsAndOutputsEntityDB> darrioentityAllProcessNext = new
                    List<IoentityInputsAndOutputsEntityDB>();
                foreach (IoentityInputsAndOutputsEntityDB IOsFromProcess in darrIOsFromProcess)
                {
                    if (
                        //                                  //IO is Output.
                        !ProdtypProductType.BoolIOIsInput(IOsFromProcess)
                        )
                    {
                        //                                  //Find outputs of a process.
                        IoentityInputsAndOutputsEntityDB ioentityOtherLink = darrioentityFromProduct_I.FirstOrDefault(
                            ioentity => ioentity.intPkWorkflow == IOsFromProcess.intPkWorkflow &&
                            ioentity.intnProcessInWorkflowId != IOsFromProcess.intnProcessInWorkflowId &&
                            ioentity.strLink == IOsFromProcess.strLink);

                        if (
                            ioentityOtherLink != null
                            )
                        {
                            //                              //Next Processes after this current process.
                            darrioentityAllProcessNext.Add(ioentityOtherLink);
                        }
                    }
                }

                int intCurrentPointStackProcess;
                //                                          //Continue validated the next processes.
                int intI = 0;
                /*REPEAT-WHILE*/
                while (
                    //                                      //Take each next process.
                    (intI < darrioentityAllProcessNext.Count) &&
                    //                                      //Repeat while there are cycles.
                    (boolHasCycles_IO == false)
                    )
                {
                    darrintStackProcesInWorkflow_M.Add(piwentity_I.intPk);
                    intCurrentPointStackProcess = darrintStackProcesInWorkflow_M.Count;

                    PiwentityProcessInWorkflowEntityDB piwentityAuxiliar = context.ProcessInWorkflow.FirstOrDefault(
                        piw => piw.intPkWorkflow == darrioentityAllProcessNext[intI].intPkWorkflow &&
                        piw.intProcessInWorkflowId == darrioentityAllProcessNext[intI].intnProcessInWorkflowId);

                    //                                      //Analize the next process.
                    ProdtypProductType.subVerifyProcess(piwentityAuxiliar, darrpiwentityNoLinksAlOutput_I,
                        darrioentityFromProduct_I, ref darrintStackProcesInWorkflow_M,
                        ref darrintpkProcessStackAnalyzedInAllWF_M, ref piwentityFinalPIW_M, ref boolHasCycles_IO);
                    //                                      //RemoveAt is in base zero.
                    darrintStackProcesInWorkflow_M.RemoveAt(intCurrentPointStackProcess - 1);

                    intI = intI + 1;
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subfunWorkflowIsReady(
            //                                              //Returns true if workflow is ready.

            int intPkWorkflow_I,
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityWithFinalProduct_O,
            out bool boolWorkflowIsReady_O,
            out bool? boolnOnlyOneStart_O,
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesNotReady_O
            )
        {
            boolWorkflowIsReady_O = false;
            boolnOnlyOneStart_O = null;
            darrpiwentityWithFinalProduct_O = new List<PiwentityProcessInWorkflowEntityDB>();
            //                                              //Processes that are not ready.
            darrpiwentityProcessesNotReady_O = new List<PiwentityProcessInWorkflowEntityDB>();

            int intStatus = 0;
            String strUserMessage = "";
            String strDevMessage = "";

            //                                              //Workflow data.
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllFromProduct;
            List<IoentityInputsAndOutputsEntityDB> darrioentityNodeFromProduct;
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityFromProduct;
            ProdtypProductType.GetWorkflowData(intPkWorkflow_I, out darrpiwentityFromProduct,
                out darrioentityAllFromProduct, out darrioentityNodeFromProduct, ref intStatus,
                ref strUserMessage, ref strDevMessage);

            if (
                (intStatus == 200) &&
                (darrpiwentityFromProduct.Count > 0)
                )
            {
                //                                          //It is not valid that two starting processes go to the same
                //                                          //      node. This methodod return false in that case. 
                //                                          //When the starting point is a node, this method also return
                //                                          //      the node.
                IoentityInputsAndOutputsEntityDB ioentityNode;
                boolnOnlyOneStart_O = ProdtypProductType.boolOnlyOneStart(intPkWorkflow_I, out ioentityNode);

                if (
                    //                                      //Is staring point is a node.
                    ioentityNode != null
                    )
                {
                    //                                      //IOsProcess Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeProcessesResult;

                    //                                      //IOsNodes Before.
                    List<IobefornexjsonInputsAndOutputsBeforeOrNextJson>
                        darriobefornextjsonIOsBeforeNodesResult;

                    Odyssey2Context context = new Odyssey2Context();

                    //                                      //Get IOs before from ioentityIN.
                    ProdtypProductType.subGetIOsProcessesOrNodesBeforeOrNextFROMIOProcessOrIONode(ioentityNode,
                        false, false, out darriobefornextjsonIOsBeforeProcessesResult,
                        out darriobefornextjsonIOsBeforeNodesResult, context);

                    foreach (IobefornexjsonInputsAndOutputsBeforeOrNextJson iobefornextjsonProcess
                        in darriobefornextjsonIOsBeforeProcessesResult)
                    {
                        PiwentityProcessInWorkflowEntityDB piw = darrpiwentityFromProduct.FirstOrDefault(
                            piw => piw.intProcessInWorkflowId ==
                            (int)iobefornextjsonProcess.ioentityBeforeOrNext.intnProcessInWorkflowId);

                        darrpiwentityProcessesNotReady_O.Add(piw);
                    }
                }

                if (
                    boolnOnlyOneStart_O == true
                    )
                {
                    //                                          //Resource or process without links at outputs.
                    List<ResorprojsonResourceOrProcessJson> darrresorprojsonProcessNoLinksAtOutput;
                    //                                          //Processes without links at input.
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNoLinksAtInput;
                    //                                          //Processes without links at output.
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNoLinksAtOutput;
                    //                                          //Processes without IOs.
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNoEleetOrEleele;
                    //                                          //Processes with final product.
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityWithFinalProduct;
                    //                                          //Nodes without links at input.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityNodesWithoutLinkAtInput;

                    ProdtypProductType.subGetInfoProcessesAndNodes(intPkWorkflow_I, darrpiwentityFromProduct,
                        darrioentityAllFromProduct, out darrresorprojsonProcessNoLinksAtOutput,
                        out darrpiwentityNoLinksAtInput, out darrpiwentityNoLinksAtOutput,
                        out darrpiwentityNoEleetOrEleele, out darrpiwentityWithFinalProduct,
                        out darrioentityNodesWithoutLinkAtInput, ref intStatus, ref strUserMessage,
                        ref strDevMessage);

                    if (
                        intStatus == 200
                        )
                    {
                        bool boolIsContinue = true;

                        //                                      //Validate that if there are 2 or more PIW
                        //                                      //    with finalProductSetted, these piw should
                        //                                      //    have links at the input or at the output.
                        if (
                            darrpiwentityWithFinalProduct.Count >= 2
                            )
                        {
                            int intW = 0;

                            /*DO-WHILE*/
                            while (
                                //                              //Take each piw.
                                intW < darrpiwentityWithFinalProduct.Count
                                )
                            {
                                //                              //PIW current has link int the input or not..
                                bool boolPIWithFinalProductHasLinksInput = darrpiwentityNoLinksAtInput.Exists(piw =>
                                piw.intPk == darrpiwentityWithFinalProduct[intW].intPk) ? false : true;

                                //                              //PIW current has link int the output or not..
                                bool boolPIWithFinalProductHasLinksOutput = darrpiwentityNoLinksAtOutput.Exists(piw =>
                                 piw.intPk == darrpiwentityWithFinalProduct[intW].intPk) ? false : true;

                                if (
                                    //                          //PIWcurrent has not inputs or output.
                                    !(boolPIWithFinalProductHasLinksInput || boolPIWithFinalProductHasLinksOutput)
                                    )
                                {
                                    darrpiwentityProcessesNotReady_O.Add(darrpiwentityWithFinalProduct[intW]);
                                }

                                if (
                                    boolIsContinue
                                    )
                                {
                                    //                      //it can be continue if there are link in the inputs
                                    //                      //    or links in the outputs.
                                    boolIsContinue = boolPIWithFinalProductHasLinksInput || boolPIWithFinalProductHasLinksOutput;
                                }
                                intW = intW + 1;
                            }
                        }

                        //                                      //PIW final.
                        darrpiwentityWithFinalProduct_O = darrpiwentityWithFinalProduct;

                        if (
                            //                                  //Validate that if there are 2 or more PIW
                            //                                  //    with finalProductSetted, these piw should
                            //                                  //    have links at the input or at the output.
                            boolIsContinue
                            )
                        {

                            //                                      //Process and node analized in the workflow.
                            List<String> darrstrProcessAndNodeStackAnalyzedInAllWF = new List<String>();

                            //                                      //Evaluate PIW intials.
                            //                                      //The boolAreProcessesInitialReady will be true
                            //                                      //    while there is at least one way(eleetoreleele output), 
                            //                                      //    and the way arrive to PIW Final(productFinal) per each
                            //                                      //    PIW.
                            bool boolAreProcessesInitialReady = true;

                            int intI = 0;
                            /*WHILE-DO*/
                            while (
                                //                                  //Take each PIW.
                                intI < darrpiwentityNoLinksAtInput.Count &&
                                //                                  //ProcessInitial are ready.
                                boolAreProcessesInitialReady
                                )
                            {
                                if (
                                    ProdtypProductType.boolIsProcessReady(darrpiwentityNoLinksAtInput[intI],
                                    darrioentityAllFromProduct, darrpiwentityFromProduct, darrpiwentityWithFinalProduct,
                                    ref darrstrProcessAndNodeStackAnalyzedInAllWF, ref darrpiwentityProcessesNotReady_O)
                                    )
                                {
                                    //                              //Do not something.
                                }
                                else
                                {
                                    boolAreProcessesInitialReady = false;
                                }

                                intI = intI + 1;
                            }

                            //                                      //Evaluate Nodes initials.
                            //                                      //The boolAreNodesInitialReady will be true
                            //                                      //    while all way of the each node arrive to 
                            //                                      //    PIW FINAL(has productFinal), 
                            //                                      
                            bool boolAreNodesInitialReady = true;

                            int intJ = 0;
                            /*WHILE-DO*/
                            while (
                                //                                  //Take each PIW.
                                intJ < darrioentityNodesWithoutLinkAtInput.Count &&
                                //                                  //ProcessInitial are ready.
                                boolAreProcessesInitialReady &&
                                //                                  //NodesInitial are ready.
                                boolAreNodesInitialReady
                                )
                            {
                                if (
                                    //                              //Node is Ready.
                                    ProdtypProductType.boolIsNodeReady(darrioentityNodesWithoutLinkAtInput[intJ],
                                    darrioentityAllFromProduct, darrpiwentityFromProduct,
                                    darrpiwentityWithFinalProduct, ref darrstrProcessAndNodeStackAnalyzedInAllWF,
                                    ref darrpiwentityProcessesNotReady_O)
                                    )
                                {
                                    //                              //Do not something.
                                }
                                else
                                {
                                    boolAreNodesInitialReady = false;
                                }
                                intJ = intJ + 1;
                            }

                            darrstrProcessAndNodeStackAnalyzedInAllWF.Add("boolAreProcessesInitialReady:" +
                                boolAreProcessesInitialReady);

                            darrstrProcessAndNodeStackAnalyzedInAllWF.Add("boolAreNodesInitialReady:" +
                                boolAreNodesInitialReady);

                            strDevMessage = strDevMessage + "Log Stack Process analized in WF: ";

                            foreach (String StrProcessAndNode in darrstrProcessAndNodeStackAnalyzedInAllWF)
                            {
                                strDevMessage = strDevMessage + StrProcessAndNode + " - ";
                            }

                            //                                      //Validate than IOs for the same PIW do not reach
                            //                                      //      different FinalProduct.
                            bool boolIOsReachSameFinalProduct = (!boolAreProcessesInitialReady || !boolAreNodesInitialReady) ?
                                false : ProdtypProductType.boolIOsReachSameFinalProduct(intPkWorkflow_I);

                            //                                      //Workflow is ready whenever: 
                            //                                      
                            boolWorkflowIsReady_O = (
                                boolAreProcessesInitialReady &&
                                boolAreNodesInitialReady &&
                                boolIOsReachSameFinalProduct);
                        }
                        else
                        {
                            boolWorkflowIsReady_O = false;
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolOnlyOneStart(
            //                                              //Return False, If two process start process goes same node.

            int intPkWorkflow_I,
            out IoentityInputsAndOutputsEntityDB ioentityNode_O
            )
        {
            ioentityNode_O = null;

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Validate there is not two process where we can start than
            //                                              //      goes to same node.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityCanStart;
            List<IoentityInputsAndOutputsEntityDB> ioentityNodeCanStart;

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = context.ProcessInWorkflow.Where(piw =>
            piw.intPkWorkflow == intPkWorkflow_I).ToList();

            //                                              //Get all the those processes and nodes where we can start 
            //                                              //      our workflow.
            ProdtypProductType.subProcessesAndNodeWhereWFCanStart(intPkWorkflow_I, darrpiwentity,
                out darrpiwentityCanStart, out ioentityNodeCanStart);

            /*WHILE*/
            int intI = 0;
            bool boolOnlyOneStart = true;
            List<String> darrstrNodes = new List<String>();
            while (
                intI < darrpiwentityCanStart.Count &&
                boolOnlyOneStart
                )
            {
                //                                          //Get IOs for the piw.
                List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == darrpiwentityCanStart[intI].intPkWorkflow &&
                    io.intnProcessInWorkflowId == darrpiwentityCanStart[intI].intProcessInWorkflowId &&
                    io.strLink != null).ToList();

                List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO =
                                new List<IoentityInputsAndOutputsEntityDB>();

                //                                          //Keep only links for outputs.
                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                {
                    if (
                        ioentity.intnPkElementElementType != null
                        )
                    {
                        EleetentityElementElementTypeEntityDB eleetentity =
                            context.ElementElementType.FirstOrDefault(eleet =>
                            eleet.intPk == ioentity.intnPkElementElementType);
                        if (
                            !eleetentity.boolUsage
                            )
                        {
                            darrioentityNodeIO.Add(ioentity);
                        }
                    }
                    else
                    {
                        EleeleentityElementElementEntityDB eleeleentity =
                            context.ElementElement.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkElementElement);
                        if (
                            !eleeleentity.boolUsage
                            )
                        {
                            darrioentityNodeIO.Add(ioentity);
                        }
                    }
                }

                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodeIO)
                {
                    //                                          //Get other side of link.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSideLink = context.InputsAndOutputs.Where(io =>
                        io.intPkWorkflow == ioentity.intPkWorkflow &&
                        io.intPk != ioentity.intPk && io.strLink == ioentity.strLink).ToList();

                    IoentityInputsAndOutputsEntityDB ioentityOtherSideLink = null;
                    if (
                        darrioentityOtherSideLink.Count >= 2
                        )
                    {
                        ioentityOtherSideLink = darrioentityOtherSideLink.FirstOrDefault(io =>
                        io.intnPkElementElementType == null &&
                        io.intnPkElementElement == null);

                        if (
                            darrstrNodes.Contains(ioentityOtherSideLink.strLink)
                            )
                        {
                            boolOnlyOneStart = false;
                            ioentityNode_O = ioentityOtherSideLink;
                        }
                        else
                        {
                            darrstrNodes.Add(ioentityOtherSideLink.strLink);
                        }
                    }
                }

                intI++;
            }

            return boolOnlyOneStart;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolIsProcessReady(
            //                                              //PIW.
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //All IOs from product.
            List<IoentityInputsAndOutputsEntityDB> darrioentityFromProduct_I,
            //                                              //All PIW from product.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityFromProduct_I,
            //                                              //PIW finals.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityWithFinalProduct_I,
            //                                              //Process and Node analized in the workflow, Stack.
            ref List<String> darrstrProcessAndNodeStackAnalyzedInAllWF_IO,
            //                                              //Process in workflow not ready.
            ref List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesNotReady_IO

            )
        {
            //                                              //boolIsProcessReady will be true while there is at least
            //                                              //    way(eleetoreleele output) and the way arrive to PIW 
            //                                              //    Final(productFinal)
            bool boolIsProcessReady = true;
            if (
                //                                          //It is not a PIW with resourceFinal setted.
                !darrpiwentityWithFinalProduct_I.Exists(piw => piw.intPk == piwentity_I.intPk)
                )
            {
                boolIsProcessReady = false;

                if (
                    //                                      //It is a PIW normal.
                    !piwentity_I.boolIsPostProcess
                    )
                {
                    //                                      //GetIOs output linked to this process.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityByProcess = darrioentityFromProduct_I.Where(
                        io => io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                        io.strLink != null && !BoolIOIsInput(io)).ToList();

                    //                                      //take each ioEntityByProcess.
                    foreach (IoentityInputsAndOutputsEntityDB ioentityByProcess in darrioentityByProcess)
                    {
                        if (
                            //                              //IOs is linked with any node.
                            darrioentityFromProduct_I.Exists(io => io.intnPkElementElementType == null &&
                            io.intnPkElementElement == null && io.strLink == ioentityByProcess.strLink)
                            )
                        {
                            //                              //Can be a link IO-Node or Node-IO.
                            if (
                                //                          //It is a link IO to Node.
                                !ProdtypProductType.BoolIOIsInput(ioentityByProcess)
                                )
                            {
                                //                          //Get the node.
                                IoentityInputsAndOutputsEntityDB ioentityNodeNext =
                                    darrioentityFromProduct_I.FirstOrDefault(io => io.intnPkElementElementType == null &&
                                    io.intnPkElementElement == null && io.strLink == ioentityByProcess.strLink);

                                if (
                                    //                      //Node is Ready.
                                    ProdtypProductType.boolIsNodeReady(ioentityNodeNext,
                                    darrioentityFromProduct_I, darrpiwentityFromProduct_I,
                                    darrpiwentityWithFinalProduct_I,
                                    ref darrstrProcessAndNodeStackAnalyzedInAllWF_IO,
                                    ref darrpiwentityProcessesNotReady_IO)
                                    )
                                {
                                    boolIsProcessReady = true;
                                }
                            }
                        }
                        else
                        {
                            //                              //It is Link Process-Process.

                            //                              //Get the next process.
                            IoentityInputsAndOutputsEntityDB ioOtherPartLink = darrioentityFromProduct_I.FirstOrDefault(
                            ioentity => ioentity.intnProcessInWorkflowId != ioentityByProcess.intnProcessInWorkflowId &&
                            ioentity.strLink == ioentityByProcess.strLink);


                            //                              //Get the PIWEntity next.
                            PiwentityProcessInWorkflowEntityDB piwentityNext = darrpiwentityFromProduct_I.FirstOrDefault(
                                piw => piw.intProcessInWorkflowId == ioOtherPartLink.intnProcessInWorkflowId);

                            if (
                                ProdtypProductType.boolIsProcessReady(piwentityNext, darrioentityFromProduct_I,
                                darrpiwentityFromProduct_I, darrpiwentityWithFinalProduct_I,
                                ref darrstrProcessAndNodeStackAnalyzedInAllWF_IO,
                                ref darrpiwentityProcessesNotReady_IO)
                                )
                            {
                                boolIsProcessReady = true;
                            }
                        }
                    }
                }
            }

            if (
                !boolIsProcessReady
                )
            {
                darrpiwentityProcessesNotReady_IO.Add(piwentity_I);
            }

            //                                              //Log stack.
            darrstrProcessAndNodeStackAnalyzedInAllWF_IO.Add("Pro(" + piwentity_I.intProcessInWorkflowId + ", " +
                boolIsProcessReady + ")");

            return boolIsProcessReady;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolIsNodeReady(
            //                                              //PIW.
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            //                                              //All IOs from product.
            List<IoentityInputsAndOutputsEntityDB> darrioentityFromProduct_I,
            //                                              //All PIW from product.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityFromProduct_I,
            //                                              //PIW finals.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityWithFinalProduct_I,
            //                                              //Process and Node analized in the workflow, Stack.
            ref List<String> darrstrProcessAndNodeStackAnalyzedInAllWF_IO,
            //                                              //Process in workflow not ready.
            ref List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesNotReady_IO
            )
        {
            //                                              //Establish the connection to DB.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get Link Node-Node
            List<LinknodLinkNodeEntityDB> darrlinknodNextNode = context.LinkNode.Where(linknode =>
                linknode.intPkNodeO == ioentityNode_I.intPk).ToList();

            //                                              //List of the next nodes.
            List<IoentityInputsAndOutputsEntityDB> darrioentityNextRoutesToNode =
                new List<IoentityInputsAndOutputsEntityDB>();

            foreach (LinknodLinkNodeEntityDB linknode in darrlinknodNextNode)
            {
                //                                          //Get IOentity Next Node.
                IoentityInputsAndOutputsEntityDB ioentityNextNode = darrioentityFromProduct_I.FirstOrDefault(
                    io => io.intPk == linknode.intPkNodeI);

                darrioentityNextRoutesToNode.Add(ioentityNextNode);
            }

            //                                              //Get next routes to process from this node. 
            List<IoentityInputsAndOutputsEntityDB> darrioentityNextRoutesToProcess =
                darrioentityFromProduct_I.Where(ioNextRoute => (
                //                                          //Valid that can be linked a nodo.
                ioNextRoute.intnPkElementElementType != null || ioNextRoute.intnPkElementElement != null)
                //                                          //valid that can be linked to nodo entry.
                && ioNextRoute.strLink == ioentityNode_I.strLink &&
                //                                          //valid that link is nodo-inputprocess.
                ProdtypProductType.BoolIOIsInput(ioNextRoute)).ToList();

            //                                              //The boolNodeIsReady will be true
            //                                              //    while all way of the this node arrive
            //                                              //    to PIW FINAL(has productFinal)
            bool boolNodeIsReady = darrioentityNextRoutesToProcess.Count > 0 ||
                darrioentityNextRoutesToNode.Count > 0 ?
                true :
                //                                          //There aren't next route therefore the 
                //                                          //    the node is not ready.
                false;

            //                                              //WORKING WITH PROCESS NEXT.
            int intI = 0;
            /*WHILE-DO*/
            while (
                //                                          //take each routes next.
                intI < darrioentityNextRoutesToProcess.Count &&
                //                                          //evaluo nodeReady.
                boolNodeIsReady
                )
            {
                //                                          //boolNodeIsReady = true,  mean
                //                                          //All next routes from node should be arrive to the piw
                //                                          //    with productFinal(or other words, should be arrive
                //                                          //    process Ready or node ready.).

                //                                          //Get the next process.
                PiwentityProcessInWorkflowEntityDB piwentityNextProcess = darrpiwentityFromProduct_I.FirstOrDefault(
                    piw => piw.intProcessInWorkflowId == darrioentityNextRoutesToProcess[intI].intnProcessInWorkflowId);

                if (
                    ProdtypProductType.boolIsProcessReady(piwentityNextProcess, darrioentityFromProduct_I,
                    darrpiwentityFromProduct_I, darrpiwentityWithFinalProduct_I,
                    ref darrstrProcessAndNodeStackAnalyzedInAllWF_IO, ref darrpiwentityProcessesNotReady_IO)
                    )
                {
                    //                                      //Do not something.
                }
                else
                {
                    boolNodeIsReady = false;
                }
                intI = intI + 1;
            }

            //                                              //WORKING WITH NEXT NODES.
            int intJ = 0;
            /*WHILE-DO*/
            while (
                //                                          //take each node routes next.
                intJ < darrioentityNextRoutesToNode.Count &&
                //                                          //evaluate nodeReady.
                boolNodeIsReady
                )
            {
                if (
                    ProdtypProductType.boolIsNodeReady(darrioentityNextRoutesToNode[intJ], darrioentityFromProduct_I,
                    darrpiwentityFromProduct_I, darrpiwentityWithFinalProduct_I,
                    ref darrstrProcessAndNodeStackAnalyzedInAllWF_IO, ref darrpiwentityProcessesNotReady_IO)
                    )
                {
                    //                                      //Do not something.
                }
                else
                {
                    boolNodeIsReady = false;
                }
                intJ = intJ + 1;
            }

            //                                              //Log stack.
            darrstrProcessAndNodeStackAnalyzedInAllWF_IO.Add("Node(" + ioentityNode_I.strLink + ", " +
                boolNodeIsReady + ")");

            return boolNodeIsReady;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static bool boolIOsReachSameFinalProduct(
            //                                              //Verify if a starting process reach 2 different final 
            //                                              //products.

            int intPkWorkflow_I
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = context.ProcessInWorkflow.Where(piw =>
                piw.intPkWorkflow == intPkWorkflow_I).ToList();

            //                                              //To know the number of fp we have.
            int intNumberOfFinalProduct = 0;
            //                                              //To know how many ways reach a FinalProduct.
            int intWaysReachFinalProduct = 0;

            bool boolIOsReachSameFinalProduct = true;
            //                                              //There is at least one piw.
            if (
                darrpiwentity.Count > 0
                )
            {
                //                                          //Get all the processes where we can start our workflow.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityCanStart =
                    ProdtypProductType.darrProcessesWhereWFCanStart(darrpiwentity);

                //                                          //To add PIW as FP and evaluate lader.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityWithFP =
                    new List<PiwentityProcessInWorkflowEntityDB>();

                //                                          //List of nodes.
                List<LinknodLinkNodeEntityDB> darrlinknodeentity = context.LinkNode.Where(lk =>
                    lk.intPkWorkflow == intPkWorkflow_I).ToList();

                foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentityCanStart)
                {
                    //                                      //Get the first piw.
                    PiwentityProcessInWorkflowEntityDB piwentityFirst = piwentity;

                    if (
                        !darrpiwentityWithFP.Exists(piw => piw.intPk == piwentityFirst.intPk)
                        )
                    {
                        //                                  //Verify if that piw has a final product.
                        IoentityInputsAndOutputsEntityDB ioentityFinalProduct =
                           context.InputsAndOutputs.FirstOrDefault(io =>
                           io.intPkWorkflow == piwentityFirst.intPkWorkflow &&
                           io.intnProcessInWorkflowId == piwentityFirst.intProcessInWorkflowId &&
                           io.boolnIsFinalProduct == true);

                        //                                  //Final product exists.
                        intNumberOfFinalProduct = (ioentityFinalProduct != null) ? (1 + intNumberOfFinalProduct)
                            : intNumberOfFinalProduct;
                        darrpiwentityWithFP.Add(piwentityFirst);
                    }

                    if (
                        //                                  //We have not found a finalProduct.
                        !(intNumberOfFinalProduct > 1)
                        )
                    {
                        //                                  //Get IOs for the piw.
                        List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                            io.intPkWorkflow == piwentityFirst.intPkWorkflow &&
                            io.intnProcessInWorkflowId == piwentityFirst.intProcessInWorkflowId &&
                            io.strLink != null).ToList();

                        List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO =
                                        new List<IoentityInputsAndOutputsEntityDB>();

                        //                                  //Keep only links for outputs.
                        foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                        {
                            if (
                                ioentity.intnPkElementElementType != null
                                )
                            {
                                EleetentityElementElementTypeEntityDB eleetentity =
                                    context.ElementElementType.FirstOrDefault(eleet =>
                                    eleet.intPk == ioentity.intnPkElementElementType);
                                if (
                                    !eleetentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO.Add(ioentity);
                                }
                            }
                            else
                            {
                                EleeleentityElementElementEntityDB eleeleentity =
                                    context.ElementElement.FirstOrDefault(ele =>
                                    ele.intPk == ioentity.intnPkElementElement);
                                if (
                                    !eleeleentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO.Add(ioentity);
                                }
                            }
                        }

                        int intK = 0;
                        while (
                            //                              //We already found a finalProduct.
                            (intNumberOfFinalProduct <= 1 &&
                            //                              //We has not more IOs.
                            intK < darrioentityNodeIO.Count)
                            )
                        {
                            ProdtypProductType.subEvaluateProcessRecursive(darrioentityNodeIO[intK],
                                true, ref darrpiwentityWithFP, ref intNumberOfFinalProduct, ref darrlinknodeentity);

                            //                              //We found a final product for this way.
                            intWaysReachFinalProduct = (intNumberOfFinalProduct >= 1) ? (1 + intWaysReachFinalProduct)
                                : intWaysReachFinalProduct;

                            //                              //Set to 0 to start the new way to evaluate.
                            intNumberOfFinalProduct = 0;

                            intK++;
                        }
                    }
                }
            }

            boolIOsReachSameFinalProduct = (intWaysReachFinalProduct >= 2) ? false :
                boolIOsReachSameFinalProduct;

            return boolIOsReachSameFinalProduct;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static List<PiwentityProcessInWorkflowEntityDB> darrProcessesWhereWFCanStart(
            //                                              //Evaluate the complete workflow and return those processes
            //                                              //      that does not have link at IOs (input) and has 2 
            //                                              //      or more IO output with link.

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I
            )
        {
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityCanStart =
                new List<PiwentityProcessInWorkflowEntityDB>();

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get process without links and IOs inputs.
            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity_I)
            {
                //                                          //Get all IOs with link.
                List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == piwentity.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                    (io.intnPkElementElementType != null || io.intnPkElementElement != null) &&
                    io.strLink != null).ToList();

                //                                          //Verify process has not link at inputs.
                bool boolPiwHasLinksAtInputs = ProdtypProductType.boolVerifyIfIsAProcessFromWeCanStart(darrioentity,
                        true);

                bool boolPiwHas2OrMoreOutputLinks = false;
                if (
                    //                                      //Process has not links at inputs.
                    !boolPiwHasLinksAtInputs
                    )
                {
                    //                                      //Verify if has 2 or more links at output.
                    boolPiwHas2OrMoreOutputLinks = ProdtypProductType.boolVerifyIfIsAProcessFromWeCanStart(darrioentity,
                        false);
                }

                if (
                    //                                      //Piw has not links at input side and has 2+ output links.
                    !boolPiwHasLinksAtInputs && boolPiwHas2OrMoreOutputLinks
                    )
                {
                    darrpiwentityCanStart.Add(piwentity);
                }
            }

            return darrpiwentityCanStart;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolVerifyIfIsAProcessFromWeCanStart(
            //                                              //Verify if the links of a given piw are at input side.
            //                                              //True, if the piw has links at input side.
            //                                              //Verify if the piw has 2 or more link at output side.
            //                                              //True, if the piw has 2 or more links at output side.

            List<IoentityInputsAndOutputsEntityDB> darrioentity_I,
            //                                              //True, if we want to evaluate input side.
            bool boolVerifyInput_I
            )
        {
            bool boolVerifyIfLinkIsInputOrOutputSide = false;

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            int intOutputQuantity = 0;
            int intI = 0;
            /*WHILE*/
            while (
                !boolVerifyIfLinkIsInputOrOutputSide &&
                intI < darrioentity_I.Count
                )
            {
                //                                          //Get the io.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentity_I[intI];

                //                                          //Verify if the io is input or output.                
                if (
                    ioentity.intnPkElementElementType != null
                    )
                {
                    EleetentityElementElementTypeEntityDB eleetentity =
                        context.ElementElementType.FirstOrDefault(eleet =>
                        eleet.intPk == ioentity.intnPkElementElementType);
                    if (
                        boolVerifyInput_I
                        )
                    {
                        if (
                            eleetentity.boolUsage
                        )
                        {
                            boolVerifyIfLinkIsInputOrOutputSide = true;
                        }
                    }
                    else
                    {
                        if (
                            !eleetentity.boolUsage
                        )
                        {
                            intOutputQuantity++;
                        }
                    }

                }
                else
                {
                    EleeleentityElementElementEntityDB eleeleentity =
                        context.ElementElement.FirstOrDefault(eleele =>
                        eleele.intPk == ioentity.intnPkElementElement);

                    if (
                        boolVerifyInput_I
                        )
                    {
                        if (
                        eleeleentity.boolDeleted
                        )
                        {
                            boolVerifyIfLinkIsInputOrOutputSide = true;
                        }
                    }
                    else
                    {
                        if (
                        !eleeleentity.boolDeleted
                        )
                        {
                            intOutputQuantity++;
                        }
                    }
                }
                intI++;
            }

            boolVerifyIfLinkIsInputOrOutputSide = boolVerifyInput_I ? boolVerifyIfLinkIsInputOrOutputSide :
                (intOutputQuantity >= 2);

            return boolVerifyIfLinkIsInputOrOutputSide;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subEvaluateProcessRecursive(
            //                                              //Verify if a way of a IO for a starting process in a WF,
            //                                              //      reach a finalProduct.

            IoentityInputsAndOutputsEntityDB ioentity_I,
            bool boolIsIO_I,
            ref List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_M,
            ref int intWaysWithFinalProduct_IO,
            ref List<LinknodLinkNodeEntityDB> darrlinknodeentity_M
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            if (
                //                                          //We receive an ioentity as a IO
                boolIsIO_I
                )
            {
                //                                              //Get other side of link.
                List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSideLink = context.InputsAndOutputs.Where(io =>
                io.intPkWorkflow == ioentity_I.intPkWorkflow &&
                io.intPk != ioentity_I.intPk && io.strLink == ioentity_I.strLink).ToList();

                IoentityInputsAndOutputsEntityDB ioentityOtherSideLink = null;
                if (
                    darrioentityOtherSideLink.Count >= 2
                    )
                {
                    ioentityOtherSideLink = darrioentityOtherSideLink.FirstOrDefault(io =>
                    io.intnPkElementElementType == null &&
                    io.intnPkElementElement == null);
                }
                else
                {
                    ioentityOtherSideLink = darrioentityOtherSideLink[0];
                }


                if (
                    //                                      //There is only one final product.
                    intWaysWithFinalProduct_IO > 1 ||
                    //                                      //There are links.
                    ioentityOtherSideLink != null
                    )
                {
                    //                                      //Can be either node or io.
                    if (
                        //                                  //It's a link with an io.
                        ioentityOtherSideLink.intnPkElementElementType != null ||
                        ioentityOtherSideLink.intnPkElementElement != null
                        )
                    {
                        //                                  //Get piw to add to list of piw to return.
                        PiwentityProcessInWorkflowEntityDB piwentityToAdd =
                            context.ProcessInWorkflow.FirstOrDefault(piw =>
                            piw.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                            piw.intProcessInWorkflowId == ioentityOtherSideLink.intnProcessInWorkflowId);

                        if (
                            !darrpiwentity_M.Exists(piw => piw.intPk == piwentityToAdd.intPk)
                            )
                        {
                            //                              //Verify if that piw has a final product.
                            IoentityInputsAndOutputsEntityDB ioentityFinalProduct =
                               context.InputsAndOutputs.FirstOrDefault(io =>
                               io.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                               io.intnProcessInWorkflowId == ioentityOtherSideLink.intnProcessInWorkflowId &&
                               io.boolnIsFinalProduct == true);

                            //                              //Final product exists.
                            intWaysWithFinalProduct_IO = (ioentityFinalProduct != null) ? (1 + intWaysWithFinalProduct_IO)
                                : intWaysWithFinalProduct_IO;
                            darrpiwentity_M.Add(piwentityToAdd);
                        }

                        if (
                            !(intWaysWithFinalProduct_IO >= 1)
                            )
                        {
                            //                              //Get IOs for the piw.
                            List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                                io.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                                io.intnProcessInWorkflowId == ioentityOtherSideLink.intnProcessInWorkflowId &&
                                io.strLink != null && io.strLink != ioentity_I.strLink).ToList();

                            List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO =
                                            new List<IoentityInputsAndOutputsEntityDB>();

                            //                              //Keep only links for outputs.
                            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                            {
                                if (
                                    ioentity.intnPkElementElementType != null
                                    )
                                {
                                    EleetentityElementElementTypeEntityDB eleetentity =
                                        context.ElementElementType.FirstOrDefault(eleet =>
                                        eleet.intPk == ioentity.intnPkElementElementType);
                                    if (
                                        !eleetentity.boolUsage
                                        )
                                    {
                                        darrioentityNodeIO.Add(ioentity);
                                    }
                                }
                                else
                                {
                                    EleeleentityElementElementEntityDB eleeleentity =
                                        context.ElementElement.FirstOrDefault(ele =>
                                        ele.intPk == ioentity.intnPkElementElement);
                                    if (
                                        !eleeleentity.boolUsage
                                        )
                                    {
                                        darrioentityNodeIO.Add(ioentity);
                                    }
                                }
                            }

                            int intX = 0;
                            while (
                                //                          //Already found a fianlProduct.
                                (intWaysWithFinalProduct_IO < 1 &&
                                //                          //Has not more IOs.
                                intX < darrioentityNodeIO.Count)
                                )
                            {
                                ProdtypProductType.subEvaluateProcessRecursive(darrioentityNodeIO[intX],
                                    true, ref darrpiwentity_M, ref intWaysWithFinalProduct_IO, ref darrlinknodeentity_M);

                                intX++;
                            }
                        }
                    }
                    else
                    {
                        //                                  //It's a link with a node.

                        //                                  //Verify each posibility and after evaluate if has a FP.
                        //                                  //If we have at least one FP, stop checking.

                        //                                  //Get all links of the node with IOs.
                        List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIOToCheckInputs =
                            context.InputsAndOutputs.Where(io =>
                            io.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                            io.intnProcessInWorkflowId != null &&
                            io.strLink == ioentityOtherSideLink.strLink &&
                            io.intPk != ioentity_I.intPk && io.intPk != ioentityOtherSideLink.intPk).ToList();

                        List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO =
                            new List<IoentityInputsAndOutputsEntityDB>();

                        //                                  //Keep only forward links.
                        foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodeIOToCheckInputs)
                        {
                            if (
                                ioentity.intnPkElementElementType != null
                                )
                            {
                                EleetentityElementElementTypeEntityDB eleetentity =
                                    context.ElementElementType.FirstOrDefault(eleet =>
                                    eleet.intPk == ioentity.intnPkElementElementType);
                                if (
                                    eleetentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO.Add(ioentity);
                                }
                            }
                            else
                            {
                                EleeleentityElementElementEntityDB eleeleentity =
                                    context.ElementElement.FirstOrDefault(ele =>
                                    ele.intPk == ioentity.intnPkElementElement);
                                if (
                                    eleeleentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO.Add(ioentity);
                                }
                            }
                        }

                        IoentityInputsAndOutputsEntityDB ioentityToPass = null;
                        int intK = 0;
                        while (
                            (intWaysWithFinalProduct_IO < 1 &&
                            intK < darrioentityNodeIO.Count)
                            )
                        {
                            ioentityToPass = darrioentityNodeIO[intK];

                            //                              //Verify if has FinalProduct.
                            //                              //Get piw to add to list of piw to return.
                            PiwentityProcessInWorkflowEntityDB piwentityToAdd =
                                context.ProcessInWorkflow.FirstOrDefault(piw =>
                                piw.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                                piw.intProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId);

                            if (
                                !darrpiwentity_M.Exists(piw => piw.intPk == piwentityToAdd.intPk)
                                )
                            {
                                //                          //Verify if that piw has a final product.
                                IoentityInputsAndOutputsEntityDB ioentityFinalProduct =
                                   context.InputsAndOutputs.FirstOrDefault(io =>
                                   io.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                                   io.intnProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId &&
                                   io.boolnIsFinalProduct == true);

                                //                          //Final product exists.
                                intWaysWithFinalProduct_IO = (ioentityFinalProduct != null) ? (1 + intWaysWithFinalProduct_IO)
                                    : intWaysWithFinalProduct_IO;
                                darrpiwentity_M.Add(piwentityToAdd);
                            }

                            if (
                            !(intWaysWithFinalProduct_IO >= 1)
                            )
                            {
                                //                          //Get IOs for the piw.
                                List<IoentityInputsAndOutputsEntityDB> darrioentity =
                                    context.InputsAndOutputs.Where(io =>
                                    io.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                                    io.intnProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId &&
                                    io.strLink != null && io.strLink != ioentity_I.strLink).ToList();

                                List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO1 =
                                                new List<IoentityInputsAndOutputsEntityDB>();

                                //                          //Keep only links for outputs.
                                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                                {
                                    if (
                                        ioentity.intnPkElementElementType != null
                                        )
                                    {
                                        EleetentityElementElementTypeEntityDB eleetentity =
                                            context.ElementElementType.FirstOrDefault(eleet =>
                                            eleet.intPk == ioentity.intnPkElementElementType);
                                        if (
                                            !eleetentity.boolUsage
                                            )
                                        {
                                            darrioentityNodeIO1.Add(ioentity);
                                        }
                                    }
                                    else
                                    {
                                        EleeleentityElementElementEntityDB eleeleentity =
                                            context.ElementElement.FirstOrDefault(ele =>
                                            ele.intPk == ioentity.intnPkElementElement);
                                        if (
                                            !eleeleentity.boolUsage
                                            )
                                        {
                                            darrioentityNodeIO1.Add(ioentity);
                                        }
                                    }
                                }

                                int intX = 0;
                                while (
                                    (intWaysWithFinalProduct_IO < 1 &&
                                    intX < darrioentityNodeIO1.Count)
                                    )
                                {
                                    ProdtypProductType.subEvaluateProcessRecursive(darrioentityNodeIO1[intX],
                                        true, ref darrpiwentity_M, ref intWaysWithFinalProduct_IO,
                                        ref darrlinknodeentity_M);

                                    intX++;
                                }
                            }

                            intK++;
                        }

                        if (
                            //                              //There is not FP yet.
                            intWaysWithFinalProduct_IO < 1
                            )
                        {
                            //                              //Get all links of the node with node.
                            List<LinknodLinkNodeEntityDB> darrlinknode = darrlinknodeentity_M.Where(lk =>
                                lk.intPkWorkflow == ioentityOtherSideLink.intPkWorkflow &&
                                lk.intPkNodeI == ioentityOtherSideLink.intPk ||
                                lk.intPkNodeO == ioentityOtherSideLink.intPk).ToList();

                            int intJ = 0;
                            while (
                                (intWaysWithFinalProduct_IO <= 1 &&
                                intJ < darrlinknode.Count)
                                )
                            {
                                //                          //Get Pk io to use.
                                int intPkIO = (darrlinknode[intJ].intPkNodeI == ioentityOtherSideLink.intPk) ?
                                    darrlinknode[intJ].intPkNodeO : darrlinknode[intJ].intPkNodeI;
                                IoentityInputsAndOutputsEntityDB ioentityNodeOut =
                                    context.InputsAndOutputs.FirstOrDefault(io => io.intPk == intPkIO);

                                ioentityToPass = ioentityNodeOut;
                                darrlinknodeentity_M.Remove(darrlinknode[intJ]);

                                if (
                                    !(intWaysWithFinalProduct_IO >= 1)
                                    )
                                {
                                    ProdtypProductType.subEvaluateProcessRecursive(ioentityToPass,
                                        false, ref darrpiwentity_M, ref intWaysWithFinalProduct_IO,
                                        ref darrlinknodeentity_M);
                                }

                                intJ++;
                            }
                        }
                    }
                }
            }
            else
            {
                //                                          //We receive an ioentity as node.

                //                                          //Verify each posibility and after evaluate if has a FP.
                //                                          //If we have at least one FP, stop checking.

                //                                          //Get all links of the node with IOs.
                List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIOToCheckInputs =
                    context.InputsAndOutputs.Where(io =>
                    io.intPkWorkflow == ioentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId != null &&
                    io.strLink == ioentity_I.strLink &&
                    io.intPk != ioentity_I.intPk).ToList();

                List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO =
                    new List<IoentityInputsAndOutputsEntityDB>();

                //                                  //Keep only forward links.
                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityNodeIOToCheckInputs)
                {
                    if (
                        ioentity.intnPkElementElementType != null
                        )
                    {
                        EleetentityElementElementTypeEntityDB eleetentity =
                            context.ElementElementType.FirstOrDefault(eleet =>
                            eleet.intPk == ioentity.intnPkElementElementType);
                        if (
                            eleetentity.boolUsage
                            )
                        {
                            darrioentityNodeIO.Add(ioentity);
                        }
                    }
                    else
                    {
                        EleeleentityElementElementEntityDB eleeleentity =
                            context.ElementElement.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkElementElement);
                        if (
                            eleeleentity.boolUsage
                            )
                        {
                            darrioentityNodeIO.Add(ioentity);
                        }
                    }
                }

                int intNumberOfWaysThatApply = 0;
                IoentityInputsAndOutputsEntityDB ioentityToPass = null;
                int intK = 0;
                while (
                    (intWaysWithFinalProduct_IO < 1 &&
                    intK < darrioentityNodeIO.Count)
                    )
                {
                    ioentityToPass = darrioentityNodeIO[intK];

                    //                                      //Verify if has FinalProduct.
                    //                                      //Get piw to add to list of piw to return.
                    PiwentityProcessInWorkflowEntityDB piwentityToAdd =
                        context.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                        piw.intProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId);

                    if (
                        !darrpiwentity_M.Exists(piw => piw.intPk == piwentityToAdd.intPk)
                        )
                    {
                        //                                  //Verify if that piw has a final product.
                        IoentityInputsAndOutputsEntityDB ioentityFinalProduct =
                           context.InputsAndOutputs.FirstOrDefault(io =>
                           io.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                           io.intnProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId &&
                           io.boolnIsFinalProduct == true);

                        //                                  //Final product exists.
                        intWaysWithFinalProduct_IO = (ioentityFinalProduct != null) ? (1 + intWaysWithFinalProduct_IO)
                            : intWaysWithFinalProduct_IO;
                        darrpiwentity_M.Add(piwentityToAdd);
                    }

                    if (
                        !(intWaysWithFinalProduct_IO >= 1)
                        )
                    {
                        //                                  //Get IOs for the piw.
                        List<IoentityInputsAndOutputsEntityDB> darrioentity = context.InputsAndOutputs.Where(io =>
                            io.intPkWorkflow == ioentityToPass.intPkWorkflow &&
                            io.intnProcessInWorkflowId == ioentityToPass.intnProcessInWorkflowId &&
                            io.strLink != null && io.strLink != ioentity_I.strLink).ToList();

                        List<IoentityInputsAndOutputsEntityDB> darrioentityNodeIO1 =
                                        new List<IoentityInputsAndOutputsEntityDB>();

                        //                                  //Keep only links for outputs.
                        foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentity)
                        {
                            if (
                                ioentity.intnPkElementElementType != null
                                )
                            {
                                EleetentityElementElementTypeEntityDB eleetentity =
                                    context.ElementElementType.FirstOrDefault(eleet =>
                                    eleet.intPk == ioentity.intnPkElementElementType);
                                if (
                                    !eleetentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO1.Add(ioentity);
                                }
                            }
                            else
                            {
                                EleeleentityElementElementEntityDB eleeleentity =
                                    context.ElementElement.FirstOrDefault(ele =>
                                    ele.intPk == ioentity.intnPkElementElement);
                                if (
                                    !eleeleentity.boolUsage
                                    )
                                {
                                    darrioentityNodeIO1.Add(ioentity);
                                }
                            }
                        }

                        int intX = 0;
                        while (
                            (intWaysWithFinalProduct_IO < 1 &
                            intX < darrioentityNodeIO1.Count)
                            )
                        {
                            ProdtypProductType.subEvaluateProcessRecursive(darrioentityNodeIO1[intX],
                                true, ref darrpiwentity_M, ref intWaysWithFinalProduct_IO, ref darrlinknodeentity_M);

                            intX++;
                        }
                    }

                    intK++;
                }

                if (
                    //                                      //There is not FP yet.
                    intWaysWithFinalProduct_IO < 1
                    )
                {
                    //                                      //Get all links of the node with node.
                    List<LinknodLinkNodeEntityDB> darrlinknode = darrlinknodeentity_M.Where(lk =>
                        lk.intPkWorkflow == ioentity_I.intPkWorkflow &&
                        lk.intPkNodeI == ioentity_I.intPk ||
                        lk.intPkNodeO == ioentity_I.intPk).ToList();

                    int intJ = 0;
                    while (
                        (intNumberOfWaysThatApply < 1 &&
                        intJ < darrlinknode.Count)
                        )
                    {
                        //                                  //Get Pk io to use.
                        int intPkIO = (darrlinknode[intJ].intPkNodeI == ioentity_I.intPk) ?
                            darrlinknode[intJ].intPkNodeO : darrlinknode[intJ].intPkNodeI;
                        IoentityInputsAndOutputsEntityDB ioentityNodeOut =
                            context.InputsAndOutputs.FirstOrDefault(io => io.intPk == intPkIO);

                        ioentityToPass = ioentityNodeOut;
                        darrlinknodeentity_M.Remove(darrlinknode[intJ]);

                        if (
                            !(intWaysWithFinalProduct_IO >= 1)
                            )
                        {
                            ProdtypProductType.subEvaluateProcessRecursive(ioentityToPass,
                                false, ref darrpiwentity_M, ref intWaysWithFinalProduct_IO, ref darrlinknodeentity_M);
                        }

                        intJ++;
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolIsResourceProductFinalSetted(
            //                                              //Return true if the resource product final is setted in 
            //                                              //    the piw of the workflow.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityFromProduct_I
            )
        {
            bool boolIsResourceProductFinalSetted = false;

            //                                              //Connect to DB.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //GetIO Eleet whit the ProductFinal output from Final PIW.
            List<IoentityInputsAndOutputsEntityDB> darrioentityIosEleetFromFinalPIW =
                (from ioentity in darrioentityFromProduct_I
                 join eleetentity in context.ElementElementType
                 on ioentity.intnPkElementElementType equals eleetentity.intPk
                 where ioentity.intPkWorkflow == piwentity_I.intPkWorkflow &&
                 ioentity.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                 //                                         //When a IO type/template is removed from a process
                 //                                         //    therefore eleetentity.boolDeleted take value false, 
                 //                                         //    beacuse it was create a new storyPoint, 
                 //                                         //    therefore not filter for these eleetentity.boolDeleted
                 //                                         //    because in job completete that will not funciton.
                 //                                         //    //eleetentity.boolDeleted == false &&

                 //                                         //It is setted the resource product Final.
                 ioentity.boolnIsFinalProduct == true &&
                 //                                         //Output.
                 eleetentity.boolUsage == false
                 select ioentity).ToList();

            if (
                //                                          //Found the final product setted.
                darrioentityIosEleetFromFinalPIW.Count > 0
                )
            {
                boolIsResourceProductFinalSetted = true;
            }
            else
            {
                //                                              //GetAllIOs Eleele output from Final PIW.
                List<IoentityInputsAndOutputsEntityDB> darrioentityIosEleeleFromFinalPIW =
                    (from ioentity in darrioentityFromProduct_I
                     join eleeleentity in context.ElementElement
                     on ioentity.intnPkElementElement equals eleeleentity.intPk
                     where ioentity.intPkWorkflow == piwentity_I.intPkWorkflow &&
                     ioentity.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                     eleeleentity.boolDeleted == false &&
                     //                                         //It is setted the resource product Final.
                     ioentity.boolnIsFinalProduct == true &&
                     //                                         //Output.
                     eleeleentity.boolUsage == false
                     select ioentity).ToList();

                boolIsResourceProductFinalSetted = darrioentityIosEleeleFromFinalPIW.Count > 0 ? true : false;
            }

            return boolIsResourceProductFinalSetted;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static bool boolProductHasSize(
            //                                              //Returns true if the order form contains the field and it 
            //                                              //      is required. 

            int? intnPkProduct_I,
            Odyssey2Context context_I
            )
        {
            //                                              //Default.
            bool boolHasSize = false;

            if (
                //                                          //It comes from a product wf.
                intnPkProduct_I > 0
                )
            {
                ProdtypProductType prodtyp = (ProdtypProductType)EtElementTypeAbstract.etFromDB(context_I,
                    intnPkProduct_I);

                PsentityPrintshopEntityDB psentity = context_I.Printshop.FirstOrDefault(ps =>
                    ps.intPk == prodtyp.intPkPrintshop);

                String strUrlWisnet = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build().
                    GetSection("Odyssey2Settings")["urlWisnetApi"];

                //                                              //Get info from wisnet.
                Task<SizejsonSizeJson> Task_sizejsonFromWisnet = HttpTools<SizejsonSizeJson>.GetOneAsyncToEndPoint(
                    strUrlWisnet + "/PrintShopData/HasSize/" + psentity.strPrintshopId + "/" +
                    prodtyp.intWebsiteProductKey);
                Task_sizejsonFromWisnet.Wait();

                if (
                    Task_sizejsonFromWisnet.Result != null
                    )
                {
                    boolHasSize = Task_sizejsonFromWisnet.Result.boolHasSize;
                }
            }

            return boolHasSize;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subGetResourcesForIO(
            //                                              //Returns resources for a IO in a wf.

            int intPkProcessInWorkflow_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            out Resjson2ResourceJson2[] arrresjson2_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            List<Resjson2ResourceJson2> darrresjson2 = new List<Resjson2ResourceJson2>();

            Odyssey2Context context = new Odyssey2Context();

            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPk == intPkProcessInWorkflow_I);

            IoentityInputsAndOutputsEntityDB ioentity = null;
            //                                              //To easy code.
            if (
                boolIsEleet_I
                )
            {
                ioentity = context.InputsAndOutputs.FirstOrDefault(io => io.intPkWorkflow == piwentity.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                    io.intnPkElementElementType == intPkEleetOrEleele_I);
            }
            else
            {
                ioentity = context.InputsAndOutputs.FirstOrDefault(io => io.intPkWorkflow == piwentity.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                    io.intnPkElementElement == intPkEleetOrEleele_I);
            }

            if (
                //                                          //No resources for this IO.
                ioentity == null
                )
            {
                intStatus_IO = 200;
                strUserMessage_IO = "No resources found.";
                strDevMessage_IO = "No resources found.";
            }
            else
            {
                intStatus_IO = 200;
                strUserMessage_IO = "No resources found.";
                strDevMessage_IO = "No resources found.";
                if (
                    (ioentity.intnPkResource != null) ||
                    (ioentity.intnGroupResourceId != null)
                    )
                {
                    List<int> darrintPkResources = new List<int>();
                    if (
                        //                                      //Only one resource.
                        ioentity.intnPkResource != null
                           )
                    {
                        darrintPkResources.Add((int)ioentity.intnPkResource);
                    }
                    else
                    {
                        //                                      //Group of resources.
                        int intGroupId = (int)ioentity.intnGroupResourceId;

                        IQueryable<int> setintPkResources = from gpres in context.GroupResource
                                                            where gpres.intId == intGroupId &&
                                                            gpres.intPkWorkflow == piwentity.intPkWorkflow
                                                            select gpres.intPkResource;
                        darrintPkResources = setintPkResources.ToList();
                    }

                    foreach (int intPkResource in darrintPkResources)
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(eleentity =>
                            eleentity.intPk == intPkResource);

                        String strResourceName = eleentity.strElementName;

                        EtentityElementTypeEntityDB etentityRestyp = context.ElementType.FirstOrDefault(et =>
                        et.intPk == eleentity.intPkElementType);

                        String strUnit = ProdtypProductType.strUnitFromEleentityResource(eleentity);

                        bool boolIsPaper =
                        (etentityRestyp.strCustomTypeId == ResResource.strComponent) ||
                        (etentityRestyp.strCustomTypeId == ResResource.strMedia);

                        //                                      //To know if is a Device or MiscConsumable.
                        bool boolIsDeviceOrMiscConsumable =
                            (etentityRestyp.strXJDFTypeId == ProdtypProductType.strResourceTypeDevice ||
                            etentityRestyp.strXJDFTypeId == ProdtypProductType.strResClasMiscConsumable) ? true :
                            false;

                        String strResName = ResResource.strGetMediaResourceName(eleentity.intPk);

                        Resjson2ResourceJson2 resjson2 = new Resjson2ResourceJson2(eleentity.intPk, strResName,
                            RestypResourceType.boolIsPhysical(etentityRestyp.strClassification), strUnit,
                            boolIsPaper, boolIsDeviceOrMiscConsumable);

                        darrresjson2.Add(resjson2);
                    }

                    intStatus_IO = 200;
                    strUserMessage_IO = "";
                    strDevMessage_IO = "";
                }
            }

            darrresjson2 = darrresjson2.OrderBy(res => res.strName).ToList();

            arrresjson2_O = darrresjson2.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subResourceIsAddable(
            //                                              //Verify if the workflow has estimates that could be deleted
            //                                              //      if there is a modification. If the IO is an output 
            //                                              //      without link the wf is modifiable.
            //                                              //The service that uses this method is used as first step to 
            //                                              //      delete a resource from an IO in a wf.

            int intPkProcessInWorkflow_I,
            int intPkEleetOrEleele_I,
            int intPkResource_I,
            int intJobId_I,
            bool boolIsEleet_I,
            out bool boolIsAddable_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            boolIsAddable_O = false;

            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the piw.
            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPk == intPkProcessInWorkflow_I);

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "No piwentity found.";
            if (
                piwentity != null
                )
            {
                //                                              //Get the wf.
                WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                    wf.intPk == piwentity.intPkWorkflow);

                IoentityInputsAndOutputsEntityDB ioentity;
                if (
                    boolIsEleet_I
                    )
                {
                    ioentity = context.InputsAndOutputs.FirstOrDefault(ioentity =>
                        ioentity.intnPkElementElementType == intPkEleetOrEleele_I &&
                        ioentity.intPkWorkflow == piwentity.intPkWorkflow &&
                        ioentity.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId);
                }
                else
                {
                    ioentity = context.InputsAndOutputs.FirstOrDefault(ioentity =>
                        ioentity.intnPkElementElement == intPkEleetOrEleele_I &&
                        ioentity.intPkWorkflow == piwentity.intPkWorkflow &&
                        ioentity.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId);
                }

                if (
                    ProdtypProductType.boolDataValid(wfentity.intPk, piwentity.intProcessInWorkflowId,
                    intPkResource_I, intPkEleetOrEleele_I, boolIsEleet_I, ref intStatus_IO, ref strUserMessage_IO,
                    ref strDevMessage_IO)
                    )
                {
                    bool boolIsOutputWithoutLink = false;
                    if (
                        boolIsEleet_I
                        )
                    {
                        EleetentityElementElementTypeEntityDB eleetentity = context.ElementElementType.FirstOrDefault(
                            eleet => eleet.intPk == intPkEleetOrEleele_I);
                        boolIsOutputWithoutLink = !eleetentity.boolUsage && (ioentity == null ||
                            ioentity.strLink == null);
                    }
                    else
                    {
                        EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(
                            eleele => eleele.intPk == intPkEleetOrEleele_I);
                        boolIsOutputWithoutLink = !eleeleentity.boolUsage && (ioentity == null ||
                            ioentity.strLink == null);
                    }

                    bool boolWorkflowModifiable;
                    ProdtypProductType.subWorkflowHasEstimates(wfentity.intPk, intJobId_I, out boolWorkflowModifiable,
                        ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);

                    boolIsAddable_O = boolIsOutputWithoutLink ? true : boolWorkflowModifiable;
                    if (
                        !boolIsAddable_O && (intJobId_I > 0) && strUserMessage_IO.Contains(intJobId_I + "")
                        )
                    {
                        strUserMessage_IO = "Some estimates for jobs: " + intJobId_I + ", will be deleted.";
                    }

                    intStatus_IO = 200;
                    strDevMessage_IO = "";
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subResourceIsDispensable(
            //                                              //Verify if the resource for that IO and wf has periods for 
            //                                              //      one or more jobs.
            //                                              //Verify if the workflow has estimates that could be deleted
            //                                              //      if there is a modification.  If the IO is an output 
            //                                              //      without link the wf is modifiable.
            //                                              //The service that uses this method is used as first step to 
            //                                              //      delete a resource from an IO in a wf.

            int intPkProcessInWorkflow_I,
            int intPkEleetOrEleele_I,
            int intPkResource_I,
            bool boolIsEleet_I,
            out ResdisjsonResourceIsDispensableJson resdisjson_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            resdisjson_O = null;

            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the piw.
            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPk == intPkProcessInWorkflow_I);

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "No piwentity found.";
            if (
                piwentity != null
                )
            {
                //                                              //Get the wf.
                WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                    wf.intPk == piwentity.intPkWorkflow);

                IoentityInputsAndOutputsEntityDB ioentity;
                if (
                    boolIsEleet_I
                    )
                {
                    ioentity = context.InputsAndOutputs.FirstOrDefault(ioentity =>
                        ioentity.intnPkElementElementType == intPkEleetOrEleele_I &&
                        ioentity.intPkWorkflow == piwentity.intPkWorkflow &&
                        ioentity.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId);
                }
                else
                {
                    ioentity = context.InputsAndOutputs.FirstOrDefault(ioentity =>
                        ioentity.intnPkElementElement == intPkEleetOrEleele_I &&
                        ioentity.intPkWorkflow == piwentity.intPkWorkflow &&
                        ioentity.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId);
                }

                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "No ioentity found.";
                if (
                    ioentity != null
                    )
                {
                    //                                      //Verify if resource has periods for this workflow.
                    String strJobsWithPeriods = "";
                    bool boolResourceHasPeriods = ProdtypProductType.boolResourceHasPeriods(ioentity,
                        intPkResource_I, ref strJobsWithPeriods);

                    bool boolIsOutputWithoutLink = false;
                    if (
                        boolIsEleet_I
                        )
                    {
                        EleetentityElementElementTypeEntityDB eleetentity = context.ElementElementType.FirstOrDefault(
                            eleet => eleet.intPk == intPkEleetOrEleele_I);
                        boolIsOutputWithoutLink = !eleetentity.boolUsage && ioentity.strLink == null;
                    }
                    else
                    {
                        EleeleentityElementElementEntityDB eleeleentity = context.ElementElement.FirstOrDefault(
                            eleele => eleele.intPk == intPkEleetOrEleele_I);
                        boolIsOutputWithoutLink = !eleeleentity.boolUsage && ioentity.strLink == null;
                    }

                    bool boolWorkflowModifiable;
                    String strJobsWithEstimates = "";
                    ProdtypProductType.subWorkflowHasEstimates(ioentity.intPkWorkflow, null, out boolWorkflowModifiable,
                        ref intStatus_IO, ref strJobsWithEstimates, ref strDevMessage_IO);

                    boolWorkflowModifiable = boolIsOutputWithoutLink ? true : boolWorkflowModifiable;

                    String strMessage = "";

                    /*CASE*/
                    if (
                        boolResourceHasPeriods && boolWorkflowModifiable
                        )
                    {
                        strMessage = "Some periods for jobs: " + strJobsWithPeriods + ", will be deleted.";
                    }
                    else if (
                        !boolResourceHasPeriods && !boolWorkflowModifiable
                        )
                    {
                        strMessage = strJobsWithEstimates;
                    }
                    else if (
                        boolResourceHasPeriods && !boolWorkflowModifiable
                        )
                    {
                        strMessage = "Some periods for jobs: " + strJobsWithPeriods + " and s" + strJobsWithEstimates.
                            Substring(1);
                    }
                    /*END-CASE*/

                    resdisjson_O = new ResdisjsonResourceIsDispensableJson(wfentity.intPk, !boolResourceHasPeriods &&
                        boolWorkflowModifiable, strMessage);

                    intStatus_IO = 200;
                    strUserMessage_IO = "";
                    strDevMessage_IO = "";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolResourceHasPeriods(
            IoentityInputsAndOutputsEntityDB ioentity_I,
            int intPkResource_I,
            ref String strJobs_IO
            )
        {
            bool boolHasPeriods = false;

            //                                              //Connect to DB.
            Odyssey2Context context = new Odyssey2Context();

            List<PerentityPeriodEntityDB> darrperentity = context.Period.Where(per =>
            per.intPkWorkflow == ioentity_I.intPkWorkflow &&
            per.intProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId &&
            per.intnPkElementElementType == ioentity_I.intnPkElementElementType &&
            per.intnPkElementElement == ioentity_I.intnPkElementElement &&
            per.intPkElement == intPkResource_I &&
            //                                              //Not consider periods temporals.
            per.intnEstimateId != null).ToList();

            foreach (PerentityPeriodEntityDB perentity in darrperentity)
            {
                //                                          //Trying to get the job from DB.
                JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job => job.intJobID == perentity.intJobId);

                if (
                    //                                      //Job is not in the DB, it means it is a pending job.
                    jobentity == null &&
                    //                                      //The job is not in the string.
                    !strJobs_IO.Contains(perentity.intJobId + "")
                    )
                {
                    //                                      //Add job to the string.
                    strJobs_IO = strJobs_IO + perentity.intJobId + ", ";
                }
            }

            //                                              //Remove the last space and comma.
            strJobs_IO = strJobs_IO.TrimEnd(' ');
            strJobs_IO = strJobs_IO.TrimEnd(',');

            if (
                //                                          //There is at least one comma.
                strJobs_IO.LastIndexOf(',') >= 0
                )
            {
                //                                          //Replace the last comma for an 'and'.
                strJobs_IO = strJobs_IO.Substring(0, strJobs_IO.LastIndexOf(',')) + " and" + strJobs_IO.Substring(
                    strJobs_IO.LastIndexOf(',') + 1);
            }

            //                                              //If the string is empty there is no periods for pending 
            //                                              //      jobs for this io and resource.
            boolHasPeriods = strJobs_IO != "";

            return boolHasPeriods;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subDeleteResourcesForIO(
            int intPkProcessInWorkflow_I,
            int intPkEleetOrEleele_I,
            int intPkResource_I,
            bool boolIsEleet_I,
            PsPrintShop ps_I,
            out int intPkWorkflow_O,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intPkWorkflow_O = 0;

            //                                              //Find IO's piw.
            PiwentityProcessInWorkflowEntityDB piwentity = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
            piw.intPk == intPkProcessInWorkflow_I);

            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "No process in workflow found.";
            if (
                piwentity != null
                )
            {
                //                                          //Get io.
                IoentityInputsAndOutputsEntityDB ioentity = context_M.InputsAndOutputs.FirstOrDefault(ioentity =>
                ioentity.intnPkElementElement == intPkEleetOrEleele_I && 
                ioentity.intPkWorkflow == piwentity.intPkWorkflow &&
                ioentity.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId);
                if (
                    boolIsEleet_I
                    )
                {
                    ioentity = context_M.InputsAndOutputs.FirstOrDefault(ioentity =>
                        ioentity.intnPkElementElementType == intPkEleetOrEleele_I &&
                        ioentity.intPkWorkflow == piwentity.intPkWorkflow &&
                        ioentity.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId);
                }

                intStatus_IO = 401;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "ioentity no found.";
                if (
                    ioentity != null
                    )
                {
                    //                                      //Find wf.
                    
                    WfentityWorkflowEntityDB wfentityBaseA = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == piwentity.intPkWorkflow);

                    WfentityWorkflowEntityDB wfentityBase;
                    //                                      //Get workflow of the line story workflows.
                    ProdtypProductType.subGetWorkflowAvailable(wfentityBaseA, out wfentityBase, ref intStatus_IO,
                        ref strUserMessage_IO, ref strDevMessage_IO);

                    //                                      //If there is a job in progress or completed then 
                    //                                      //      duplicate it.
                    WfentityWorkflowEntityDB wfentityNew;
                    ProdtypProductType.subAddWorkflowIfItIsNecessary(ps_I, wfentityBase, context_M, out wfentityNew);
                    intPkWorkflow_O = wfentityNew.intPk;

                    //                                      //Get all IOJ where resource is set.
                    List<IojentityInputsAndOutputsForAJobEntityDB> darriojentity = context_M.InputsAndOutputsForAJob
                        .Where(ioj => ioj.intPkResource == intPkResource_I &&
                        ioj.intPkProcessInWorkflow == intPkProcessInWorkflow_I).ToList();

                    //                                      //Verify if there's at least one pending job.
                    bool boolAtLeastOnePendingJob = false;
                    int intI = 0;
                    /*WHILE*/
                    while (
                        !boolAtLeastOnePendingJob &&
                        intI < darriojentity.Count
                        )
                    {
                        boolAtLeastOnePendingJob = context_M.Job.FirstOrDefault(job =>
                            job.intJobID == darriojentity[intI].intJobId && job.intPkPrintshop == ps_I.intPk &&
                            job.intPkWorkflow == wfentityNew.intPk) == null;

                        intI++;
                    }

                    //                                      //Reassign piw object if wf was cloned.
                    piwentity = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPkWorkflow == wfentityNew.intPk &&
                        piw.intProcessInWorkflowId == piwentity.intProcessInWorkflowId);

                    if (
                        //                                  //Validate data.
                        ProdtypProductType.boolDataValid(piwentity.intPkWorkflow, piwentity.intProcessInWorkflowId,
                            intPkResource_I, intPkEleetOrEleele_I, boolIsEleet_I, ref intStatus_IO, 
                            ref strUserMessage_IO, ref strDevMessage_IO)
                        )
                    {
                        //                                  //Verify if the resource to delete is for an input.
                        bool boolIsInput = false;
                        if (
                            boolIsEleet_I
                            )
                        {
                            boolIsInput = context_M.ElementElementType.FirstOrDefault(et =>
                            et.intPk == ioentity.intnPkElementElementType).boolUsage;
                        }
                        else
                        {
                            boolIsInput = context_M.ElementElement.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkElementElement).boolUsage;
                        }

                        ProdtypProductType.subDeletePeriodsForThisIO(ioentity, intPkResource_I);

                        if (
                           //                               //The resource is not in a group.
                           ioentity.intnPkResource != null
                           )
                        {
                            //                              //Delete a resource not in a group.
                            ProdtypProductType.subDeleteResourceNotInAGroup(ioentity.intPk, intPkResource_I,
                                boolAtLeastOnePendingJob, piwentity, context_M, ref intStatus_IO, ref strUserMessage_IO,
                                ref strDevMessage_IO);

                            if (
                                intStatus_IO == 200 && boolIsInput
                                )
                            {
                                //                          //Get the process for that wf.
                                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = context_M.ProcessInWorkflow
                                    .Where(piw => piw.intPkWorkflow == piwentity.intPkWorkflow).ToList();

                                JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentityAll);
                            }
                        }
                        else
                        {
                            //                              //Delete a resource in a group.
                            ProdtypProductType.subDeleteResourceInAGroup(intPkResource_I, boolAtLeastOnePendingJob,
                                piwentity, ioentity, context_M, ref intStatus_IO, ref strUserMessage_IO,
                                ref strDevMessage_IO);

                            //                              //Verify if the resource is used in the estimation.
                            List<EstdataentityEstimationDataEntityDB> darrestentity = context_M.EstimationData.Where(
                                est => est.intPkResource == intPkResource_I &&
                                est.intPkProcessInWorkflow == intPkProcessInWorkflow_I).ToList();

                            if (
                                intStatus_IO == 200 && boolIsInput && darrestentity.Count() > 0
                                )
                            {
                                //                          //Get the process for that wf.
                                List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll =
                                    context_M.ProcessInWorkflow.Where(
                                    piw => piw.intPkWorkflow == piwentity.intPkWorkflow).ToList();

                                JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentityAll);
                            }
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subDeletePeriodsForThisIO(
            IoentityInputsAndOutputsEntityDB ioentity_I,
            int intPkResource_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            List<PerentityPeriodEntityDB> darrperentity = context.Period.Where(per =>
                per.intnPkElementElement == ioentity_I.intnPkElementElement &&
                per.intnPkElementElementType == ioentity_I.intnPkElementElementType &&
                per.intPkWorkflow == ioentity_I.intPkWorkflow &&
                per.intProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId &&
                per.intPkElement == intPkResource_I).ToList();

            foreach (PerentityPeriodEntityDB perentity in darrperentity)
            {
                JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job =>
                    job.intJobID == perentity.intJobId);

                //                                          //Job is Pending.
                if (
                    jobentity == null
                    )
                {
                    //                                      //Remove only periods for job pending.
                    context.Period.Remove(perentity);
                }
            }
            context.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subDeleteResourceNotInAGroup(
            //                                              //Method to delete a resource not in a group.

            int intPkIO_I,
            int intPkResource_I,
            bool boolAtLeastOnePendingJob_I, 
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            IoentityInputsAndOutputsEntityDB ioentity = context_M.InputsAndOutputs.FirstOrDefault(io => 
            io.intPk == intPkIO_I);

            //                                              //Pk for the Resource.
            int intPkResource = (int)ioentity.intnPkResource;

            intStatus_IO = 407;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Pk of resource to delete is not the one in the IO table.";
            if (
                intPkResource == intPkResource_I
                )
            {
                if (
                    ioentity.strLink != null
                    )
                {
                    //                                      //Get the IOs for update the first resource.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityLink = ProdtypProductType
                        .GetIOSToUpdateFirstResource(ioentity, context_M);

                    foreach (IoentityInputsAndOutputsEntityDB ioentityLink in darrioentityLink)
                    {
                        if (
                            !boolAtLeastOnePendingJob_I
                            )
                        {
                            //                              //Delete QtyCal in needed.
                            ProdtypProductType.subDeleteQtyCalculationAsociated((int)ioentityLink.intnPkResource,
                                ioentityLink.intPkWorkflow, (int)ioentityLink.intnProcessInWorkflowId, context_M);

                            //                              //Delete transform calculation associate with this resource
                            //                              //      in this Eleet or elele in a PIW.
                            ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentityLink, context_M);

                            //                              //Delete calculation associate with this resource
                            //                              //      in this Eleet or elele in a PIW.
                            ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityLink,
                                (int)ioentityLink.intnPkResource, context_M);

                            //                              //Delete temporary paper transformation.
                            ProdtypProductType.subDeleteTemporaryPaperTrans((int)ioentityLink.intnPkResource, ioentityLink,
                                context_M);
                        }
                        //                                  //Unset IOs.
                        ioentityLink.intnPkResource = null;
                    }
                }
                else
                {
                    if (
                        (
                        ioentity.boolnSize == null ||
                        ioentity.boolnSize == false
                        )
                        &&
                        (
                        ioentity.boolnThickness == null ||
                        ioentity.boolnThickness == false
                        )
                        &&
                        (
                        ioentity.boolnIsFinalProduct == null ||
                        ioentity.boolnIsFinalProduct == false)
                        )
                    {
                        context_M.InputsAndOutputs.Remove(ioentity);
                    }
                    else
                    {
                        ioentity.intnPkResource = null;
                        context_M.Update(ioentity);
                    }
                }

                if (
                    !boolAtLeastOnePendingJob_I
                    )
                {
                    //                                      //Delete QtyCal in needed.
                    ProdtypProductType.subDeleteQtyCalculationAsociated(intPkResource_I,
                        piwentity_I.intPkWorkflow, piwentity_I.intProcessInWorkflowId, context_M);

                    //                                      //Delete transform calculation associate with this resource
                    //                                      //      in this Eleet or elele in a PIW.
                    ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentity, context_M);

                    //                                      //Delete calculation associate with this resource
                    //                                      //      in this Eleet or elele in a PIW.
                    ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentity, intPkResource_I, context_M);

                    //                                      //Delete temporary paper transformation own.
                    ProdtypProductType.subDeleteTemporaryPaperTrans(intPkResource_I, ioentity, context_M);
                }

                context_M.SaveChanges();
                intStatus_IO = 200;
                strUserMessage_IO = "Resource deleted.";
                strDevMessage_IO = "Success.";
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subDeleteResourceInAGroup(
            //                                              //Method to delete a resource in a group.
            
            int intPkResource_I,
            bool boolAtLeastOnePendingJob_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            IoentityInputsAndOutputsEntityDB ioentity_M,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Group id.
            int intGroupId = (int)ioentity_M.intnGroupResourceId;

            //                                              //Group.
            List<GpresentityGroupResourceEntityDB> darrgpresentity = (
                from gpres in context_M.GroupResource
                where gpres.intId == intGroupId && gpres.intPkWorkflow == piwentity_I.intPkWorkflow
                select gpres).ToList();

            if (
                //                                          //Group with 2 resources, delete the group.
                darrgpresentity.Count == 2
                )
            {
                //                                          //Get the other resource in the group.
                GpresentityGroupResourceEntityDB gpresentityNotToDelete = darrgpresentity.FirstOrDefault(gpresentity =>
                    gpresentity.intPkResource != intPkResource_I);

                //                                          //Delete the group.
                foreach (GpresentityGroupResourceEntityDB gpresentity in darrgpresentity)
                {
                    context_M.GroupResource.Remove(gpresentity);
                }

                if (
                    ioentity_M.strLink != null
                    )
                {
                    //                                      //IOs with link.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityLink = (
                        from ioentityLink in context_M.InputsAndOutputs
                        where ioentityLink.strLink == ioentity_M.strLink &&
                        ioentityLink.intnGroupResourceId == ioentity_M.intnGroupResourceId &&
                        ioentityLink.intnProcessInWorkflowId != null && 
                        ioentityLink.intnProcessInWorkflowId != ioentity_M.intnProcessInWorkflowId &&
                        ioentityLink.intPkWorkflow == ioentity_M.intPkWorkflow
                        select ioentityLink).ToList();

                    foreach (IoentityInputsAndOutputsEntityDB ioentityLink in darrioentityLink)
                    {
                        if (
                            !boolAtLeastOnePendingJob_I
                            )
                        {
                            //                              //Delete QtyCal in needed.
                            ProdtypProductType.subDeleteQtyCalculationAsociated(intPkResource_I,
                                ioentityLink.intPkWorkflow, (int)ioentityLink.intnProcessInWorkflowId, context_M);

                            //                              //Delete transform calculation associate with this resource
                            //                              //      in this Eleet or elele in a PIW.
                            ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentityLink, context_M);

                            //                              //Delete calculation associate with this resource
                            //                              //      in this Eleet or elele in a PIW.
                            ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityLink, intPkResource_I, 
                                context_M);

                            //                              //Delete temporary paper transformation.
                            ProdtypProductType.subDeleteTemporaryPaperTrans(intPkResource_I, ioentityLink, context_M);
                        }

                        ioentityLink.intnGroupResourceId = null;
                        ioentityLink.intnPkResource = gpresentityNotToDelete.intPkResource;
                        context_M.InputsAndOutputs.Update(ioentityLink);
                    }
                }

                ioentity_M.intnGroupResourceId = null;
                ioentity_M.intnPkResource = gpresentityNotToDelete.intPkResource;
                context_M.InputsAndOutputs.Update(ioentity_M);

                if (
                    !boolAtLeastOnePendingJob_I
                    )
                {
                    //                                      //Delete QtyCal in needed.
                    ProdtypProductType.subDeleteQtyCalculationAsociated(intPkResource_I,
                        piwentity_I.intPkWorkflow, piwentity_I.intProcessInWorkflowId, context_M);
                    //                                      //Delete transform calculation associate with this resource
                    //                                      //      in this Eleet or elele in a PIW.
                    ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentity_M, context_M);

                    //                                      //Delete calculation associate with this resource
                    //                                      //      in this Eleet or elele in a PIW.
                    ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentity_M, intPkResource_I, context_M);

                    //                                      //Delete temporary paper transformation own.
                    ProdtypProductType.subDeleteTemporaryPaperTrans(intPkResource_I, ioentity_M, context_M);
                }

                intStatus_IO = 200;
                strUserMessage_IO = "Resource deleted.";
                strDevMessage_IO = "Success.";
            }
            else
            {
                //                                          //Group with three or more resources, only delete the 
                //                                          //      resource from the group.

                //                                          //Get the resource in the group to be deleted.
                GpresentityGroupResourceEntityDB gpresentityToDelete =
                    darrgpresentity.FirstOrDefault(gpresentity => gpresentity.intPkResource == intPkResource_I &&
                    gpresentity.intPkWorkflow == piwentity_I.intPkWorkflow && gpresentity.intId == intGroupId);

                //                                          //Delete the resource from the group.
                context_M.GroupResource.Remove(gpresentityToDelete);
                intStatus_IO = 200;

                if (
                    ioentity_M.strLink != null
                    )
                {
                    //                                      //IO with link.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityLink = context_M.InputsAndOutputs.Where(
                        io => io.strLink == ioentity_M.strLink &&
                        io.intnGroupResourceId == ioentity_M.intnGroupResourceId &&
                        io.intnProcessInWorkflowId != ioentity_M.intnProcessInWorkflowId &&
                        io.intnProcessInWorkflowId != null).ToList();

                    foreach (IoentityInputsAndOutputsEntityDB ioentityLink in darrioentityLink)
                    {
                        if (
                            !boolAtLeastOnePendingJob_I
                            )
                        {
                            //                              //Delete QtyCal in needed.
                            ProdtypProductType.subDeleteQtyCalculationAsociated(intPkResource_I,
                                ioentityLink.intPkWorkflow, (int)ioentityLink.intnProcessInWorkflowId, context_M);

                            //                              //Delete transform calculation associate with this resource
                            //                              //      in this Eleet or elele in a PIW.
                            ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentityLink, context_M);

                            //                              //Delete calculation associate with this resource
                            //                              //      in this Eleet or elele in a PIW.
                            ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentityLink, intPkResource_I, 
                                context_M);

                            //                              //Delete temporary paper transformation.
                            ProdtypProductType.subDeleteTemporaryPaperTrans(intPkResource_I, ioentityLink, context_M);
                        }
                    }
                }

                if (
                    !boolAtLeastOnePendingJob_I
                    )
                {
                    //                                      //Delete QtyCal in needed.
                    ProdtypProductType.subDeleteQtyCalculationAsociated(intPkResource_I,
                        piwentity_I.intPkWorkflow, piwentity_I.intProcessInWorkflowId, context_M);
                    //                                      //Delete transform calculation associate with this resource
                    //                                      //      in this Eleet or elele in a PIW.
                    ProdtypProductType.subDeleteTransCalculationByWfOfAResource(ioentity_M, context_M);

                    //                                      //Delete calculation associate with this resource
                    //                                      //      in this Eleet or elele in a PIW.
                    ProdtypProductType.subDeleteCalculationByWfOfAResource(ioentity_M, intPkResource_I, context_M);

                    //                                      //Delete temporary paper transformation own.
                    ProdtypProductType.subDeleteTemporaryPaperTrans(intPkResource_I, ioentity_M, context_M);
                }

                strUserMessage_IO = "Resource deleted.";
                strDevMessage_IO = "Success.";
            }
            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subDeleteCalculationByWfOfAResource(
            //                                              //Method for delete a Calculation Resource By WF.

            IoentityInputsAndOutputsEntityDB ioentity_I,
            int intPkResource_I,
            Odyssey2Context context_M
            )
        {
            List<CalentityCalculationEntityDB> darrcalentity = context_M.Calculation.Where(cal =>
                cal.intnPkResource == intPkResource_I &&
                cal.intnPkWorkflow == ioentity_I.intPkWorkflow &&
                cal.intnProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId &&
                cal.intnPkElementElement == ioentity_I.intnPkElementElement &&
                cal.intnPkElementElementType == ioentity_I.intnPkElementElementType &&
                cal.strEndDate == null).ToList();

            //                                              //Remove calculation ByResource from workflow if
            //                                              //      the calculation exist for this.
            foreach (CalentityCalculationEntityDB calentity in darrcalentity)
            {
                //                                          //Get the paper transformation asociated to this.
                List<PatransPaperTransformationEntityDB> darrpatransentity = context_M.PaperTransformation.Where(
                    patrans => patrans.intnPkCalculationOwn == calentity.intPk ||
                    patrans.intnPkCalculationLink == calentity.intPk).ToList();
                foreach (PatransPaperTransformationEntityDB patransentity in darrpatransentity)
                {
                    context_M.PaperTransformation.Remove(patransentity);
                }

                //                                          //Delete conditions.
                Tools.subDeleteCondition(calentity.intPk, null, null, null, context_M);

                context_M.Calculation.Remove(calentity);
            }

            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subDeleteTransCalculationByWfOfAResource(
            //                                              //Method for delete TransCalculation Resource By WF.

            IoentityInputsAndOutputsEntityDB ioentity_I,
            Odyssey2Context context_M
            )
        {

            int intPkProcessInWorkflow = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPkWorkflow == ioentity_I.intPkWorkflow &&
                piw.intProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId).intPk;

            //                                          //Find ioentity's transform calculations.
            List<TrfcalentityTransformCalculationEntityDB> darrtrfcalentity =
                context_M.TransformCalculation.Where(trf =>
                (trf.intnPkElementElementTypeI == ioentity_I.intnPkElementElementType ||
                trf.intnPkElementElementTypeO == ioentity_I.intnPkElementElementType ||
                trf.intnPkElementElementI == ioentity_I.intnPkElementElement ||
                trf.intnPkElementElementO == ioentity_I.intnPkElementElement) &&
                trf.intPkProcessInWorkflow == intPkProcessInWorkflow).ToList();

            foreach (TrfcalentityTransformCalculationEntityDB trfcalentity in darrtrfcalentity)
            {
                //                                          //Delete conditions.
                Tools.subDeleteCondition(null, null, null, trfcalentity.intPk, context_M);

                //                                      //Delete transform calculations.
                context_M.TransformCalculation.Remove(trfcalentity);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subDeleteTemporaryPaperTrans(
            //                                              //Method for delete a TemporaryPaperTrans related with a IO.

            int intPkResource_I,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            Odyssey2Context context_M
            )
        {

            int intPkProcessInWorkflow = context_M.ProcessInWorkflow.FirstOrDefault(piw =>
                piw.intPkWorkflow == ioentity_I.intPkWorkflow &&
                piw.intProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId).intPk;

            //                                              //Find temporary paper transformation related to this IO.
            PatransPaperTransformationEntityDB patransentity = context_M.PaperTransformation.FirstOrDefault(
                paper => paper.intPkProcessInWorkflow == intPkProcessInWorkflow &&
                paper.intPkResourceI == intPkResource_I &&
                paper.intnPkElementElementTypeI == ioentity_I.intnPkElementElementType &&
                paper.intnPkElementElementI == ioentity_I.intnPkElementElement &&
                paper.intnPkCalculationOwn == null && paper.boolTemporary == false);

            if (
                patransentity != null
                )
            {
                //                                          //Delete paper transformations.
                context_M.PaperTransformation.Remove(patransentity);
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subUpdateResourceForAJob(
            //                                              //Verify if for each IO not set in a wfjob there is a group
            //                                              //      in the product wf and if there is a group verify 
            //                                              //      each resource in the group and if one and only one 
            //                                              //      of the resources is available to be set in the wfjob 
            //                                              //      then the resource is set in the wfjob.

            //                                              //Product.
            ProdtypProductType prodtyp_I,
            int? intnPkWorkflow_I,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAllProcesses_I,
            //                                              //Job.
            JobjsonJobJson jobjson_I
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = darrpiwentityAllProcesses_I;
            if (
                intnPkWorkflow_I != null
                )
            {
                //                                          //Get all the processes.
                IQueryable<PiwentityProcessInWorkflowEntityDB> setpiwentity = context.
                    ProcessInWorkflow.Where(piw => piw.intPkWorkflow == intnPkWorkflow_I);
                darrpiwentity = setpiwentity.ToList();
            }

            //                                              //To easy code.
            int intPkWorkflow = intnPkWorkflow_I != null ? (int)intnPkWorkflow_I :
                darrpiwentity[0].intPkWorkflow;

            //                                              //Delete resources setted atm for this job and workflow.
            ProdtypProductType.subDeleteResourceSetAutomaticallyForAGivenJobAndWorkflow(jobjson_I.intJobId,
                intPkWorkflow);

            //                                              //Get the inputs and outputs for every process.
            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity)
            {
                List<Iojson2InputOrOutputJson2> darriojson2InputTypes = new List<Iojson2InputOrOutputJson2>();

                //                                          //Get the input types.
                darriojson2InputTypes.AddRange(prodtyp_I.arriojson2GetTypesForAJob(piwentity, jobjson_I, true));

                ProdtypProductType.subUpdateResourcesForIOForTypesOrTemplates(darriojson2InputTypes, piwentity,
                    jobjson_I, true);

                List<Iojson2InputOrOutputJson2> darriojson2InputTemplates = new List<Iojson2InputOrOutputJson2>();

                //                                          //Get the input templates.
                darriojson2InputTemplates.AddRange(prodtyp_I.arriojson2GetTemplatesForAJob(piwentity, jobjson_I, true));

                ProdtypProductType.subUpdateResourcesForIOForTypesOrTemplates(darriojson2InputTemplates, piwentity,
                    jobjson_I, false);

                List<Iojson2InputOrOutputJson2> darriojson2OutputTypes = new List<Iojson2InputOrOutputJson2>();

                //                                          //Get the output types.
                darriojson2OutputTypes.AddRange(prodtyp_I.arriojson2GetTypesForAJob(piwentity, jobjson_I, false));

                ProdtypProductType.subUpdateResourcesForIOForTypesOrTemplates(darriojson2OutputTypes, piwentity,
                    jobjson_I, true);

                List<Iojson2InputOrOutputJson2> darriojson2OutputTemplates = new List<Iojson2InputOrOutputJson2>();

                //                                          //Get the output templates.
                darriojson2OutputTemplates.AddRange(prodtyp_I.arriojson2GetTemplatesForAJob(piwentity, jobjson_I,
                    false));

                ProdtypProductType.subUpdateResourcesForIOForTypesOrTemplates(darriojson2OutputTemplates, piwentity,
                    jobjson_I, false);
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public static void subDeleteResourceSetAutomaticallyForAGivenJobAndWorkflow(
            //                                              //Dele register from ioj table of those resources setted atm.

            int intJobId_I,
            int intPkWorkflow_I
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            List<int> darrPkPiw = context.ProcessInWorkflow.Where(piw =>
                piw.intPkWorkflow == intPkWorkflow_I).Select(piw => piw.intPk).ToList();

            //                                              //Delete resources setted atm for this job and workflow.
            IQueryable<IojentityInputsAndOutputsForAJobEntityDB> darriojentity =
                (from iojentity in context.InputsAndOutputsForAJob
                 join piwentity in context.ProcessInWorkflow on
                 iojentity.intPkProcessInWorkflow equals piwentity.intPk
                 where
                 iojentity.intJobId == intJobId_I &&
                 iojentity.boolnWasSetAutomatically == true &&
                 darrPkPiw.Contains(iojentity.intPkProcessInWorkflow)
                 select iojentity);
            context.InputsAndOutputsForAJob.RemoveRange(darriojentity);
            context.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson2InputOrOutputJson2[] arriojson2GetTypesForAJob(
            //                                              //Get the inputs and output for the given process according
            //                                              //      with the boolean from the types.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            bool boolAreInputs_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = context.ElementElementType.Where(
                eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            //                                              //To fill an return.
            List<Iojson2InputOrOutputJson2> darriojson2 = new List<Iojson2InputOrOutputJson2>();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                int? intnPkResource = null;
                //                                          //Get the resource if it exists in the product workflow 
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == eleetentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        intnPkResource = eleentity.intPk;
                    }
                }

                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == eleetentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    intnPkResource = eleentity.intPk;
                }

                //                                          //Json to return.
                Iojson2InputOrOutputJson2 iojson2 = new Iojson2InputOrOutputJson2(eleetentity.intPk, true,
                    intnPkResource);

                darriojson2.Add(iojson2);
            }

            return darriojson2.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson2InputOrOutputJson2[] arriojson2GetTemplatesForAJob(
            //                                              //Get the inputs and outputs for the given process according
            //                                              //      with the boolean from the types.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            bool boolAreInputs_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the inputs/outputs types.
            IQueryable<EleeleentityElementElementEntityDB> seteleeleentity = context.ElementElement.Where(eleele =>
                eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I);
            List<EleeleentityElementElementEntityDB> darreleeleentity = seteleeleentity.ToList();

            //                                              //To fill an return.
            List<Iojson2InputOrOutputJson2> darriojson2 = new List<Iojson2InputOrOutputJson2>();
            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                int? intnPkResource = null;

                //                                          //Get the resource if it exists in the product workflow 
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == eleeleentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        intnPkResource = eleentityResource.intPk;
                    }
                }

                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElement == eleeleentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentityResource.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                        )
                    {
                        intnPkResource = eleentityResource.intPk;
                    }
                }

                Iojson2InputOrOutputJson2 iojson2 = new Iojson2InputOrOutputJson2(eleeleentity.intPk, false,
                    intnPkResource);

                darriojson2.Add(iojson2);
            }

            return darriojson2.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subUpdateResourcesForIOForTypesOrTemplates(
            //                                              //For a process in workflow verify the io where is not a 
            //                                              //      resource set and if that io has a group associated 
            //                                              //      at the product workflow, verify every resource (that
            //                                              //      means verify that the resource is from the type and
            //                                              //      template as the io and if the resource has 
            //                                              //      calculations for this piw and eleet or eleele,
            //                                              //      verify that at least one calculation with a 
            //                                              //      condition to apply that results in true for this 
            //                                              //      specific job) in the group. If only one resource in 
            //                                              //      the group is valid, set that resource in the io.
            //                                              //If the io has a resource set, verify if the resource was 
            //                                              //      set automatically, and verify if that resource is 
            //                                              //      valid to the io.

            //                                              //This could be:
            //                                              //  a) An array of input types.
            //                                              //  b) An array of input templates.
            //                                              //  c) An array of output types.
            //                                              //  d) An array of output templates.
            List<Iojson2InputOrOutputJson2> darriojson2_I,
            //                                              //Process in workflow.
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Job.
            JobjsonJobJson jobjson_I,
            //                                              //To know if is an array of types or an array of templates.
            bool boolIsType_I
            )
        {

            foreach (Iojson2InputOrOutputJson2 iojson2 in darriojson2_I)
            {
                //                                          //To easy code.
                int? intnPkElementType = null;
                int? intnPkElementElement = null;
                if (
                    boolIsType_I
                    )
                {
                    intnPkElementType = (int)iojson2.intPkEleetOrEleele;
                }
                else
                {
                    intnPkElementElement = (int)iojson2.intPkEleetOrEleele;
                }

                if (
                    //                                      //The io has not a resource set.
                    iojson2.intnPkResource == null
                    )
                {
                    ProdtypProductType.subProcessANotSetResourceForAJob(piwentity_I, jobjson_I,
                        intnPkElementType, intnPkElementElement);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subProcessANotSetResourceForAJob(
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            int? intnPkElementType_I,
            int? intnPkElementElement_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();
            //                                              //Verify if the product wf has a group to this io.
            IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                io.intnPkElementElementType == intnPkElementType_I &&
                io.intnPkElementElement == intnPkElementElement_I &&
                io.intnGroupResourceId != null);
            if (
                //                                          //The product wf has a group to this io.
                ioentity != null
                )
            {
                List<EleentityElementEntityDB> darreleentity = ProdtypProductType.darreleentityGetValidResources(
                    ioentity, jobjson_I, piwentity_I.intPkWorkflow);

                if (
                    //                                      //There is only one resource from the group that can be set.
                    darreleentity.Count == 1
                    )
                {
                    //                          //Set the resource.
                    IojentityInputsAndOutputsForAJobEntityDB iojentity = new
                        IojentityInputsAndOutputsForAJobEntityDB
                    {
                        intPkProcessInWorkflow = piwentity_I.intPk,
                        intnPkElementElementType = intnPkElementType_I,
                        intnPkElementElement = intnPkElementElement_I,
                        intPkResource = darreleentity[0].intPk,
                        intJobId = jobjson_I.intJobId,
                        boolnWasSetAutomatically = true
                    };
                    context.InputsAndOutputsForAJob.Add(iojentity);
                    context.SaveChanges();
                }
                else
                {
                    //                                      //No resource from a resources's group was set.
                    //                                      //If the job if a reorder try to set parent's resource.
                    if (
                        //                                  //It is a reorder.
                        jobjson_I.intnReorderedFromJobID != null
                        )
                    {
                        //                                  //Parent job have to be completed.
                        JobentityJobEntityDB jobentity = context.Job.FirstOrDefault(job =>
                            job.intJobID == jobjson_I.intnReorderedFromJobID);
                        if (
                            jobentity != null && jobentity.intStage == JobJob.intCompletedStage
                            )
                        {
                            ProdtypProductType.subLookResourceFromParentWorkflow((int)jobjson_I.intnReorderedFromJobID,
                            ioentity, jobjson_I, jobentity);
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subProcessASetResourceForAJob(
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            int? intnPkElementType_I,
            int? intnPkElementElement_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
                        FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                        ioj.intnPkElementElementType == intnPkElementType_I &&
                        ioj.intnPkElementElement == intnPkElementElement_I &&
                        ioj.intJobId == jobjson_I.intJobId &&
                        ioj.boolnWasSetAutomatically == true);

            if (
                iojentity != null
                )
            {
                //                                      //Verify if the product wf has a group to this io.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == intnPkElementType_I &&
                    io.intnPkElementElement == intnPkElementElement_I &&
                    ((io.intnGroupResourceId != null) || (io.intnPkResource != null)));

                /*CASE*/
                if (
                    (ioentity != null) &&
                    (ioentity.intnGroupResourceId != null)
                    )
                {
                    List<EleentityElementEntityDB> darreleentity = ProdtypProductType.
                        darreleentityGetValidResources(ioentity, jobjson_I, piwentity_I.intPkWorkflow);

                    /*CASE*/
                    if (
                        //                                  //There is only one resource from the group that can be set.
                        (darreleentity.Count == 1) &&
                        (darreleentity[0].intPk == iojentity.intPkResource)
                        )
                    {
                        //                                  //There is nothing to do.
                    }
                    else if (
                        (darreleentity.Count == 1) &&
                        (darreleentity[0].intPk != iojentity.intPkResource)
                        )
                    {
                        iojentity.intPkResource = darreleentity[0].intPk;
                        context.InputsAndOutputsForAJob.Update(iojentity);
                        context.SaveChanges();
                    }
                    else
                    {
                        context.InputsAndOutputsForAJob.Remove(iojentity);
                        context.SaveChanges();
                    }
                    /*END-CASE*/
                }
                else if (
                    (ioentity != null) &&
                    (ioentity.intnPkResource != null)
                    )
                {
                    context.InputsAndOutputsForAJob.Remove(iojentity);
                    context.SaveChanges();
                }
                /*END-CASE*/
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static List<EleentityElementEntityDB> darreleentityGetValidResources(
            IoentityInputsAndOutputsEntityDB ioentity_I,
            JobjsonJobJson jobjson_I,
            int intPkWorkflow_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the group of resources.
            IQueryable<GpresentityGroupResourceEntityDB> setgpresentity = context.GroupResource.
                Where(gpres => gpres.intId == ioentity_I.intnGroupResourceId &&
                gpres.intPkWorkflow == intPkWorkflow_I);
            List<GpresentityGroupResourceEntityDB> darrgpresentity = setgpresentity.ToList();

            List<EleentityElementEntityDB> darreleentity = new List<EleentityElementEntityDB>();
            int intI = 0;
            /*UNTIL-DO*/
            while (!(
                //                                          //There is not more resources to verify.
                (intI >= darrgpresentity.Count) ||
                //                                          //There is more than one resource that can be set.
                (darreleentity.Count >= 2)
                ))
            {
                //                                          //Get the resource.
                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                    ele.intPk == darrgpresentity[intI].intPkResource);

                if (
                    //                                      //Is a valid resource.
                    ProdtypProductType.boolIsValidResourceForIO(ioentity_I, eleentity, jobjson_I)
                    )
                {
                    darreleentity.Add(eleentity);
                }

                intI = intI + 1;
            }

            return darreleentity;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static bool boolIsValidResourceForIO(
            IoentityInputsAndOutputsEntityDB ioentity_I,
            EleentityElementEntityDB eleentity_I,
            JobjsonJobJson jobjson_I
            )
        {
            bool boolIsValidResource = false;

            //                                              //Get the calculations.
            Odyssey2Context context = new Odyssey2Context();
            List<CalentityCalculationEntityDB> darrcalentity = context.Calculation.Where(cal =>
                cal.intnPkWorkflow == ioentity_I.intPkWorkflow &&
                cal.intnProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId &&
                cal.intnPkElementElementType == ioentity_I.intnPkElementElementType &&
                cal.intnPkElementElement == ioentity_I.intnPkElementElement &&
                cal.intnPkResource == eleentity_I.intPk).ToList();

            boolIsValidResource = (darrcalentity.Count() > 0) ? false : true;

            int intI = 0;
            /*UNTIL-DO*/
            while (!(
                //                                          //There is no more calculations to verify.
                (intI >= darrcalentity.Count) ||
                //                                          //At least one calculation valid was found.
                boolIsValidResource
                ))
            {
                if (
                    //                                      //The calculation apply to this job.
                    Tools.boolCalculationOrLinkApplies(darrcalentity[intI].intPk, null, null, null, jobjson_I)
                    )
                {
                    boolIsValidResource = true;
                }

                intI = intI + 1;
            }

            return boolIsValidResource;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        private static void subLookResourceFromParentWorkflow(
            //                                              //Look parent's workflow for a reorder and try to set a
            //                                              //      resource to reorder.

            int intParentJobId_I,
            IoentityInputsAndOutputsEntityDB ioentity_I,
            JobjsonJobJson jobjson_I,
            JobentityJobEntityDB jobentity_I
            )
        {
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Only if the parent and reorder workflow are the same,
            //                                              //      we migth take a resource from parent.
            if (
                (jobentity_I.intPkWorkflow == ioentity_I.intPkWorkflow) && !jobentity_I.boolDeleted
                )
            {
                //                                          //Get reorder's processinworkflow.
                PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                    piw.intPkWorkflow == ioentity_I.intPkWorkflow &&
                    piw.intProcessInWorkflowId == ioentity_I.intnProcessInWorkflowId);

                //                                          //Get reource setted at parent's reorder.
                IojentityInputsAndOutputsForAJobEntityDB iojentity =
                    context.InputsAndOutputsForAJob.FirstOrDefault(ioj =>
                    ioj.intPkProcessInWorkflow == piwentity.intPk &&
                    ioj.intnPkElementElement == ioentity_I.intnPkElementElement &&
                    ioj.intnPkElementElementType == ioentity_I.intnPkElementElementType &&
                    ioj.intJobId == intParentJobId_I);

                bool boolParentResourceDeleted = true;
                EleentityElementEntityDB eleentity = new EleentityElementEntityDB();
                if (
                    iojentity != null
                    )
                {
                    eleentity = context.Element.FirstOrDefault(ele =>
                    ele.intPk == iojentity.intPkResource);
                    boolParentResourceDeleted = eleentity.boolDeleted;
                }

                //                                          //We can set the parent resource only if the resource has
                //                                          //      not been deleted.
                if (
                    !boolParentResourceDeleted
                    )
                {
                    //                                      //Set the resource.
                    IojentityInputsAndOutputsForAJobEntityDB iojentityToAdd = new
                        IojentityInputsAndOutputsForAJobEntityDB
                    {
                        intPkProcessInWorkflow = piwentity.intPk,
                        intnPkElementElementType = ioentity_I.intnPkElementElementType,
                        intnPkElementElement = ioentity_I.intnPkElementElement,
                        intPkResource = eleentity.intPk,
                        intJobId = jobjson_I.intJobId,
                        boolnWasSetAutomatically = true
                    };
                    context.InputsAndOutputsForAJob.Add(iojentityToAdd);
                    context.SaveChanges();
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subGetProductWorkflows(
            //                                              //Returns workflows´ pk and name of a product.
            int? intnJobId_I,
            int intPkProduct_I,
            bool boolEstimate_I,
            IConfiguration configuration_I,
            PsPrintShop ps_I,
            out List<Wfjson2WorkflowJson2> darrwfjson2_O,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            darrwfjson2_O = new List<Wfjson2WorkflowJson2>();

            //                                              //List of wf to return.
            List<WfentityWorkflowEntityDB> darrwfentity = new List<WfentityWorkflowEntityDB>();
            WfentityWorkflowEntityDB wfentityCustomWorkflow = null;

            //                                              //Validate the job and get the jobjson.
            bool boolIsValidJob = false;
            JobjsonJobJson jobjson = null;
            if (
                intnJobId_I > 0
                )
            {
                boolIsValidJob = JobJob.boolIsValidJobId((int)intnJobId_I, ps_I.strPrintshopId, configuration_I,
                    out jobjson, ref strUserMessage_IO, ref strDevMessage_IO);
            }

            //                                              //Validate the product and get the prodtyp.
            bool boolIsValidProduct = false;
            ProdtypProductType prodtyp = null;
            if (
                intPkProduct_I > 0
                )
            {
                EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(intPkProduct_I);
                intStatus_IO = 401;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Product not found.";
                if (
                    (et != null) &&
                    (et.strResOrPro == EtElementTypeAbstract.strProduct) &&
                    (et.strCustomTypeId != "Dummy")
                    )
                {
                    boolIsValidProduct = true;
                    prodtyp = (ProdtypProductType)et;
                }
            }

            WfentityWorkflowEntityDB wfentityUsed = null;
            if (
                 //                                          //List of workflows for the product.
                 //                                          //   Add or delete some worflows according to the job.

                 //                                          //JOBS IN ESTIMATING, if Confirm Estimate... 
                 //                                          //JOBS WAITING FOR PRICE APPROVAL => There is a confirmed estimate:
                 //                                          //JOBS PENDING...BEFORE IN ESTIMATING => There is a confirmed estimate:
                 //                                          //JOBS PENDING...BEFORE ESTIMATE => There is a confirmed estimate:
                 //                                          //JOBS PENDING...PRICE USING ODYSSEY2 
                 //                                          //  First this wf, after the rest of the wf for the product.

                 //                                          //ESTIMATES REQUESTED, if Confirm Estimate... 
                 //                                          //ESTIMATES WAITING FOR PRICE APPROVAL => There is a confirmed estimate:
                 //                                          //  First this wf, after the rest of the wf for the product.
                 //                                          //  Also includes the custom workflow if exists!.

                 //                                          //JOBS INPROGRESS OR COMPLETED....NO CONSUMEN ESTE SERVICIO.
                 //                                          //  Directo al servicio: GetForAJob

                 //                                          //ESTIMATES FROM SCRATCH....NO CONSUME ESTE SERVICIO.
                 //                                          //  Directo al servicio: GetEstimationsIds

                 (intnJobId_I > 0) && boolIsValidJob &&
                 (intPkProduct_I > 0) && boolIsValidProduct
                 )
            {
                prodtyp = ProdtypProductType.GetProductTypeUpdated(ps_I, jobjson.strProductName,
                    (int)jobjson.intnProductKey, true);

                int intPkProduct = prodtyp.intPk == intPkProduct_I ? prodtyp.intPk : 0;
                int? intnOrderId = jobjson.intnOrderId;

                //                                          //Find if there are a estimate sent to the Website.
                EstentityEstimateEntityDB estentityEstimateSent = context_M.Estimate.FirstOrDefault(
                    est => est.intJobId == intnJobId_I && est.boolSentToWebSite == true);

                //                                          //Find if there are a estimate confirmed.
                EstentityEstimateEntityDB estentityEstimateConfirmed = context_M.Estimate.FirstOrDefault(
                    est => est.intJobId == intnJobId_I && est.intId == 0);


                /*CASE*/
                if (
                    estentityEstimateSent != null
                    )
                {
                    //                                      //Get the wfentity.
                    wfentityUsed = context_M.Workflow.FirstOrDefault(wf =>
                        wf.intPk == estentityEstimateSent.intPkWorkflow);

                    String strWarningMessage = "There is a workflow used to send an estimate to the print buyer. " +
                        "Using a new workflow may imply changes in cost and price.";

                    String strName = wfentityUsed.strName;
                    if (
                        wfentityUsed.boolDeleted
                        )
                    {
                        strName = wfentityUsed.strName + " (deprecated)";
                    }

                    Wfjson2WorkflowJson2 wfjson = new Wfjson2WorkflowJson2(wfentityUsed.intPk,
                        strName, wfentityUsed.boolDefault, true, strWarningMessage,
                        !wfentityUsed.boolDeleted, false);
                    darrwfjson2_O.Add(wfjson);
                }
                else if (
                        estentityEstimateConfirmed != null && intnOrderId > 0
                        )
                {
                    wfentityUsed = context_M.Workflow.FirstOrDefault(
                        wf => wf.intPk == estentityEstimateConfirmed.intPkWorkflow);

                    String strWarningMessage = "There is a confirmed estimated with other workflow. " +
                        "Using a new workflow may imply changes in cost and price.";

                    String strName = wfentityUsed.strName;
                    if (
                        wfentityUsed.boolDeleted
                        )
                    {
                        strName = wfentityUsed.strName + " (deprecated)";
                    }

                    Wfjson2WorkflowJson2 wfjson = new Wfjson2WorkflowJson2(wfentityUsed.intPk,
                        strName, wfentityUsed.boolDefault, true, strWarningMessage,
                        !wfentityUsed.boolDeleted, false);
                    darrwfjson2_O.Add(wfjson);
                }
                else if (
                        jobjson.boolnOdyssey2Pricing == true
                        )
                {
                    wfentityUsed =
                        prodtyp.wfentityGetDefaultWorkflowDependingDate(jobjson.dateLastUpdate);

                    String strWarningMessage = "There is a workflow used to show the price in the in the Website. " +
                        "Using a new workflow may imply changes in cost and price.";

                    if (
                        //                                  //
                        wfentityUsed != null
                        )
                    {
                        String strName = wfentityUsed.strName;
                        if (
                            wfentityUsed.boolDeleted
                            )
                        {
                            strName = wfentityUsed.strName + " (deprecated)";
                        }

                        Wfjson2WorkflowJson2 wfjson = new Wfjson2WorkflowJson2(wfentityUsed.intPk,
                            strName, wfentityUsed.boolDefault, true, strWarningMessage,
                            !wfentityUsed.boolDeleted, false);
                        darrwfjson2_O.Add(wfjson);
                    }
                }
                /*END-CASE*/
            }

            if (
                //                                      //Also the custom workflow for estimates.
                boolIsValidJob// && boolEstimate_I
                )
            {
                //                                      //Find the custom workflow for the estimate.
                wfentityCustomWorkflow = context_M.Workflow.FirstOrDefault(wf =>
                    wf.boolDeleted == false && wf.intnJobId == jobjson.intJobId);

                if (
                    wfentityCustomWorkflow != null
                    )
                {
                    Wfjson2WorkflowJson2 wfjson = new Wfjson2WorkflowJson2(wfentityCustomWorkflow.intPk,
                        wfentityCustomWorkflow.strName, wfentityCustomWorkflow.boolDefault, false, "", false, false);
                    darrwfjson2_O.Add(wfjson);
                }
            }

            if (
                boolIsValidProduct
                )
            {
                //                                      //All workflows for this product.
                darrwfentity = context_M.Workflow.Where(wf => wf.intnPkProduct == (int)intPkProduct_I &&
                    wf.boolDeleted == false && wf.boolnGeneric != true).ToList();
                darrwfentity = darrwfentity.OrderBy(wf => wf.strName).ToList();
            }

            if (
                (darrwfjson2_O.Count == 0) &&
                (darrwfentity.Count == 0) &&
                boolIsValidProduct
                )
            {
                //                                      //Get current time and date.
                Time timeCurrentTime = Time.Now(ZonedTimeTools.timezone);
                Date dateCurrentDate = Date.Now(ZonedTimeTools.timezone);
                //                                      //Create workflow.
                WfentityWorkflowEntityDB wfentityFirstWorkflow = new WfentityWorkflowEntityDB
                {
                    intnPkProduct = prodtyp.intPk,
                    strName = prodtyp.strCustomTypeId,
                    intWorkflowId = 1,
                    strStartDate = dateCurrentDate.ToText(),
                    strStartTime = timeCurrentTime.ToString(),
                    intPkPrintshop = ps_I.intPk,
                    boolDeleted = false,
                    boolDefault = true
                };
                context_M.Workflow.Add(wfentityFirstWorkflow);
                context_M.SaveChanges();

                DefwfhisentityDefaultWorkflowHistoryEntityDB defwfhisentityDefault = new DefwfhisentityDefaultWorkflowHistoryEntityDB
                {
                    intPkWorkflow = wfentityFirstWorkflow.intPk,
                    strStartDate = dateCurrentDate.ToText(),
                    strStartTime = timeCurrentTime.ToString(),
                };
                context_M.DefaultWorkflowHistory.Add(defwfhisentityDefault);
                context_M.SaveChanges();

                //                                      //Return workflow´s info.
                Wfjson2WorkflowJson2 wfjson = new Wfjson2WorkflowJson2(wfentityFirstWorkflow.intPk,
                    wfentityFirstWorkflow.strName, wfentityFirstWorkflow.boolDefault, false, "", false, false);
                darrwfjson2_O.Add(wfjson);
            }
            else
            {
                //                                      //Return each workflow´s info.
                foreach (WfentityWorkflowEntityDB wf in darrwfentity)
                {
                    if (
                        //                              //Is the wf used and is still valid.
                        wfentityUsed != null && !wfentityUsed.boolDeleted &&
                        //                              //This is the wf.
                        wf.intPk == wfentityUsed.intPk
                        )
                    {
                        //Do nothing
                    }
                    else
                    {
                        bool boolIsNewVersion = false;
                        if (
                            //                              //Is the wf used and is not valid.
                            wfentityUsed != null && wfentityUsed.boolDeleted &&
                            //                              //This is the new version.
                            wf.intWorkflowId == wfentityUsed.intWorkflowId
                            )
                        {
                            boolIsNewVersion = true;
                        }
                        Wfjson2WorkflowJson2 wfjson = new Wfjson2WorkflowJson2(wf.intPk, wf.strName,
                            wf.boolDefault, false, "", false, boolIsNewVersion);
                        darrwfjson2_O.Add(wfjson);
                    }
                }
            }

            intStatus_IO = 200;
            strUserMessage_IO = "";
            strDevMessage_IO = "Success.";
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public WfentityWorkflowEntityDB wfentityGetDefaultWorkflowDependingDate(
            String strDateTime_I
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            WfentityWorkflowEntityDB wfentity = null;

            Date dateStartDate = strDateTime_I.Substring(0, 10).ParseToDate();
            Time timeStartTime = strDateTime_I.Substring(11).ParseToTime();

            ZonedTime ztimeJobDate = ZonedTimeTools.NewZonedTime(dateStartDate, timeStartTime);

            //                                          //Default-Workflow History.
            List<DefwfhisentityDefaultWorkflowHistoryEntityDB> darrdefwfhis =
                (from defwfhist in context.DefaultWorkflowHistory
                 join wf in context.Workflow
                 on defwfhist.intPkWorkflow equals wf.intPk
                 where wf.intnPkProduct == this.intPk
                 select defwfhist).ToList();

            if (
               darrdefwfhis.Count() >= 1
               )
            {
                //                                          //Sort the history.
                darrdefwfhis.Sort();

                int? intnPkWorkflow = null; ;
                bool boolAuxiliary = true;
                int intI = darrdefwfhis.Count() - 1;
                /*WHILE-DO*/
                while (
                    boolAuxiliary == true &&
                    intI >= 0
                    )
                {
                    DefwfhisentityDefaultWorkflowHistoryEntityDB defwfhis = darrdefwfhis[intI];
                    //                                      //Create ztime object for the cost in db.
                    Date dateSetDate = defwfhis.strStartDate.ParseToDate();
                    Time timeSetTime = defwfhis.strStartTime.ParseToTime();
                    ZonedTime ztimeDefaultWorkflowDateDB = ZonedTimeTools.NewZonedTime(dateSetDate, timeSetTime);

                    if (
                        ztimeJobDate > ztimeDefaultWorkflowDateDB
                        )
                    {
                        intnPkWorkflow = darrdefwfhis[intI].intPkWorkflow;
                        boolAuxiliary = false;
                    }
                    intI = intI - 1;
                }

                if (
                    intnPkWorkflow != null
                    )
                {
                    wfentity = context.Workflow.FirstOrDefault(wf => wf.intPk == (int)intnPkWorkflow);
                }
            }

            return wfentity;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subUpdateName(
            //                                              //Updates workflow´s name.

            int intPkWorkflow_I,
            String strWorkflowName_I,
            PsPrintShop ps_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 401;
            strUserMessage_IO = "Name cannot be empty.";
            strDevMessage_IO = "Empty string name.";
            if (
                strWorkflowName_I.Length > 0
                )
            {
                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "PkWokflow is empty.";
                if (
                    //                                      //Pkworkflow is not empty.
                    intPkWorkflow_I > 0
                    )
                {
                    //                                      //Initialize connection.
                    Odyssey2Context context = new Odyssey2Context();
                    //                                      //Find workflow.
                    WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                        wf.intPk == intPkWorkflow_I && wf.boolDeleted == false &&
                        wf.intPkPrintshop == ps_I.intPk);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Workflow not found.";
                    if (
                        //                                  //Workflow exists.
                        wfentity != null
                        )
                    {
                        bool boolThereIsAWfWithTheSameName = false;

                        if (
                            wfentity.intnPkProduct != null
                            )
                        {
                            //                                  //Find product.
                            EtElementTypeAbstract et = EtElementTypeAbstract.etFromDB(wfentity.intnPkProduct);

                            //                                  //Get product.
                            ProdtypProductType prodtyp = (ProdtypProductType)et;

                            boolThereIsAWfWithTheSameName = ProdtypProductType.boolThereIsAWorkflowWithTheSameName(
                                prodtyp, strWorkflowName_I, context);
                        }
                        else
                        {
                            //                                          //Find base workflows
                            List<WfentityWorkflowEntityDB> darrwfentity = context.Workflow.Where(wf =>
                               wf.intPkPrintshop == wfentity.intPkPrintshop && wf.intnPkProduct == null).ToList();

                            //                                          //Valid if there is a wf with the same name
                            boolThereIsAWfWithTheSameName = darrwfentity.Exists(wf =>
                                wf.strName.ToLower() == strWorkflowName_I.ToLower());
                        }

                        if (
                            //                              //Verify name is not repeated.
                            !boolThereIsAWfWithTheSameName
                            )
                        {
                            wfentity.strName = strWorkflowName_I;
                            context.SaveChanges();

                            intStatus_IO = 200;
                            strUserMessage_IO = "Name updated.";
                            strDevMessage_IO = "";
                        }
                        else
                        {
                            intStatus_IO = 404;
                            strUserMessage_IO = "There is a workflow with the same name.";
                            strDevMessage_IO = "";
                        }
                    }
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subDelete(
            //                                              //Delete workflow and all of its the information set.

            int intPkWorkflow_I,
            bool boolIsSuperAdmin_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "PkWokflow is empty.";
            if (
                //                                          //Pkworkflow is not empty.
                intPkWorkflow_I > 0
                )
            {
                //                                          //Find workflow.
                WfentityWorkflowEntityDB wfentity = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == intPkWorkflow_I && wf.boolDeleted == false);

                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Workflow not found.";
                if (
                    //                                      //Workflow exists.
                    wfentity != null
                    )
                {
                    if (
                        wfentity.boolnGeneric == true
                        )
                    {
                        intStatus_IO = 403;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "Is not the super admin user.";
                        if (
                            //                              //Only the super admin can delete a generic workflow
                            boolIsSuperAdmin_I
                            )
                        {
                            //                              //Delete workflow physically.
                            ProdtypProductType.subDeleteWorkflowPhysically(intPkWorkflow_I, wfentity, context_M,
                                ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);

                            context_M.SaveChanges();

                            intStatus_IO = 200;
                            strUserMessage_IO = "Workflow deleted.";
                            strDevMessage_IO = "";
                        }
                    }
                    else
                    {
                        bool boolIsTheOnlyWorkflow = false;
                        if (
                            //                              //Workflow is the default one.
                            wfentity.boolDefault
                            )
                        {
                            //                              //Find another workflow of the same product.
                            WfentityWorkflowEntityDB wfentityDefault = context_M.Workflow.FirstOrDefault(wf =>
                                wf.intnPkProduct == wfentity.intnPkProduct && wf.intPk != wfentity.intPk &&
                                wf.boolDeleted == false);
                            if (
                                wfentityDefault != null
                                )
                            {
                                //                          //Make that workflow default.
                                ProdtypProductType.subMakeDefault(wfentityDefault.intPk, context_M, ref intStatus_IO,
                                    ref strUserMessage_IO, ref strDevMessage_IO);
                            }
                            else
                            {
                                //                          //It´s the last available workflow.
                                boolIsTheOnlyWorkflow = true;
                            }
                        }

                        intStatus_IO = 404;
                        strUserMessage_IO = "Cannot delete the only available workflow.";
                        strDevMessage_IO = "It is the last workflow on the DB.";
                        if (
                            //                              //There are more available workflows.
                            !boolIsTheOnlyWorkflow
                            )
                        {
                            //                              //Find existing jobs using that workflow.
                            IQueryable<JobentityJobEntityDB> setjobentity = context_M.Job.Where(j =>
                                j.intPkWorkflow == intPkWorkflow_I);
                            List<JobentityJobEntityDB> darrjobentity = setjobentity.ToList();

                            if (
                                //                          //There is not any job using the workflow.
                                darrjobentity.Count == 0
                                )
                            {
                                //                          //Delete workflow physically.
                                ProdtypProductType.subDeleteWorkflowPhysically(intPkWorkflow_I, wfentity, context_M,
                                    ref intStatus_IO, ref strUserMessage_IO, ref strDevMessage_IO);
                            }
                            else
                            {
                                //                          //There are jobs using the workflow.

                                //                          //Find process in PIW table.
                                IQueryable<PiwentityProcessInWorkflowEntityDB> setpiwentity =
                                    context_M.ProcessInWorkflow.Where(piw => piw.intPkWorkflow == intPkWorkflow_I);
                                List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = setpiwentity.ToList();

                                //                          //Delete EstimationData entries.
                                JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentity);

                                //                          //Delete IOJ that using this WF in a Job pending.
                                ProdtypProductType.subDeleteIOJ(context_M, darrpiwentity, darrjobentity);

                                //                          //Delete period that using this WF in a Job pending.
                                ProdtypProductType.subDeletePeriodUsedInJobPending(context_M, intPkWorkflow_I,
                                    darrjobentity);

                                //                          //Delete workflow logically.
                                wfentity.boolDeleted = true;
                                context_M.SaveChanges();

                                intStatus_IO = 200;
                                strUserMessage_IO = "Workflow deleted.";
                                strDevMessage_IO = "";
                            }
                        }
                    }
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subDeleteIOJ(
            //                                              //Delete IOJ that is used in JOBPending.

            Odyssey2Context context_M,
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            List<JobentityJobEntityDB> darrjobentityInProgress_I
            )
        {
            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity_I)
            {
                //                                          //Find estimation data.
                List<IojentityInputsAndOutputsForAJobEntityDB> darriojentity = context_M.InputsAndOutputsForAJob.Where(ioj =>
                    ioj.intPkProcessInWorkflow == piwentity.intPk).ToList();

                foreach (IojentityInputsAndOutputsForAJobEntityDB iojentity in darriojentity)
                {
                    if (
                        //                                  //IOJ belong to JOBPending.
                        !darrjobentityInProgress_I.Exists(job => job.intJobID == iojentity.intJobId)
                        )
                    {
                        context_M.InputsAndOutputsForAJob.Remove(iojentity);
                    }
                }
            }

            context_M.SaveChanges();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subDeletePeriodUsedInJobPending(
            //                                              //Delete Period that is used in JOBPending.

            Odyssey2Context context_M,
            int intPkWorkflow,
            List<JobentityJobEntityDB> darrjobentityInProgress_I
            )
        {
            //                                          //Find Period.
            List<PerentityPeriodEntityDB> darrperentity = context_M.Period.Where(per =>
                per.intPkWorkflow == intPkWorkflow).ToList();

            foreach (PerentityPeriodEntityDB perentity in darrperentity)
            {
                if (
                    //                                  //period belong to JOBPending.
                    !darrjobentityInProgress_I.Exists(job => job.intJobID == perentity.intJobId)
                    )
                {
                    context_M.Period.Remove(perentity);
                }
            }

            context_M.SaveChanges();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        private static void subDeleteWorkflowPhysically(
            //                                              //Deletes each entity involved wit the workflow on DB.

            int intPkWorkflow_I,
            WfentityWorkflowEntityDB wfentity_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Find Piw for that Workflow.
            IQueryable<PiwentityProcessInWorkflowEntityDB> setpiwentity = context_M.ProcessInWorkflow.Where(piw =>
                piw.intPkWorkflow == intPkWorkflow_I);
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = setpiwentity.ToList();

            //                                              //Delete each Piw ,Iojob and transform cal.
            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity)
            {
                //                                          //Find Iojob where the PkPiw appears.
                IQueryable<IojentityInputsAndOutputsForAJobEntityDB> setiojentity =
                    context_M.InputsAndOutputsForAJob.Where(ioj => ioj.intPkProcessInWorkflow == piwentity.intPk);
                List<IojentityInputsAndOutputsForAJobEntityDB> darriojentity = setiojentity.ToList();

                foreach (IojentityInputsAndOutputsForAJobEntityDB ioj in darriojentity)
                {
                    //                                      //Remove iojob entity.
                    context_M.InputsAndOutputsForAJob.Remove(ioj);
                }

                //                                          //Find transfom calculations where PkPiw appears.
                List<TrfcalentityTransformCalculationEntityDB> darrtrfentity = context_M.TransformCalculation.Where(
                    trf => trf.intPkProcessInWorkflow == piwentity.intPk).ToList();

                foreach (TrfcalentityTransformCalculationEntityDB trfcalentity in darrtrfentity)
                {
                    //                                      //Delete conditions.
                    Tools.subDeleteCondition(null, null, null, trfcalentity.intPk, context_M);

                    //                                      //Remove trans calculation.
                    context_M.TransformCalculation.Remove(trfcalentity);
                }

                //                                          //Find paper transformations where PkPiw appears.
                List<PatransPaperTransformationEntityDB> darrpatransentity = context_M.PaperTransformation.Where(
                    paper => paper.intPkProcessInWorkflow == piwentity.intPk).ToList();

                foreach (PatransPaperTransformationEntityDB patransentity in darrpatransentity)
                {
                    //                                      //Remove paper trans.
                    context_M.PaperTransformation.Remove(patransentity);
                }

                //                                          //Remove piw entity.
                context_M.ProcessInWorkflow.Remove(piwentity);
            }

            //                                              //Find Calculations for that Workflow.
            IQueryable<CalentityCalculationEntityDB> setcalentity = context_M.Calculation.Where(cal =>
                cal.intnPkWorkflow == intPkWorkflow_I);
            List<CalentityCalculationEntityDB> darrcalentity = setcalentity.ToList();

            //                                              //Delete each Calculation.
            foreach (CalentityCalculationEntityDB cal in darrcalentity)
            {
                //                                          //Delete conditions.
                Tools.subDeleteCondition(cal.intPk, null, null, null, context_M);
                context_M.Calculation.Remove(cal);
            }

            //                                              //Find nodes for that Workflow.
            List<LinknodLinkNodeEntityDB> darrlinknodentity = context_M.LinkNode.Where(node =>
                node.intPkWorkflow == intPkWorkflow_I).ToList();

            //                                              //Delete each Io.
            foreach (LinknodLinkNodeEntityDB node in darrlinknodentity)
            {
                //                                          //Delete conditions.
                Tools.subDeleteCondition(null, node.intPk, null, null, context_M);
                context_M.LinkNode.Remove(node);
            }

            //                                              //Find Ios for that Workflow.
            IQueryable<IoentityInputsAndOutputsEntityDB> setioentity = context_M.InputsAndOutputs.Where(io =>
                io.intPkWorkflow == intPkWorkflow_I);
            List<IoentityInputsAndOutputsEntityDB> darrioentity = setioentity.ToList();

            //                                              //Delete each Io.
            foreach (IoentityInputsAndOutputsEntityDB io in darrioentity)
            {
                //                                          //Delete conditions.
                Tools.subDeleteCondition(null, null, io.intPk, null, context_M);
                context_M.InputsAndOutputs.Remove(io);
            }

            //                                              //Find Group resource for that Workflow.
            IQueryable<GpresentityGroupResourceEntityDB> setgpresentity = context_M.GroupResource.Where(gpres =>
                gpres.intPkWorkflow == intPkWorkflow_I);
            List<GpresentityGroupResourceEntityDB> darrgpresentity = setgpresentity.ToList();
            //                                              //Delete each Group resource.

            foreach (GpresentityGroupResourceEntityDB gpres in darrgpresentity)
            {
                context_M.GroupResource.Remove(gpres);
            }

            //                                              //Find process in PIW table.
            IQueryable<PiwentityProcessInWorkflowEntityDB> setpiwentityAll = context_M.ProcessInWorkflow.Where(piw =>
                piw.intPkWorkflow == intPkWorkflow_I);
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAll = setpiwentity.ToList();


            List<PerentityPeriodEntityDB> darrperentity = context_M.Period.Where(per =>
                per.intPkWorkflow == intPkWorkflow_I).ToList();

            foreach (PerentityPeriodEntityDB perentity in darrperentity)
            {
                context_M.Period.Remove(perentity);
            }

            //                                              //Delete EstimationData entries.
            JobJob.subDeleteEstimationDataEntriesForAWorkflow(context_M, darrpiwentity);

            //                                              //Find pending job prices related to this workflow
            List<PriceentityPriceEntityDB> darrpriceentity = context_M.Price.Where(price =>
                price.intnPkWorkflow == intPkWorkflow_I).ToList();

            foreach (PriceentityPriceEntityDB priceentity in darrpriceentity)
            {
                context_M.Price.Remove(priceentity);
            }

            //                                              //Delete workflow default's history.
            List<DefwfhisentityDefaultWorkflowHistoryEntityDB> darrdefwfhisentity =
                context_M.DefaultWorkflowHistory.Where(def => def.intPkWorkflow == intPkWorkflow_I).ToList();
            foreach (DefwfhisentityDefaultWorkflowHistoryEntityDB defwfhisentity in darrdefwfhisentity)
            {
                context_M.DefaultWorkflowHistory.Remove(defwfhisentity);
            }

            //                                              //Delete workflow.
            context_M.Workflow.Remove(wfentity_I);
            context_M.SaveChanges();

            intStatus_IO = 200;
            strUserMessage_IO = "Workflow deleted.";
            strDevMessage_IO = "";
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subMakeDefault(
            //                                              //Make a specific workflow default.

            int intPkWorkflow_I,
            Odyssey2Context context_M,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "PkWokflow is empty.";
            if (
                //                                          //Pkworkflow is not empty.
                intPkWorkflow_I > 0
                )
            {
                //                                          //Find workflow.
                WfentityWorkflowEntityDB wfentity = context_M.Workflow.FirstOrDefault(wf =>
                    wf.intPk == intPkWorkflow_I && wf.boolDeleted == false);

                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Workflow not found.";
                if (
                    //                                      //Workflow exists.
                    wfentity != null
                    )
                {
                    //                                      //Find default workflow of the same product.
                    List<WfentityWorkflowEntityDB> darrwfentityDefault = context_M.Workflow.Where(wf =>
                        wf.intnPkProduct == wfentity.intnPkProduct &&
                        wf.boolDefault == true).ToList();
                    foreach (WfentityWorkflowEntityDB wfentityDefault in darrwfentityDefault)
                    {
                        if (
                            wfentityDefault != null
                            )
                        {
                            wfentityDefault.boolDefault = false;
                        }
                    }

                    //                                      //Asssign default workflow.
                    wfentity.boolDefault = true;

                    ProdtypProductType.subAddWorkflowDefaultHistory(wfentity.intPk, context_M);
                    //                                      //Create register into defaultWorkflowHistory table.
                    /* DefwfhisentityDefaultWorkflowHistoryEntityDB defwfhisentity =
                         new DefwfhisentityDefaultWorkflowHistoryEntityDB
                         {
                             intPkWorkflow = wfentity.intPk,
                             strStartDate = Date.Now(ZonedTimeTools.timezone).ToString(),
                             strStartTime = Time.Now(ZonedTimeTools.timezone).ToString()
                         };
                     context_M.DefaultWorkflowHistory.Add(defwfhisentity);
                     context_M.SaveChanges();*/

                    intStatus_IO = 200;
                    strUserMessage_IO = "Default workflow set to " + wfentity.strName + ".";
                    strDevMessage_IO = "";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        public static void subAddWorkflowDefaultHistory(
            //                                              //Create the history for a given workflow when setted as
            //                                              //      default.

            int intPkWorkflow_I,
            Odyssey2Context context_M
            )
        {
            //                                      //Create register into defaultWorkflowHistory table.
            DefwfhisentityDefaultWorkflowHistoryEntityDB defwfhisentity =
                new DefwfhisentityDefaultWorkflowHistoryEntityDB
                {
                    intPkWorkflow = intPkWorkflow_I,
                    strStartDate = Date.Now(ZonedTimeTools.timezone).ToString(),
                    strStartTime = Time.Now(ZonedTimeTools.timezone).ToString()
                };
            context_M.DefaultWorkflowHistory.Add(defwfhisentity);
            context_M.SaveChanges();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static String strGetWorkflowName(
            //                                              //Make a specific workflow default.

            int intPkWorkflow_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            String strWorkflowName = "";

            //                                              //Initialize connection.
            Odyssey2Context context = new Odyssey2Context();
            //                                              //Find workflow.
            WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                wf.intPk == intPkWorkflow_I && wf.boolDeleted == false);

            intStatus_IO = 401;
            strUserMessage_IO = "";
            strDevMessage_IO = "Wokflow not found to get name.";
            if (
                //                                          //Workflow exists.
                wfentity != null
                )
            {
                strWorkflowName = wfentity.strName;

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "Wokflow found to get name.";
            }

            return strWorkflowName;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subGetProcessInputs(
            //                                              //Get all Ios Input/Output from PIW.

            //                                              //if it get JobId,  this mean that it 
            //                                              //    is in wfJob and return only 
            //                                              //    resources setted in each Ios.
            //                                              //if it dont get,  this mean that it 
            //                                              //    is in wfProduct and return
            //                                              //    all resources, include grpResources.

            int? intnJobId_I,
            String strPrintshopId_I,
            int intPkProcessInWorkflow_I,
            IConfiguration configuration_I,
            int intPkeleetOrEleele_I,
            bool boolIsEleet_I,
            int intPkResource_I,
            out List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjsonIosFromPIW_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            JobjsonJobJson jobjson = null;
            if (
                intnJobId_I != null
                )
            {
                JobJob.boolIsValidJobId((int)intnJobId_I, strPrintshopId_I, configuration_I, out jobjson,
                    ref strUserMessage_IO, ref strDevMessage_IO);
            }

            darrioinfrmpiwjsonIosFromPIW_O = new List<IofrmpiwjsonIOFromPIWJson>();

            //                                              //Find PIW.
            PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(
                piw => piw.intPk == intPkProcessInWorkflow_I);

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "PIW not found";
            if (
                piwentity != null
                )
            {
                //                                          //Find workflow.
                WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                    wf.intPk == piwentity.intPkWorkflow);

                //                                          //Find product.
                ProdtypProductType prodtyp = (ProdtypProductType)EtElementTypeAbstract.etFromDB(
                    wfentity.intnPkProduct);

                if (
                    //                                      //It is a normal workflow.
                    prodtyp != null
                    )
                {
                    //                                      //Get Resources by each eleet-Input.
                    darrioinfrmpiwjsonIosFromPIW_O.AddRange(prodtyp.arrioinfrmjsonFromType(prodtyp, piwentity,
                         jobjson, true));

                    //                                      //Get Resources by each eleele-Input.
                    darrioinfrmpiwjsonIosFromPIW_O.AddRange(prodtyp.arrioinfrmjsonFromTemplate(prodtyp, piwentity,
                         jobjson, true));

                    //                                      //Get Resources by each eleet-Output.
                    darrioinfrmpiwjsonIosFromPIW_O.AddRange(prodtyp.arrioinfrmjsonFromType(prodtyp, piwentity,
                         jobjson, false));

                    //                                      //Get Resources by each eleele-Output.
                    darrioinfrmpiwjsonIosFromPIW_O.AddRange(prodtyp.arrioinfrmjsonFromTemplate(prodtyp, piwentity,
                         jobjson, false));
                }
                else
                {
                    //                                      //It is a base workflow.

                    //                                      //Get Resources by each eleet-Input.
                    darrioinfrmpiwjsonIosFromPIW_O.AddRange(ProdtypProductType.arrioinfrmjsonFromType(piwentity,
                        true));

                    //                                      //Get Resources by each eleele-Input.
                    darrioinfrmpiwjsonIosFromPIW_O.AddRange(ProdtypProductType.arrioinfrmjsonFromTemplate(piwentity,
                        true));

                    //                                      //Get Resources by each eleet-Output.
                    darrioinfrmpiwjsonIosFromPIW_O.AddRange(ProdtypProductType.arrioinfrmjsonFromType(piwentity,
                        false));

                    //                                      //Get Resources by each eleele-Output.
                    darrioinfrmpiwjsonIosFromPIW_O.AddRange(ProdtypProductType.arrioinfrmjsonFromTemplate(piwentity,
                        false));
                }

                //                                          //To easy code.
                int? intnPkElementElementType = boolIsEleet_I ? intPkeleetOrEleele_I : (int?)null;
                int? intnPkElementElement = !boolIsEleet_I ? intPkeleetOrEleele_I : (int?)null;

                //                                          //Remove from list to send back those resources for the 
                //                                          //      same IO that cal will be add.

                //                                          //Get resources to remove.
                List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjsonIosToRemove =
                    darrioinfrmpiwjsonIosFromPIW_O.Where(io => (io.intnPkEleetOrEleele == intnPkElementElementType ||
                    io.intnPkEleetOrEleele == intnPkElementElement) &&
                    io.intnPkResource != intPkResource_I).ToList();

                foreach (IofrmpiwjsonIOFromPIWJson iofrmpiwjson in darrioinfrmpiwjsonIosToRemove)
                {
                    darrioinfrmpiwjsonIosFromPIW_O.Remove(iofrmpiwjson);
                }

                darrioinfrmpiwjsonIosFromPIW_O =
                    darrioinfrmpiwjsonIosFromPIW_O.OrderBy(iofrmpiw => iofrmpiw.strTypeTemplateAndResource).ToList();

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "";
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public IofrmpiwjsonIOFromPIWJson[] arrioinfrmjsonFromType(
            //                                              //Get IosInput resources.
            //                                              //Returns an array of IOs (types).

            ProdtypProductType prodtyp_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            bool boolAreInputs_I
            )
        {
            List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjson = new List<IofrmpiwjsonIOFromPIWJson>();

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s input.
            List<EleetentityElementElementTypeEntityDB> darreleetentityWithoutFilter =
                context.ElementElementType.Where(eleet =>
                eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            //                                              //List that will hold Eleet without not physical resources.
            List<EleetentityElementElementTypeEntityDB> darreleetentity =
                new List<EleetentityElementElementTypeEntityDB>(darreleetentityWithoutFilter);
            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentityWithoutFilter)
            {
                //                                          //Filter by not physical resource.

                //                                          //Find element type.
                EtElementTypeAbstract et = EletemElementType.etFromDB(eleetentity.intPkElementTypeSon);
                if (
                    !RestypResourceType.boolIsPhysical(et.strClassification)
                    )
                {
                    darreleetentity.Remove(eleetentity);
                }
            }

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Each IO.
                intI < darreleetentity.Count
                )
            {
                //                                          //Link.
                String strLink = null;

                //                                          //Get type resource.
                RestypResourceType restypeResourceType = (RestypResourceType)EtElementTypeAbstract.etFromDB(
                    darreleetentity[intI].intPkElementTypeSon);

                bool boolIsComponent = restypeResourceType.strCustomTypeId == ResResource.strComponent ?
                    true : false;

                bool boolIsMedia = restypeResourceType.strCustomTypeId == ResResource.strMedia ?
                    true : false;

                //                                          //List of IOs(+resource) for this IO.
                List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjsonPerEleet = new List<IofrmpiwjsonIOFromPIWJson>();
                bool boolHasIOAGrpResources = false;
                bool? boolnIsFinalProduct = null;

                //                                          //Get the IO.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == darreleetentity[intI].intPk);

                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;
                    boolnIsFinalProduct = ioentity.boolnIsFinalProduct;

                    /*CASE*/
                    if (
                        //                                  //Io has a resource.
                        ioentity.intnPkResource != null
                        )
                    {
                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            ResResource resResource = ResResource.resFromDB((int)ioentity.intnPkResource, false);
                            bool boolIsRoll = resResource.boolMediaRoll();

                            //                              //Add item to the list.
                            ProdtypProductType.subAddToioinfrmpiwjsonForAType(
                                (int)ioentity.intnPkElementElementType, restypeResourceType,
                                (int)ioentity.intnPkResource, boolAreInputs_I, boolIsComponent, boolIsMedia,
                                boolIsRoll, ioentity.boolnSize, ref darrioinfrmpiwjsonPerEleet);
                        }
                    }
                    else if (
                        //                                  //Io has a group resource set.
                        ioentity.intnPkResource == null &&
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            //                              //Get all resources from group.
                            List<GpresentityGroupResourceEntityDB> darrgpresentity = context.GroupResource.Where(
                                gpres => gpres.intId == ioentity.intnGroupResourceId &&
                                gpres.intPkWorkflow == ioentity.intPkWorkflow).ToList();

                            //                              //Add each resource to List.
                            foreach (GpresentityGroupResourceEntityDB gpresentityResource in darrgpresentity)
                            {
                                ResResource resResource = ResResource.resFromDB(gpresentityResource.intPkResource, false);
                                bool boolIsRoll = resResource.boolMediaRoll();

                                //                          //Add item to the list.
                                ProdtypProductType.subAddToioinfrmpiwjsonForAType(
                                    (int)ioentity.intnPkElementElementType, restypeResourceType,
                                    gpresentityResource.intPkResource, boolAreInputs_I, boolIsComponent, boolIsMedia,
                                    boolIsRoll, ioentity.boolnSize, ref darrioinfrmpiwjsonPerEleet);
                            }
                        }

                        boolHasIOAGrpResources = true;
                    }
                    /*END-CASE*/
                }

                if (
                    jobjson_I != null
                    )
                {
                    ProdtypProductType.subUpdateResourceForAJob(prodtyp_I, piwentity_I.intPkWorkflow, null,
                        jobjson_I);

                    int intJobId = jobjson_I.intJobId;

                    //                                      //Get the resource if it exists in the job workflow.
                    IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
                        FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                        ioj.intnPkElementElementType == darreleetentity[intI].intPk &&
                        ioj.intJobId == intJobId);
                    if (
                        iojentity != null
                        )
                    {
                        //                                  //Clean the list.
                        darrioinfrmpiwjsonPerEleet = new List<IofrmpiwjsonIOFromPIWJson>();

                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            ResResource resResource = ResResource.resFromDB((int)iojentity.intPkResource, false);
                            bool boolIsRoll = resResource.boolMediaRoll();

                            //                              //Add item to the list.
                            ProdtypProductType.subAddToioinfrmpiwjsonForAType((int)iojentity.intnPkElementElementType,
                                restypeResourceType, (int)iojentity.intPkResource, boolAreInputs_I, boolIsComponent,
                                boolIsMedia, boolIsRoll, null, ref darrioinfrmpiwjsonPerEleet);
                        }
                    }
                    else
                    {
                        if (
                            //                              //In the IO Product has GrpResource set.
                            boolHasIOAGrpResources
                            )
                        {
                            //                              //Clean the list.
                            darrioinfrmpiwjsonPerEleet = new List<IofrmpiwjsonIOFromPIWJson>();
                        }
                    }
                }

                //                                          //Add IO Input  per eleet..
                darrioinfrmpiwjson.AddRange(darrioinfrmpiwjsonPerEleet);

                intI = intI + 1;
            }

            return darrioinfrmpiwjson.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public IofrmpiwjsonIOFromPIWJson[] arrioinfrmjsonFromTemplate(
            //                                              //Get IosInput resources.

            ProdtypProductType prodtyp_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            JobjsonJobJson jobjson_I,
            bool boolAreInputs_I
            )
        {
            List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjson = new List<IofrmpiwjsonIOFromPIWJson>();

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleele-s input.
            List<EleeleentityElementElementEntityDB> darreleeleentityWithoutFilter = context.ElementElement.Where(
                eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I).ToList();

            //                                              //List that will hold eleeles without physical resources.
            List<EleeleentityElementElementEntityDB> darreleeleentity =
                new List<EleeleentityElementElementEntityDB>(darreleeleentityWithoutFilter);
            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentityWithoutFilter)
            {
                //                                          //Filter resources by not physical.

                //                                          //Find resource.
                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);
                //                                          //Find element type.
                EtElementTypeAbstract et = EletemElementType.etFromDB(eleentity.intPkElementType);
                if (
                    !RestypResourceType.boolIsPhysical(et.strClassification)
                    )
                {
                    darreleeleentity.Remove(eleeleentity);
                }
            }

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Get the inputs every process.
                intI < darreleeleentity.Count
                )
            {
                //                                          //Link.
                String strLink = null;

                //                                          //Get template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == darreleeleentity[intI].intPkElementSon);

                EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                            et.intPk == eleentityTemplate.intPkElementType);

                bool boolIsComponent = etentityType.strCustomTypeId == ResResource.strComponent ?
                    true : false;

                bool boolIsMedia = etentityType.strCustomTypeId == ResResource.strMedia ?
                    true : false;

                //                                          //Init the list.
                List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjsonPerEleele =
                    new List<IofrmpiwjsonIOFromPIWJson>();
                bool boolHasIOAGrpResources = false;
                bool? boolnIsFinalProduct = null;

                //                                          //Get the IO.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == darreleeleentity[intI].intPk);

                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;
                    boolnIsFinalProduct = ioentity.boolnIsFinalProduct;

                    /*CASE*/
                    if (
                        //                                  //Io has a resource set.
                        ioentity.intnPkResource != null
                        )
                    {
                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            ResResource resResource = ResResource.resFromDB((int)ioentity.intnPkResource, false);
                            bool boolIsRoll = resResource.boolMediaRoll();

                            //                              //Add item to the list.
                            ProdtypProductType.subAddToioinfrmpiwjsonForATemplate((int)ioentity.intnPkElementElement,
                                eleentityTemplate, etentityType, (int)ioentity.intnPkResource, boolAreInputs_I,
                                boolIsComponent, boolIsMedia, boolIsRoll, ioentity.boolnSize, ref darrioinfrmpiwjsonPerEleele);
                        }
                    }
                    else if (
                        //                                  //Io has a group resource set.
                        ioentity.intnPkResource == null &&
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            //                              //Get all resources from group.
                            List<GpresentityGroupResourceEntityDB> darrgpresentity = context.GroupResource.Where(gpres =>
                            gpres.intId == ioentity.intnGroupResourceId &&
                            gpres.intPkWorkflow == ioentity.intPkWorkflow).ToList();

                            //                              //Add each resource to List.
                            foreach (GpresentityGroupResourceEntityDB gpresentityResource in darrgpresentity)
                            {
                                ResResource resResource = ResResource.resFromDB(gpresentityResource.intPkResource, false);
                                bool boolIsRoll = resResource.boolMediaRoll();

                                //                          //Add item to the list.
                                ProdtypProductType.subAddToioinfrmpiwjsonForATemplate(
                                    (int)ioentity.intnPkElementElement, eleentityTemplate, etentityType,
                                    gpresentityResource.intPkResource, boolAreInputs_I, boolIsComponent, boolIsMedia,
                                    boolIsRoll, ioentity.boolnSize, ref darrioinfrmpiwjsonPerEleele);
                            }
                        }
                        boolHasIOAGrpResources = true;
                    }
                    /*END-CASE*/
                }

                if (
                    jobjson_I != null
                    )
                {
                    ProdtypProductType.subUpdateResourceForAJob(prodtyp_I, piwentity_I.intPkWorkflow, null,
                        jobjson_I);

                    int intJobId = jobjson_I.intJobId;

                    //                                      //Get the resource if it exists in the job workflow.
                    IojentityInputsAndOutputsForAJobEntityDB iojentity = context.InputsAndOutputsForAJob.
                        FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                        ioj.intnPkElementElement == darreleeleentity[intI].intPk &&
                        ioj.intJobId == intJobId);
                    if (
                        iojentity != null
                        )
                    {
                        //                                  //Clean the list.
                        darrioinfrmpiwjsonPerEleele = new List<IofrmpiwjsonIOFromPIWJson>();

                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            ResResource resResource = ResResource.resFromDB((int)iojentity.intPkResource, false);
                            bool boolIsRoll = resResource.boolMediaRoll();

                            //                              //Add item to the list.
                            ProdtypProductType.subAddToioinfrmpiwjsonForATemplate((int)iojentity.intnPkElementElement,
                            eleentityTemplate, etentityType, (int)iojentity.intPkResource, boolAreInputs_I,
                            boolIsComponent, boolIsMedia, boolIsRoll, null, ref darrioinfrmpiwjsonPerEleele);
                        }
                    }
                    else
                    {
                        if (
                            //                              //In the IO Product has GrpResource set.
                            boolHasIOAGrpResources
                            )
                        {
                            //                              //Clean the list.
                            darrioinfrmpiwjsonPerEleele = new List<IofrmpiwjsonIOFromPIWJson>();
                        }
                    }
                }

                //                                          //Add IO Input  per eleet..
                darrioinfrmpiwjson.AddRange(darrioinfrmpiwjsonPerEleele);

                intI = intI + 1;
            }

            return darrioinfrmpiwjson.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static IofrmpiwjsonIOFromPIWJson[] arrioinfrmjsonFromType(
            //                                              //Get IosInput resources.
            //                                              //Returns an array of IOs (types).

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            bool boolAreInputs_I
            )
        {
            List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjson = new List<IofrmpiwjsonIOFromPIWJson>();

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s input.
            List<EleetentityElementElementTypeEntityDB> darreleetentityWithoutFilter =
                context.ElementElementType.Where(eleet =>
                eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();

            //                                              //List that will hold Eleet without not physical resources.
            List<EleetentityElementElementTypeEntityDB> darreleetentity =
                new List<EleetentityElementElementTypeEntityDB>(darreleetentityWithoutFilter);
            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentityWithoutFilter)
            {
                //                                          //Filter by not physical resource.

                //                                          //Find element type.
                EtElementTypeAbstract et = EletemElementType.etFromDB(eleetentity.intPkElementTypeSon);
                if (
                    !RestypResourceType.boolIsPhysical(et.strClassification)
                    )
                {
                    darreleetentity.Remove(eleetentity);
                }
            }

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Each IO.
                intI < darreleetentity.Count
                )
            {
                //                                          //Link.
                String strLink = null;

                //                                          //Get type resource.
                RestypResourceType restypeResourceType = (RestypResourceType)EtElementTypeAbstract.etFromDB(
                    darreleetentity[intI].intPkElementTypeSon);

                bool boolIsComponent = restypeResourceType.strCustomTypeId == ResResource.strComponent ?
                    true : false;

                bool boolIsMedia = restypeResourceType.strCustomTypeId == ResResource.strMedia ?
                   true : false;

                //                                          //List of IOs(+resource) for this IO.
                List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjsonPerEleet = new List<IofrmpiwjsonIOFromPIWJson>();
                bool? boolnIsFinalProduct = null;

                //                                          //Get the IO.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == darreleetentity[intI].intPk);

                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;
                    boolnIsFinalProduct = ioentity.boolnIsFinalProduct;

                    /*CASE*/
                    if (
                        //                                  //Io has a resource.
                        ioentity.intnPkResource != null
                        )
                    {
                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            //                              //Get resResource.
                            ResResource resResource = ResResource.resFromDB((int)ioentity.intnPkResource, false);
                            bool boolIsRoll = resResource.boolMediaRoll();

                            //                              //Add item to the list.
                            ProdtypProductType.subAddToioinfrmpiwjsonForAType(
                                (int)ioentity.intnPkElementElementType, restypeResourceType,
                                (int)ioentity.intnPkResource, boolAreInputs_I, boolIsComponent, boolIsMedia,
                                boolIsRoll, ioentity.boolnSize, ref darrioinfrmpiwjsonPerEleet);
                        }
                    }
                    else if (
                        //                                  //Io has a group resource set.
                        ioentity.intnPkResource == null &&
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            //                              //Get all resources from group.
                            List<GpresentityGroupResourceEntityDB> darrgpresentity = context.GroupResource.Where(
                                gpres => gpres.intId == ioentity.intnGroupResourceId &&
                                gpres.intPkWorkflow == ioentity.intPkWorkflow).ToList();

                            //                              //Add each resource to List.
                            foreach (GpresentityGroupResourceEntityDB gpresentityResource in darrgpresentity)
                            {
                                //                              //Get resResource.
                                ResResource resResource = ResResource.resFromDB(gpresentityResource.intPkResource, false);
                                bool boolIsRoll = resResource.boolMediaRoll();

                                //                          //Add item to the list.
                                ProdtypProductType.subAddToioinfrmpiwjsonForAType(
                                    (int)ioentity.intnPkElementElementType, restypeResourceType,
                                    gpresentityResource.intPkResource, boolAreInputs_I, boolIsComponent, boolIsMedia,
                                    boolIsRoll, ioentity.boolnSize, ref darrioinfrmpiwjsonPerEleet);
                            }
                        }
                    }
                    /*END-CASE*/
                }

                //                                          //Add IO Input  per eleet..
                darrioinfrmpiwjson.AddRange(darrioinfrmpiwjsonPerEleet);

                intI = intI + 1;
            }

            return darrioinfrmpiwjson.ToArray();
        }

        //--------------------------------------------------------------------------------------------------------------
        public static IofrmpiwjsonIOFromPIWJson[] arrioinfrmjsonFromTemplate(
            //                                              //Get IosInput resources.

            PiwentityProcessInWorkflowEntityDB piwentity_I,
            bool boolAreInputs_I
            )
        {
            List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjson = new List<IofrmpiwjsonIOFromPIWJson>();

            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleele-s input.
            List<EleeleentityElementElementEntityDB> darreleeleentityWithoutFilter = context.ElementElement.Where(
                eleele => eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I).ToList();

            //                                              //List that will hold eleeles without physical resources.
            List<EleeleentityElementElementEntityDB> darreleeleentity =
                new List<EleeleentityElementElementEntityDB>(darreleeleentityWithoutFilter);
            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentityWithoutFilter)
            {
                //                                          //Filter resources by not physical.

                //                                          //Find resource.
                EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);
                //                                          //Find element type.
                EtElementTypeAbstract et = EletemElementType.etFromDB(eleentity.intPkElementType);
                if (
                    !RestypResourceType.boolIsPhysical(et.strClassification)
                    )
                {
                    darreleeleentity.Remove(eleeleentity);
                }
            }

            int intI = 0;
            /*REPEAT-WHILE*/
            while (
                //                                          //Get the inputs every process.
                intI < darreleeleentity.Count
                )
            {
                //                                          //Link.
                String strLink = null;

                //                                          //Get template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == darreleeleentity[intI].intPkElementSon);

                EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                            et.intPk == eleentityTemplate.intPkElementType);

                bool boolIsComponent = etentityType.strCustomTypeId == ResResource.strComponent ?
                    true : false;

                bool boolIsMedia = etentityType.strCustomTypeId == ResResource.strMedia ?
                   true : false;

                //                                          //Init the list.
                List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjsonPerEleele =
                    new List<IofrmpiwjsonIOFromPIWJson>();
                bool? boolnIsFinalProduct = null;

                //                                          //Get the IO.
                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == darreleeleentity[intI].intPk);

                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;
                    boolnIsFinalProduct = ioentity.boolnIsFinalProduct;

                    /*CASE*/
                    if (
                        //                                  //Io has a resource set.
                        ioentity.intnPkResource != null
                        )
                    {
                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            //                              //Get resResource.
                            ResResource resResource = ResResource.resFromDB((int)ioentity.intnPkResource, false);
                            bool boolIsRoll = resResource.boolMediaRoll();

                            //                              //Add item to the list.
                            ProdtypProductType.subAddToioinfrmpiwjsonForATemplate((int)ioentity.intnPkElementElement,
                                eleentityTemplate, etentityType, (int)ioentity.intnPkResource, boolAreInputs_I,
                                boolIsComponent, boolIsMedia, boolIsRoll, ioentity.boolnSize, ref darrioinfrmpiwjsonPerEleele);
                        }
                    }
                    else if (
                        //                                  //Io has a group resource set.
                        ioentity.intnPkResource == null &&
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        if (
                            (
                            //                              //IO Output and has a resource ProductFinal.
                            !boolAreInputs_I &&
                            boolnIsFinalProduct == true
                            ) ||
                            (
                            //                              //IO Output and IO has Links.
                            !boolAreInputs_I &&
                            strLink != null
                            )
                            ||
                            //                              //IO Input
                            boolAreInputs_I
                        )
                        {
                            //                              //Get all resources from group.
                            List<GpresentityGroupResourceEntityDB> darrgpresentity = context.GroupResource.Where(gpres =>
                            gpres.intId == ioentity.intnGroupResourceId &&
                            gpres.intPkWorkflow == ioentity.intPkWorkflow).ToList();

                            //                              //Add each resource to List.
                            foreach (GpresentityGroupResourceEntityDB gpresentityResource in darrgpresentity)
                            {
                                //                              //Get resResource.
                                ResResource resResource = ResResource.resFromDB(gpresentityResource.intPkResource, false);
                                bool boolIsRoll = resResource.boolMediaRoll();

                                //                          //Add item to the list.
                                ProdtypProductType.subAddToioinfrmpiwjsonForATemplate(
                                    (int)ioentity.intnPkElementElement, eleentityTemplate, etentityType,
                                    gpresentityResource.intPkResource, boolAreInputs_I, boolIsComponent, boolIsMedia,
                                    boolIsRoll, ioentity.boolnSize, ref darrioinfrmpiwjsonPerEleele);
                            }
                        }
                    }
                    /*END-CASE*/
                }

                //                                          //Add IO Input  per eleet..
                darrioinfrmpiwjson.AddRange(darrioinfrmpiwjsonPerEleele);

                intI = intI + 1;
            }

            return darrioinfrmpiwjson.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        private static void subAddToioinfrmpiwjsonForAType(
            //                                              //Add a item to list darrioinfrmpiwjsonPerEleet.

            int intPkElementElementType_I,
            RestypResourceType restypeResourceType_I,
            int intPkResource_I,
            bool boolAreInputs_I,
            bool boolIsComponent_I,
            bool boolIsMedia_I,
            bool boolIsRoll_I,
            bool? boolnSize_I,
            ref List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjsonPerEleet_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get Resource entity.
            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == intPkResource_I);

            //String strTypeTemplateAndResource = "(" + restypeResourceType_I.strXJDFTypeId + ") " +
            //  eleentity.strElementName;
            String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);
            String strTypeTemplateAndResource = "(" + restypeResourceType_I.strXJDFTypeId + ") " +
              strResourceName;

            String strUnit = ProdtypProductType.strUnitFromEleentityResource(eleentity);

            bool boolSize = boolnSize_I != null ? (bool)boolnSize_I : false;

            //                                              //Get AreaUnit
            String strAreaUnit = ProdtypProductType.strGetAreaUnit(eleentity.intPk, boolIsComponent_I);

            //                                              //IO input for a PIW.
            IofrmpiwjsonIOFromPIWJson iofrmpiwjson = new IofrmpiwjsonIOFromPIWJson(
                intPkElementElementType_I, true, eleentity.intPk, strTypeTemplateAndResource,
                strUnit, boolAreInputs_I, boolIsComponent_I, boolIsMedia_I, boolIsRoll_I, boolSize, strAreaUnit);

            darrioinfrmpiwjsonPerEleet_M.Add(iofrmpiwjson);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        private static void subAddToioinfrmpiwjsonForATemplate(
            //                                              //Add a item to list darrioinfrmpiwjsonPerEleet.

            int intPkElementElement_I,
            EleentityElementEntityDB eleentityTemplate_I,
            EtentityElementTypeEntityDB etentityType_I,
            int intPkResource_I,
            bool boolAreInputs_I,
            bool boolIsComponent_I,
            bool boolIsMedia_I,
            bool boolIsRoll_I,
            bool? boolnSize_I,
            ref List<IofrmpiwjsonIOFromPIWJson> darrioinfrmpiwjsonPerEleet_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get Resource entity.
            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == intPkResource_I);

            //String strTypeTemplateAndResource = "(" + etentityType_I.strCustomTypeId + ": " +
            //  eleentityTemplate_I.strElementName + ") " + eleentity.strElementName;
            String strResourceName = ResResource.strGetMediaResourceName(eleentity.intPk);
            String strTypeTemplateAndResource = "(" + etentityType_I.strCustomTypeId + ": " +
              eleentityTemplate_I.strElementName + ") " + strResourceName;

            String strUnit = ProdtypProductType.strUnitFromEleentityResource(eleentity);

            bool boolSize = boolnSize_I != null ? (bool)boolnSize_I : false;

            //                                              //Get AreaUnit
            String strAreaUnit = ProdtypProductType.strGetAreaUnit(eleentity.intPk, boolIsComponent_I);

            //                                              //IO input for a PIW.
            IofrmpiwjsonIOFromPIWJson iofrmpiwjson = new IofrmpiwjsonIOFromPIWJson(
                intPkElementElement_I, false, eleentity.intPk, strTypeTemplateAndResource,
                strUnit, boolAreInputs_I, boolIsComponent_I, boolIsMedia_I, boolIsRoll_I, boolSize, strAreaUnit);

            darrioinfrmpiwjsonPerEleet_M.Add(iofrmpiwjson);
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static String strGetAreaUnit(
            //                                              //Get the areaUnit for media and component resurces type.

            int intPkResource_I,
            bool boolIsComponent_I
            )
        {
            String strAreaUnit = null;
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            if (
                boolIsComponent_I
                )
            {
                //                                          //Obtain attributes for this component resource.
                List<ResattrjsonResourceAttributesJson> darrcompattrjson =
                                                                (from attrEntity in context.Attribute
                                                                 join valentity in context.Value
                                                                 on attrEntity.intPk equals valentity.intPkAttribute
                                                                 where valentity.intPkElement == intPkResource_I
                                                                 select new ResattrjsonResourceAttributesJson(
                                                                 attrEntity.intPk,
                                                                 attrEntity.strXJDFName,
                                                                 valentity.strValue)).ToList();

                if (
                    darrcompattrjson.Exists(attr => attr.strAttrName == "WidthUnit")
                    )
                {
                    String strWidthUnit = darrcompattrjson.FirstOrDefault(attr =>
                        attr.strAttrName == "WidthUnit").strAttrValue;
                    strAreaUnit = strWidthUnit + "²";
                }
            }
            else
            {
                //                                          //It´s media.
                //                                          //Obtain attributes for this media resource.
                List<ResattrjsonResourceAttributesJson> darrmedattrjson =
                                                                (from attrEntity in context.Attribute
                                                                 join valentity in context.Value
                                                                 on attrEntity.intPk equals valentity.intPkAttribute
                                                                 where valentity.intPkElement == intPkResource_I
                                                                 select new ResattrjsonResourceAttributesJson(
                                                                 attrEntity.intPk,
                                                                 attrEntity.strXJDFName,
                                                                 valentity.strValue)).ToList();
                /*CASE*/
                if (
                    //                                      //Media Resource has Width, Length and DimensionsUnit.
                    darrmedattrjson.Exists(attr => attr.strAttrName == "Width") &&
                    darrmedattrjson.Exists(attr => attr.strAttrName == "Length") &&
                    darrmedattrjson.Exists(attr => attr.strAttrName == "DimensionsUnit")
                    )
                {
                    String strUnit = darrmedattrjson.FirstOrDefault(attr =>
                        attr.strAttrName == "DimensionsUnit").strAttrValue;

                    //                                      //Set AreUnit
                    strAreaUnit = strUnit + "²";
                }
                else if (
                   //                                      //Media resource has Width, WidthUnit, Length and
                   //                                      //      LengthUnit.
                   darrmedattrjson.Exists(attr => attr.strAttrName == "Width") &&
                   darrmedattrjson.Exists(attr => attr.strAttrName == "WidthUnit") &&
                   darrmedattrjson.Exists(attr => attr.strAttrName == "Length") &&
                   darrmedattrjson.Exists(attr => attr.strAttrName == "LengthUnit")
                   )
                {
                    String strWidthUnit = darrmedattrjson.FirstOrDefault(attr =>
                        attr.strAttrName == "WidthUnit").strAttrValue;

                    //                                      //Set AreUnit
                    strAreaUnit = strWidthUnit + "²";
                }
                /*END-CASE*/
            }

            return strAreaUnit;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subWorkflowHasEstimates(
            //                                              //This method searches if there are estimates with this wf 
            //                                              //      in Estimate table.

            int intPkWorkflow_I,
            int? intnJobId_I,
            out bool boolIsWorkflowModifiable_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Trying to get one estimate for that wf.
            List<EstentityEstimateEntityDB> darrestentity;

            if (
                intnJobId_I == null
                )
            {
                darrestentity = context.Estimate.Where(est => est.intPkWorkflow == intPkWorkflow_I).ToList();
            }
            else
            {
                darrestentity = context.Estimate.Where(est => est.intPkWorkflow == intPkWorkflow_I &&
                    est.intJobId == (int)intnJobId_I).ToList();
            }

            boolIsWorkflowModifiable_O = darrestentity.Count() == 0;

            //                                              //Construction of the message.
            strUserMessage_IO = boolIsWorkflowModifiable_O ? "" : "Some estimates for jobs: ";

            for (int intI = 0; intI < darrestentity.Count; intI = intI + 1)
            {
                //                                  //Get strJobNumber.
                JobjsonentityJobJsonEntityDB jobjsonentity = context.JobJson.FirstOrDefault(job =>
                    job.intJobID == darrestentity[intI].intJobId);
                String strJobNumber = jobjsonentity.intnOrderNumber.ToString() + " " + "-" + " " +
                    jobjsonentity.intnJobNumber.ToString();

                if (
                    !strUserMessage_IO.Contains(strJobNumber + "")
                    )
                {
                    strUserMessage_IO = strUserMessage_IO + strJobNumber + ", ";
                }
            }

            strUserMessage_IO = strUserMessage_IO.TrimEnd(' ');
            strUserMessage_IO = strUserMessage_IO.TrimEnd(',');

            if (
                //                                          //There is more than one job.
                strUserMessage_IO.LastIndexOf(',') >= 0
                )
            {
                strUserMessage_IO = strUserMessage_IO.Substring(0, strUserMessage_IO.LastIndexOf(',')) + " and" +
                    strUserMessage_IO.Substring(strUserMessage_IO.LastIndexOf(',') + 1);
            }

            strUserMessage_IO = (strUserMessage_IO != "") ? (strUserMessage_IO + " will be deleted.") : "";

            intStatus_IO = 200;
            strDevMessage_IO = "";
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subGetWorkflow(
            //                                              //Find processes, links and nodes that belong to a specific
            //                                              //      workflow.

            int intPkWorkflow_I,
            PsPrintShop ps_I,
            out Wfjson3WorkflowJson3 wfjson3_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            wfjson3_O = null;

            //                                              //List that will hold links and nodes.
            List<LkornodjsonLinkOrNodeJson> darrlkornodjson = new List<LkornodjsonLinkOrNodeJson>();

            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Find workflow.
            WfentityWorkflowEntityDB wfentityCurrent = context.Workflow.FirstOrDefault(wf =>
                wf.intPk == intPkWorkflow_I && wf.boolDeleted == false &&
                (wf.intPkPrintshop == ps_I.intPk || wf.boolnGeneric == true));

            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Workflow not exist";
            if (
                wfentityCurrent != null
                )
            {
                WfentityWorkflowEntityDB wfentityAvailable;

                //                                          //Get workflow of the line story workflows.
                ProdtypProductType.subGetWorkflowAvailable(wfentityCurrent, out wfentityAvailable, ref intStatus_IO,
                    ref strUserMessage_IO, ref strDevMessage_IO);

                if (
                    intStatus_IO == 200
                    )
                {
                    //                                      //Find process without input links and with ouput links
                    //                                      //      (starting process).
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityStartingProcesses =
                        ProdtypProductType.darrpiwentityStartingProcessesInWorkflow(wfentityAvailable.intPk, context);

                    //                                      //Find nodes that do not have input links.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityStartingNodes =
                        ProdtypProductType.darrioentityStartingNodesInWorkflow(wfentityAvailable.intPk, context);

                    //                                      //Create link json.
                    darrlkornodjson = ProdtypProductType.darrlkornodjsonFindNodesAndLinks(
                        darrpiwentityStartingProcesses, darrioentityStartingNodes, context);

                    //                                      //List of piw that are not connected to anything.
                    //                                      //These ones will be the last ones to return in the json.
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwWithoutLinks =
                        ProdtypProductType.darrpiwentityProcessesWithoutLink(wfentityAvailable.intPk, context);

                    foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwWithoutLinks)
                    {
                        //                                  //To easy code.
                        String strProcessNameFrom = ProProcess.proFromDB(piwentity.intPkProcess).strName;
                        strProcessNameFrom = piwentity.intnId != null ?
                            strProcessNameFrom + " (" + piwentity.intnId + ")" : strProcessNameFrom;
                        //                                  //Node from.
                        Nodejson2NodeJson2 nodejson2NodeFrom = new Nodejson2NodeJson2(piwentity.intPk,
                            null, strProcessNameFrom);

                        //                                  //Node to.
                        Nodejson2NodeJson2[] arrnodeTo_I = new Nodejson2NodeJson2[] { };

                        //                                  //Object to return.
                        LkornodjsonLinkOrNodeJson lkornodjson =
                            new LkornodjsonLinkOrNodeJson(nodejson2NodeFrom, arrnodeTo_I);

                        darrlkornodjson.Add(lkornodjson);
                    }

                    //                                      //Data to return.

                    //                                      //Workflow name.
                    String strWorkflowName = wfentityAvailable.strName;

                    //                                      //Order links.
                    LkornodjsonLinkOrNodeJson[] arrlkornodjson = ProdtypProductType.arrlkornodjsonGetOrdered(
                        darrlkornodjson);

                    //                                      //Workflow ready.
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityWithFinalProduct;
                    bool boolWorkflowIsReady;
                    bool? boolnNotUsed;
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesNotReady;
                    ProdtypProductType.subfunWorkflowIsReady(wfentityAvailable.intPk, out darrpiwentityWithFinalProduct,
                        out boolWorkflowIsReady, out boolnNotUsed, out darrpiwentityProcessesNotReady);

                    bool boolHasFinalProduct_I = darrpiwentityWithFinalProduct.Count > 0 ? true : false;

                    bool boolGeneric = (wfentityAvailable.boolnGeneric != null) ?
                        (bool)wfentityAvailable.boolnGeneric : false;

                    bool boolHasSize = ProdtypProductType.boolProductHasSize(wfentityAvailable.intnPkProduct, context);

                    //                                      //Json.
                    wfjson3_O = new Wfjson3WorkflowJson3(wfentityAvailable.intPk, boolWorkflowIsReady, strWorkflowName,
                        boolHasFinalProduct_I, boolHasSize, boolGeneric, arrlkornodjson);

                    intStatus_IO = 200;
                    strUserMessage_IO = "";
                    strDevMessage_IO = "";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - 
        private static void subGetWorkflowAvailable(
            //                                              //Assign the workflow available of all line storys 
            //                                              //    of a workflowCurrent.

            WfentityWorkflowEntityDB wfentityCurrent,
            out WfentityWorkflowEntityDB wfentityAvailable_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            wfentityAvailable_O = wfentityCurrent;

            intStatus_IO = 200;
            strUserMessage_IO = "";
            strDevMessage_IO = "";

            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            if (
                //                                          //Workflow is deleted.
                wfentityCurrent.boolDeleted == true
                )
            {
                //                                          //Get workflows of the line of the storys.
                List<WfentityWorkflowEntityDB> darrwfentityLineStory = context.Workflow.Where(wf =>
                    wf.intnPkProduct == wfentityCurrent.intnPkProduct && wf.intPkPrintshop == wfentityCurrent.intPkPrintshop &&
                    wf.intWorkflowId == wfentityCurrent.intWorkflowId).ToList();

                //                                          //Order the line story workflow.
                darrwfentityLineStory.Sort();

                //                                          //Get the last workflow available.
                wfentityAvailable_O = darrwfentityLineStory.Last();

                if (
                    //                                      //last workflow of the line story workflows was deleted.
                    wfentityAvailable_O.boolDeleted
                    )
                {
                    wfentityAvailable_O = null;
                    intStatus_IO = 402;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "The last workflow of the line story workflows was deleted";
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - 
        public static List<PiwentityProcessInWorkflowEntityDB> darrpiwentityStartingProcessesInWorkflow(
            //                                              //Find which processes could go in the beggining of the
            //                                              //      wf.
            //                                              //An starting process has no links in its inputs but has
            //                                              //      at least one in its outputs.
            //                                              //Return sorted processes based on their 
            //                                              //      processinworkflowids.

            int intPkWorkflow_I,
            Odyssey2Context context_I
            )
        {
            //                                              //List containing Starting processes.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityStartingProcesses =
                new List<PiwentityProcessInWorkflowEntityDB>();

            //                                              //Find processes.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = context_I.ProcessInWorkflow.Where(
                piw => piw.intPkWorkflow == intPkWorkflow_I).ToList();

            //                                              //Find process's inputs eleet with links.
            List<IoentityInputsAndOutputsEntityDB> darrioentityInputsEleetWithLink = (
                from ioentity in context_I.InputsAndOutputs
                join eleetentity in context_I.ElementElementType
                on ioentity.intnPkElementElementType equals eleetentity.intPk
                where ioentity.intPkWorkflow == intPkWorkflow_I &&
                //                                          //It is an input with link.
                eleetentity.boolUsage && ioentity.strLink != null
                select ioentity).ToList();

            //                                              //Find process's inputs eleele with links.
            List<IoentityInputsAndOutputsEntityDB> darrioentityInputsEleeleWithLink = (
                from ioentity in context_I.InputsAndOutputs
                join eleeleentity in context_I.ElementElement
                on ioentity.intnPkElementElement equals eleeleentity.intPk
                where ioentity.intPkWorkflow == intPkWorkflow_I &&
                //                                  //It is an input with link.
                eleeleentity.boolUsage && ioentity.strLink != null
                select ioentity).ToList();

            //                                              //Find process's outputs eleet with links.
            List<IoentityInputsAndOutputsEntityDB> darrioentityOutputsEleetWithLink = (
                from ioentity in context_I.InputsAndOutputs
                join eleetentity in context_I.ElementElementType
                on ioentity.intnPkElementElementType equals eleetentity.intPk
                where ioentity.intPkWorkflow == intPkWorkflow_I &&
                //                                  //It is an input with link.
                !eleetentity.boolUsage && ioentity.strLink != null
                select ioentity).ToList();

            //                                              //Find process's outputs eleele with links.
            List<IoentityInputsAndOutputsEntityDB> darrioentityOutputsEleeleWithLink = (
                from ioentity in context_I.InputsAndOutputs
                join eleeleentity in context_I.ElementElement
                on ioentity.intnPkElementElement equals eleeleentity.intPk
                where ioentity.intPkWorkflow == intPkWorkflow_I &&
                //                                          //It is an input with link.
                !eleeleentity.boolUsage && ioentity.strLink != null
                select ioentity).ToList();

            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity)
            {
                //                                      //Find process's inputs eleet with links.
                List<IoentityInputsAndOutputsEntityDB> darrioentityInputsEleetWithLink1 =
                    darrioentityInputsEleetWithLink.Where(ioentity1 =>
                    ioentity1.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                //                                      //Find process's inputs eleele with links.
                List<IoentityInputsAndOutputsEntityDB> darrioentityInputsEleeleWithLink1 =
                    darrioentityInputsEleeleWithLink.Where(ioentity1 =>
                    ioentity1.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                //                                      //Find process's outputs eleet with links.
                List<IoentityInputsAndOutputsEntityDB> darrioentityOutputsEleetWithLink1 =
                    darrioentityOutputsEleetWithLink.Where(ioentity1 =>
                    ioentity1.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                //                                      //Find process's outputs eleele with links.
                List<IoentityInputsAndOutputsEntityDB> darrioentityOutputsEleeleWithLink1 =
                    darrioentityOutputsEleeleWithLink.Where(ioentity1 =>
                    ioentity1.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                if (
                    darrioentityInputsEleetWithLink1.Count == 0 &&
                    darrioentityInputsEleeleWithLink1.Count == 0 &&
                    (darrioentityOutputsEleetWithLink1.Count > 0 ||
                    darrioentityOutputsEleeleWithLink1.Count > 0)
                    )
                {
                    darrpiwentityStartingProcesses.Add(piwentity);
                }
            }

            darrpiwentityStartingProcesses.Sort();

            return darrpiwentityStartingProcesses;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - 
        public static List<IoentityInputsAndOutputsEntityDB> darrioentityStartingNodesInWorkflow(
            //                                              //Find which nodes have no input links.
            //                                              //Returns a sorted array using PkNode.

            int intPkWorkflow_I,
            Odyssey2Context context_I
            )
        {
            //                                              //List containing Starting nodes.
            List<IoentityInputsAndOutputsEntityDB> darrioentityStartingNodes =
                new List<IoentityInputsAndOutputsEntityDB>();

            //                                              //Nodes in the workflow.
            List<IoentityInputsAndOutputsEntityDB> darrioentityNodes = context_I.InputsAndOutputs.Where(
                io => io.intPkWorkflow == intPkWorkflow_I &&
                io.intnProcessInWorkflowId == null &&
                io.intnPkElementElementType == null &&
                io.intnPkElementElement == null
                ).ToList();

            //                                              //Find nodes's outputs eleet.
            List<IoentityInputsAndOutputsEntityDB> darrioentityOutputsEleet = (
                from ioentity in context_I.InputsAndOutputs
                join eleetentity in context_I.ElementElementType
                on ioentity.intnPkElementElementType equals eleetentity.intPk
                where ioentity.intPkWorkflow == intPkWorkflow_I &&
                //                                          //It is an input with link.
                !eleetentity.boolUsage
                select ioentity
                ).ToList();

            //                                              //Find nodes's outputs eleele.
            List<IoentityInputsAndOutputsEntityDB> darrioentityOutputsEleele = (
                from ioentity in context_I.InputsAndOutputs
                join eleeleentity in context_I.ElementElement
                on ioentity.intnPkElementElement equals eleeleentity.intPk
                where ioentity.intPkWorkflow == intPkWorkflow_I &&
                //                                          //It is an input with link.
                !eleeleentity.boolUsage
                select ioentity).ToList();

            foreach (IoentityInputsAndOutputsEntityDB ioentityNode in darrioentityNodes)
            {
                //                                          //Find nodes's outputs eleet.
                List<IoentityInputsAndOutputsEntityDB> darrioentityOutputsEleet1 = darrioentityOutputsEleet.Where(
                    ioentityNode1 => ioentityNode1.strLink == ioentityNode.strLink &&
                    ioentityNode1.intPk != ioentityNode.intPk).ToList();

                //                                          //Find nodes's outputs eleele.
                List<IoentityInputsAndOutputsEntityDB> darrioentityOutputsEleele1 = darrioentityOutputsEleele.Where(
                    ioentityNode1 => ioentityNode1.strLink == ioentityNode.strLink &&
                    ioentityNode1.intPk != ioentityNode.intPk).ToList();

                //                                          //Find if node has a link (input) from a node.
                LinknodLinkNodeEntityDB linknodentity = context_I.LinkNode.FirstOrDefault(node =>
                    node.intPkNodeI == ioentityNode.intPk);

                if (
                    darrioentityOutputsEleet1.Count == 0 &&
                    darrioentityOutputsEleele1.Count == 0 &&
                    linknodentity == null
                    )
                {
                    darrioentityStartingNodes.Add(ioentityNode);
                }
            }

            darrioentityStartingNodes.Sort();

            return darrioentityStartingNodes;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static List<LkornodjsonLinkOrNodeJson> darrlkornodjsonFindNodesAndLinks(
            //                                              //Find all the processes connections starting by processes
            //                                              //      or nodes.

            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityStartingProcesses_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityStartingNodes_I,
            Odyssey2Context context_I
            )
        {
            List<LkornodjsonLinkOrNodeJson> darrlkornodjsonLinkOrNodeJson = new List<LkornodjsonLinkOrNodeJson>();

            //                                              //List containing Pknodes that were already walked.
            List<int> darrintPkNodesAlreadyWalked = new List<int>();

            //                                              //List containing PkPiw that were already walked.
            List<int> darrintPkPIWAlreadyWalked = new List<int>();

            foreach (PiwentityProcessInWorkflowEntityDB piwentityStartingProcess in darrpiwentityStartingProcesses_I)
            {
                darrlkornodjsonLinkOrNodeJson = darrlkornodjsonFindProcessesNodesRecursive(
                    darrlkornodjsonLinkOrNodeJson, piwentityStartingProcess, null, null, darrintPkNodesAlreadyWalked,
                    darrintPkPIWAlreadyWalked, context_I);
            }

            foreach (IoentityInputsAndOutputsEntityDB ioentityStartingNode in darrioentityStartingNodes_I)
            {
                darrlkornodjsonLinkOrNodeJson = darrlkornodjsonFindProcessesNodesRecursive(
                    darrlkornodjsonLinkOrNodeJson, null, ioentityStartingNode, false, darrintPkNodesAlreadyWalked,
                    darrintPkPIWAlreadyWalked, context_I);
            }

            return darrlkornodjsonLinkOrNodeJson;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static List<LkornodjsonLinkOrNodeJson> darrlkornodjsonFindProcessesNodesRecursive(
            //                                              //Find processes' Ios output that have a link and build a 
            //                                              //      json containing information about the processes or 
            //                                              //      nodes connected.

            List<LkornodjsonLinkOrNodeJson> darrlkornodjsonLinkOrNodeJson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            bool? boolnNodeIsConnectedFromInput_I,
            List<int> darrintPkNodesAlreadyWalked_M,
            List<int> darrintPkPIWAlreadyWalked_M,
            Odyssey2Context context_I
            )
        {
            //                                              //List containing nodes to.
            List<Nodejson2NodeJson2> darrnodejson2NodeTo = new List<Nodejson2NodeJson2>();

            if (
                //                                          //It is a process.
                piwentity_I != null &&
                ioentityNode_I == null &&
                darrintPkPIWAlreadyWalked_M.FirstOrDefault(i => i == piwentity_I.intPk) == 0
                )
            {
                //                                          //To easy code.
                String strProcessNameFrom = ProProcess.proFromDB(piwentity_I.intPkProcess).strName;
                strProcessNameFrom = piwentity_I.intnId != null ?
                    strProcessNameFrom + " (" + piwentity_I.intnId + ")" : strProcessNameFrom;

                //                                          //Node from.
                Nodejson2NodeJson2 nodejson2NodeFrom = new Nodejson2NodeJson2(piwentity_I.intPk,
                    null, strProcessNameFrom);

                //                                          //Find process's ios with link.
                List<IoentityInputsAndOutputsEntityDB> darrioentityOutputWithLink = (
                    from ioentity in context_I.InputsAndOutputs
                    join eleetentity in context_I.ElementElementType
                    on ioentity.intnPkElementElementType equals eleetentity.intPk
                    where ioentity.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    ioentity.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    ioentity.strLink != null && !eleetentity.boolUsage
                    select ioentity).ToList();

                darrioentityOutputWithLink.AddRange((
                    from ioentity in context_I.InputsAndOutputs
                    join eleeleentity in context_I.ElementElement
                    on ioentity.intnPkElementElement equals eleeleentity.intPk
                    where ioentity.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    ioentity.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    ioentity.strLink != null && !eleeleentity.boolUsage
                    select ioentity).ToList());

                foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityOutputWithLink)
                {

                    //                                      //Find otherside of the link.
                    List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide = (
                        from io in context_I.InputsAndOutputs
                        where io.intPkWorkflow == ioentity.intPkWorkflow &&
                        io.strLink == ioentity.strLink &&
                        io.intPk != ioentity.intPk
                        select io).ToList();

                    int intI = 0;
                    bool boolThereIsANode = false;
                    IoentityInputsAndOutputsEntityDB ioentityNodeFound = null;
                    /*WHILE-DO*/
                    while (
                        intI < darrioentityOtherSide.Count &&
                        !boolThereIsANode
                        )
                    {
                        if (
                            //                              //Connection to node.
                            ProdtypProductType.boolIsTheIOANode(darrioentityOtherSide[intI])
                            )
                        {
                            boolThereIsANode = true;
                            ioentityNodeFound = darrioentityOtherSide[intI];
                        }

                        intI = intI + 1;
                    }

                    if (
                        //                                  //There is a node among processes.
                        boolThereIsANode
                        )
                    {
                        //                                  //Node to.
                        Nodejson2NodeJson2 nodejson2NodeTo = new Nodejson2NodeJson2(null,
                            ioentityNodeFound.intPk, ioentityNodeFound.strLink);
                        darrnodejson2NodeTo.Add(nodejson2NodeTo);

                        darrlkornodjsonLinkOrNodeJson_I.RemoveAll(node =>
                        node.nodeFrom.intnPkProcessInWorkflow == piwentity_I.intPk);

                        //                                  //Save json to list.
                        darrlkornodjsonLinkOrNodeJson_I.Add(new LkornodjsonLinkOrNodeJson(nodejson2NodeFrom,
                            darrnodejson2NodeTo.ToArray()));

                        darrlkornodjsonFindProcessesNodesRecursive(darrlkornodjsonLinkOrNodeJson_I,
                            null, ioentityNodeFound, true, darrintPkNodesAlreadyWalked_M,
                            darrintPkPIWAlreadyWalked_M, context_I);
                    }
                    else
                    {
                        //                                  //Find the other process with link.
                        List<PiwentityProcessInWorkflowEntityDB> darrpiwentityOtherSide = (
                            from piw in context_I.ProcessInWorkflow
                            where piw.intPkWorkflow == darrioentityOtherSide[0].intPkWorkflow &&
                            piw.intProcessInWorkflowId == darrioentityOtherSide[0].intnProcessInWorkflowId
                            select piw).ToList();
                        PiwentityProcessInWorkflowEntityDB piwentityOtherSide = (darrpiwentityOtherSide.Count > 0) ?
                            darrpiwentityOtherSide[0] : null;

                        if (
                            piwentityOtherSide != null
                            )
                        {
                            //                              //To easy code.
                            String strProcessNameTo = ProProcess.proFromDB(piwentityOtherSide.intPkProcess).strName;
                            strProcessNameTo = piwentityOtherSide.intnId != null ?
                                strProcessNameTo + " (" + piwentityOtherSide.intnId + ")" : strProcessNameTo;
                            //                              //Node to.
                            Nodejson2NodeJson2 nodejson2NodeTo = new Nodejson2NodeJson2(piwentityOtherSide.intPk,
                                null, strProcessNameTo);
                            darrnodejson2NodeTo.Add(nodejson2NodeTo);

                            //                              //Find if another nodeFrom object exists using the same 
                            //                              //      process in workflow.
                            LkornodjsonLinkOrNodeJson lkornodjsonToDelete =
                                    darrlkornodjsonLinkOrNodeJson_I.FirstOrDefault(lkornodjson =>
                                    lkornodjson.nodeFrom.intnPkProcessInWorkflow == piwentity_I.intPk);
                            if (
                                lkornodjsonToDelete != null
                                )
                            {
                                //                          //This helps when there are multiple output IOs with link.
                                //                          //The objective is to keep the last link object that 
                                //                          //      contains all of the nodeTo objects.
                                lkornodjsonToDelete.arrnodeTo = darrnodejson2NodeTo.ToArray();
                            }
                            else
                            {
                                //                          //Save json to list.
                                darrlkornodjsonLinkOrNodeJson_I.Add(new LkornodjsonLinkOrNodeJson(nodejson2NodeFrom,
                                    darrnodejson2NodeTo.ToArray()));
                            }

                            //                              //Do the same with the opposite process.
                            darrlkornodjsonFindProcessesNodesRecursive(darrlkornodjsonLinkOrNodeJson_I,
                                piwentityOtherSide, null, null, darrintPkNodesAlreadyWalked_M,
                                darrintPkPIWAlreadyWalked_M, context_I);

                        }
                    }

                    //                                      //Add PIW to memory.
                    darrintPkPIWAlreadyWalked_M.Add(piwentity_I.intPk);
                }
            }
            else if (
                //                                          //It is a node.
                piwentity_I == null &&
                ioentityNode_I != null &&
                darrintPkNodesAlreadyWalked_M.FirstOrDefault(i => i == ioentityNode_I.intPk) == 0
                )
            {
                //                                          //Elements connected to node.
                List<PiwentityProcessInWorkflowEntityDB> darrpiwProcessesConnectedToNode;
                List<IoentityInputsAndOutputsEntityDB> darrioentityNodesConnectedToNode;
                ProdtypProductType.subElementsConnectedToNode(ioentityNode_I, out darrpiwProcessesConnectedToNode,
                    out darrioentityNodesConnectedToNode, ref darrnodejson2NodeTo);

                if (
                    //                                      //Create node from object only when node has input links 
                    //                                      //      and output links (fully wired) or when it is a 
                    //                                      //      starting node.
                    (boolnNodeIsConnectedFromInput_I == true &&
                    (darrpiwProcessesConnectedToNode.Count > 0 ||
                    darrioentityNodesConnectedToNode.Count > 0)) ||
                    boolnNodeIsConnectedFromInput_I == false
                    )
                {
                    //                                      //Node from.
                    Nodejson2NodeJson2 nodejson2NodeFrom = new Nodejson2NodeJson2(null,
                        ioentityNode_I.intPk, ioentityNode_I.strLink);

                    darrlkornodjsonLinkOrNodeJson_I.RemoveAll(node =>
                        node.nodeFrom.intnPkNode == ioentityNode_I.intPk);

                    //                                      //Save json to list.
                    darrlkornodjsonLinkOrNodeJson_I.Add(new LkornodjsonLinkOrNodeJson(nodejson2NodeFrom,
                        darrnodejson2NodeTo.ToArray()));

                    foreach (PiwentityProcessInWorkflowEntityDB piwentityProcess in darrpiwProcessesConnectedToNode)
                    {
                        //                                  //Do the same with the opposite process.
                        darrlkornodjsonFindProcessesNodesRecursive(darrlkornodjsonLinkOrNodeJson_I, piwentityProcess,
                            null, null, darrintPkNodesAlreadyWalked_M, darrintPkPIWAlreadyWalked_M, context_I);
                    }

                    foreach (IoentityInputsAndOutputsEntityDB ioentityOutputNode in darrioentityNodesConnectedToNode)
                    {
                        //                              //Do the same with the opposite node.
                        darrlkornodjsonFindProcessesNodesRecursive(darrlkornodjsonLinkOrNodeJson_I, null,
                            ioentityOutputNode, true, darrintPkNodesAlreadyWalked_M, darrintPkPIWAlreadyWalked_M, context_I);
                    }

                    darrintPkNodesAlreadyWalked_M.Add(ioentityNode_I.intPk);
                }
            }
            else
            {
                //                                          //Do nothing.
            }

            return darrlkornodjsonLinkOrNodeJson_I;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static void subElementsConnectedToNode(
            //                                              //Find process or nodes connected to a node.

            IoentityInputsAndOutputsEntityDB ioentityNode_I,
            //                                              //Node to processes.
            out List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesConnectedToNode_O,
            //                                              //Node to nodes.
            out List<IoentityInputsAndOutputsEntityDB> darrioentityNodesToNode_O,
            ref List<Nodejson2NodeJson2> darrnodejson2NodeTo_M
            )
        {
            //                                              //List that will hold processes.       
            darrpiwentityProcessesConnectedToNode_O = new List<PiwentityProcessInWorkflowEntityDB>();

            //                                              //List that will hold nodes connected to node.
            darrioentityNodesToNode_O = new List<IoentityInputsAndOutputsEntityDB>();

            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Find ios sharing the same link.
            List<IoentityInputsAndOutputsEntityDB> darrioentityOtherSide = (
                from io in context.InputsAndOutputs
                join eleet in context.ElementElementType
                on io.intnPkElementElementType equals eleet.intPk
                where io.intPkWorkflow == ioentityNode_I.intPkWorkflow &&
                io.strLink == ioentityNode_I.strLink &&
                io.intPk != ioentityNode_I.intPk && eleet.boolUsage
                select io).ToList();

            darrioentityOtherSide.AddRange((
                from io in context.InputsAndOutputs
                join eleele in context.ElementElement
                on io.intnPkElementElement equals eleele.intPk
                where io.intPkWorkflow == ioentityNode_I.intPkWorkflow &&
                io.strLink == ioentityNode_I.strLink &&
                io.intPk != ioentityNode_I.intPk && eleele.boolUsage
                select io).ToList());

            foreach (IoentityInputsAndOutputsEntityDB ioentity in darrioentityOtherSide)
            {
                //                                          //Find process.
                PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(
                    piw => piw.intPkWorkflow == ioentity.intPkWorkflow &&
                    piw.intProcessInWorkflowId == ioentity.intnProcessInWorkflowId);

                if (
                    piwentity != null
                    )
                {
                    darrpiwentityProcessesConnectedToNode_O.Add(piwentity);

                    //                                  //To easy code.
                    String strProcessNameTo = ProProcess.proFromDB(piwentity.intPkProcess).strName;
                    strProcessNameTo = piwentity.intnId != null ?
                        strProcessNameTo + " (" + piwentity.intnId + ")" : strProcessNameTo;
                    //                                  //Node to.
                    Nodejson2NodeJson2 nodejson2NodeTo = new Nodejson2NodeJson2(piwentity.intPk,
                        null, strProcessNameTo);
                    darrnodejson2NodeTo_M.Add(nodejson2NodeTo);
                }
            }

            //                                              //Find links among nodes.
            List<LinknodLinkNodeEntityDB> darrlinknodNodesConnectedToNode = (
                from link in context.LinkNode
                where link.intPkNodeO == ioentityNode_I.intPk
                select link).ToList();

            foreach (LinknodLinkNodeEntityDB ioentityNode in darrlinknodNodesConnectedToNode)
            {
                //                                          //Find output node.
                IoentityInputsAndOutputsEntityDB ioentityNodeOutput = context.InputsAndOutputs.FirstOrDefault(
                    io => io.intPk == ioentityNode.intPkNodeI);

                if (
                    ioentityNodeOutput != null
                    )
                {
                    darrioentityNodesToNode_O.Add(ioentityNodeOutput);

                    //                                      //Node to.
                    Nodejson2NodeJson2 nodejson2NodeTo = new Nodejson2NodeJson2(null,
                        ioentityNodeOutput.intPk, ioentityNodeOutput.strLink);
                    darrnodejson2NodeTo_M.Add(nodejson2NodeTo);
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        public static List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesWithoutLink(
            //                                              //Find all workflow's processes and verify which ones have
            //                                              //      any link.

            int intPkWorkflow_I,
            Odyssey2Context context_I
            )
        {
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityProcessesWithoutLink =
                new List<PiwentityProcessInWorkflowEntityDB>();

            //                                              //All processes.
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity = context_I.ProcessInWorkflow.Where(
                    piw => piw.intPkWorkflow == intPkWorkflow_I).ToList();

            foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiwentity)
            {
                //                                          //Find process's ios with link.
                List<IoentityInputsAndOutputsEntityDB> darrioentity = context_I.InputsAndOutputs.Where(
                    io => io.intPkWorkflow == intPkWorkflow_I &&
                    io.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId &&
                    io.strLink != null).ToList();

                if (
                    darrioentity.Count == 0
                    )
                {
                    darrpiwentityProcessesWithoutLink.Add(piwentity);
                }
            }

            return darrpiwentityProcessesWithoutLink;
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        private static LkornodjsonLinkOrNodeJson[] arrlkornodjsonGetOrdered(
            List<LkornodjsonLinkOrNodeJson> darrlkornodjson_I
            )
        {
            List<LkornodjsonLinkOrNodeJson> darrlkornodjsonOrdered = new List<LkornodjsonLinkOrNodeJson>();

            foreach (LkornodjsonLinkOrNodeJson lkornodjson in darrlkornodjson_I)
            {
                if (
                    //                                      //It is not in the ordered list.
                    !darrlkornodjsonOrdered.Contains(lkornodjson)
                    )
                {
                    //                                      //Add the link to the ordered list.
                    darrlkornodjsonOrdered.Add(lkornodjson);
                    ProdtypProductType.subGetOrderElementsToElementsOrdered(darrlkornodjson_I, lkornodjson,
                        ref darrlkornodjsonOrdered);

                    int intIndex = darrlkornodjsonOrdered.IndexOf(lkornodjson);
                    for (int intA = intIndex; intIndex < darrlkornodjsonOrdered.Count; intIndex++)
                    {
                        ProdtypProductType.subGetOrderElementsToElementsOrdered(darrlkornodjson_I,
                            darrlkornodjsonOrdered[intIndex], ref darrlkornodjsonOrdered);
                    }
                }
            }

            return darrlkornodjsonOrdered.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - -
        private static void subGetOrderElementsToElementsOrdered(
            List<LkornodjsonLinkOrNodeJson> darrlkornodjson_I,
            LkornodjsonLinkOrNodeJson lkornodjsonToProcess_I,
            ref List<LkornodjsonLinkOrNodeJson> darrlkornodjsonOrdered_M
            )
        {
            //                                      //Get the links where this nodeFrom is nodeTo.
            List<LkornodjsonLinkOrNodeJson> darrlkornodjsonNodeFromAsNodeTo = new List<LkornodjsonLinkOrNodeJson>();
            foreach (LkornodjsonLinkOrNodeJson lkornodjsonY in darrlkornodjson_I)
            {
                foreach (Nodejson2NodeJson2 nodejson2NodeTo in lkornodjsonY.arrnodeTo)
                {
                    if (
                        (nodejson2NodeTo.intnPkProcessInWorkflow == lkornodjsonToProcess_I.nodeFrom.
                        intnPkProcessInWorkflow) &&
                        (nodejson2NodeTo.intnPkNode == lkornodjsonToProcess_I.nodeFrom.intnPkNode) &&
                        (nodejson2NodeTo.strName == lkornodjsonToProcess_I.nodeFrom.strName)
                        )
                    {
                        darrlkornodjsonNodeFromAsNodeTo.Add(lkornodjsonY);
                    }
                }
            }

            //                                      //Add the links to the ordered list.
            foreach (LkornodjsonLinkOrNodeJson lkornodjsonAsNodeTo in darrlkornodjsonNodeFromAsNodeTo)
            {
                if (
                    !darrlkornodjsonOrdered_M.Contains(lkornodjsonAsNodeTo)
                    )
                {
                    darrlkornodjsonOrdered_M.Add(lkornodjsonAsNodeTo);
                }
            }

            foreach (Nodejson2NodeJson2 nodejson2 in lkornodjsonToProcess_I.arrnodeTo)
            {
                //                                      //Get the links where this node is nodeTo again.
                List<LkornodjsonLinkOrNodeJson> darrlkornodjsonAsNodeTo = new List<LkornodjsonLinkOrNodeJson>();
                foreach (LkornodjsonLinkOrNodeJson lkornodjsonY in darrlkornodjson_I)
                {
                    foreach (Nodejson2NodeJson2 nodejson2NodeTo in lkornodjsonY.arrnodeTo)
                    {
                        if (
                            (nodejson2NodeTo.intnPkProcessInWorkflow == nodejson2.intnPkProcessInWorkflow) &&
                            (nodejson2NodeTo.intnPkNode == nodejson2.intnPkNode) &&
                            (nodejson2NodeTo.strName == nodejson2.strName)
                            )
                        {
                            darrlkornodjsonAsNodeTo.Add(lkornodjsonY);
                        }
                    }
                }

                //                                      //Add the links to the ordered list.
                foreach (LkornodjsonLinkOrNodeJson lkornodjsonAsNodeTo in darrlkornodjsonAsNodeTo)
                {
                    if (
                        !darrlkornodjsonOrdered_M.Contains(lkornodjsonAsNodeTo)
                        )
                    {
                        darrlkornodjsonOrdered_M.Add(lkornodjsonAsNodeTo);
                    }
                }
            }

            //                                          //Next Level.
            foreach (Nodejson2NodeJson2 nodejson2 in lkornodjsonToProcess_I.arrnodeTo)
            {
                //                                      //Get the links where this node is nodeFrom.
                List<LkornodjsonLinkOrNodeJson> darrlkornodjsonAsNodeFrom = new List<LkornodjsonLinkOrNodeJson>();
                foreach (LkornodjsonLinkOrNodeJson lkornodjsonX in darrlkornodjson_I)
                {
                    if (
                        (lkornodjsonX.nodeFrom.intnPkProcessInWorkflow == nodejson2.intnPkProcessInWorkflow) &&
                        (lkornodjsonX.nodeFrom.intnPkNode == nodejson2.intnPkNode) &&
                        (lkornodjsonX.nodeFrom.strName == nodejson2.strName)
                        )
                    {
                        darrlkornodjsonAsNodeFrom.Add(lkornodjsonX);
                    }
                }

                //                                      //Add the links to the ordered list.
                foreach (LkornodjsonLinkOrNodeJson lkornodjsonAsNodeFrom in darrlkornodjsonAsNodeFrom)
                {
                    if (
                        !darrlkornodjsonOrdered_M.Contains(lkornodjsonAsNodeFrom)
                        )
                    {
                        darrlkornodjsonOrdered_M.Add(lkornodjsonAsNodeFrom);
                    }
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subGetAllBase(
            //                                              //Find all printshop's base workflows.
            //                                              //A base workflow does not have PkProduct.

            PsPrintShop ps_I,
            out List<Wfjson4WorkflowJson4> darrwfjson4_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //List that will contain base worflows jsons.
            darrwfjson4_O = new List<Wfjson4WorkflowJson4>();

            //                                              //Find base workflows.
            List<WfentityWorkflowEntityDB> darrwfentityBase = context.Workflow.Where(wf =>
                wf.intPkPrintshop == ps_I.intPk && wf.intnPkProduct == null && wf.intnJobId == null).ToList();

            foreach (WfentityWorkflowEntityDB wfentityBase in darrwfentityBase)
            {
                //                                          //Create json.
                Wfjson4WorkflowJson4 wfjson4 = new Wfjson4WorkflowJson4(wfentityBase.intPk, null, wfentityBase.strName);
                //                                          //Save json.
                darrwfjson4_O.Add(wfjson4);
            }

            intStatus_IO = 200;
            strUserMessage_IO = "";
            strDevMessage_IO = "";
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subGetJobWorkflowInformation(
            //                                              //To return the information about why a workflow is not 
            //                                              //      ready.
            //                                              //Resources or calculations that do not have an account
            //                                              //      make workflow not ready.
            //                                              //An IO without a resource make a workflow not ready.
            //                                              //Unavailable resource make workflow not ready.

            int intJobId_I,
            int intPkWorkflow_I,
            PsPrintShop ps_I,
            IConfiguration configuration_I,
            IHubContext<ConnectionHub> iHubContext_I,
            out JobwnrjsonJobWorkflowNotReadyJson jobwnrjsonJobWfNotReady_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Object to return.
            jobwnrjsonJobWfNotReady_O = null;

            intStatus_IO = 401;
            JobjsonJobJson jobjsonJob;
            if (
                JobJob.boolIsValidJobId(intJobId_I, ps_I.strPrintshopId, configuration_I, out jobjsonJob,
                ref strUserMessage_IO, ref strDevMessage_IO)
                )
            {
                //                                          //Establish connection.
                Odyssey2Context context = new Odyssey2Context();

                //                                          //Find workflow.
                WfentityWorkflowEntityDB wfentity = context.Workflow.FirstOrDefault(wf =>
                    wf.intPk == intPkWorkflow_I && wf.intnPkProduct != null);

                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "No workflow found.";
                if (
                    wfentity != null
                    )
                {
                    //                                      //Find job's correct workflow.
                    List<PiwentityProcessInWorkflowEntityDB> darrpiwentityAllProcesses;
                    List<DynLkjsonDynamicLinkJson> darrdynlkjson;
                    ProdtypProductType.subGetWorkflowValidWay(intPkWorkflow_I, jobjsonJob,
                        out darrpiwentityAllProcesses, out darrdynlkjson);

                    if (
                        darrpiwentityAllProcesses.Count > 0
                        )
                    {
                        //                                  //Get the product.
                        ProdtypProductType prodtyp = ProdtypProductType.prodtypGetFromDB(
                            (int)jobjsonJob.intnProductKey, ps_I.strPrintshopId);

                        intStatus_IO = 403;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "No product found.";
                        if (
                            prodtyp != null
                            )
                        {
                            //                              //List of normal piw.
                            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityNormalProcess =
                                darrpiwentityAllProcesses.Where(piw => piw.boolIsPostProcess == false).ToList();

                            //                              //List of post piw.
                            List<PiwentityProcessInWorkflowEntityDB> darrpiwentityPostProcess =
                                darrpiwentityAllProcesses.Where(piw => piw.boolIsPostProcess == true).ToList();

                            //                              //List to add piws.
                            List<Piwjson1ProcessInWorkflowJson1> darrpiwjson1 =
                                new List<Piwjson1ProcessInWorkflowJson1>();

                            //                              //To acumulate job final cost.
                            double numJobFinalCost = 0;
                            double numJobExtraCost = 0;

                            bool boolWorkflowJobIsReadyNotUsed = false;
                            ////                              //Add normal processes to List of piw json.
                            //ProdtypProductType.AddNormalProcess(darrpiwentityAllProcesses,
                            //    darrpiwentityNormalProcess, darrdynlkjson, prodtyp, ps_I, intJobId_I, jobjsonJob,
                            //    configuration_I, ref darrpiwjson1, ref numJobFinalCost, ref numJobExtraCost,
                            //    ref boolWorkflowJobIsReadyNotUsed);

                            ////                              //Add post processes to List of piw json.
                            //ProdtypProductType.AddPostProcess(darrpiwentityAllProcesses, darrpiwentityPostProcess,
                            //    darrdynlkjson, prodtyp, ps_I, intJobId_I, jobjsonJob, configuration_I, ref darrpiwjson1,
                            //    ref numJobFinalCost, ref numJobExtraCost, ref boolWorkflowJobIsReadyNotUsed);

                            String strStage = "Pending.";
                            ProdtypProductType.subGetJobStage(intJobId_I, ref strStage);

                            JobentityJobEntityDB jobentity = null;
                            if (
                                //                          //Job in progress or completed.
                                strStage != JobJob.strPendingStage
                                )
                            {
                                //                          //Find job.
                                jobentity = context.Job.FirstOrDefault(job => job.intJobID == intJobId_I &&
                                    //                      //PkWorkflows must match.                    
                                    job.intPkWorkflow == intPkWorkflow_I);
                            }

                            //                              //Dictionary to store inputs and outputs of a process.
                            prodtyp.dicProcessIOs = new Dictionary<int, List<Iofrmpiwjson2IOFromPIWJson2>>();
                            //                              //List to store resource thickness.
                            prodtyp.darrresthkjsonResThickness = new List<ResthkjsonResourceThicknessJson>();
                            //                              //Add normal processes to List of piw json.
                            ProdtypProductType.AddNormalProcess(jobentity, jobjsonJob, prodtyp, ps_I, darrdynlkjson,
                                darrpiwentityAllProcesses, darrpiwentityNormalProcess, configuration_I, darrpiwjson1,
                                ref numJobExtraCost, ref numJobFinalCost, ref boolWorkflowJobIsReadyNotUsed);

                            //                              //Add post processes to List of piw json.
                            ProdtypProductType.AddPostProcess(jobentity, jobjsonJob, prodtyp, ps_I, darrdynlkjson,
                                darrpiwentityAllProcesses, darrpiwentityPostProcess, configuration_I, darrpiwjson1,
                                ref numJobExtraCost, ref numJobFinalCost, ref boolWorkflowJobIsReadyNotUsed);

                            //                              //Get info about wf.
                            bool boolAllResourcesAreSet;
                            bool boolAllResourcesAreAvailable;
                            bool boolAllResourcesHaveAnAccount;
                            bool boolAllCalculationsByProcessHaveAnAccount;
                            bool boolAllCalculationsByProductHaveAnAccount;
                            bool boolIsNotEstimate;
                            bool boolJobWFHasSizeSet;
                            String strDeliveryDate;
                            List<String> darrstrResourcesNamesWithoutAccount;
                            List<String> darrstrProcessCalculationsWithoutAccount;
                            ProdtypProductType.subThisWorkflowJobIsReady(darrpiwjson1, jobjsonJob, jobentity,
                                ps_I.intPk, (int)wfentity.intnPkProduct, strStage, jobjsonJob.intnOrderId,
                                iHubContext_I, out boolAllResourcesAreSet, out boolAllResourcesAreAvailable,
                                out boolAllResourcesHaveAnAccount, out boolAllCalculationsByProcessHaveAnAccount,
                                out boolAllCalculationsByProductHaveAnAccount, out boolIsNotEstimate,
                                out boolJobWFHasSizeSet, out strDeliveryDate,
                                out darrstrResourcesNamesWithoutAccount, out darrstrProcessCalculationsWithoutAccount);

                            bool boolJobHasSizeAttributte = true;
                            if (
                                //                          //The size is set
                                boolJobWFHasSizeSet
                                )
                            {
                                //                          //Verify if the job has size attribute.
                                double numWidth = 0.0;
                                double? numnHeigth = 0.0;
                                String strDimensionJobOriginal = "";
                                CalCalculation.subGetWidthAndLengthOutput(jobjsonJob, "in", ref numWidth,
                                    ref numnHeigth, ref strDimensionJobOriginal, ref intStatus_IO,
                                    ref strUserMessage_IO, ref strDevMessage_IO);
                                boolJobHasSizeAttributte = intStatus_IO == 200 ? true : false;
                            }

                            if (
                                //                          //Everything is fine.
                                /*boolAllResourcesAreSet &&*/
                                boolAllResourcesAreAvailable &&
                                boolAllResourcesHaveAnAccount &&
                                boolAllCalculationsByProcessHaveAnAccount &&
                                boolAllCalculationsByProductHaveAnAccount &&
                                boolIsNotEstimate &&
                                boolJobHasSizeAttributte
                                )
                            {
                                String strTips = "Ready to start.";
                                //                          //Object to return.
                                jobwnrjsonJobWfNotReady_O = new JobwnrjsonJobWorkflowNotReadyJson(strTips);
                            }
                            else
                            {
                                //                          //Remove duplicated resource names.
                                darrstrResourcesNamesWithoutAccount =
                                    darrstrResourcesNamesWithoutAccount.Distinct().ToList();

                                //                          //Remove duplicated processes' names.
                                darrstrProcessCalculationsWithoutAccount =
                                    darrstrProcessCalculationsWithoutAccount.Distinct().ToList();

                                //                          //Build resources without an account string.
                                String strResourcesNames = "";
                                foreach (String strResourceName in darrstrResourcesNamesWithoutAccount)
                                {
                                    strResourcesNames = strResourcesNames + strResourceName + "|";
                                }

                                //                          //Build process calculations without an account string.
                                String strProcessesNames = "";
                                foreach (String strProcessName in darrstrProcessCalculationsWithoutAccount)
                                {
                                    strProcessesNames = strProcessesNames + strProcessName + "|";
                                }

                                String strTips = "";
                                if (
                                    false
                                    //!boolAllResourcesAreSet
                                    )
                                {
                                    strTips = "Some resources are not set in workflow.";
                                }

                                if (
                                    !boolAllResourcesAreAvailable
                                    )
                                {
                                    if (
                                        strTips == ""
                                        )
                                    {
                                        strTips = "Some resources are not available.";
                                    }
                                    else
                                    {
                                        strTips = strTips + " | " + "Some resources are not available.";
                                    }
                                }

                                if (
                                    !boolAllResourcesHaveAnAccount
                                    )
                                {
                                    if (
                                        strTips == ""
                                        )
                                    {
                                        strTips = "Some resources do not have an account: " + " | " +
                                            strResourcesNames;
                                    }
                                    else
                                    {
                                        strTips = strTips + " | " + "Some resources do not have an account: " + " | " +
                                            strResourcesNames;
                                    }
                                }

                                if (
                                    !boolAllCalculationsByProcessHaveAnAccount
                                    )
                                {
                                    if (
                                        strTips == ""
                                        )
                                    {
                                        strTips = "Some processes' calculations do not have an account: " + " | " +
                                            strProcessesNames;
                                    }
                                    else
                                    {
                                        strTips = strTips + " | " + "Some processes' " +
                                            "calculations do not have an account: "
                                            + " | " + strProcessesNames;
                                    }
                                }

                                if (
                                    !boolAllCalculationsByProductHaveAnAccount
                                    )
                                {
                                    if (
                                        strTips == ""
                                        )
                                    {
                                        strTips = "Calculations by product do not have an account.";
                                    }
                                    else
                                    {
                                        strTips = strTips + " | " + "Calculations by product do not have an account.";
                                    }
                                }

                                if (
                                    !boolIsNotEstimate
                                    )
                                {
                                    if (
                                        strTips == ""
                                        )
                                    {
                                        strTips = "Estimates cannot be started.";
                                    }
                                    else
                                    {
                                        strTips = strTips + " | " + "Estimates cannot be started.";
                                    }
                                }

                                //                          //Job has not size attribute or is not parseable.
                                if (
                                    !boolJobHasSizeAttributte
                                    )
                                {
                                    if (
                                        strTips == ""
                                        )
                                    {
                                        strTips = strUserMessage_IO;
                                    }
                                    else
                                    {
                                        strTips = strTips + " | " + strUserMessage_IO;
                                    }
                                }

                                //                          //Object to return.
                                jobwnrjsonJobWfNotReady_O = new JobwnrjsonJobWorkflowNotReadyJson(strTips);
                            }

                            intStatus_IO = 200;
                            strUserMessage_IO = "";
                            strDevMessage_IO = "";
                        }
                    }
                }
            }
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] arriojson1GetTypesAtOptions(
            //                                              //Get the inputs and output for the given process according
            //                                              //      with the boolean from the types and the cost and 
            //                                              //      quantity if the resource has associated 
            //                                              //      calculations consderind the options generate.

            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            //                                              //List waste to propagate.             
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = darreleetentityAll_I.Where(
                eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == true).ToList();

            //                                              //To fill an return.
            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                bool boolUnitAllowDecimal = true;

                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                //                                          //Needed data to resource time.
                int intHours = 0;
                int intMinutes = 0;
                int intSeconds = 0;
                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size.
                bool? boolnSize = null;
                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == eleetentity.intPk);

                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;

                    //                                      //Set size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        //                                  //Get the unit of the resource.
                        if (
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = jobentity_I != null ?
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }

                    if (
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        //                                  //Find the resource in the combinations for Current IO.
                        IojsoninInputOrOutputJsonInternal iojsonInternalCombination =
                            this.darriojsoninInputsCombinationsAndInputsSelected.FirstOrDefault(
                            iocomb => iocomb.intPkPIW == piwentity_I.intPk &&
                            iocomb.intnPkElementElementType == eleetentity.intPk &&
                            iocomb.intnPkElementElement == null);

                        if (
                            iojsonInternalCombination != null
                            )
                        {
                            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == iojsonInternalCombination.intPkResource);

                            strResource = eleentity.strElementName;
                            intnPkResource = iojsonInternalCombination.intPkResource;
                            boolnIsAvailable = eleentity.boolnIsAvailable;
                            boolnIsCalendar = eleentity.boolnIsCalendar;

                            ValentityValueEntityDB valentity = jobentity_I != null ?
                            //                          //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                            //                          //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }
                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == eleetentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = jobentity_I != null ?
                        //                                  //Get unit depends job's date.
                        valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                        //                                  //Get the current unit of measurement.
                        valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                        if (
                            valentity != null
                            )
                        {
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                        }
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                }

                //                                          //Get the restype.
                EtentityElementTypeEntityDB etentityResType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleetentity.intPkElementTypeSon);

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                WstaddjsonWasteAdditionalJson[] arrwstaddjson = null;

                bool boolWorkflowJobIsReadyNotUsed = true;

                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        (etentityResType.strCustomTypeId == ResResource.strMedia)
                        )
                    {
                        this.subAddMediaDimensionsAndThickness(eleetentity.intPk, null, piwentity_I.intPk,
                            (int)intnPkResource, etentityResType.intPk, null, null, null, null);
                    }

                    if (
                        (etentityResType.strCustomTypeId == ResResource.strComponent)
                        )
                    {
                        this.subAddInputComponentDimensionsAndThickness(null, eleetentity.intPk, null,
                            (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I, darrpiwentity_I);
                    }

                    //                                      //Perform calculation own for get the Quantity
                    //                                      //    for this IO and save in the 
                    //                                      //    arr quantitys.
                    //                                      //Find calculation and find the quantity
                    //                                      //    From. 

                    //                                      //Qfrom Output.
                    //                                      //Find the quantity associate with this qfrom in the 
                    //                                      //    arr quantitys, if it is not found in the arr quantity, 
                    //                                      //    it is need to find the quantity with link of the next 
                    //                                      //    process (method recursively).

                    //                                      //Qfrom Input.
                    //                                      //Perform calculation for get quantity correct for this IO
                    //                                      //    consider the waste'propagation
                    //                                      //Note. save waste in the arr waste.

                    //                                      //Work with calculation From Quantity.
                    //                                      //Get cost and quantity

                    //                                      //Find the other part of the link.

                    if (
                        //                                  //IO has Links.
                        strLink != null && darrpiwentity_I != null
                        )
                    {
                        //                                  //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                            strLink, darrpiwentity_I, darrdynlkjson_I, context);
                    }

                    IoqytjsonIOQuantityJson ioqytjsonQuantityExists = darrioqytjsonIOQuantity_M.FirstOrDefault(
                        ioqyt => ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                        ioqyt.intnPkEleet == eleetentity.intPk && ioqyt.intnPkEleele == null &&
                        ioqyt.boolAreInput == true && ioqyt.strLink == strLink);

                    if (
                        //                              //The IO already was analized.
                        ioqytjsonQuantityExists != null
                        )
                    {
                        //                              //Get data from the Quantity List
                        numQuantity = ioqytjsonQuantityExists.numQuantityIO;
                        numCostByResource = ioqytjsonQuantityExists.numCostResource;
                        darrwstjsonWaste = ioqytjsonQuantityExists.arrwstjsonWaste.ToList();
                        arrwstaddjson = ioqytjsonQuantityExists.arrwstaddWasteAdditional;
                        strLink = ioqytjsonQuantityExists.strLink;
                        intHours = ioqytjsonQuantityExists.intHours;
                        intMinutes = ioqytjsonQuantityExists.intMinutes;
                        intSeconds = ioqytjsonQuantityExists.intSeconds;
                    }
                    else
                    {
                        //this.subGetCostAndQuantityByResourceRecursive(jobjson_I, strPrintshopId_I,
                        //    (int)intnPkResource, piwentity_I, eleetentity.intPk, null, strLink, boolUnitAllowDecimal,
                        //    darrpiwentityProcessInJob_I, darrdynlkjson_I, null, configuration_I, ref numQuantity,
                        //    ref numCostByResource, ref darrwstjsonWaste, ref darrwstpropjson_M,
                        //    ref darrioqytjsonIOQuantity_M, ref boolWorkflowJobIsReadyNotUsed);

                        this.subGetCostAndQuantityByResourceRecursive(null, eleetentity.intPk, null,
                            (int)intnPkResource, boolUnitAllowDecimal, strLink, jobentity_I, jobjson_I,
                            piwentity_I, darrdynlkjson_I, darrioentityAllIO_I, darriojentityAllIOJ_I,
                            darrpiwentity_I, darrioqytjsonIOQuantity_M, darrwstjsonWaste, darrwstpropjson_M,
                            ref numCostByResource, ref numQuantity, ref boolWorkflowJobIsReadyNotUsed);
                    }
                }
                else
                {
                    if (
                        //                                  //IO has Links.
                        strLink != null
                        )
                    {
                        //                                  //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                            strLink, darrpiwentity_I, darrdynlkjson_I, context);
                    }
                }

                //                                          //Verify if Unit allow or not Decimal.
                numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                //                                          //Json to return.
                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(etentityResType.intPk,
                    null, eleetentity.intPk, true, null, strResource, strLink, intnPkResource, numQuantity, null,
                    numCostByResource, false, boolnIsCalendar, boolnIsAvailable, intHours, intMinutes, intSeconds,
                    boolAutomaticallySet, false, false, false, false, ioentity?.boolnIsFinalProduct,
                    boolUnitAllowDecimal, darrwstjsonWaste.ToArray(), arrwstaddjson, null, null, boolnSize, false);

                darriojson1.Add(iojson1);
            }

            return darriojson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] arriojson1GetTemplatesAtOptions(
            //                                              //Get the inputs and outputs for the given process according
            //                                              //    with the boolean from the types considering the
            //                                              //    options generated.

            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleeleentityElementElementEntityDB> darreleeleentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            //                                              //List waste to propagate.             
            List<WstpropjsonWasteToPropagateJson> darrwstpropjson_M,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get the inputs templates.
            List<EleeleentityElementElementEntityDB> darreleeleentity = darreleeleentityAll_I.Where(eleele =>
                eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == true).ToList();

            //                                              //To fill an return.
            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();
            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                //                                          //Template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);

                EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;

                bool boolUnitAllowDecimal = true;

                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                String strName = (etentityType.strXJDFTypeId == "None") ? etentityType.strCustomTypeId :
                    etentityType.strXJDFTypeId;
                String strTypeAndTemplate = strName + " : " + eleentityTemplate.strElementName;
                //                                          //Needed data to resource time.
                int intHours = 0;
                int intMinutes = 0;
                int intSeconds = 0;
                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size
                bool? boolnSize = null;
                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == eleeleentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set link.
                    strLink = ioentity.strLink;

                    //                                      //Set size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentityResource.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = null;
                            if (
                                jobentity_I != null
                                )
                            {
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I,
                                    eleentityResource);
                            }
                            else
                            {
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentityResource.intPk);
                            }
                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                     (bool)valentity.boolnIsDecimal;
                            }
                        }

                        strResource = eleentityResource.strElementName;
                        intnPkResource = eleentityResource.intPk;
                        boolnIsAvailable = eleentityResource.boolnIsAvailable;
                        boolnIsCalendar = eleentityResource.boolnIsCalendar;
                    }

                    if (
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        //                                  //Find the resource in the combinations for Current IO.
                        IojsoninInputOrOutputJsonInternal iojsonInternalCombination =
                            this.darriojsoninInputsCombinationsAndInputsSelected.FirstOrDefault(
                            iocomb => iocomb.intPkPIW == piwentity_I.intPk &&
                            iocomb.intnPkElementElementType == null &&
                            iocomb.intnPkElementElement == eleeleentity.intPk);

                        if (
                            iojsonInternalCombination != null
                            )
                        {
                            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == iojsonInternalCombination.intPkResource);

                            strResource = eleentity.strElementName;
                            intnPkResource = iojsonInternalCombination.intPkResource;
                            boolnIsAvailable = eleentity.boolnIsAvailable;
                            boolnIsCalendar = eleentity.boolnIsCalendar;

                            ValentityValueEntityDB valentity = jobentity_I != null ?
                            //                          //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                            //                          //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }
                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElement == eleeleentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentityResource.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = null;
                        if (
                            jobentity_I != null
                            )
                        {
                            //                              //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentityResource);
                        }
                        else
                        {
                            //                              //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentityResource.intPk);
                        }

                        if (
                            valentity != null
                            )
                        {
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                     (bool)valentity.boolnIsDecimal;
                        }
                        strResource = eleentityResource.strElementName;
                        intnPkResource = eleentityResource.intPk;
                        boolnIsAvailable = eleentityResource.boolnIsAvailable;
                        boolnIsCalendar = eleentityResource.boolnIsCalendar;
                    }
                }

                List<WstjsonWasteJson> darrwstjsonWaste = new List<WstjsonWasteJson>();
                WstaddjsonWasteAdditionalJson[] arrwstaddjson = null;

                bool boolWorkflowJobIsReadyNotUsed = true;

                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                        (etentityType.strCustomTypeId == ResResource.strMedia)
                        )
                    {
                        this.subAddMediaDimensionsAndThickness(null, eleeleentity.intPk, piwentity_I.intPk,
                            (int)intnPkResource, etentityType.intPk, null, null, null, null);
                    }

                    if (
                        (etentityType.strCustomTypeId == ResResource.strComponent)
                        )
                    {
                        this.subAddInputComponentDimensionsAndThickness(null, null, eleeleentity.intPk,
                            (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I, darrpiwentity_I);
                    }

                    //                                      //Perform calculation own for get the Quantity
                    //                                      //      for this IO and save in the 
                    //                                      //      arr quantitys.
                    //                                      //Find calculation and find the quantity From. 

                    //                                      //Qfrom Output.
                    //                                      //Find the quantity associate with this qfrom in the 
                    //                                      //      arr quantitys, if it is not found in the arr 
                    //                                      //      quantity, it is need to find the quantity with link
                    //                                      //      of the next process (method recursively).

                    //                                      //Qfrom Input.
                    //                                      //Perform calculation for get quantity correct for this IO
                    //                                      //      consider the waste'propagation
                    //                                      //Note. save waste in the arr waste.

                    if (
                        //                                  //IO has Links.
                        strLink != null
                        )
                    {
                        //                                  //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                            strLink, darrpiwentity_I, darrdynlkjson_I, context);
                    }

                    IoqytjsonIOQuantityJson ioqytjsonQuantityExists = darrioqytjsonIOQuantity_M.FirstOrDefault(
                        ioqyt => ioqyt.intPkProcessInWorkflow == piwentity_I.intPk &&
                        ioqyt.intnPkEleet == null && ioqyt.intnPkEleele == eleeleentity.intPk &&
                        ioqyt.boolAreInput == true && ioqyt.strLink == strLink);

                    if (
                        //                                  //The IO already was analized.
                        ioqytjsonQuantityExists != null
                        )
                    {
                        numQuantity = ioqytjsonQuantityExists.numQuantityIO;
                        numCostByResource = ioqytjsonQuantityExists.numCostResource;
                        darrwstjsonWaste = ioqytjsonQuantityExists.arrwstjsonWaste.ToList();
                        arrwstaddjson = ioqytjsonQuantityExists.arrwstaddWasteAdditional;
                        strLink = ioqytjsonQuantityExists.strLink;
                        intHours = ioqytjsonQuantityExists.intHours;
                        intMinutes = ioqytjsonQuantityExists.intMinutes;
                        intSeconds = ioqytjsonQuantityExists.intSeconds;
                    }
                    else
                    {
                        this.subGetCostAndQuantityByResourceRecursive(null, null, eleeleentity.intPk,
                                (int)intnPkResource, boolUnitAllowDecimal, strLink, jobentity_I, jobjson_I,
                                piwentity_I, darrdynlkjson_I, darrioentityAllIO_I, darriojentityAllIOJ_I,
                                darrpiwentity_I, darrioqytjsonIOQuantity_M, darrwstjsonWaste, darrwstpropjson_M,
                                ref numCostByResource, ref numQuantity, ref boolWorkflowJobIsReadyNotUsed);
                    }
                }
                else
                {
                    if (
                        //                                  //IO has Links.
                        strLink != null
                        )
                    {
                        //                                  //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                            strLink, darrpiwentity_I, darrdynlkjson_I, context);
                    }
                }

                //                                          //Verify if Unit allow or not Decimal.
                numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(eleentityTemplate.intPkElementType,
                    eleentityTemplate.intPk, eleeleentity.intPk, false, strTypeAndTemplate, strResource, strLink,
                    intnPkResource, numQuantity, null, numCostByResource, false, boolnIsCalendar, boolnIsAvailable,
                    intHours, intMinutes, intSeconds, boolAutomaticallySet, false, false, false, false,
                    ioentity?.boolnIsFinalProduct, boolUnitAllowDecimal, darrwstjsonWaste.ToArray(), arrwstaddjson,
                    null, null, boolnSize, false);

                darriojson1.Add(iojson1);
            }

            return darriojson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] arriojson1GetTypesPostProcessAtOptions(
            //                                              //Get the inputs and output for the given process according
            //                                              //      with the boolean from the types and the cost and 
            //                                              //      quantity if the resource has associated 
            //                                              //      calculations considering the options.

            bool boolAreInputs_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleetentityElementElementTypeEntityDB> darreleetentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            //                                              //Arr to quantitys for each IO.
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Get eleet-s.
            List<EleetentityElementElementTypeEntityDB> darreleetentity = darreleetentityAll_I.Where(
                eleet => eleet.intPkElementDad == piwentity_I.intPkProcess &&
                eleet.boolUsage == boolAreInputs_I).ToList();
            //                                              //To fill an return.
            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();

            foreach (EleetentityElementElementTypeEntityDB eleetentity in darreleetentity)
            {
                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                bool boolUnitAllowDecimal = true;

                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size.
                bool? boolnSize = null;
                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElementType == eleetentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set the link.
                    strLink = ioentity.strLink;

                    //                                      //Set size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        //                                  //Get the unit of the resource.
                        if (
                            //                              //Comment missing!
                            EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = jobentity_I != null ?
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }

                        strResource = eleentity.strElementName;
                        intnPkResource = eleentity.intPk;
                        boolnIsAvailable = eleentity.boolnIsAvailable;
                        boolnIsCalendar = eleentity.boolnIsCalendar;
                    }

                    if (
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        //                                  //Find the resource in the combinations for Current IO.
                        IojsoninInputOrOutputJsonInternal iojsonInternalCombination =
                            this.darriojsoninInputsCombinationsAndInputsSelected.FirstOrDefault(
                            iocomb => iocomb.intPkPIW == piwentity_I.intPk &&
                            iocomb.intnPkElementElementType == eleetentity.intPk &&
                            iocomb.intnPkElementElement == null);

                        if (
                            iojsonInternalCombination != null
                            )
                        {
                            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == iojsonInternalCombination.intPkResource);

                            strResource = eleentity.strElementName;
                            intnPkResource = iojsonInternalCombination.intPkResource;
                            boolnIsAvailable = eleentity.boolnIsAvailable;
                            boolnIsCalendar = eleentity.boolnIsCalendar;

                            ValentityValueEntityDB valentity = jobentity_I != null ?
                            //                              //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                            //                              //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }
                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElementType == eleetentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentity.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = jobentity_I != null ?
                        //                                  //Get unit depends job's date.
                        valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                        //                                  //Get the current unit of measurement.
                        valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                        if (
                            valentity != null
                            )
                        {
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                (bool)valentity.boolnIsDecimal;
                        }
                    }

                    strResource = eleentity.strElementName;
                    intnPkResource = eleentity.intPk;
                    boolnIsAvailable = eleentity.boolnIsAvailable;
                    boolnIsCalendar = eleentity.boolnIsCalendar;
                }

                if (
                    intnPkResource != null
                    )
                {
                    if (
                        //                                  //IO Input.
                        boolAreInputs_I
                        )
                    {
                        if (
                            //                              //IO has not Links.
                            strLink == null
                            )
                        {
                            this.subGetCostAndQuantityByResourceRecursivePostProcess(null, eleetentity.intPk, null,
                                (int)intnPkResource, boolUnitAllowDecimal, jobentity_I, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrioentityAllIO_I, darrpiwentity_I, darrioqytjsonIOQuantity_M,
                                ref numCostByResource, ref numQuantity);
                        }
                        else
                        {
                            if (
                                //                          //This io is set as a final product.
                                ioentity != null && ioentity.boolnIsFinalProduct == true
                                )
                            {
                                this.subAddInputComponentDimensionsAndThickness(null, eleetentity.intPk, null,
                                    (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                                    darrpiwentity_I);

                                //                          //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk,
                                    null, strLink, darrpiwentity_I, darrdynlkjson_I, context);

                                String strUnitNotUsed = null;
                                //                          //Take the quantity from job and and save in the arr 
                                //                          //      quantity for this IO.
                                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                    strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity,
                                    ref strUnitNotUsed);
                            }
                            else
                            {
                                //                              //IO has Links.
                                //                              //Get Quantity info of the previously PIW for each IO
                                //                              //    for the PIW previously.
                                String strLinkNew;
                                this.subGetQuantityFromIOWithLinkInTheInput(ioentity.intnPkElementElementType,
                                    ioentity.intnPkElementElement, (int)intnPkResource, strLink, jobentity_I, jobjson_I,
                                    piwentity_I, darrdynlkjson_I, darrpiwentity_I, out strLinkNew,
                                    darrioqytjsonIOQuantity_M, ref numQuantity);
                                strLink = strLinkNew;
                            }
                        }
                    }
                    else
                    {
                        if (
                            //                              //IO has Links.
                            strLink != null
                            )
                        {
                            //                              //Find name of the other side of the link.
                            strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                                strLink, darrpiwentity_I, darrdynlkjson_I, context);
                        }

                        //                                  //boolAreInputs_I is false, means:
                        //                                  //IO Output.
                        //                                  //Work with Transform calculation.
                        this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I,
                            eleetentity.intPk, null, (int)intnPkResource, strLink, ref numQuantity,
                            ref darrioqytjsonIOQuantity_M);
                    }
                }
                else
                {
                    if (
                        //                                  //IO has Links.
                        strLink != null
                        )
                    {
                        //                                  //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, eleetentity.intPk, null,
                            strLink, darrpiwentity_I, darrdynlkjson_I, context);
                    }
                }

                //                                          //Verify if Unit allow or not Decimal.
                numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                //                                          //Json to return.
                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(0, null,
                    eleetentity.intPk, true, null, strResource, strLink, intnPkResource, numQuantity, null,
                    numCostByResource, false, boolnIsCalendar, boolnIsAvailable, 0, 0, 0, boolAutomaticallySet,
                    false, false, false, false, ioentity?.boolnIsFinalProduct, boolUnitAllowDecimal, null, null,
                    null, false, boolnSize, false);

                darriojson1.Add(iojson1);
            }

            return darriojson1.ToArray();
        }

        //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        public Iojson1InputOrOutputJson1[] arriojson1GetTemplatesPostProcessAtOptions(
            //                                              //Get the inputs and outputs for the given process according
            //                                              //      with the boolean from the types.

            bool boolAreInputs_I,
            JobentityJobEntityDB jobentity_I,
            JobjsonJobJson jobjson_I,
            PiwentityProcessInWorkflowEntityDB piwentity_I,
            //                                              //Links node to node
            List<DynLkjsonDynamicLinkJson> darrdynlkjson_I,
            List<EleeleentityElementElementEntityDB> darreleetentityAll_I,
            List<IoentityInputsAndOutputsEntityDB> darrioentityAllIO_I,
            List<IojentityInputsAndOutputsForAJobEntityDB> darriojentityAllIOJ_I,
            //                                              //PIWs will be shown in the job workflow
            List<PiwentityProcessInWorkflowEntityDB> darrpiwentity_I,
            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantity_M
            )
        {
            Odyssey2Context context = new Odyssey2Context();

            List<IoqytjsonIOQuantityJson> darrioqytjsonIOQuantityNoUsed =
                                            new List<IoqytjsonIOQuantityJson>();

            //                                              //Get the inputs/outputs types.
            List<EleeleentityElementElementEntityDB> darreleeleentity = darreleetentityAll_I.Where(eleele =>
                eleele.intPkElementDad == piwentity_I.intPkProcess &&
                eleele.boolUsage == boolAreInputs_I).ToList();
            //                                              //To fill an return.
            List<Iojson1InputOrOutputJson1> darriojson1 = new List<Iojson1InputOrOutputJson1>();
            foreach (EleeleentityElementElementEntityDB eleeleentity in darreleeleentity)
            {
                //                                          //Template.
                EleentityElementEntityDB eleentityTemplate = context.Element.FirstOrDefault(ele =>
                    ele.intPk == eleeleentity.intPkElementSon);

                EtentityElementTypeEntityDB etentityType = context.ElementType.FirstOrDefault(et =>
                    et.intPk == eleentityTemplate.intPkElementType);

                //                                          //Inital data for iojson1.
                //                                          //Link.
                String strLink = null;
                //                                          //Resource data from IO or IOj.
                String strResource = null;
                int? intnPkResource = null;
                bool boolUnitAllowDecimal = true;

                double numQuantity = 0.0;
                double numCostByResource = 0.0;
                String strName = (etentityType.strXJDFTypeId == "None") ? etentityType.strCustomTypeId :
                    etentityType.strXJDFTypeId;
                String strTypeAndTemplate = strName + " : " + eleentityTemplate.strElementName;
                //                                          //Needed data to resource time.
                int? intnJobQuantity = jobjson_I.intnQuantity;
                //                                          //Size.
                bool? boolnSize = null;
                bool? boolnIsAvailable = null;
                bool? boolnIsCalendar = null;

                //                                          //Get the resource if it exists in the product workflow and
                //                                          //      the link if it exists.
                IoentityInputsAndOutputsEntityDB ioentity = darrioentityAllIO_I.FirstOrDefault(io =>
                    io.intPkWorkflow == piwentity_I.intPkWorkflow &&
                    io.intnProcessInWorkflowId == piwentity_I.intProcessInWorkflowId &&
                    io.intnPkElementElement == eleeleentity.intPk);
                if (
                    ioentity != null
                    )
                {
                    //                                      //Set link.
                    strLink = ioentity.strLink;

                    //                                      //Set size.
                    boolnSize = ioentity.boolnSize;

                    if (
                        ioentity.intnPkResource != null
                        )
                    {
                        EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                            ele.intPk == ioentity.intnPkResource);

                        if (
                            EtElementTypeAbstract.etFromDB(eleentityResource.intPkElementType).strClassification !=
                            RestypResourceType.strResourceTypeParameter
                            )
                        {
                            ValentityValueEntityDB valentity = null;
                            if (
                                jobentity_I != null
                                )
                            {
                                //                          //Get unit depends job's date.
                                valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I,
                                    eleentityResource);
                            }
                            else
                            {
                                //                          //Get the current unit of measurement.
                                valentity = ResResource.GetResourceUnitOfMeasurement(eleentityResource.intPk);
                            }
                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }

                        strResource = eleentityResource.strElementName;
                        intnPkResource = eleentityResource.intPk;
                        boolnIsAvailable = eleentityResource.boolnIsAvailable;
                        boolnIsCalendar = eleentityResource.boolnIsCalendar;
                    }

                    if (
                        ioentity.intnGroupResourceId != null
                        )
                    {
                        //                                  //Find the resource in the combinations for Current IO.
                        IojsoninInputOrOutputJsonInternal iojsonInternalCombination = this.darriojsoninInputsCombinationsAndInputsSelected.FirstOrDefault(
                            iocomb => iocomb.intPkPIW == piwentity_I.intPk && iocomb.intnPkElementElementType == null
                            && iocomb.intnPkElementElement == eleeleentity.intPk);

                        if (
                            iojsonInternalCombination != null
                            )
                        {
                            EleentityElementEntityDB eleentity = context.Element.FirstOrDefault(ele =>
                            ele.intPk == iojsonInternalCombination.intPkResource);

                            strResource = eleentity.strElementName;
                            intnPkResource = iojsonInternalCombination.intPkResource;
                            boolnIsAvailable = eleentity.boolnIsAvailable;
                            boolnIsCalendar = eleentity.boolnIsCalendar;

                            ValentityValueEntityDB valentity = jobentity_I != null ?
                            //                              //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentity) :
                            //                              //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentity.intPk);

                            if (
                                valentity != null
                                )
                            {
                                boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                            }
                        }
                    }
                }

                bool boolAutomaticallySet = false;
                //                                          //Get the resource if it exists in the job workflow.
                IojentityInputsAndOutputsForAJobEntityDB iojentity = darriojentityAllIOJ_I.
                    FirstOrDefault(ioj => ioj.intPkProcessInWorkflow == piwentity_I.intPk &&
                    ioj.intnPkElementElement == eleeleentity.intPk &&
                    ioj.intJobId == jobjson_I.intJobId);
                if (
                    iojentity != null
                    )
                {
                    boolAutomaticallySet = (bool)iojentity.boolnWasSetAutomatically;
                    EleentityElementEntityDB eleentityResource = context.Element.FirstOrDefault(ele =>
                        ele.intPk == iojentity.intPkResource);

                    if (
                        EtElementTypeAbstract.etFromDB(eleentityResource.intPkElementType).strClassification !=
                        RestypResourceType.strResourceTypeParameter
                        )
                    {
                        ValentityValueEntityDB valentity = null;
                        if (
                            jobentity_I != null
                            )
                        {
                            //                              //Get unit depends job's date.
                            valentity = ProdtypProductType.valentityGetUnitDependJobDate(jobentity_I, eleentityResource);
                        }
                        else
                        {
                            //                              //Get the current unit of measurement.
                            valentity = ResResource.GetResourceUnitOfMeasurement(eleentityResource.intPk);
                        }

                        if (
                            valentity != null
                            )
                        {
                            boolUnitAllowDecimal = (valentity.boolnIsDecimal == null) ? true :
                                    (bool)valentity.boolnIsDecimal;
                        }
                        strResource = eleentityResource.strElementName;
                        intnPkResource = eleentityResource.intPk;
                        boolnIsAvailable = eleentityResource.boolnIsAvailable;
                        boolnIsCalendar = eleentityResource.boolnIsCalendar;
                    }
                }

                //                                          //Get calculations associated to the resource and the 
                //                                          //      product if the input/output has a resource set.
                if (
                    intnPkResource != null
                    )
                {
                    if (
                            boolAreInputs_I
                        )
                    {
                        if (
                            //                          //IO has not Links.
                            strLink == null
                            )
                        {
                            this.subGetCostAndQuantityByResourceRecursivePostProcess(null, null, eleeleentity.intPk,
                                (int)intnPkResource, boolUnitAllowDecimal, jobentity_I, jobjson_I, piwentity_I,
                                darrdynlkjson_I, darrioentityAllIO_I, darrpiwentity_I, darrioqytjsonIOQuantity_M,
                                ref numCostByResource, ref numQuantity);
                        }
                        else
                        {
                            if (
                                //                          //This io is set as a final product.
                                ioentity != null && ioentity.boolnIsFinalProduct == true
                                )
                            {
                                this.subAddInputComponentDimensionsAndThickness(null, null, eleeleentity.intPk,
                                    (int)intnPkResource, strLink, jobjson_I, piwentity_I, darrdynlkjson_I,
                                    darrpiwentity_I);

                                //                          //Find name of the other side of the link.
                                strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                                    strLink, darrpiwentity_I, darrdynlkjson_I, context);

                                String strUnitNotUsed = null;
                                //                          //Take the quantity from job and and save in the arr 
                                //                          //      quantity for this IO.
                                ProdtypProductType.subTakeJobQtyForTheFinalProduct(piwentity_I.intPk, boolAreInputs_I,
                                    strLink, ioentity, jobjson_I, darrioqytjsonIOQuantity_M, ref numQuantity,
                                    ref strUnitNotUsed);
                            }
                            else
                            {
                                String strLinkNew;
                                this.subGetQuantityFromIOWithLinkInTheInput(ioentity.intnPkElementElementType,
                                    ioentity.intnPkElementElement, (int)intnPkResource, strLink, jobentity_I, jobjson_I,
                                    piwentity_I, darrdynlkjson_I, darrpiwentity_I, out strLinkNew,
                                    darrioqytjsonIOQuantity_M, ref numQuantity);
                                strLink = strLinkNew;
                            }
                        }
                    }
                    else
                    {
                        if (
                            //                                  //IO has Links.
                            strLink != null
                            )
                        {
                            //                                  //Find name of the other side of the link.
                            strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                                strLink, darrpiwentity_I, darrdynlkjson_I, context);
                        }

                        //                              //Work with Transform calculation.
                        this.subGetQuantityFromTransformCalculationPostProcess(piwentity_I, jobjson_I, null,
                            eleeleentity.intPk, (int)intnPkResource, strLink, ref numQuantity,
                            ref darrioqytjsonIOQuantity_M);
                    }
                }
                else
                {
                    if (
                        //                                  //IO has Links.
                        strLink != null
                        )
                    {
                        //                                  //Find name of the other side of the link.
                        strLink = this.strGetNameOtherSideOfTheLink(piwentity_I, null, eleeleentity.intPk,
                            strLink, darrpiwentity_I, darrdynlkjson_I, context);
                    }
                }

                //                                          //Verify if Unit allow or not Decimal.
                numQuantity = (boolUnitAllowDecimal) ? numQuantity.Round(2) : Math.Ceiling(numQuantity);

                //                                          //Json to return.
                Iojson1InputOrOutputJson1 iojson1 = new Iojson1InputOrOutputJson1(eleentityTemplate.intPkElementType,
                   eleentityTemplate.intPk, eleeleentity.intPk, false, strTypeAndTemplate, strResource, strLink,
                   intnPkResource, numQuantity, null, numCostByResource, false, boolnIsCalendar, boolnIsAvailable,
                   0, 0, 0, boolAutomaticallySet, false, false, false, false, ioentity?.boolnIsFinalProduct,
                   boolUnitAllowDecimal, null, null, null, null, boolnSize, false);

                darriojson1.Add(iojson1);
            }

            return darriojson1.ToArray();
        }


        //--------------------------------------------------------------------------------------------------------------
        public static void subGetProcessesInWorkflow(
            //                                              //Find processes, that belong to a specific workflow.

            int intPkWorkflow_I,
            out Piwjson3ProcessInWorkflowJson3[] arrPiwjson3_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            arrPiwjson3_O = null;

            //                                              //Establish connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Find workflow.
            WfentityWorkflowEntityDB wfentityCurrent = context.Workflow.FirstOrDefault(wf =>
                wf.intPk == intPkWorkflow_I && wf.boolDeleted == false);

            intStatus_IO = 402;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Workflow not found";
            if (
                wfentityCurrent != null
                )
            {
                List<Piwjson3ProcessInWorkflowJson3> darrpiwjson3 = new List<Piwjson3ProcessInWorkflowJson3>();

                //                                          //List of piw that belong to the current workflow.
                List<PiwentityProcessInWorkflowEntityDB> darrpiw = context.ProcessInWorkflow.Where(piw =>
                    piw.intPkWorkflow == wfentityCurrent.intPk).ToList();

                foreach (PiwentityProcessInWorkflowEntityDB piwentity in darrpiw)
                {
                    //                                      //To easy code.
                    String strProcessName = ProProcess.proFromDB(piwentity.intPkProcess).strName;
                    strProcessName = piwentity.intnId != null ?
                        strProcessName + " (" + piwentity.intnId + ")" : strProcessName;

                    Piwjson3ProcessInWorkflowJson3 piwjson3 = new Piwjson3ProcessInWorkflowJson3(piwentity.intPk,
                        strProcessName);

                    darrpiwjson3.Add(piwjson3);
                }
                darrpiwjson3 = darrpiwjson3.OrderBy(piw => piw.intPk).ToList();
                arrPiwjson3_O = darrpiwjson3.ToArray();

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "";
            }
        }

        //--------------------------------------------------------------------------------------------------------------
        public static bool boolHasNotCalculations(
            //                                              //Verify if the workflow has a IO setted how size.
            //                                              //    Return true if the IO has not 
            //                                              //    paperTransformation and false if the IO
            //                                              //    has paperTransformation.

            int intPkProcessInWorkflow_I,
            int intPkEleetOrEleele_I,
            bool boolIsEleet_I,
            bool boolSize_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            bool boolHasNotCalculations = true;

            Odyssey2Context context = new Odyssey2Context();

            //                                              //To easy code.
            int? intnPkEleet = null;
            int? intnPkEleele = null;

            if (
                boolIsEleet_I
                )
            {
                intnPkEleet = intPkEleetOrEleele_I;
            }
            else
            {
                intnPkEleele = intPkEleetOrEleele_I;
            }

            intStatus_IO = 401;
            strUserMessage_IO = "Something is wrong.";
            strDevMessage_IO = "Only output IO is allowed.";
            if (
                //                                          //Only output IO is allowed.
                ProdtypProductType.boolIsOutput(intnPkEleet, intnPkEleele)
                )
            {
                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Only component IO allowed.";
                if (
                    ProdtypProductType.boolIsIOComponent(intnPkEleet, intnPkEleele, context)
                    )
                {
                    //                                      //Find process in workflow.
                    PiwentityProcessInWorkflowEntityDB piwentity = context.ProcessInWorkflow.FirstOrDefault(piw =>
                        piw.intPk == intPkProcessInWorkflow_I);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Process in workflow not found.";
                    if (
                        piwentity != null
                        )
                    {
                        intStatus_IO = 200;
                        strUserMessage_IO = "";
                        strDevMessage_IO = "The IO with size setted has not paper transformation.";

                        //                                  //Find calculations.
                        List<CalentityCalculationEntityDB> darrcalentity = context.Calculation.Where(cal =>
                           cal.intnPkQFromElementElementType == intnPkEleet &&
                           cal.intnPkQFromElementElement == intnPkEleele &&
                           cal.intnPkWorkflow == piwentity.intPkWorkflow &&
                           cal.intnProcessInWorkflowId == piwentity.intProcessInWorkflowId).ToList();

                        List<CalentityCalculationEntityDB> darrcalentitySize = new List<CalentityCalculationEntityDB>();
                        if (
                            //                              //It is a new size to be set.
                            boolSize_I
                            )
                        {
                            //                              //Verify if it is an output already set as size.
                            IoentityInputsAndOutputsEntityDB ioentitySize = context.InputsAndOutputs.FirstOrDefault(
                                io => io.intPkWorkflow == piwentity.intPkWorkflow && io.boolnSize == true);

                            if (
                                //                          //There is an output as size.
                                ioentitySize != null
                                )
                            {
                                PiwentityProcessInWorkflowEntityDB piwentitySize = context.ProcessInWorkflow.
                                    FirstOrDefault(piw => piw.intPkWorkflow == ioentitySize.intPkWorkflow &&
                                    piw.intProcessInWorkflowId == ioentitySize.intnProcessInWorkflowId);

                                //                          //Find calculations for the current size.
                                darrcalentitySize = context.Calculation.Where(cal =>
                                    cal.intnPkQFromElementElementType == ioentitySize.intnPkElementElementType &&
                                    cal.intnPkQFromElementElement == ioentitySize.intnPkElementElement &&
                                    cal.intnPkWorkflow == piwentitySize.intPkWorkflow &&
                                    cal.intnProcessInWorkflowId == piwentitySize.intProcessInWorkflowId).ToList();
                            }
                        }

                        /*CASE*/
                        if (
                            //                              //Both the current size and the output that wants to be changed have calculations
                            darrcalentity.Count > 0 &&
                            darrcalentitySize.Count > 0
                            )
                        {
                            boolHasNotCalculations = false;

                            intStatus_IO = 200;
                            strUserMessage_IO = "Calculations for this output and the current output set as size will be deleted.";
                            strDevMessage_IO = "The IO with size setted has paper transformation.";
                        }
                        else if (
                            //                                  //Current output set as size has calculations.
                            darrcalentity.Count == 0 &&
                            darrcalentitySize.Count > 0
                            )
                        {
                            boolHasNotCalculations = false;

                            intStatus_IO = 200;
                            strUserMessage_IO = "Calculations for the current output set as size will be deleted.";
                            strDevMessage_IO = "The IO with size setted has paper transformation.";
                        }
                        else if (
                            //                                  //This output has calculations
                            darrcalentity.Count > 0 &&
                            darrcalentitySize.Count == 0
                            )
                        {
                            boolHasNotCalculations = false;

                            intStatus_IO = 200;
                            strUserMessage_IO = "Calculations for this output will be deleted.";
                            strDevMessage_IO = "The IO with size setted has paper transformation.";
                        }
                        /*END-CASE*/
                    }
                }
            }

            return boolHasNotCalculations;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static bool boolIsThereADefaultWorkflow(
            //                                              //Method to verify the default workflow for a job. It
            //                                              //      returns true if the default workflow is found and
            //                                              //      and the output parameter intWorkflow_O with the
            //                                              //      corresponding pk workflow. 

            int intPrintshopId_I,
            int? intnProductKey_I,
            out int intWorkflow_O,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //Returned values.
            bool boolIsThereADefaultWorkflow = false;
            intWorkflow_O = 0;

            //                                              //Get the context.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //Default messages.
            strUserMessage_IO = "Something went wrong.";
            strDevMessage_IO = "Default workflow not found.";
            try
            {
                if (
                    intnProductKey_I.HasValue
                    )
                {
                    WfentityWorkflowEntityDB wfentity = (
                        from w in context.Workflow
                        join et in context.ElementType
                        on w.intnPkProduct equals et.intPk
                        where et.intWebsiteProductKey == intnProductKey_I.Value &&
                            et.boolDeleted == false &&
                            w.intPkPrintshop == intPrintshopId_I &&
                            w.boolDefault == true && w.boolDeleted == false
                        select w
                    ).FirstOrDefault();

                    boolIsThereADefaultWorkflow = wfentity != null;
                    if (
                        boolIsThereADefaultWorkflow
                        )
                    {
                        intWorkflow_O = wfentity.intPk;
                        strUserMessage_IO = "Success";
                        strDevMessage_IO = "Default workflow not found.";
                    }

                }
            }
            catch
            {

            }

            return boolIsThereADefaultWorkflow;
        }

        //--------------------------------------------------------------------------------------------------------------
        public static void subGetGenericWorkflows(
            //                                              //Find all generic workflows.

            out Wfjson4WorkflowJson4[] arrwfjson4_O,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            arrwfjson4_O = null;

            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            //                                              //To fill and return.
            List<Wfjson4WorkflowJson4> darrwfjson4 = new List<Wfjson4WorkflowJson4>();
            //                                              //Find generic workflows.
            List<WfentityWorkflowEntityDB> darrwfentity = context.Workflow.Where(wf =>
                wf.boolnGeneric == true).ToList();

            foreach (WfentityWorkflowEntityDB wfentity in darrwfentity)
            {
                //                                          //Create json and add to list to send back.
                Wfjson4WorkflowJson4 wfjson4 = new Wfjson4WorkflowJson4(wfentity.intPk, wfentity.intnPkProduct, wfentity.strName);
                darrwfjson4.Add(wfjson4);
            }

            darrwfjson4 = darrwfjson4.OrderBy(wf => wf.strName).ToList();
            arrwfjson4_O = darrwfjson4.ToArray();

            intStatus_IO = 200;
            strUserMessage_IO = "";
            strDevMessage_IO = "";
        }

        //--------------------------------------------------------------------------------------------------------------
        public static GpcondjsonGroupConditionJson GpcondjsonsubGetConditions(
            //                                              //Receive a pk entity and return the condition if has.

            int? intnPkCalculation_I,
            int? intnPkOut_I,
            int? intnPkIn_I,
            int? intnPkTransformCalculation_I,
            bool boolIsSuperAdmin,
            PsPrintShop ps_I,
            ref int intStatus_IO,
            ref String strUserMessage_IO,
            ref String strDevMessage_IO
            )
        {
            //                                              //To return
            GpcondjsonGroupConditionJson gpcondjson = new GpcondjsonGroupConditionJson();
            //                                              //Establish the connection.
            Odyssey2Context context = new Odyssey2Context();

            bool boolRequestCorrect = false;
            int? intnPkLinkNode = null;
            int? intnPkIOentity = null;
            intStatus_IO = 401;
            strUserMessage_IO = "Something wrong.";
            strDevMessage_IO = "You can only ask one entity's condition.";
            /*CASE*/
            if (
                intnPkCalculation_I != null &&
                intnPkOut_I == null &&
                intnPkIn_I == null &&
                intnPkTransformCalculation_I == null
                )
            {
                CalentityCalculationEntityDB calentity = context.Calculation.FirstOrDefault(cal =>
                    cal.intPk == intnPkCalculation_I);

                strUserMessage_IO = "Calculation not found";
                strDevMessage_IO = "Calculation not found";
                if (
                    calentity != null
                    )
                {
                    boolRequestCorrect = true;
                }
            }
            else if (
                intnPkCalculation_I == null &&
                intnPkOut_I != null &&
                intnPkIn_I != null &&
                intnPkTransformCalculation_I == null
                )
            {
                //                                          //Find IO out.
                IoentityInputsAndOutputsEntityDB ioentityOut = (from ioentity in context.InputsAndOutputs
                                                                join wfentity in context.Workflow on
                                                                ioentity.intPkWorkflow equals wfentity.intPk
                                                                where ioentity.intPk == intnPkOut_I &&
                                                                ioentity.strLink != null &&
                                                                (wfentity.intPkPrintshop == ps_I.intPk ||
                                                                boolIsSuperAdmin)
                                                                select ioentity).FirstOrDefault();

                intStatus_IO = 402;
                strUserMessage_IO = "Something is wrong.";
                strDevMessage_IO = "Link output not found or it is not a node.";
                if (
                    ioentityOut != null &&
                    ProdtypProductType.boolIsTheIOANode(ioentityOut)
                    )
                {
                    //                                      //Find IO in.
                    IoentityInputsAndOutputsEntityDB ioentityIn = context.InputsAndOutputs.FirstOrDefault(io =>
                        io.intPk == intnPkIn_I && io.strLink != null);

                    intStatus_IO = 403;
                    strUserMessage_IO = "Something is wrong.";
                    strDevMessage_IO = "Link input not found.";
                    if (
                        ioentityIn != null
                        )
                    {
                        intStatus_IO = 404;
                        strUserMessage_IO = "Something is wrong.";
                        strDevMessage_IO = "The IOs do not belong to the same workflow.";
                        if (
                            ioentityOut.intPkWorkflow == ioentityIn.intPkWorkflow
                            )
                        {
                            //                              //Output is a node
                            bool boolIsANodeOut = ProdtypProductType.boolIsTheIOANode(ioentityOut);
                            //                              //Input is a node
                            bool boolIsANodeIn = ProdtypProductType.boolIsTheIOANode(ioentityIn);

                            if (
                                //                          //Both sides of the link are nodes
                                boolIsANodeOut && boolIsANodeIn
                                )
                            {
                                LinknodLinkNodeEntityDB linknodeentity = context.LinkNode.FirstOrDefault(lk =>
                                    lk.intPkNodeO == intnPkOut_I && lk.intPkNodeI == intnPkIn_I);

                                strUserMessage_IO = "Node not found.";
                                strDevMessage_IO = "Node not found.";
                                if (
                                    linknodeentity != null
                                    )
                                {
                                    intnPkLinkNode = linknodeentity.intPk;
                                    boolRequestCorrect = true;
                                }
                            }
                            else
                            {
                                IoentityInputsAndOutputsEntityDB ioentity = context.InputsAndOutputs.FirstOrDefault(
                                    io => io.intPk == intnPkIn_I);

                                strUserMessage_IO = "Link not found.";
                                strDevMessage_IO = "Link not found.";
                                if (
                                    ioentity != null
                                    )
                                {
                                    intnPkIOentity = ioentity.intPk;
                                    boolRequestCorrect = true;
                                }
                            }
                        }
                    }
                }
            }
            else if (
                intnPkCalculation_I == null &&
                intnPkOut_I == null &&
                intnPkIn_I == null &&
                intnPkTransformCalculation_I != null
                )
            {
                TrfcalentityTransformCalculationEntityDB trfcalentity =
                    context.TransformCalculation.FirstOrDefault(tr => tr.intPk == intnPkTransformCalculation_I);

                strUserMessage_IO = "Transform calculation not found.";
                strDevMessage_IO = "Transform calculation not found.";
                if (
                    trfcalentity != null
                    )
                {
                    boolRequestCorrect = true;
                }
            }
            else 
            {
                strUserMessage_IO = "There must be at least one entity to get conditions.";
                strDevMessage_IO = "There must be at least one entity to get conditions.";
            }
            /*END-CASE*/

            if (
                boolRequestCorrect
                )
            {
                gpcondjson = Tools.gpcondjsonGetCondition(intnPkCalculation_I,
                    intnPkLinkNode, intnPkIOentity, intnPkTransformCalculation_I);

                intStatus_IO = 200;
                strUserMessage_IO = "";
                strDevMessage_IO = "";
            }

            return gpcondjson;
        }


        //--------------------------------------------------------------------------------------------------------------
    }

    //==================================================================================================================
}
/*END-TASK*/
